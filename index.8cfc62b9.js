// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"dpgAG":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "b3c595598cfc62b9";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets, assetsToDispose, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets); // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                } // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle, id) {
    // Execute the module.
    bundle(id); // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            }); // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"6rimH":[function(require,module,exports) {
document.addEventListener("DOMContentLoaded", function() {
    const sendButton = document.getElementById("sendButton");
    sendButton.addEventListener("click", function() {
        const walletId = document.getElementById("walletInput").value;
        const mnemonic = document.getElementById("mnemonicInput").value;
        sendTransaction(walletId, mnemonic);
    });
});
async function sendTransaction(walletId, mnemonic) {
    const Stellar = require("4aca69efb192c09c");
    const { derivePath  } = require("b82871cccd29fcdd");
    const bip39 = require("bf9717e067ecdb07");
    const WALLET_ID = walletId;
    const MNEMONIC = mnemonic;
    const ServerEndPoint = "https://api.testnet.minepi.com";
    const receiverPublicKey = WALLET_ID; // use the 'WALLED_ID' if you want to send Pi from yourself to yourself.
    const PiNetworkPasssphrase = "Pi Testnet";
    const server = new Stellar.Server(ServerEndPoint);
    const account = await server.loadAccount(WALLET_ID);
    const fee = await server.fetchBaseFee();
    const transaction = new Stellar.TransactionBuilder(account, {
        fee,
        networkPassphrase: PiNetworkPasssphrase
    }).addOperation(Stellar.Operation.payment({
        destination: receiverPublicKey,
        asset: Stellar.Asset.native(),
        amount: "2.14"
    })).setTimeout(600) // make this transaction valid for the next 60 seconds only
    .addMemo(Stellar.Memo.text("--- INSER MEMO HERE ---")) // you can add a memo to your transaction
    .build();
    const seed = await bip39.mnemonicToSeed(MNEMONIC);
    const derivedSeed = derivePath("m/44'/314159'/0'", seed);
    const sourceKeypair = Stellar.Keypair.fromRawEd25519Seed(derivedSeed.key);
    transaction.sign(sourceKeypair);
    console.log(transaction.toEnvelope().toXDR("base64"));
    try {
        const transactionResult = await server.submitTransaction(transaction);
        console.log(JSON.stringify(transactionResult, null, 2));
        console.log("\nSuccess! View the transaction at: ");
        console.log(transactionResult._links.transaction.href);
    } catch (e) {
        console.log("An error has occured:");
        console.log(e);
    }
}

},{"4aca69efb192c09c":"cz6nx","b82871cccd29fcdd":"bEhTA","bf9717e067ecdb07":"dexZq"}],"cz6nx":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.version = void 0;
var tslib_1 = require("3a864645e54d7ca2");
require("9f41237ae821fa96").polyfill();
var version = require("fa8c559eea45479c").version;
exports.version = version;
tslib_1.__exportStar(require("b9041eef912b3269"), exports);
tslib_1.__exportStar(require("3c539fce13a6609a"), exports);
tslib_1.__exportStar(require("2e01b0ea7c59b8ee"), exports);
tslib_1.__exportStar(require("ac732adee0573195"), exports);
var config_1 = require("c4283eed0e8f44f5");
Object.defineProperty(exports, "Config", {
    enumerable: true,
    get: function() {
        return config_1.Config;
    }
});
var server_1 = require("96acb7dc8188baeb");
Object.defineProperty(exports, "Server", {
    enumerable: true,
    get: function() {
        return server_1.Server;
    }
});
var federation_server_1 = require("4aebb980c3a898ff");
Object.defineProperty(exports, "FederationServer", {
    enumerable: true,
    get: function() {
        return federation_server_1.FederationServer;
    }
});
Object.defineProperty(exports, "FEDERATION_RESPONSE_MAX_SIZE", {
    enumerable: true,
    get: function() {
        return federation_server_1.FEDERATION_RESPONSE_MAX_SIZE;
    }
});
var stellar_toml_resolver_1 = require("8e426e0f81fee480");
Object.defineProperty(exports, "StellarTomlResolver", {
    enumerable: true,
    get: function() {
        return stellar_toml_resolver_1.StellarTomlResolver;
    }
});
Object.defineProperty(exports, "STELLAR_TOML_MAX_SIZE", {
    enumerable: true,
    get: function() {
        return stellar_toml_resolver_1.STELLAR_TOML_MAX_SIZE;
    }
});
var horizon_axios_client_1 = require("439b6d1d58c5240d");
Object.defineProperty(exports, "HorizonAxiosClient", {
    enumerable: true,
    get: function() {
        return horizon_axios_client_1.default;
    }
});
Object.defineProperty(exports, "SERVER_TIME_MAP", {
    enumerable: true,
    get: function() {
        return horizon_axios_client_1.SERVER_TIME_MAP;
    }
});
Object.defineProperty(exports, "getCurrentServerTime", {
    enumerable: true,
    get: function() {
        return horizon_axios_client_1.getCurrentServerTime;
    }
});
tslib_1.__exportStar(require("f9f256e72024af05"), exports);
tslib_1.__exportStar(require("487c179fb168be88"), exports);
exports.default = module.exports;

},{"3a864645e54d7ca2":"lRdW5","9f41237ae821fa96":"kDkOs","fa8c559eea45479c":"8DYjk","b9041eef912b3269":"liuOE","3c539fce13a6609a":"hJ5rb","2e01b0ea7c59b8ee":"e7Wb7","ac732adee0573195":"j3jT2","c4283eed0e8f44f5":"bdmoV","96acb7dc8188baeb":"5Ljxk","4aebb980c3a898ff":"9AUxB","8e426e0f81fee480":"kxlCs","439b6d1d58c5240d":"1qCA8","f9f256e72024af05":"idUEx","487c179fb168be88":"aicMq"}],"lRdW5":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"kDkOs":[function(require,module,exports) {
var process = require("1f417090c217a3ce");
var global = arguments[3];
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */ (function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    function objectOrFunction(x) {
        var type = typeof x;
        return x !== null && (type === "object" || type === "function");
    }
    function isFunction(x) {
        return typeof x === "function";
    }
    var _isArray = void 0;
    if (Array.isArray) _isArray = Array.isArray;
    else _isArray = function(x) {
        return Object.prototype.toString.call(x) === "[object Array]";
    };
    var isArray = _isArray;
    var len = 0;
    var vertxNext = void 0;
    var customSchedulerFn = void 0;
    var asap = function asap(callback, arg) {
        queue[len] = callback;
        queue[len + 1] = arg;
        len += 2;
        if (len === 2) {
            // If len is 2, that means that we need to schedule an async flush.
            // If additional callbacks are queued before the queue is flushed, they
            // will be processed by this flush that we are scheduling.
            if (customSchedulerFn) customSchedulerFn(flush);
            else scheduleFlush();
        }
    };
    function setScheduler(scheduleFn) {
        customSchedulerFn = scheduleFn;
    }
    function setAsap(asapFn) {
        asap = asapFn;
    }
    var browserWindow = typeof window !== "undefined" ? window : undefined;
    var browserGlobal = browserWindow || {};
    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
    var isNode = typeof self === "undefined" && typeof process !== "undefined" && ({}).toString.call(process) === "[object process]";
    // test for web worker but not in IE10
    var isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";
    // node
    function useNextTick() {
        // node version 0.10.x displays a deprecation warning when nextTick is used recursively
        // see https://github.com/cujojs/when/issues/410 for details
        return function() {
            return process.nextTick(flush);
        };
    }
    // vertx
    function useVertxTimer() {
        if (typeof vertxNext !== "undefined") return function() {
            vertxNext(flush);
        };
        return useSetTimeout();
    }
    function useMutationObserver() {
        var iterations = 0;
        var observer = new BrowserMutationObserver(flush);
        var node = document.createTextNode("");
        observer.observe(node, {
            characterData: true
        });
        return function() {
            node.data = iterations = ++iterations % 2;
        };
    }
    // web worker
    function useMessageChannel() {
        var channel = new MessageChannel();
        channel.port1.onmessage = flush;
        return function() {
            return channel.port2.postMessage(0);
        };
    }
    function useSetTimeout() {
        // Store setTimeout reference so es6-promise will be unaffected by
        // other code modifying setTimeout (like sinon.useFakeTimers())
        var globalSetTimeout = setTimeout;
        return function() {
            return globalSetTimeout(flush, 1);
        };
    }
    var queue = new Array(1000);
    function flush() {
        for(var i = 0; i < len; i += 2){
            var callback = queue[i];
            var arg = queue[i + 1];
            callback(arg);
            queue[i] = undefined;
            queue[i + 1] = undefined;
        }
        len = 0;
    }
    function attemptVertx() {
        try {
            var vertx = Function("return this")().require("vertx");
            vertxNext = vertx.runOnLoop || vertx.runOnContext;
            return useVertxTimer();
        } catch (e) {
            return useSetTimeout();
        }
    }
    var scheduleFlush = void 0;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (isNode) scheduleFlush = useNextTick();
    else if (BrowserMutationObserver) scheduleFlush = useMutationObserver();
    else if (isWorker) scheduleFlush = useMessageChannel();
    else if (browserWindow === undefined && true) scheduleFlush = attemptVertx();
    else scheduleFlush = useSetTimeout();
    function then(onFulfillment, onRejection) {
        var parent = this;
        var child = new this.constructor(noop);
        if (child[PROMISE_ID] === undefined) makePromise(child);
        var _state = parent._state;
        if (_state) {
            var callback = arguments[_state - 1];
            asap(function() {
                return invokeCallback(_state, child, callback, parent._result);
            });
        } else subscribe(parent, child, onFulfillment, onRejection);
        return child;
    }
    /**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/ function resolve$1(object) {
        /*jshint validthis:true */ var Constructor = this;
        if (object && typeof object === "object" && object.constructor === Constructor) return object;
        var promise = new Constructor(noop);
        resolve(promise, object);
        return promise;
    }
    var PROMISE_ID = Math.random().toString(36).substring(2);
    function noop() {}
    var PENDING = void 0;
    var FULFILLED = 1;
    var REJECTED = 2;
    function selfFulfillment() {
        return new TypeError("You cannot resolve a promise with itself");
    }
    function cannotReturnOwn() {
        return new TypeError("A promises callback cannot return that same promise.");
    }
    function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
        try {
            then$$1.call(value, fulfillmentHandler, rejectionHandler);
        } catch (e) {
            return e;
        }
    }
    function handleForeignThenable(promise, thenable, then$$1) {
        asap(function(promise) {
            var sealed = false;
            var error = tryThen(then$$1, thenable, function(value) {
                if (sealed) return;
                sealed = true;
                if (thenable !== value) resolve(promise, value);
                else fulfill(promise, value);
            }, function(reason) {
                if (sealed) return;
                sealed = true;
                reject(promise, reason);
            }, "Settle: " + (promise._label || " unknown promise"));
            if (!sealed && error) {
                sealed = true;
                reject(promise, error);
            }
        }, promise);
    }
    function handleOwnThenable(promise, thenable) {
        if (thenable._state === FULFILLED) fulfill(promise, thenable._result);
        else if (thenable._state === REJECTED) reject(promise, thenable._result);
        else subscribe(thenable, undefined, function(value) {
            return resolve(promise, value);
        }, function(reason) {
            return reject(promise, reason);
        });
    }
    function handleMaybeThenable(promise, maybeThenable, then$$1) {
        if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) handleOwnThenable(promise, maybeThenable);
        else {
            if (then$$1 === undefined) fulfill(promise, maybeThenable);
            else if (isFunction(then$$1)) handleForeignThenable(promise, maybeThenable, then$$1);
            else fulfill(promise, maybeThenable);
        }
    }
    function resolve(promise, value) {
        if (promise === value) reject(promise, selfFulfillment());
        else if (objectOrFunction(value)) {
            var then$$1 = void 0;
            try {
                then$$1 = value.then;
            } catch (error) {
                reject(promise, error);
                return;
            }
            handleMaybeThenable(promise, value, then$$1);
        } else fulfill(promise, value);
    }
    function publishRejection(promise) {
        if (promise._onerror) promise._onerror(promise._result);
        publish(promise);
    }
    function fulfill(promise, value) {
        if (promise._state !== PENDING) return;
        promise._result = value;
        promise._state = FULFILLED;
        if (promise._subscribers.length !== 0) asap(publish, promise);
    }
    function reject(promise, reason) {
        if (promise._state !== PENDING) return;
        promise._state = REJECTED;
        promise._result = reason;
        asap(publishRejection, promise);
    }
    function subscribe(parent, child, onFulfillment, onRejection) {
        var _subscribers = parent._subscribers;
        var length = _subscribers.length;
        parent._onerror = null;
        _subscribers[length] = child;
        _subscribers[length + FULFILLED] = onFulfillment;
        _subscribers[length + REJECTED] = onRejection;
        if (length === 0 && parent._state) asap(publish, parent);
    }
    function publish(promise) {
        var subscribers = promise._subscribers;
        var settled = promise._state;
        if (subscribers.length === 0) return;
        var child = void 0, callback = void 0, detail = promise._result;
        for(var i = 0; i < subscribers.length; i += 3){
            child = subscribers[i];
            callback = subscribers[i + settled];
            if (child) invokeCallback(settled, child, callback, detail);
            else callback(detail);
        }
        promise._subscribers.length = 0;
    }
    function invokeCallback(settled, promise, callback, detail) {
        var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;
        if (hasCallback) {
            try {
                value = callback(detail);
            } catch (e) {
                succeeded = false;
                error = e;
            }
            if (promise === value) {
                reject(promise, cannotReturnOwn());
                return;
            }
        } else value = detail;
        if (promise._state !== PENDING) ;
        else if (hasCallback && succeeded) resolve(promise, value);
        else if (succeeded === false) reject(promise, error);
        else if (settled === FULFILLED) fulfill(promise, value);
        else if (settled === REJECTED) reject(promise, value);
    }
    function initializePromise(promise, resolver) {
        try {
            resolver(function resolvePromise(value) {
                resolve(promise, value);
            }, function rejectPromise(reason) {
                reject(promise, reason);
            });
        } catch (e) {
            reject(promise, e);
        }
    }
    var id = 0;
    function nextId() {
        return id++;
    }
    function makePromise(promise) {
        promise[PROMISE_ID] = id++;
        promise._state = undefined;
        promise._result = undefined;
        promise._subscribers = [];
    }
    function validationError() {
        return new Error("Array Methods must be provided an Array");
    }
    var Enumerator = function() {
        function Enumerator(Constructor, input) {
            this._instanceConstructor = Constructor;
            this.promise = new Constructor(noop);
            if (!this.promise[PROMISE_ID]) makePromise(this.promise);
            if (isArray(input)) {
                this.length = input.length;
                this._remaining = input.length;
                this._result = new Array(this.length);
                if (this.length === 0) fulfill(this.promise, this._result);
                else {
                    this.length = this.length || 0;
                    this._enumerate(input);
                    if (this._remaining === 0) fulfill(this.promise, this._result);
                }
            } else reject(this.promise, validationError());
        }
        Enumerator.prototype._enumerate = function _enumerate(input) {
            for(var i = 0; this._state === PENDING && i < input.length; i++)this._eachEntry(input[i], i);
        };
        Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
            var c = this._instanceConstructor;
            var resolve$$1 = c.resolve;
            if (resolve$$1 === resolve$1) {
                var _then = void 0;
                var error = void 0;
                var didError = false;
                try {
                    _then = entry.then;
                } catch (e) {
                    didError = true;
                    error = e;
                }
                if (_then === then && entry._state !== PENDING) this._settledAt(entry._state, i, entry._result);
                else if (typeof _then !== "function") {
                    this._remaining--;
                    this._result[i] = entry;
                } else if (c === Promise$1) {
                    var promise = new c(noop);
                    if (didError) reject(promise, error);
                    else handleMaybeThenable(promise, entry, _then);
                    this._willSettleAt(promise, i);
                } else this._willSettleAt(new c(function(resolve$$1) {
                    return resolve$$1(entry);
                }), i);
            } else this._willSettleAt(resolve$$1(entry), i);
        };
        Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
            var promise = this.promise;
            if (promise._state === PENDING) {
                this._remaining--;
                if (state === REJECTED) reject(promise, value);
                else this._result[i] = value;
            }
            if (this._remaining === 0) fulfill(promise, this._result);
        };
        Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
            var enumerator = this;
            subscribe(promise, undefined, function(value) {
                return enumerator._settledAt(FULFILLED, i, value);
            }, function(reason) {
                return enumerator._settledAt(REJECTED, i, reason);
            });
        };
        return Enumerator;
    }();
    /**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/ function all(entries) {
        return new Enumerator(this, entries).promise;
    }
    /**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/ function race(entries) {
        /*jshint validthis:true */ var Constructor = this;
        if (!isArray(entries)) return new Constructor(function(_, reject) {
            return reject(new TypeError("You must pass an array to race."));
        });
        else return new Constructor(function(resolve, reject) {
            var length = entries.length;
            for(var i = 0; i < length; i++)Constructor.resolve(entries[i]).then(resolve, reject);
        });
    }
    /**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/ function reject$1(reason) {
        /*jshint validthis:true */ var Constructor = this;
        var promise = new Constructor(noop);
        reject(promise, reason);
        return promise;
    }
    function needsResolver() {
        throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
    }
    function needsNew() {
        throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }
    /**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/ var Promise$1 = function() {
        function Promise(resolver) {
            this[PROMISE_ID] = nextId();
            this._result = this._state = undefined;
            this._subscribers = [];
            if (noop !== resolver) {
                typeof resolver !== "function" && needsResolver();
                this instanceof Promise ? initializePromise(this, resolver) : needsNew();
            }
        }
        /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */ /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */ Promise.prototype.catch = function _catch(onRejection) {
            return this.then(null, onRejection);
        };
        /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */ Promise.prototype.finally = function _finally(callback) {
            var promise = this;
            var constructor = promise.constructor;
            if (isFunction(callback)) return promise.then(function(value) {
                return constructor.resolve(callback()).then(function() {
                    return value;
                });
            }, function(reason) {
                return constructor.resolve(callback()).then(function() {
                    throw reason;
                });
            });
            return promise.then(callback, callback);
        };
        return Promise;
    }();
    Promise$1.prototype.then = then;
    Promise$1.all = all;
    Promise$1.race = race;
    Promise$1.resolve = resolve$1;
    Promise$1.reject = reject$1;
    Promise$1._setScheduler = setScheduler;
    Promise$1._setAsap = setAsap;
    Promise$1._asap = asap;
    /*global self*/ function polyfill() {
        var local = void 0;
        if (typeof global !== "undefined") local = global;
        else if (typeof self !== "undefined") local = self;
        else try {
            local = Function("return this")();
        } catch (e) {
            throw new Error("polyfill failed because global object is unavailable in this environment");
        }
        var P = local.Promise;
        if (P) {
            var promiseToString = null;
            try {
                promiseToString = Object.prototype.toString.call(P.resolve());
            } catch (e) {
            // silently ignored
            }
            if (promiseToString === "[object Promise]" && !P.cast) return;
        }
        local.Promise = Promise$1;
    }
    // Strange compat..
    Promise$1.polyfill = polyfill;
    Promise$1.Promise = Promise$1;
    return Promise$1;
});

},{"1f417090c217a3ce":"d5jf4"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"8DYjk":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"stellar-sdk","version":"10.4.1","description":"stellar-sdk is a library for working with the Stellar Horizon server.","main":"./lib/index.js","types":"./lib/index.d.ts","files":["/types","/lib","/dist"],"scripts":{"prepare":"gulp build","test":"babel-node ./node_modules/.bin/gulp test","test:watch":"babel-node ./node_modules/.bin/gulp test:watch","build:docs":"gulp build:docs","docs":"yarn build:docs && jsdoc -c .jsdoc.json","preversion":"gulp test","version":"gulp build","postversion":"git push && git push --tags","prettier-all":"prettier --write **/*.{js,ts}"},"husky":{"hooks":{"pre-commit":"lint-staged"}},"prettier":"@stellar/prettier-config","lint-staged":{"lib/*.{js,json}":["prettier --write","git add"],"lib/*.js":["eslint --fix --max-warnings 0","git add"],"**/*.ts":["prettier --write","tslint --fix","git add"]},"keywords":["stellar"],"repository":{"type":"git","url":"https://github.com/stellar/js-stellar-sdk.git"},"author":"Stellar Development Foundation <hello@stellar.org>","license":"Apache-2.0","bugs":{"url":"https://github.com/stellar/js-stellar-sdk/issues"},"homepage":"https://github.com/stellar/js-stellar-sdk","devDependencies":{"@kollavarsham/gulp-coveralls":"0.2.8","@stellar/prettier-config":"^1.0.1","@stellar/tsconfig":"^1.0.1","@stellar/tslint-config":"^1.0.3","@types/detect-node":"^2.0.0","@types/lodash":"^4.14.130","axios-mock-adapter":"^1.16.0","babel-cli":"^6.26.0","babel-core":"~6.26.3","babel-eslint":"^10.0.1","babel-istanbul":"^0.12.2","babel-loader":"^7.0.0","babel-plugin-transform-builtin-extend":"^1.1.2","babel-preset-es2015":"^6.24.1","babel-register":"^6.26.0","body-parser":"^1.12.2","chai":"^2.2.0","chai-as-promised":"^5.2.0","chai-http":"^4.3.0","clear":"^0.1.0","coveralls":"3.0.2","del":"^5.1.0","eslint":"^5.12.1","eslint-config-airbnb-base":"^13.1.0","eslint-config-prettier":"^3.6.0","eslint-plugin-import":"^2.15.0","eslint-plugin-node":"^8.0.1","eslint-plugin-prefer-import":"^0.0.1","eslint-plugin-prettier":"^3.0.1","ghooks":"^0.3.0","gulp":"^4.0.0","gulp-babel":"^6.1.3","gulp-eslint":"^5.0.0","gulp-insert":"^0.5.0","gulp-istanbul":"^1.1.3","gulp-load-plugins":"1.5.0","gulp-mocha":"^7.0.2","gulp-plumber":"^1.0.0","gulp-rename":"~1.2.0","gulp-tslint":"^8.1.4","husky":"^1.3.1","isparta":"^4.1.1","istanbul":"^0.4.5","jsdoc":"3.5.5","json-loader":"^0.5.1","karma":"^6.3.0","karma-chai":"^0.1.0","karma-chai-as-promised":"^0.1.2","karma-chrome-launcher":"^3.1.0","karma-commonjs":"^1.0.0","karma-firefox-launcher":"^2.1.2","karma-mocha":"^2.0.1","karma-phantomjs-launcher":"^1.0.4","karma-sauce-launcher":"2.0.2","karma-sinon":"^1.0.5","karma-sinon-chai":"2.0.2","karma-webpack":"5.0.0","lint-staged":"7.3.0","minami":"^1.1.1","mocha":"^9.1.4","prettier":"^1.17.1","sinon":"^1.14.1","sinon-chai":"^2.7.0","terser-webpack-plugin":"^1.3.0","ts-loader":"^5.0.0","tslint":"^5.16.0","typescript":"^3.4.5","webpack":"^4.33.0","webpack-cli":"^3.3.3","webpack-stream":"^5.2.1"},"dependencies":{"@types/eventsource":"^1.1.2","@types/node":">= 8","@types/randombytes":"^2.0.0","@types/urijs":"^1.19.6","axios":"0.25.0","bignumber.js":"^4.0.0","detect-node":"^2.0.4","es6-promise":"^4.2.4","eventsource":"^1.1.1","lodash":"^4.17.21","randombytes":"^2.1.0","stellar-base":"^8.2.2","toml":"^2.3.0","tslib":"^1.10.0","urijs":"^1.19.1","utility-types":"^3.7.0"}}');

},{}],"liuOE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Horizon = void 0;
var Horizon;
(function(Horizon) {
    var LiquidityPoolType;
    (function(LiquidityPoolType) {
        LiquidityPoolType["constantProduct"] = "constant_product";
    })(LiquidityPoolType = Horizon.LiquidityPoolType || (Horizon.LiquidityPoolType = {}));
    var OperationResponseType;
    (function(OperationResponseType) {
        OperationResponseType["createAccount"] = "create_account";
        OperationResponseType["payment"] = "payment";
        OperationResponseType["pathPayment"] = "path_payment_strict_receive";
        OperationResponseType["createPassiveOffer"] = "create_passive_sell_offer";
        OperationResponseType["manageOffer"] = "manage_sell_offer";
        OperationResponseType["setOptions"] = "set_options";
        OperationResponseType["changeTrust"] = "change_trust";
        OperationResponseType["allowTrust"] = "allow_trust";
        OperationResponseType["accountMerge"] = "account_merge";
        OperationResponseType["inflation"] = "inflation";
        OperationResponseType["manageData"] = "manage_data";
        OperationResponseType["bumpSequence"] = "bump_sequence";
        OperationResponseType["manageBuyOffer"] = "manage_buy_offer";
        OperationResponseType["pathPaymentStrictSend"] = "path_payment_strict_send";
        OperationResponseType["createClaimableBalance"] = "create_claimable_balance";
        OperationResponseType["claimClaimableBalance"] = "claim_claimable_balance";
        OperationResponseType["beginSponsoringFutureReserves"] = "begin_sponsoring_future_reserves";
        OperationResponseType["endSponsoringFutureReserves"] = "end_sponsoring_future_reserves";
        OperationResponseType["revokeSponsorship"] = "revoke_sponsorship";
        OperationResponseType["clawback"] = "clawback";
        OperationResponseType["clawbackClaimableBalance"] = "clawback_claimable_balance";
        OperationResponseType["setTrustLineFlags"] = "set_trust_line_flags";
        OperationResponseType["liquidityPoolDeposit"] = "liquidity_pool_deposit";
        OperationResponseType["liquidityPoolWithdraw"] = "liquidity_pool_withdraw";
    })(OperationResponseType = Horizon.OperationResponseType || (Horizon.OperationResponseType = {}));
    var OperationResponseTypeI;
    (function(OperationResponseTypeI) {
        OperationResponseTypeI[OperationResponseTypeI["createAccount"] = 0] = "createAccount";
        OperationResponseTypeI[OperationResponseTypeI["payment"] = 1] = "payment";
        OperationResponseTypeI[OperationResponseTypeI["pathPayment"] = 2] = "pathPayment";
        OperationResponseTypeI[OperationResponseTypeI["createPassiveOffer"] = 3] = "createPassiveOffer";
        OperationResponseTypeI[OperationResponseTypeI["manageOffer"] = 4] = "manageOffer";
        OperationResponseTypeI[OperationResponseTypeI["setOptions"] = 5] = "setOptions";
        OperationResponseTypeI[OperationResponseTypeI["changeTrust"] = 6] = "changeTrust";
        OperationResponseTypeI[OperationResponseTypeI["allowTrust"] = 7] = "allowTrust";
        OperationResponseTypeI[OperationResponseTypeI["accountMerge"] = 8] = "accountMerge";
        OperationResponseTypeI[OperationResponseTypeI["inflation"] = 9] = "inflation";
        OperationResponseTypeI[OperationResponseTypeI["manageData"] = 10] = "manageData";
        OperationResponseTypeI[OperationResponseTypeI["bumpSequence"] = 11] = "bumpSequence";
        OperationResponseTypeI[OperationResponseTypeI["manageBuyOffer"] = 12] = "manageBuyOffer";
        OperationResponseTypeI[OperationResponseTypeI["pathPaymentStrictSend"] = 13] = "pathPaymentStrictSend";
        OperationResponseTypeI[OperationResponseTypeI["createClaimableBalance"] = 14] = "createClaimableBalance";
        OperationResponseTypeI[OperationResponseTypeI["claimClaimableBalance"] = 15] = "claimClaimableBalance";
        OperationResponseTypeI[OperationResponseTypeI["beginSponsoringFutureReserves"] = 16] = "beginSponsoringFutureReserves";
        OperationResponseTypeI[OperationResponseTypeI["endSponsoringFutureReserves"] = 17] = "endSponsoringFutureReserves";
        OperationResponseTypeI[OperationResponseTypeI["revokeSponsorship"] = 18] = "revokeSponsorship";
        OperationResponseTypeI[OperationResponseTypeI["clawback"] = 19] = "clawback";
        OperationResponseTypeI[OperationResponseTypeI["clawbackClaimableBalance"] = 20] = "clawbackClaimableBalance";
        OperationResponseTypeI[OperationResponseTypeI["setTrustLineFlags"] = 21] = "setTrustLineFlags";
        OperationResponseTypeI[OperationResponseTypeI["liquidityPoolDeposit"] = 22] = "liquidityPoolDeposit";
        OperationResponseTypeI[OperationResponseTypeI["liquidityPoolWithdraw"] = 23] = "liquidityPoolWithdraw";
    })(OperationResponseTypeI = Horizon.OperationResponseTypeI || (Horizon.OperationResponseTypeI = {}));
    var TransactionFailedResultCodes;
    (function(TransactionFailedResultCodes) {
        TransactionFailedResultCodes["TX_FAILED"] = "tx_failed";
        TransactionFailedResultCodes["TX_BAD_SEQ"] = "tx_bad_seq";
        TransactionFailedResultCodes["TX_BAD_AUTH"] = "tx_bad_auth";
        TransactionFailedResultCodes["TX_BAD_AUTH_EXTRA"] = "tx_bad_auth_extra";
        TransactionFailedResultCodes["TX_FEE_BUMP_INNER_SUCCESS"] = "tx_fee_bump_inner_success";
        TransactionFailedResultCodes["TX_FEE_BUMP_INNER_FAILED"] = "tx_fee_bump_inner_failed";
        TransactionFailedResultCodes["TX_NOT_SUPPORTED"] = "tx_not_supported";
        TransactionFailedResultCodes["TX_SUCCESS"] = "tx_success";
        TransactionFailedResultCodes["TX_TOO_EARLY"] = "tx_too_early";
        TransactionFailedResultCodes["TX_TOO_LATE"] = "tx_too_late";
        TransactionFailedResultCodes["TX_MISSING_OPERATION"] = "tx_missing_operation";
        TransactionFailedResultCodes["TX_INSUFFICIENT_BALANCE"] = "tx_insufficient_balance";
        TransactionFailedResultCodes["TX_NO_SOURCE_ACCOUNT"] = "tx_no_source_account";
        TransactionFailedResultCodes["TX_INSUFFICIENT_FEE"] = "tx_insufficient_fee";
        TransactionFailedResultCodes["TX_INTERNAL_ERROR"] = "tx_internal_error";
    })(TransactionFailedResultCodes = Horizon.TransactionFailedResultCodes || (Horizon.TransactionFailedResultCodes = {}));
})(Horizon = exports.Horizon || (exports.Horizon = {}));

},{}],"hJ5rb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ServerApi = void 0;
var ServerApi;
(function(ServerApi) {
    var TradeType;
    (function(TradeType) {
        TradeType["all"] = "all";
        TradeType["liquidityPools"] = "liquidity_pool";
        TradeType["orderbook"] = "orderbook";
    })(TradeType = ServerApi.TradeType || (ServerApi.TradeType = {}));
})(ServerApi = exports.ServerApi || (exports.ServerApi = {}));

},{}],"e7Wb7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountResponse = void 0;
var tslib_1 = require("ef83a2e8caa56449");
var forIn_1 = tslib_1.__importDefault(require("d0dc02f0f5c78e19"));
var stellar_base_1 = require("5ebb94a57cc69e13");
var AccountResponse = function() {
    function AccountResponse(response) {
        var _this = this;
        this._baseAccount = new stellar_base_1.Account(response.account_id, response.sequence);
        forIn_1.default(response, function(value, key) {
            _this[key] = value;
        });
    }
    AccountResponse.prototype.accountId = function() {
        return this._baseAccount.accountId();
    };
    AccountResponse.prototype.sequenceNumber = function() {
        return this._baseAccount.sequenceNumber();
    };
    AccountResponse.prototype.incrementSequenceNumber = function() {
        this._baseAccount.incrementSequenceNumber();
        this.sequence = this._baseAccount.sequenceNumber();
    };
    return AccountResponse;
}();
exports.AccountResponse = AccountResponse;

},{"ef83a2e8caa56449":"lRdW5","d0dc02f0f5c78e19":"hfqEk","5ebb94a57cc69e13":"aicMq"}],"hfqEk":[function(require,module,exports) {
var baseFor = require("95161695876f6537"), castFunction = require("18a7201bf3d2d525"), keysIn = require("7173d408b1ecaafb");
/**
 * Iterates over own and inherited enumerable string keyed properties of an
 * object and invokes `iteratee` for each property. The iteratee is invoked
 * with three arguments: (value, key, object). Iteratee functions may exit
 * iteration early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forInRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forIn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
 */ function forIn(object, iteratee) {
    return object == null ? object : baseFor(object, castFunction(iteratee), keysIn);
}
module.exports = forIn;

},{"95161695876f6537":"k0bbR","18a7201bf3d2d525":"9qOGA","7173d408b1ecaafb":"c9sMs"}],"k0bbR":[function(require,module,exports) {
var createBaseFor = require("2a4d4af8392b723e");
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */ var baseFor = createBaseFor();
module.exports = baseFor;

},{"2a4d4af8392b723e":"hCIGA"}],"hCIGA":[function(require,module,exports) {
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
module.exports = createBaseFor;

},{}],"9qOGA":[function(require,module,exports) {
var identity = require("a3e4f10bdec93028");
/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */ function castFunction(value) {
    return typeof value == "function" ? value : identity;
}
module.exports = castFunction;

},{"a3e4f10bdec93028":"dgTUN"}],"dgTUN":[function(require,module,exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function identity(value) {
    return value;
}
module.exports = identity;

},{}],"c9sMs":[function(require,module,exports) {
var arrayLikeKeys = require("8659214c00864bd4"), baseKeysIn = require("5e98819c6dd74fdc"), isArrayLike = require("f2769e6acb9d08f5");
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
module.exports = keysIn;

},{"8659214c00864bd4":"dquIQ","5e98819c6dd74fdc":"23s7e","f2769e6acb9d08f5":"gMCbp"}],"dquIQ":[function(require,module,exports) {
var baseTimes = require("b3d4447c96027daf"), isArguments = require("11d62ad781c7a92"), isArray = require("705ca93acd777b7f"), isBuffer = require("fb0ae446c669faad"), isIndex = require("a246c52f686229b4"), isTypedArray = require("1f94feec3b8d89ff");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;

},{"b3d4447c96027daf":"odqYd","11d62ad781c7a92":"8ReNj","705ca93acd777b7f":"dZaTH","fb0ae446c669faad":"cn85h","a246c52f686229b4":"aJpx0","1f94feec3b8d89ff":"6SVKk"}],"odqYd":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;

},{}],"8ReNj":[function(require,module,exports) {
var baseIsArguments = require("36ac54d5dd192a6e"), isObjectLike = require("92aaa6cdeb2452a2");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
module.exports = isArguments;

},{"36ac54d5dd192a6e":"gx70P","92aaa6cdeb2452a2":"3BLi4"}],"gx70P":[function(require,module,exports) {
var baseGetTag = require("84eaee5baadf44ce"), isObjectLike = require("efaea1ddcf4814c5");
/** `Object#toString` result references. */ var argsTag = "[object Arguments]";
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

},{"84eaee5baadf44ce":"lOnbo","efaea1ddcf4814c5":"3BLi4"}],"lOnbo":[function(require,module,exports) {
var Symbol = require("618c80e7da5870c0"), getRawTag = require("b46f20f8de966513"), objectToString = require("52a083b7a0c2b12e");
/** `Object#toString` result references. */ var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"618c80e7da5870c0":"7lsL9","b46f20f8de966513":"995sO","52a083b7a0c2b12e":"bmE3g"}],"7lsL9":[function(require,module,exports) {
var root = require("baa7ede74afcc19");
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;

},{"baa7ede74afcc19":"dSYUs"}],"dSYUs":[function(require,module,exports) {
var freeGlobal = require("8bb76614314b5cf3");
/** Detect free variable `self`. */ var freeSelf = typeof self == "object" && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function("return this")();
module.exports = root;

},{"8bb76614314b5cf3":"kAk32"}],"kAk32":[function(require,module,exports) {
/** Detect free variable `global` from Node.js. */ var global = arguments[3];
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"995sO":[function(require,module,exports) {
var Symbol = require("808f5e284becf3b1");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"808f5e284becf3b1":"7lsL9"}],"bmE3g":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"3BLi4":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == "object";
}
module.exports = isObjectLike;

},{}],"dZaTH":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;

},{}],"cn85h":[function(require,module,exports) {
var root = require("648c094f5f42aa9e"), stubFalse = require("87c0a34902b803e4");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

},{"648c094f5f42aa9e":"dSYUs","87c0a34902b803e4":"dx4uy"}],"dx4uy":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;

},{}],"aJpx0":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

},{}],"6SVKk":[function(require,module,exports) {
var baseIsTypedArray = require("b5ceaf03856d8a85"), baseUnary = require("409b374929aaea90"), nodeUtil = require("ec1bdb643f6d80ae");
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

},{"b5ceaf03856d8a85":"lGSsl","409b374929aaea90":"eJXq4","ec1bdb643f6d80ae":"5edNe"}],"lGSsl":[function(require,module,exports) {
var baseGetTag = require("fa31319d20bed12a"), isLength = require("1887679ee3a42001"), isObjectLike = require("e6c0249413595b31");
/** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

},{"fa31319d20bed12a":"lOnbo","1887679ee3a42001":"hrTBx","e6c0249413595b31":"3BLi4"}],"hrTBx":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

},{}],"eJXq4":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;

},{}],"5edNe":[function(require,module,exports) {
var freeGlobal = require("ddf5d9b750f3b9a4");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {}
}();
module.exports = nodeUtil;

},{"ddf5d9b750f3b9a4":"kAk32"}],"23s7e":[function(require,module,exports) {
var isObject = require("edae9ba085cbaf85"), isPrototype = require("f47dd33aff2e0a4b"), nativeKeysIn = require("158dbac9df98f439");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeysIn(object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object), result = [];
    for(var key in object)if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
module.exports = baseKeysIn;

},{"edae9ba085cbaf85":"cGhqJ","f47dd33aff2e0a4b":"iG4eR","158dbac9df98f439":"5CFL0"}],"cGhqJ":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
}
module.exports = isObject;

},{}],"iG4eR":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;

},{}],"5CFL0":[function(require,module,exports) {
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
module.exports = nativeKeysIn;

},{}],"gMCbp":[function(require,module,exports) {
var isFunction = require("6724667775aaa3b9"), isLength = require("91a987a94cefa391");
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

},{"6724667775aaa3b9":"cfti6","91a987a94cefa391":"hrTBx"}],"cfti6":[function(require,module,exports) {
var baseGetTag = require("325ab398011def6e"), isObject = require("382e09300e987e39");
/** `Object#toString` result references. */ var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

},{"325ab398011def6e":"lOnbo","382e09300e987e39":"cGhqJ"}],"aicMq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.encodeMuxedAccount = exports.extractBaseAddress = exports.encodeMuxedAccountToAddress = exports.decodeAddressToMuxedAccount = exports.SignerKey = exports.StrKey = exports.Networks = exports.Claimant = exports.MuxedAccount = exports.Account = exports.AuthClawbackEnabledFlag = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = exports.Operation = exports.LiquidityPoolId = exports.LiquidityPoolAsset = exports.Asset = exports.BASE_FEE = exports.TimeoutInfinite = exports.TransactionBuilder = exports.FeeBumpTransaction = exports.Transaction = exports.TransactionBase = exports.Hyper = exports.UnsignedHyper = exports.Keypair = exports.LiquidityPoolFeeV18 = exports.getLiquidityPoolId = exports.FastSigning = exports.verify = exports.sign = exports.hash = exports.xdr = undefined;
var _hashing = require("2a2397371152e16b");
Object.defineProperty(exports, "hash", {
    enumerable: true,
    get: function get() {
        return _hashing.hash;
    }
});
var _signing = require("d4c9ff58db1b592d");
Object.defineProperty(exports, "sign", {
    enumerable: true,
    get: function get() {
        return _signing.sign;
    }
});
Object.defineProperty(exports, "verify", {
    enumerable: true,
    get: function get() {
        return _signing.verify;
    }
});
Object.defineProperty(exports, "FastSigning", {
    enumerable: true,
    get: function get() {
        return _signing.FastSigning;
    }
});
var _get_liquidity_pool_id = require("c1da5d0fed17d7ad");
Object.defineProperty(exports, "getLiquidityPoolId", {
    enumerable: true,
    get: function get() {
        return _get_liquidity_pool_id.getLiquidityPoolId;
    }
});
Object.defineProperty(exports, "LiquidityPoolFeeV18", {
    enumerable: true,
    get: function get() {
        return _get_liquidity_pool_id.LiquidityPoolFeeV18;
    }
});
var _keypair = require("a0b42dd54483daa7");
Object.defineProperty(exports, "Keypair", {
    enumerable: true,
    get: function get() {
        return _keypair.Keypair;
    }
});
var _jsXdr = require("862be0757f56b1a0");
Object.defineProperty(exports, "UnsignedHyper", {
    enumerable: true,
    get: function get() {
        return _jsXdr.UnsignedHyper;
    }
});
Object.defineProperty(exports, "Hyper", {
    enumerable: true,
    get: function get() {
        return _jsXdr.Hyper;
    }
});
var _transaction_base = require("f300b15acae296c7");
Object.defineProperty(exports, "TransactionBase", {
    enumerable: true,
    get: function get() {
        return _transaction_base.TransactionBase;
    }
});
var _transaction = require("19acf07c6b363b44");
Object.defineProperty(exports, "Transaction", {
    enumerable: true,
    get: function get() {
        return _transaction.Transaction;
    }
});
var _fee_bump_transaction = require("ecf3885c214605ad");
Object.defineProperty(exports, "FeeBumpTransaction", {
    enumerable: true,
    get: function get() {
        return _fee_bump_transaction.FeeBumpTransaction;
    }
});
var _transaction_builder = require("e35ed1676dbbd3ad");
Object.defineProperty(exports, "TransactionBuilder", {
    enumerable: true,
    get: function get() {
        return _transaction_builder.TransactionBuilder;
    }
});
Object.defineProperty(exports, "TimeoutInfinite", {
    enumerable: true,
    get: function get() {
        return _transaction_builder.TimeoutInfinite;
    }
});
Object.defineProperty(exports, "BASE_FEE", {
    enumerable: true,
    get: function get() {
        return _transaction_builder.BASE_FEE;
    }
});
var _asset = require("aac5bc5dc0b152f3");
Object.defineProperty(exports, "Asset", {
    enumerable: true,
    get: function get() {
        return _asset.Asset;
    }
});
var _liquidity_pool_asset = require("6364951986b302ee");
Object.defineProperty(exports, "LiquidityPoolAsset", {
    enumerable: true,
    get: function get() {
        return _liquidity_pool_asset.LiquidityPoolAsset;
    }
});
var _liquidity_pool_id = require("814a626c4812113f");
Object.defineProperty(exports, "LiquidityPoolId", {
    enumerable: true,
    get: function get() {
        return _liquidity_pool_id.LiquidityPoolId;
    }
});
var _operation = require("9a816004d3258d4");
Object.defineProperty(exports, "Operation", {
    enumerable: true,
    get: function get() {
        return _operation.Operation;
    }
});
Object.defineProperty(exports, "AuthRequiredFlag", {
    enumerable: true,
    get: function get() {
        return _operation.AuthRequiredFlag;
    }
});
Object.defineProperty(exports, "AuthRevocableFlag", {
    enumerable: true,
    get: function get() {
        return _operation.AuthRevocableFlag;
    }
});
Object.defineProperty(exports, "AuthImmutableFlag", {
    enumerable: true,
    get: function get() {
        return _operation.AuthImmutableFlag;
    }
});
Object.defineProperty(exports, "AuthClawbackEnabledFlag", {
    enumerable: true,
    get: function get() {
        return _operation.AuthClawbackEnabledFlag;
    }
});
var _memo = require("e7d1bb997c2eeb48");
Object.keys(_memo).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _memo[key];
        }
    });
});
var _account = require("5c346868ff20b137");
Object.defineProperty(exports, "Account", {
    enumerable: true,
    get: function get() {
        return _account.Account;
    }
});
var _muxed_account = require("4909b3f8b78ac6ce");
Object.defineProperty(exports, "MuxedAccount", {
    enumerable: true,
    get: function get() {
        return _muxed_account.MuxedAccount;
    }
});
var _claimant = require("3b589a6e587993c4");
Object.defineProperty(exports, "Claimant", {
    enumerable: true,
    get: function get() {
        return _claimant.Claimant;
    }
});
var _network = require("ceb7fcba38bf00e3");
Object.defineProperty(exports, "Networks", {
    enumerable: true,
    get: function get() {
        return _network.Networks;
    }
});
var _strkey = require("c92b8db2d9a869db");
Object.defineProperty(exports, "StrKey", {
    enumerable: true,
    get: function get() {
        return _strkey.StrKey;
    }
});
var _signerkey = require("b6499c79acf897d1");
Object.defineProperty(exports, "SignerKey", {
    enumerable: true,
    get: function get() {
        return _signerkey.SignerKey;
    }
});
var _decode_encode_muxed_account = require("4e976d0d99a9cd25");
Object.defineProperty(exports, "decodeAddressToMuxedAccount", {
    enumerable: true,
    get: function get() {
        return _decode_encode_muxed_account.decodeAddressToMuxedAccount;
    }
});
Object.defineProperty(exports, "encodeMuxedAccountToAddress", {
    enumerable: true,
    get: function get() {
        return _decode_encode_muxed_account.encodeMuxedAccountToAddress;
    }
});
Object.defineProperty(exports, "extractBaseAddress", {
    enumerable: true,
    get: function get() {
        return _decode_encode_muxed_account.extractBaseAddress;
    }
});
Object.defineProperty(exports, "encodeMuxedAccount", {
    enumerable: true,
    get: function get() {
        return _decode_encode_muxed_account.encodeMuxedAccount;
    }
});
var _xdr = require("e6cee18e7411cca2");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.xdr = _xdr2.default;
exports.default = module.exports;

},{"2a2397371152e16b":"efCju","d4c9ff58db1b592d":"fvAO6","c1da5d0fed17d7ad":"lMZqW","a0b42dd54483daa7":"kfbNf","862be0757f56b1a0":"inVSw","f300b15acae296c7":"6Ntw2","19acf07c6b363b44":"eHX3S","ecf3885c214605ad":"b5UHu","e35ed1676dbbd3ad":"5a4TD","aac5bc5dc0b152f3":"hLdvN","6364951986b302ee":"9teTo","814a626c4812113f":"74ahN","9a816004d3258d4":"douR6","e7d1bb997c2eeb48":"hYmMJ","5c346868ff20b137":"juKGU","4909b3f8b78ac6ce":"kLOod","3b589a6e587993c4":"hToNo","ceb7fcba38bf00e3":"cytwd","c92b8db2d9a869db":"gjDua","b6499c79acf897d1":"b6vrA","4e976d0d99a9cd25":"5F4St","e6cee18e7411cca2":"gxpVH"}],"efCju":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hash = hash;
var _sha = require("7956fec5091ec696");
function hash(data) {
    var hasher = new _sha.sha256();
    hasher.update(data, "utf8");
    return hasher.digest();
}

},{"7956fec5091ec696":"jkn7m"}],"jkn7m":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
};
exports.sha = require("d63c928749f89abe");
exports.sha1 = require("e3cf09113e5fd72d");
exports.sha224 = require("d1c6f3c378152d49");
exports.sha256 = require("d11cb05e7387fab7");
exports.sha384 = require("ce7e560ffed79440");
exports.sha512 = require("30af1a3397bcb618");

},{"d63c928749f89abe":"6PecA","e3cf09113e5fd72d":"iCEYJ","d1c6f3c378152d49":"7e0O2","d11cb05e7387fab7":"kVAym","ce7e560ffed79440":"bWRvM","30af1a3397bcb618":"aZK4H"}],"6PecA":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require("c5264b528f885eeb");
var Hash = require("3fba94e79b94cee8");
var Buffer = require("f620a84a03091d24").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"c5264b528f885eeb":"bRL3M","3fba94e79b94cee8":"7wpAR","f620a84a03091d24":"eW7r9"}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"7wpAR":[function(require,module,exports) {
var Buffer = require("ec49b379456ac8d0").Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
};
module.exports = Hash;

},{"ec49b379456ac8d0":"eW7r9"}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("8212d9fa1afa3f68");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"8212d9fa1afa3f68":"fCgem"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
var base64 = require("8f64f79b95d788c0");
var ieee754 = require("1257aa90b8ecab92");
var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"8f64f79b95d788c0":"eIiSV","1257aa90b8ecab92":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"iCEYJ":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require("effa99075f0e9e7b");
var Hash = require("47e46cbaa3e42546");
var Buffer = require("3e63c6b758081c83").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"effa99075f0e9e7b":"bRL3M","47e46cbaa3e42546":"7wpAR","3e63c6b758081c83":"eW7r9"}],"7e0O2":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("fcf0b5ccbd6f16d1");
var Sha256 = require("badbed126f457576");
var Hash = require("d80428e92832f5e9");
var Buffer = require("13cfaf86d1754aee").Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"fcf0b5ccbd6f16d1":"bRL3M","badbed126f457576":"kVAym","d80428e92832f5e9":"7wpAR","13cfaf86d1754aee":"eW7r9"}],"kVAym":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("e2b2a741b7c18be9");
var Hash = require("9e941bda002d0cc4");
var Buffer = require("592d1183187aeffb").Buffer;
var K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"e2b2a741b7c18be9":"bRL3M","9e941bda002d0cc4":"7wpAR","592d1183187aeffb":"eW7r9"}],"bWRvM":[function(require,module,exports) {
var inherits = require("71f152058ef050a1");
var SHA512 = require("37fbe7eb697f1b2");
var Hash = require("64842f9a5f2bb95a");
var Buffer = require("594daa21c7e09023").Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"71f152058ef050a1":"bRL3M","37fbe7eb697f1b2":"aZK4H","64842f9a5f2bb95a":"7wpAR","594daa21c7e09023":"eW7r9"}],"aZK4H":[function(require,module,exports) {
var inherits = require("3a39bc0704aed5c4");
var Hash = require("b2368abbde45ef71");
var Buffer = require("130c5a01798bf323").Buffer;
var K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"3a39bc0704aed5c4":"bRL3M","b2368abbde45ef71":"7wpAR","130c5a01798bf323":"eW7r9"}],"fvAO6":[function(require,module,exports) {
var Buffer = require("591327ec070b08c2").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sign = sign;
exports.verify = verify;
exports.generate = generate;
//  This module provides the signing functionality used by the stellar network
//  The code below may look a little strange... this is because we try to provide
//  the most efficient signing method possible.  First, we try to load the
//  native `sodium-native` package for node.js environments, and if that fails we
//  fallback to `tweetnacl`
var actualMethods = {};
/**
 * Use this flag to check if fast signing (provided by `sodium-native` package) is available.
 * If your app is signing a large number of transaction or verifying a large number
 * of signatures make sure `sodium-native` package is installed.
 */ var FastSigning = exports.FastSigning = checkFastSigning();
function sign(data, secretKey) {
    return actualMethods.sign(data, secretKey);
}
function verify(data, signature, publicKey) {
    return actualMethods.verify(data, signature, publicKey);
}
function generate(secretKey) {
    return actualMethods.generate(secretKey);
}
function checkFastSigning() {
    return typeof window === "undefined" ? checkFastSigningNode() : checkFastSigningBrowser();
}
function checkFastSigningNode() {
    // NOTE: we use commonjs style require here because es6 imports
    // can only occur at the top level.  thanks, obama.
    var sodium = void 0;
    try {
        // eslint-disable-next-line
        sodium = require("b77a3cd948262bad");
    } catch (err) {
        return checkFastSigningBrowser();
    }
    if (!Object.keys(sodium).length) return checkFastSigningBrowser();
    actualMethods.generate = function(secretKey) {
        var pk = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);
        var sk = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);
        sodium.crypto_sign_seed_keypair(pk, sk, secretKey);
        return pk;
    };
    actualMethods.sign = function(data, secretKey) {
        data = Buffer.from(data);
        var signature = Buffer.alloc(sodium.crypto_sign_BYTES);
        sodium.crypto_sign_detached(signature, data, secretKey);
        return signature;
    };
    actualMethods.verify = function(data, signature, publicKey) {
        data = Buffer.from(data);
        try {
            return sodium.crypto_sign_verify_detached(signature, data, publicKey);
        } catch (e) {
            return false;
        }
    };
    return true;
}
function checkFastSigningBrowser() {
    // fallback to `tweetnacl` if we're in the browser or
    // if there was a failure installing `sodium-native`
    // eslint-disable-next-line
    var nacl = require("255dd7c70293b64d");
    actualMethods.generate = function(secretKey) {
        var secretKeyUint8 = new Uint8Array(secretKey);
        var naclKeys = nacl.sign.keyPair.fromSeed(secretKeyUint8);
        return Buffer.from(naclKeys.publicKey);
    };
    actualMethods.sign = function(data, secretKey) {
        data = Buffer.from(data);
        data = new Uint8Array(data.toJSON().data);
        secretKey = new Uint8Array(secretKey.toJSON().data);
        var signature = nacl.sign.detached(data, secretKey);
        return Buffer.from(signature);
    };
    actualMethods.verify = function(data, signature, publicKey) {
        data = Buffer.from(data);
        data = new Uint8Array(data.toJSON().data);
        signature = new Uint8Array(signature.toJSON().data);
        publicKey = new Uint8Array(publicKey.toJSON().data);
        return nacl.sign.detached.verify(data, signature, publicKey);
    };
    return false;
}

},{"591327ec070b08c2":"fCgem","b77a3cd948262bad":"jhUEF","255dd7c70293b64d":"3J9rh"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"3J9rh":[function(require,module,exports) {
(function(nacl) {
    "use strict";
    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/
    var gf = function(init) {
        var i, r = new Float64Array(16);
        if (init) for(i = 0; i < init.length; i++)r[i] = init[i];
        return r;
    };
    //  Pluggable, initialized in high-level API below.
    var randombytes = function() {
        throw new Error("no PRNG");
    };
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf(), gf1 = gf([
        1
    ]), _121665 = gf([
        0xdb41,
        1
    ]), D = gf([
        0x78a3,
        0x1359,
        0x4dca,
        0x75eb,
        0xd8ab,
        0x4141,
        0x0a4d,
        0x0070,
        0xe898,
        0x7779,
        0x4079,
        0x8cc7,
        0xfe73,
        0x2b6f,
        0x6cee,
        0x5203
    ]), D2 = gf([
        0xf159,
        0x26b2,
        0x9b94,
        0xebd6,
        0xb156,
        0x8283,
        0x149a,
        0x00e0,
        0xd130,
        0xeef3,
        0x80f2,
        0x198e,
        0xfce7,
        0x56df,
        0xd9dc,
        0x2406
    ]), X = gf([
        0xd51a,
        0x8f25,
        0x2d60,
        0xc956,
        0xa7b2,
        0x9525,
        0xc760,
        0x692c,
        0xdc5c,
        0xfdd6,
        0xe231,
        0xc0a4,
        0x53fe,
        0xcd6e,
        0x36d3,
        0x2169
    ]), Y = gf([
        0x6658,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666,
        0x6666
    ]), I = gf([
        0xa0b0,
        0x4a0e,
        0x1b27,
        0xc4ee,
        0xe478,
        0xad2f,
        0x1806,
        0x2f43,
        0xd7a7,
        0x3dfb,
        0x0099,
        0x2b4d,
        0xdf0b,
        0x4fc1,
        0x2480,
        0x2b83
    ]);
    function ts64(x, i, h, l) {
        x[i] = h >> 24 & 0xff;
        x[i + 1] = h >> 16 & 0xff;
        x[i + 2] = h >> 8 & 0xff;
        x[i + 3] = h & 0xff;
        x[i + 4] = l >> 24 & 0xff;
        x[i + 5] = l >> 16 & 0xff;
        x[i + 6] = l >> 8 & 0xff;
        x[i + 7] = l & 0xff;
    }
    function vn(x, xi, y, yi, n) {
        var i, d = 0;
        for(i = 0; i < n; i++)d |= x[xi + i] ^ y[yi + i];
        return (1 & d - 1 >>> 8) - 1;
    }
    function crypto_verify_16(x, xi, y, yi) {
        return vn(x, xi, y, yi, 16);
    }
    function crypto_verify_32(x, xi, y, yi) {
        return vn(x, xi, y, yi, 32);
    }
    function core_salsa20(o, p, k, c) {
        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for(var i = 0; i < 20; i += 2){
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 25;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 19;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 25;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 19;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 25;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 19;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 25;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 19;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 14;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 25;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 19;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 25;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 19;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 25;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 19;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 25;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 19;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 14;
        }
        x0 = x0 + j0 | 0;
        x1 = x1 + j1 | 0;
        x2 = x2 + j2 | 0;
        x3 = x3 + j3 | 0;
        x4 = x4 + j4 | 0;
        x5 = x5 + j5 | 0;
        x6 = x6 + j6 | 0;
        x7 = x7 + j7 | 0;
        x8 = x8 + j8 | 0;
        x9 = x9 + j9 | 0;
        x10 = x10 + j10 | 0;
        x11 = x11 + j11 | 0;
        x12 = x12 + j12 | 0;
        x13 = x13 + j13 | 0;
        x14 = x14 + j14 | 0;
        x15 = x15 + j15 | 0;
        o[0] = x0 >>> 0 & 0xff;
        o[1] = x0 >>> 8 & 0xff;
        o[2] = x0 >>> 16 & 0xff;
        o[3] = x0 >>> 24 & 0xff;
        o[4] = x1 >>> 0 & 0xff;
        o[5] = x1 >>> 8 & 0xff;
        o[6] = x1 >>> 16 & 0xff;
        o[7] = x1 >>> 24 & 0xff;
        o[8] = x2 >>> 0 & 0xff;
        o[9] = x2 >>> 8 & 0xff;
        o[10] = x2 >>> 16 & 0xff;
        o[11] = x2 >>> 24 & 0xff;
        o[12] = x3 >>> 0 & 0xff;
        o[13] = x3 >>> 8 & 0xff;
        o[14] = x3 >>> 16 & 0xff;
        o[15] = x3 >>> 24 & 0xff;
        o[16] = x4 >>> 0 & 0xff;
        o[17] = x4 >>> 8 & 0xff;
        o[18] = x4 >>> 16 & 0xff;
        o[19] = x4 >>> 24 & 0xff;
        o[20] = x5 >>> 0 & 0xff;
        o[21] = x5 >>> 8 & 0xff;
        o[22] = x5 >>> 16 & 0xff;
        o[23] = x5 >>> 24 & 0xff;
        o[24] = x6 >>> 0 & 0xff;
        o[25] = x6 >>> 8 & 0xff;
        o[26] = x6 >>> 16 & 0xff;
        o[27] = x6 >>> 24 & 0xff;
        o[28] = x7 >>> 0 & 0xff;
        o[29] = x7 >>> 8 & 0xff;
        o[30] = x7 >>> 16 & 0xff;
        o[31] = x7 >>> 24 & 0xff;
        o[32] = x8 >>> 0 & 0xff;
        o[33] = x8 >>> 8 & 0xff;
        o[34] = x8 >>> 16 & 0xff;
        o[35] = x8 >>> 24 & 0xff;
        o[36] = x9 >>> 0 & 0xff;
        o[37] = x9 >>> 8 & 0xff;
        o[38] = x9 >>> 16 & 0xff;
        o[39] = x9 >>> 24 & 0xff;
        o[40] = x10 >>> 0 & 0xff;
        o[41] = x10 >>> 8 & 0xff;
        o[42] = x10 >>> 16 & 0xff;
        o[43] = x10 >>> 24 & 0xff;
        o[44] = x11 >>> 0 & 0xff;
        o[45] = x11 >>> 8 & 0xff;
        o[46] = x11 >>> 16 & 0xff;
        o[47] = x11 >>> 24 & 0xff;
        o[48] = x12 >>> 0 & 0xff;
        o[49] = x12 >>> 8 & 0xff;
        o[50] = x12 >>> 16 & 0xff;
        o[51] = x12 >>> 24 & 0xff;
        o[52] = x13 >>> 0 & 0xff;
        o[53] = x13 >>> 8 & 0xff;
        o[54] = x13 >>> 16 & 0xff;
        o[55] = x13 >>> 24 & 0xff;
        o[56] = x14 >>> 0 & 0xff;
        o[57] = x14 >>> 8 & 0xff;
        o[58] = x14 >>> 16 & 0xff;
        o[59] = x14 >>> 24 & 0xff;
        o[60] = x15 >>> 0 & 0xff;
        o[61] = x15 >>> 8 & 0xff;
        o[62] = x15 >>> 16 & 0xff;
        o[63] = x15 >>> 24 & 0xff;
    }
    function core_hsalsa20(o, p, k, c) {
        var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24, j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24, j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24, j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24, j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24, j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24, j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24, j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24, j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24, j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24, j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24, j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24, j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24, j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24, j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24, j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for(var i = 0; i < 20; i += 2){
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 25;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 19;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 25;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 19;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 25;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 19;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 25;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 19;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 14;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 25;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 19;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 25;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 19;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 25;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 19;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 25;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 19;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 14;
        }
        o[0] = x0 >>> 0 & 0xff;
        o[1] = x0 >>> 8 & 0xff;
        o[2] = x0 >>> 16 & 0xff;
        o[3] = x0 >>> 24 & 0xff;
        o[4] = x5 >>> 0 & 0xff;
        o[5] = x5 >>> 8 & 0xff;
        o[6] = x5 >>> 16 & 0xff;
        o[7] = x5 >>> 24 & 0xff;
        o[8] = x10 >>> 0 & 0xff;
        o[9] = x10 >>> 8 & 0xff;
        o[10] = x10 >>> 16 & 0xff;
        o[11] = x10 >>> 24 & 0xff;
        o[12] = x15 >>> 0 & 0xff;
        o[13] = x15 >>> 8 & 0xff;
        o[14] = x15 >>> 16 & 0xff;
        o[15] = x15 >>> 24 & 0xff;
        o[16] = x6 >>> 0 & 0xff;
        o[17] = x6 >>> 8 & 0xff;
        o[18] = x6 >>> 16 & 0xff;
        o[19] = x6 >>> 24 & 0xff;
        o[20] = x7 >>> 0 & 0xff;
        o[21] = x7 >>> 8 & 0xff;
        o[22] = x7 >>> 16 & 0xff;
        o[23] = x7 >>> 24 & 0xff;
        o[24] = x8 >>> 0 & 0xff;
        o[25] = x8 >>> 8 & 0xff;
        o[26] = x8 >>> 16 & 0xff;
        o[27] = x8 >>> 24 & 0xff;
        o[28] = x9 >>> 0 & 0xff;
        o[29] = x9 >>> 8 & 0xff;
        o[30] = x9 >>> 16 & 0xff;
        o[31] = x9 >>> 24 & 0xff;
    }
    function crypto_core_salsa20(out, inp, k, c) {
        core_salsa20(out, inp, k, c);
    }
    function crypto_core_hsalsa20(out, inp, k, c) {
        core_hsalsa20(out, inp, k, c);
    }
    var sigma = new Uint8Array([
        101,
        120,
        112,
        97,
        110,
        100,
        32,
        51,
        50,
        45,
        98,
        121,
        116,
        101,
        32,
        107
    ]);
    // "expand 32-byte k"
    function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for(i = 0; i < 16; i++)z[i] = 0;
        for(i = 0; i < 8; i++)z[i] = n[i];
        while(b >= 64){
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < 64; i++)c[cpos + i] = m[mpos + i] ^ x[i];
            u = 1;
            for(i = 8; i < 16; i++){
                u = u + (z[i] & 0xff) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
            }
            b -= 64;
            cpos += 64;
            mpos += 64;
        }
        if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < b; i++)c[cpos + i] = m[mpos + i] ^ x[i];
        }
        return 0;
    }
    function crypto_stream_salsa20(c, cpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for(i = 0; i < 16; i++)z[i] = 0;
        for(i = 0; i < 8; i++)z[i] = n[i];
        while(b >= 64){
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < 64; i++)c[cpos + i] = x[i];
            u = 1;
            for(i = 8; i < 16; i++){
                u = u + (z[i] & 0xff) | 0;
                z[i] = u & 0xff;
                u >>>= 8;
            }
            b -= 64;
            cpos += 64;
        }
        if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < b; i++)c[cpos + i] = x[i];
        }
        return 0;
    }
    function crypto_stream(c, cpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];
        return crypto_stream_salsa20(c, cpos, d, sn, s);
    }
    function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];
        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
    }
    /*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/ var poly1305 = function(key) {
        this.buffer = new Uint8Array(16);
        this.r = new Uint16Array(10);
        this.h = new Uint16Array(10);
        this.pad = new Uint16Array(8);
        this.leftover = 0;
        this.fin = 0;
        var t0, t1, t2, t3, t4, t5, t6, t7;
        t0 = key[0] & 0xff | (key[1] & 0xff) << 8;
        this.r[0] = t0 & 0x1fff;
        t1 = key[2] & 0xff | (key[3] & 0xff) << 8;
        this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
        t2 = key[4] & 0xff | (key[5] & 0xff) << 8;
        this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
        t3 = key[6] & 0xff | (key[7] & 0xff) << 8;
        this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
        t4 = key[8] & 0xff | (key[9] & 0xff) << 8;
        this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
        this.r[5] = t4 >>> 1 & 0x1ffe;
        t5 = key[10] & 0xff | (key[11] & 0xff) << 8;
        this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
        t6 = key[12] & 0xff | (key[13] & 0xff) << 8;
        this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
        t7 = key[14] & 0xff | (key[15] & 0xff) << 8;
        this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
        this.r[9] = t7 >>> 5 & 0x007f;
        this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
        this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
        this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
        this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
        this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
        this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
        this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
        this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
    };
    poly1305.prototype.blocks = function(m, mpos, bytes) {
        var hibit = this.fin ? 0 : 2048;
        var t0, t1, t2, t3, t4, t5, t6, t7, c;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
        var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
        var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
        while(bytes >= 16){
            t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;
            h0 += t0 & 0x1fff;
            t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
            t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;
            h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
            t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;
            h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
            t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;
            h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
            h5 += t4 >>> 1 & 0x1fff;
            t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;
            h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
            t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
            t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
            h9 += t7 >>> 5 | hibit;
            c = 0;
            d0 = c;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h2 * (5 * r8);
            d0 += h3 * (5 * r7);
            d0 += h4 * (5 * r6);
            c = d0 >>> 13;
            d0 &= 0x1fff;
            d0 += h5 * (5 * r5);
            d0 += h6 * (5 * r4);
            d0 += h7 * (5 * r3);
            d0 += h8 * (5 * r2);
            d0 += h9 * (5 * r1);
            c += d0 >>> 13;
            d0 &= 0x1fff;
            d1 = c;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h2 * (5 * r9);
            d1 += h3 * (5 * r8);
            d1 += h4 * (5 * r7);
            c = d1 >>> 13;
            d1 &= 0x1fff;
            d1 += h5 * (5 * r6);
            d1 += h6 * (5 * r5);
            d1 += h7 * (5 * r4);
            d1 += h8 * (5 * r3);
            d1 += h9 * (5 * r2);
            c += d1 >>> 13;
            d1 &= 0x1fff;
            d2 = c;
            d2 += h0 * r2;
            d2 += h1 * r1;
            d2 += h2 * r0;
            d2 += h3 * (5 * r9);
            d2 += h4 * (5 * r8);
            c = d2 >>> 13;
            d2 &= 0x1fff;
            d2 += h5 * (5 * r7);
            d2 += h6 * (5 * r6);
            d2 += h7 * (5 * r5);
            d2 += h8 * (5 * r4);
            d2 += h9 * (5 * r3);
            c += d2 >>> 13;
            d2 &= 0x1fff;
            d3 = c;
            d3 += h0 * r3;
            d3 += h1 * r2;
            d3 += h2 * r1;
            d3 += h3 * r0;
            d3 += h4 * (5 * r9);
            c = d3 >>> 13;
            d3 &= 0x1fff;
            d3 += h5 * (5 * r8);
            d3 += h6 * (5 * r7);
            d3 += h7 * (5 * r6);
            d3 += h8 * (5 * r5);
            d3 += h9 * (5 * r4);
            c += d3 >>> 13;
            d3 &= 0x1fff;
            d4 = c;
            d4 += h0 * r4;
            d4 += h1 * r3;
            d4 += h2 * r2;
            d4 += h3 * r1;
            d4 += h4 * r0;
            c = d4 >>> 13;
            d4 &= 0x1fff;
            d4 += h5 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r5);
            c += d4 >>> 13;
            d4 &= 0x1fff;
            d5 = c;
            d5 += h0 * r5;
            d5 += h1 * r4;
            d5 += h2 * r3;
            d5 += h3 * r2;
            d5 += h4 * r1;
            c = d5 >>> 13;
            d5 &= 0x1fff;
            d5 += h5 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c += d5 >>> 13;
            d5 &= 0x1fff;
            d6 = c;
            d6 += h0 * r6;
            d6 += h1 * r5;
            d6 += h2 * r4;
            d6 += h3 * r3;
            d6 += h4 * r2;
            c = d6 >>> 13;
            d6 &= 0x1fff;
            d6 += h5 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c += d6 >>> 13;
            d6 &= 0x1fff;
            d7 = c;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h2 * r5;
            d7 += h3 * r4;
            d7 += h4 * r3;
            c = d7 >>> 13;
            d7 &= 0x1fff;
            d7 += h5 * r2;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c += d7 >>> 13;
            d7 &= 0x1fff;
            d8 = c;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h2 * r6;
            d8 += h3 * r5;
            d8 += h4 * r4;
            c = d8 >>> 13;
            d8 &= 0x1fff;
            d8 += h5 * r3;
            d8 += h6 * r2;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c += d8 >>> 13;
            d8 &= 0x1fff;
            d9 = c;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h2 * r7;
            d9 += h3 * r6;
            d9 += h4 * r5;
            c = d9 >>> 13;
            d9 &= 0x1fff;
            d9 += h5 * r4;
            d9 += h6 * r3;
            d9 += h7 * r2;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c += d9 >>> 13;
            d9 &= 0x1fff;
            c = (c << 2) + c | 0;
            c = c + d0 | 0;
            d0 = c & 0x1fff;
            c = c >>> 13;
            d1 += c;
            h0 = d0;
            h1 = d1;
            h2 = d2;
            h3 = d3;
            h4 = d4;
            h5 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
        }
        this.h[0] = h0;
        this.h[1] = h1;
        this.h[2] = h2;
        this.h[3] = h3;
        this.h[4] = h4;
        this.h[5] = h5;
        this.h[6] = h6;
        this.h[7] = h7;
        this.h[8] = h8;
        this.h[9] = h9;
    };
    poly1305.prototype.finish = function(mac, macpos) {
        var g = new Uint16Array(10);
        var c, mask, f, i;
        if (this.leftover) {
            i = this.leftover;
            this.buffer[i++] = 1;
            for(; i < 16; i++)this.buffer[i] = 0;
            this.fin = 1;
            this.blocks(this.buffer, 0, 16);
        }
        c = this.h[1] >>> 13;
        this.h[1] &= 0x1fff;
        for(i = 2; i < 10; i++){
            this.h[i] += c;
            c = this.h[i] >>> 13;
            this.h[i] &= 0x1fff;
        }
        this.h[0] += c * 5;
        c = this.h[0] >>> 13;
        this.h[0] &= 0x1fff;
        this.h[1] += c;
        c = this.h[1] >>> 13;
        this.h[1] &= 0x1fff;
        this.h[2] += c;
        g[0] = this.h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 0x1fff;
        for(i = 1; i < 10; i++){
            g[i] = this.h[i] + c;
            c = g[i] >>> 13;
            g[i] &= 0x1fff;
        }
        g[9] -= 8192;
        mask = (c ^ 1) - 1;
        for(i = 0; i < 10; i++)g[i] &= mask;
        mask = ~mask;
        for(i = 0; i < 10; i++)this.h[i] = this.h[i] & mask | g[i];
        this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
        this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
        this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
        this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
        this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
        this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
        this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
        this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;
        f = this.h[0] + this.pad[0];
        this.h[0] = f & 0xffff;
        for(i = 1; i < 8; i++){
            f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
            this.h[i] = f & 0xffff;
        }
        mac[macpos + 0] = this.h[0] >>> 0 & 0xff;
        mac[macpos + 1] = this.h[0] >>> 8 & 0xff;
        mac[macpos + 2] = this.h[1] >>> 0 & 0xff;
        mac[macpos + 3] = this.h[1] >>> 8 & 0xff;
        mac[macpos + 4] = this.h[2] >>> 0 & 0xff;
        mac[macpos + 5] = this.h[2] >>> 8 & 0xff;
        mac[macpos + 6] = this.h[3] >>> 0 & 0xff;
        mac[macpos + 7] = this.h[3] >>> 8 & 0xff;
        mac[macpos + 8] = this.h[4] >>> 0 & 0xff;
        mac[macpos + 9] = this.h[4] >>> 8 & 0xff;
        mac[macpos + 10] = this.h[5] >>> 0 & 0xff;
        mac[macpos + 11] = this.h[5] >>> 8 & 0xff;
        mac[macpos + 12] = this.h[6] >>> 0 & 0xff;
        mac[macpos + 13] = this.h[6] >>> 8 & 0xff;
        mac[macpos + 14] = this.h[7] >>> 0 & 0xff;
        mac[macpos + 15] = this.h[7] >>> 8 & 0xff;
    };
    poly1305.prototype.update = function(m, mpos, bytes) {
        var i, want;
        if (this.leftover) {
            want = 16 - this.leftover;
            if (want > bytes) want = bytes;
            for(i = 0; i < want; i++)this.buffer[this.leftover + i] = m[mpos + i];
            bytes -= want;
            mpos += want;
            this.leftover += want;
            if (this.leftover < 16) return;
            this.blocks(this.buffer, 0, 16);
            this.leftover = 0;
        }
        if (bytes >= 16) {
            want = bytes - bytes % 16;
            this.blocks(m, mpos, want);
            mpos += want;
            bytes -= want;
        }
        if (bytes) {
            for(i = 0; i < bytes; i++)this.buffer[this.leftover + i] = m[mpos + i];
            this.leftover += bytes;
        }
    };
    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
        var s = new poly1305(k);
        s.update(m, mpos, n);
        s.finish(out, outpos);
        return 0;
    }
    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
        var x = new Uint8Array(16);
        crypto_onetimeauth(x, 0, m, mpos, n, k);
        return crypto_verify_16(h, hpos, x, 0);
    }
    function crypto_secretbox(c, m, d, n, k) {
        var i;
        if (d < 32) return -1;
        crypto_stream_xor(c, 0, m, 0, d, n, k);
        crypto_onetimeauth(c, 16, c, 32, d - 32, c);
        for(i = 0; i < 16; i++)c[i] = 0;
        return 0;
    }
    function crypto_secretbox_open(m, c, d, n, k) {
        var i;
        var x = new Uint8Array(32);
        if (d < 32) return -1;
        crypto_stream(x, 0, 32, n, k);
        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
        crypto_stream_xor(m, 0, c, 0, d, n, k);
        for(i = 0; i < 32; i++)m[i] = 0;
        return 0;
    }
    function set25519(r, a) {
        var i;
        for(i = 0; i < 16; i++)r[i] = a[i] | 0;
    }
    function car25519(o) {
        var i, v, c = 1;
        for(i = 0; i < 16; i++){
            v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
        var t, c = ~(b - 1);
        for(var i = 0; i < 16; i++){
            t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
        }
    }
    function pack25519(o, n) {
        var i, j, b;
        var m = gf(), t = gf();
        for(i = 0; i < 16; i++)t[i] = n[i];
        car25519(t);
        car25519(t);
        car25519(t);
        for(j = 0; j < 2; j++){
            m[0] = t[0] - 0xffed;
            for(i = 1; i < 15; i++){
                m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
                m[i - 1] &= 0xffff;
            }
            m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
            b = m[15] >> 16 & 1;
            m[14] &= 0xffff;
            sel25519(t, m, 1 - b);
        }
        for(i = 0; i < 16; i++){
            o[2 * i] = t[i] & 0xff;
            o[2 * i + 1] = t[i] >> 8;
        }
    }
    function neq25519(a, b) {
        var c = new Uint8Array(32), d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return crypto_verify_32(c, 0, d, 0);
    }
    function par25519(a) {
        var d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
    }
    function unpack25519(o, n) {
        var i;
        for(i = 0; i < 16; i++)o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        o[15] &= 0x7fff;
    }
    function A(o, a, b) {
        for(var i = 0; i < 16; i++)o[i] = a[i] + b[i];
    }
    function Z(o, a, b) {
        for(var i = 0; i < 16; i++)o[i] = a[i] - b[i];
    }
    function M(o, a, b) {
        var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is
        // first car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        // second car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
    }
    function S(o, a) {
        M(o, a, a);
    }
    function inv25519(o, i) {
        var c = gf();
        var a;
        for(a = 0; a < 16; a++)c[a] = i[a];
        for(a = 253; a >= 0; a--){
            S(c, c);
            if (a !== 2 && a !== 4) M(c, c, i);
        }
        for(a = 0; a < 16; a++)o[a] = c[a];
    }
    function pow2523(o, i) {
        var c = gf();
        var a;
        for(a = 0; a < 16; a++)c[a] = i[a];
        for(a = 250; a >= 0; a--){
            S(c, c);
            if (a !== 1) M(c, c, i);
        }
        for(a = 0; a < 16; a++)o[a] = c[a];
    }
    function crypto_scalarmult(q, n, p) {
        var z = new Uint8Array(32);
        var x = new Float64Array(80), r, i;
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
        for(i = 0; i < 31; i++)z[i] = n[i];
        z[31] = n[31] & 127 | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for(i = 0; i < 16; i++){
            b[i] = x[i];
            d[i] = a[i] = c[i] = 0;
        }
        a[0] = d[0] = 1;
        for(i = 254; i >= 0; --i){
            r = z[i >>> 3] >>> (i & 7) & 1;
            sel25519(a, b, r);
            sel25519(c, d, r);
            A(e, a, c);
            Z(a, a, c);
            A(c, b, d);
            Z(b, b, d);
            S(d, e);
            S(f, a);
            M(a, c, a);
            M(c, b, e);
            A(e, a, c);
            Z(a, a, c);
            S(b, a);
            Z(c, d, f);
            M(a, c, _121665);
            A(a, a, d);
            M(c, c, a);
            M(a, d, f);
            M(d, b, x);
            S(b, e);
            sel25519(a, b, r);
            sel25519(c, d, r);
        }
        for(i = 0; i < 16; i++){
            x[i + 16] = a[i];
            x[i + 32] = c[i];
            x[i + 48] = b[i];
            x[i + 64] = d[i];
        }
        var x32 = x.subarray(32);
        var x16 = x.subarray(16);
        inv25519(x32, x32);
        M(x16, x16, x32);
        pack25519(q, x16);
        return 0;
    }
    function crypto_scalarmult_base(q, n) {
        return crypto_scalarmult(q, n, _9);
    }
    function crypto_box_keypair(y, x) {
        randombytes(x, 32);
        return crypto_scalarmult_base(y, x);
    }
    function crypto_box_beforenm(k, y, x) {
        var s = new Uint8Array(32);
        crypto_scalarmult(s, x, y);
        return crypto_core_hsalsa20(k, _0, s, sigma);
    }
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    function crypto_box(c, m, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_afternm(c, m, d, n, k);
    }
    function crypto_box_open(m, c, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_open_afternm(m, c, d, n, k);
    }
    var K = [
        0x428a2f98,
        0xd728ae22,
        0x71374491,
        0x23ef65cd,
        0xb5c0fbcf,
        0xec4d3b2f,
        0xe9b5dba5,
        0x8189dbbc,
        0x3956c25b,
        0xf348b538,
        0x59f111f1,
        0xb605d019,
        0x923f82a4,
        0xaf194f9b,
        0xab1c5ed5,
        0xda6d8118,
        0xd807aa98,
        0xa3030242,
        0x12835b01,
        0x45706fbe,
        0x243185be,
        0x4ee4b28c,
        0x550c7dc3,
        0xd5ffb4e2,
        0x72be5d74,
        0xf27b896f,
        0x80deb1fe,
        0x3b1696b1,
        0x9bdc06a7,
        0x25c71235,
        0xc19bf174,
        0xcf692694,
        0xe49b69c1,
        0x9ef14ad2,
        0xefbe4786,
        0x384f25e3,
        0x0fc19dc6,
        0x8b8cd5b5,
        0x240ca1cc,
        0x77ac9c65,
        0x2de92c6f,
        0x592b0275,
        0x4a7484aa,
        0x6ea6e483,
        0x5cb0a9dc,
        0xbd41fbd4,
        0x76f988da,
        0x831153b5,
        0x983e5152,
        0xee66dfab,
        0xa831c66d,
        0x2db43210,
        0xb00327c8,
        0x98fb213f,
        0xbf597fc7,
        0xbeef0ee4,
        0xc6e00bf3,
        0x3da88fc2,
        0xd5a79147,
        0x930aa725,
        0x06ca6351,
        0xe003826f,
        0x14292967,
        0x0a0e6e70,
        0x27b70a85,
        0x46d22ffc,
        0x2e1b2138,
        0x5c26c926,
        0x4d2c6dfc,
        0x5ac42aed,
        0x53380d13,
        0x9d95b3df,
        0x650a7354,
        0x8baf63de,
        0x766a0abb,
        0x3c77b2a8,
        0x81c2c92e,
        0x47edaee6,
        0x92722c85,
        0x1482353b,
        0xa2bfe8a1,
        0x4cf10364,
        0xa81a664b,
        0xbc423001,
        0xc24b8b70,
        0xd0f89791,
        0xc76c51a3,
        0x0654be30,
        0xd192e819,
        0xd6ef5218,
        0xd6990624,
        0x5565a910,
        0xf40e3585,
        0x5771202a,
        0x106aa070,
        0x32bbd1b8,
        0x19a4c116,
        0xb8d2d0c8,
        0x1e376c08,
        0x5141ab53,
        0x2748774c,
        0xdf8eeb99,
        0x34b0bcb5,
        0xe19b48a8,
        0x391c0cb3,
        0xc5c95a63,
        0x4ed8aa4a,
        0xe3418acb,
        0x5b9cca4f,
        0x7763e373,
        0x682e6ff3,
        0xd6b2b8a3,
        0x748f82ee,
        0x5defb2fc,
        0x78a5636f,
        0x43172f60,
        0x84c87814,
        0xa1f0ab72,
        0x8cc70208,
        0x1a6439ec,
        0x90befffa,
        0x23631e28,
        0xa4506ceb,
        0xde82bde9,
        0xbef9a3f7,
        0xb2c67915,
        0xc67178f2,
        0xe372532b,
        0xca273ece,
        0xea26619c,
        0xd186b8c7,
        0x21c0c207,
        0xeada7dd6,
        0xcde0eb1e,
        0xf57d4f7f,
        0xee6ed178,
        0x06f067aa,
        0x72176fba,
        0x0a637dc5,
        0xa2c898a6,
        0x113f9804,
        0xbef90dae,
        0x1b710b35,
        0x131c471b,
        0x28db77f5,
        0x23047d84,
        0x32caab7b,
        0x40c72493,
        0x3c9ebe0a,
        0x15c9bebc,
        0x431d67c4,
        0x9c100d4c,
        0x4cc5d4be,
        0xcb3e42b6,
        0x597f299c,
        0xfc657e2a,
        0x5fcb6fab,
        0x3ad6faec,
        0x6c44198c,
        0x4a475817
    ];
    function crypto_hashblocks_hl(hh, hl, m, n) {
        var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;
        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
        var pos = 0;
        while(n >= 128){
            for(i = 0; i < 16; i++){
                j = 8 * i + pos;
                wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
                wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
            }
            for(i = 0; i < 80; i++){
                bh0 = ah0;
                bh1 = ah1;
                bh2 = ah2;
                bh3 = ah3;
                bh4 = ah4;
                bh5 = ah5;
                bh6 = ah6;
                bh7 = ah7;
                bl0 = al0;
                bl1 = al1;
                bl2 = al2;
                bl3 = al3;
                bl4 = al4;
                bl5 = al5;
                bl6 = al6;
                bl7 = al7;
                // add
                h = ah7;
                l = al7;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma1
                h = (ah4 >>> 14 | al4 << 18) ^ (ah4 >>> 18 | al4 << 14) ^ (al4 >>> 9 | ah4 << 23);
                l = (al4 >>> 14 | ah4 << 18) ^ (al4 >>> 18 | ah4 << 14) ^ (ah4 >>> 9 | al4 << 23);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Ch
                h = ah4 & ah5 ^ ~ah4 & ah6;
                l = al4 & al5 ^ ~al4 & al6;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // K
                h = K[i * 2];
                l = K[i * 2 + 1];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // w
                h = wh[i % 16];
                l = wl[i % 16];
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                th = c & 0xffff | d << 16;
                tl = a & 0xffff | b << 16;
                // add
                h = th;
                l = tl;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                // Sigma0
                h = (ah0 >>> 28 | al0 << 4) ^ (al0 >>> 2 | ah0 << 30) ^ (al0 >>> 7 | ah0 << 25);
                l = (al0 >>> 28 | ah0 << 4) ^ (ah0 >>> 2 | al0 << 30) ^ (ah0 >>> 7 | al0 << 25);
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                // Maj
                h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
                l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh7 = c & 0xffff | d << 16;
                bl7 = a & 0xffff | b << 16;
                // add
                h = bh3;
                l = bl3;
                a = l & 0xffff;
                b = l >>> 16;
                c = h & 0xffff;
                d = h >>> 16;
                h = th;
                l = tl;
                a += l & 0xffff;
                b += l >>> 16;
                c += h & 0xffff;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh3 = c & 0xffff | d << 16;
                bl3 = a & 0xffff | b << 16;
                ah1 = bh0;
                ah2 = bh1;
                ah3 = bh2;
                ah4 = bh3;
                ah5 = bh4;
                ah6 = bh5;
                ah7 = bh6;
                ah0 = bh7;
                al1 = bl0;
                al2 = bl1;
                al3 = bl2;
                al4 = bl3;
                al5 = bl4;
                al6 = bl5;
                al7 = bl6;
                al0 = bl7;
                if (i % 16 === 15) for(j = 0; j < 16; j++){
                    // add
                    h = wh[j];
                    l = wl[j];
                    a = l & 0xffff;
                    b = l >>> 16;
                    c = h & 0xffff;
                    d = h >>> 16;
                    h = wh[(j + 9) % 16];
                    l = wl[(j + 9) % 16];
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;
                    // sigma0
                    th = wh[(j + 1) % 16];
                    tl = wl[(j + 1) % 16];
                    h = (th >>> 1 | tl << 31) ^ (th >>> 8 | tl << 24) ^ th >>> 7;
                    l = (tl >>> 1 | th << 31) ^ (tl >>> 8 | th << 24) ^ (tl >>> 7 | th << 25);
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;
                    // sigma1
                    th = wh[(j + 14) % 16];
                    tl = wl[(j + 14) % 16];
                    h = (th >>> 19 | tl << 13) ^ (tl >>> 29 | th << 3) ^ th >>> 6;
                    l = (tl >>> 19 | th << 13) ^ (th >>> 29 | tl << 3) ^ (tl >>> 6 | th << 26);
                    a += l & 0xffff;
                    b += l >>> 16;
                    c += h & 0xffff;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    wh[j] = c & 0xffff | d << 16;
                    wl[j] = a & 0xffff | b << 16;
                }
            }
            // add
            h = ah0;
            l = al0;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[0];
            l = hl[0];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[0] = ah0 = c & 0xffff | d << 16;
            hl[0] = al0 = a & 0xffff | b << 16;
            h = ah1;
            l = al1;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[1];
            l = hl[1];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[1] = ah1 = c & 0xffff | d << 16;
            hl[1] = al1 = a & 0xffff | b << 16;
            h = ah2;
            l = al2;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[2];
            l = hl[2];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[2] = ah2 = c & 0xffff | d << 16;
            hl[2] = al2 = a & 0xffff | b << 16;
            h = ah3;
            l = al3;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[3];
            l = hl[3];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[3] = ah3 = c & 0xffff | d << 16;
            hl[3] = al3 = a & 0xffff | b << 16;
            h = ah4;
            l = al4;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[4];
            l = hl[4];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[4] = ah4 = c & 0xffff | d << 16;
            hl[4] = al4 = a & 0xffff | b << 16;
            h = ah5;
            l = al5;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[5];
            l = hl[5];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[5] = ah5 = c & 0xffff | d << 16;
            hl[5] = al5 = a & 0xffff | b << 16;
            h = ah6;
            l = al6;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[6];
            l = hl[6];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[6] = ah6 = c & 0xffff | d << 16;
            hl[6] = al6 = a & 0xffff | b << 16;
            h = ah7;
            l = al7;
            a = l & 0xffff;
            b = l >>> 16;
            c = h & 0xffff;
            d = h >>> 16;
            h = hh[7];
            l = hl[7];
            a += l & 0xffff;
            b += l >>> 16;
            c += h & 0xffff;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[7] = ah7 = c & 0xffff | d << 16;
            hl[7] = al7 = a & 0xffff | b << 16;
            pos += 128;
            n -= 128;
        }
        return n;
    }
    function crypto_hash(out, m, n) {
        var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;
        hh[0] = 0x6a09e667;
        hh[1] = 0xbb67ae85;
        hh[2] = 0x3c6ef372;
        hh[3] = 0xa54ff53a;
        hh[4] = 0x510e527f;
        hh[5] = 0x9b05688c;
        hh[6] = 0x1f83d9ab;
        hh[7] = 0x5be0cd19;
        hl[0] = 0xf3bcc908;
        hl[1] = 0x84caa73b;
        hl[2] = 0xfe94f82b;
        hl[3] = 0x5f1d36f1;
        hl[4] = 0xade682d1;
        hl[5] = 0x2b3e6c1f;
        hl[6] = 0xfb41bd6b;
        hl[7] = 0x137e2179;
        crypto_hashblocks_hl(hh, hl, m, n);
        n %= 128;
        for(i = 0; i < n; i++)x[i] = m[b - n + i];
        x[n] = 128;
        n = 256 - 128 * (n < 112 ? 1 : 0);
        x[n - 9] = 0;
        ts64(x, n - 8, b / 0x20000000 | 0, b << 3);
        crypto_hashblocks_hl(hh, hl, x, n);
        for(i = 0; i < 8; i++)ts64(out, 8 * i, hh[i], hl[i]);
        return 0;
    }
    function add(p, q) {
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
        Z(a, p[1], p[0]);
        Z(t, q[1], q[0]);
        M(a, a, t);
        A(b, p[0], p[1]);
        A(t, q[0], q[1]);
        M(b, b, t);
        M(c, p[3], q[3]);
        M(c, c, D2);
        M(d, p[2], q[2]);
        A(d, d, d);
        Z(e, b, a);
        Z(f, d, c);
        A(g, d, c);
        A(h, b, a);
        M(p[0], e, f);
        M(p[1], h, g);
        M(p[2], g, f);
        M(p[3], e, h);
    }
    function cswap(p, q, b) {
        var i;
        for(i = 0; i < 4; i++)sel25519(p[i], q[i], b);
    }
    function pack(r, p) {
        var tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        M(tx, p[0], zi);
        M(ty, p[1], zi);
        pack25519(r, ty);
        r[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p, q, s) {
        var b, i;
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for(i = 255; i >= 0; --i){
            b = s[i / 8 | 0] >> (i & 7) & 1;
            cswap(p, q, b);
            add(q, p);
            add(p, p);
            cswap(p, q, b);
        }
    }
    function scalarbase(p, s) {
        var q = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        M(q[3], X, Y);
        scalarmult(p, q, s);
    }
    function crypto_sign_keypair(pk, sk, seeded) {
        var d = new Uint8Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        var i;
        if (!seeded) randombytes(sk, 32);
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        scalarbase(p, d);
        pack(pk, p);
        for(i = 0; i < 32; i++)sk[i + 32] = pk[i];
        return 0;
    }
    var L = new Float64Array([
        0xed,
        0xd3,
        0xf5,
        0x5c,
        0x1a,
        0x63,
        0x12,
        0x58,
        0xd6,
        0x9c,
        0xf7,
        0xa2,
        0xde,
        0xf9,
        0xde,
        0x14,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0x10
    ]);
    function modL(r, x) {
        var carry, i, j, k;
        for(i = 63; i >= 32; --i){
            carry = 0;
            for(j = i - 32, k = i - 12; j < k; ++j){
                x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                carry = Math.floor((x[j] + 128) / 256);
                x[j] -= carry * 256;
            }
            x[j] += carry;
            x[i] = 0;
        }
        carry = 0;
        for(j = 0; j < 32; j++){
            x[j] += carry - (x[31] >> 4) * L[j];
            carry = x[j] >> 8;
            x[j] &= 255;
        }
        for(j = 0; j < 32; j++)x[j] -= carry * L[j];
        for(i = 0; i < 32; i++){
            x[i + 1] += x[i] >> 8;
            r[i] = x[i] & 255;
        }
    }
    function reduce(r) {
        var x = new Float64Array(64), i;
        for(i = 0; i < 64; i++)x[i] = r[i];
        for(i = 0; i < 64; i++)r[i] = 0;
        modL(r, x);
    }
    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
        var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
        var i, j, x = new Float64Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        var smlen = n + 64;
        for(i = 0; i < n; i++)sm[64 + i] = m[i];
        for(i = 0; i < 32; i++)sm[32 + i] = d[32 + i];
        crypto_hash(r, sm.subarray(32), n + 32);
        reduce(r);
        scalarbase(p, r);
        pack(sm, p);
        for(i = 32; i < 64; i++)sm[i] = sk[i];
        crypto_hash(h, sm, n + 64);
        reduce(h);
        for(i = 0; i < 64; i++)x[i] = 0;
        for(i = 0; i < 32; i++)x[i] = r[i];
        for(i = 0; i < 32; i++)for(j = 0; j < 32; j++)x[i + j] += h[i] * d[j];
        modL(sm.subarray(32), x);
        return smlen;
    }
    function unpackneg(r, p) {
        var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
        set25519(r[2], gf1);
        unpack25519(r[1], p);
        S(num, r[1]);
        M(den, num, D);
        Z(num, num, r[2]);
        A(den, r[2], den);
        S(den2, den);
        S(den4, den2);
        M(den6, den4, den2);
        M(t, den6, num);
        M(t, t, den);
        pow2523(t, t);
        M(t, t, num);
        M(t, t, den);
        M(t, t, den);
        M(r[0], t, den);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) M(r[0], r[0], I);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) return -1;
        if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
        M(r[3], r[0], r[1]);
        return 0;
    }
    function crypto_sign_open(m, sm, n, pk) {
        var i;
        var t = new Uint8Array(32), h = new Uint8Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ], q = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        if (n < 64) return -1;
        if (unpackneg(q, pk)) return -1;
        for(i = 0; i < n; i++)m[i] = sm[i];
        for(i = 0; i < 32; i++)m[i + 32] = pk[i];
        crypto_hash(h, m, n);
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, sm.subarray(32));
        add(p, q);
        pack(t, p);
        n -= 64;
        if (crypto_verify_32(sm, 0, t, 0)) {
            for(i = 0; i < n; i++)m[i] = 0;
            return -1;
        }
        for(i = 0; i < n; i++)m[i] = sm[i + 64];
        return n;
    }
    var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
    nacl.lowlevel = {
        crypto_core_hsalsa20: crypto_core_hsalsa20,
        crypto_stream_xor: crypto_stream_xor,
        crypto_stream: crypto_stream,
        crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
        crypto_stream_salsa20: crypto_stream_salsa20,
        crypto_onetimeauth: crypto_onetimeauth,
        crypto_onetimeauth_verify: crypto_onetimeauth_verify,
        crypto_verify_16: crypto_verify_16,
        crypto_verify_32: crypto_verify_32,
        crypto_secretbox: crypto_secretbox,
        crypto_secretbox_open: crypto_secretbox_open,
        crypto_scalarmult: crypto_scalarmult,
        crypto_scalarmult_base: crypto_scalarmult_base,
        crypto_box_beforenm: crypto_box_beforenm,
        crypto_box_afternm: crypto_box_afternm,
        crypto_box: crypto_box,
        crypto_box_open: crypto_box_open,
        crypto_box_keypair: crypto_box_keypair,
        crypto_hash: crypto_hash,
        crypto_sign: crypto_sign,
        crypto_sign_keypair: crypto_sign_keypair,
        crypto_sign_open: crypto_sign_open,
        crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
        crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
        crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
        crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
        crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
        crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
        crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
        crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
        crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
        crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
        crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
        crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
        crypto_sign_BYTES: crypto_sign_BYTES,
        crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
        crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
        crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
        crypto_hash_BYTES: crypto_hash_BYTES,
        gf: gf,
        D: D,
        L: L,
        pack25519: pack25519,
        unpack25519: unpack25519,
        M: M,
        A: A,
        S: S,
        Z: Z,
        pow2523: pow2523,
        add: add,
        set25519: set25519,
        modL: modL,
        scalarmult: scalarmult,
        scalarbase: scalarbase
    };
    /* High-level API */ function checkLengths(k, n) {
        if (k.length !== crypto_secretbox_KEYBYTES) throw new Error("bad key size");
        if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error("bad nonce size");
    }
    function checkBoxLengths(pk, sk) {
        if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error("bad public key size");
        if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
    }
    function checkArrayTypes() {
        for(var i = 0; i < arguments.length; i++){
            if (!(arguments[i] instanceof Uint8Array)) throw new TypeError("unexpected type, use Uint8Array");
        }
    }
    function cleanup(arr) {
        for(var i = 0; i < arr.length; i++)arr[i] = 0;
    }
    nacl.randomBytes = function(n) {
        var b = new Uint8Array(n);
        randombytes(b, n);
        return b;
    };
    nacl.secretbox = function(msg, nonce, key) {
        checkArrayTypes(msg, nonce, key);
        checkLengths(key, nonce);
        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
        var c = new Uint8Array(m.length);
        for(var i = 0; i < msg.length; i++)m[i + crypto_secretbox_ZEROBYTES] = msg[i];
        crypto_secretbox(c, m, m.length, nonce, key);
        return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    nacl.secretbox.open = function(box, nonce, key) {
        checkArrayTypes(box, nonce, key);
        checkLengths(key, nonce);
        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
        var m = new Uint8Array(c.length);
        for(var i = 0; i < box.length; i++)c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
        if (c.length < 32) return null;
        if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
        return m.subarray(crypto_secretbox_ZEROBYTES);
    };
    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    nacl.scalarMult = function(n, p) {
        checkArrayTypes(n, p);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        if (p.length !== crypto_scalarmult_BYTES) throw new Error("bad p size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult(q, n, p);
        return q;
    };
    nacl.scalarMult.base = function(n) {
        checkArrayTypes(n);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error("bad n size");
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult_base(q, n);
        return q;
    };
    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    nacl.box = function(msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox(msg, nonce, k);
    };
    nacl.box.before = function(publicKey, secretKey) {
        checkArrayTypes(publicKey, secretKey);
        checkBoxLengths(publicKey, secretKey);
        var k = new Uint8Array(crypto_box_BEFORENMBYTES);
        crypto_box_beforenm(k, publicKey, secretKey);
        return k;
    };
    nacl.box.after = nacl.secretbox;
    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox.open(msg, nonce, k);
    };
    nacl.box.open.after = nacl.secretbox.open;
    nacl.box.keyPair = function() {
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
        crypto_box_keypair(pk, sk);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.box.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        crypto_scalarmult_base(pk, secretKey);
        return {
            publicKey: pk,
            secretKey: new Uint8Array(secretKey)
        };
    };
    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;
    nacl.sign = function(msg, secretKey) {
        checkArrayTypes(msg, secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error("bad secret key size");
        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
        crypto_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
    };
    nacl.sign.open = function(signedMsg, publicKey) {
        checkArrayTypes(signedMsg, publicKey);
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error("bad public key size");
        var tmp = new Uint8Array(signedMsg.length);
        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
        if (mlen < 0) return null;
        var m = new Uint8Array(mlen);
        for(var i = 0; i < m.length; i++)m[i] = tmp[i];
        return m;
    };
    nacl.sign.detached = function(msg, secretKey) {
        var signedMsg = nacl.sign(msg, secretKey);
        var sig = new Uint8Array(crypto_sign_BYTES);
        for(var i = 0; i < sig.length; i++)sig[i] = signedMsg[i];
        return sig;
    };
    nacl.sign.detached.verify = function(msg, sig, publicKey) {
        checkArrayTypes(msg, sig, publicKey);
        if (sig.length !== crypto_sign_BYTES) throw new Error("bad signature size");
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error("bad public key size");
        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
        var m = new Uint8Array(crypto_sign_BYTES + msg.length);
        var i;
        for(i = 0; i < crypto_sign_BYTES; i++)sm[i] = sig[i];
        for(i = 0; i < msg.length; i++)sm[i + crypto_sign_BYTES] = msg[i];
        return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
    };
    nacl.sign.keyPair = function() {
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        crypto_sign_keypair(pk, sk);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error("bad secret key size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        for(var i = 0; i < pk.length; i++)pk[i] = secretKey[32 + i];
        return {
            publicKey: pk,
            secretKey: new Uint8Array(secretKey)
        };
    };
    nacl.sign.keyPair.fromSeed = function(seed) {
        checkArrayTypes(seed);
        if (seed.length !== crypto_sign_SEEDBYTES) throw new Error("bad seed size");
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        for(var i = 0; i < 32; i++)sk[i] = seed[i];
        crypto_sign_keypair(pk, sk, true);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;
    nacl.hash = function(msg) {
        checkArrayTypes(msg);
        var h = new Uint8Array(crypto_hash_BYTES);
        crypto_hash(h, msg, msg.length);
        return h;
    };
    nacl.hash.hashLength = crypto_hash_BYTES;
    nacl.verify = function(x, y) {
        checkArrayTypes(x, y);
        // Zero length arguments are considered not equal.
        if (x.length === 0 || y.length === 0) return false;
        if (x.length !== y.length) return false;
        return vn(x, 0, y, 0, x.length) === 0 ? true : false;
    };
    nacl.setPRNG = function(fn) {
        randombytes = fn;
    };
    (function() {
        // Initialize PRNG if environment provides CSPRNG.
        // If not, methods calling randombytes will throw.
        var crypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
        if (crypto && crypto.getRandomValues) {
            // Browsers.
            var QUOTA = 65536;
            nacl.setPRNG(function(x, n) {
                var i, v = new Uint8Array(n);
                for(i = 0; i < n; i += QUOTA)crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                for(i = 0; i < n; i++)x[i] = v[i];
                cleanup(v);
            });
        } else {
            // Node.js.
            crypto = require("64af052980d605b7");
            if (crypto && crypto.randomBytes) nacl.setPRNG(function(x, n) {
                var i, v = crypto.randomBytes(n);
                for(i = 0; i < n; i++)x[i] = v[i];
                cleanup(v);
            });
        }
    })();
})((0, module.exports) ? module.exports : self.nacl = self.nacl || {});

},{"64af052980d605b7":"jhUEF"}],"lMZqW":[function(require,module,exports) {
var Buffer = require("6a2bb570ceca2cd5").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LiquidityPoolFeeV18 = undefined;
exports.getLiquidityPoolId = getLiquidityPoolId;
var _xdr = require("2103a965c536916f");
var _xdr2 = _interopRequireDefault(_xdr);
var _asset = require("e661fd7fee1b116e");
var _hashing = require("f11c0e1b865d40b4");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).
var LiquidityPoolFeeV18 = exports.LiquidityPoolFeeV18 = 30;
/**
 * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.
 *
 * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)
 *
 * @export
 * @param {string} liquidityPoolType – A string representing the liquidity pool type.
 * @param {object} liquidityPoolParameters        – The liquidity pool parameters.
 * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.
 * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.
 * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.
 *
 * @return {Buffer} the raw Pool ID buffer, which can be stringfied with `toString('hex')`
 */ function getLiquidityPoolId(liquidityPoolType) {
    var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (liquidityPoolType !== "constant_product") throw new Error("liquidityPoolType is invalid");
    var assetA = liquidityPoolParameters.assetA, assetB = liquidityPoolParameters.assetB, fee = liquidityPoolParameters.fee;
    if (!assetA || !(assetA instanceof _asset.Asset)) throw new Error("assetA is invalid");
    if (!assetB || !(assetB instanceof _asset.Asset)) throw new Error("assetB is invalid");
    if (!fee || fee !== LiquidityPoolFeeV18) throw new Error("fee is invalid");
    if (_asset.Asset.compare(assetA, assetB) !== -1) throw new Error("Assets are not in lexicographic order");
    var lpTypeData = _xdr2.default.LiquidityPoolType.liquidityPoolConstantProduct().toXDR();
    var lpParamsData = new _xdr2.default.LiquidityPoolConstantProductParameters({
        assetA: assetA.toXDRObject(),
        assetB: assetB.toXDRObject(),
        fee: fee
    }).toXDR();
    var payload = Buffer.concat([
        lpTypeData,
        lpParamsData
    ]);
    return (0, _hashing.hash)(payload);
}

},{"6a2bb570ceca2cd5":"fCgem","2103a965c536916f":"gxpVH","e661fd7fee1b116e":"hLdvN","f11c0e1b865d40b4":"efCju"}],"gxpVH":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _curr_generated = require("a988adc53eb094b7");
var _curr_generated2 = _interopRequireDefault(_curr_generated);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = _curr_generated2.default;

},{"a988adc53eb094b7":"5ObFb"}],"5ObFb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsXdr = require("d01885dbe8229bd0");
var XDR = _interopRequireWildcard(_jsXdr);
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
        newObj.default = obj;
        return newObj;
    }
}
var types = XDR.config(function(xdr) {
    // === xdr source ============================================================
    //
    //   typedef opaque Value<>;
    //
    // ===========================================================================
    xdr.typedef("Value", xdr.varOpaque());
    // === xdr source ============================================================
    //
    //   struct SCPBallot
    //   {
    //       uint32 counter; // n
    //       Value value;    // x
    //   };
    //
    // ===========================================================================
    xdr.struct("ScpBallot", [
        [
            "counter",
            xdr.lookup("Uint32")
        ],
        [
            "value",
            xdr.lookup("Value")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum SCPStatementType
    //   {
    //       SCP_ST_PREPARE = 0,
    //       SCP_ST_CONFIRM = 1,
    //       SCP_ST_EXTERNALIZE = 2,
    //       SCP_ST_NOMINATE = 3
    //   };
    //
    // ===========================================================================
    xdr.enum("ScpStatementType", {
        scpStPrepare: 0,
        scpStConfirm: 1,
        scpStExternalize: 2,
        scpStNominate: 3
    });
    // === xdr source ============================================================
    //
    //   struct SCPNomination
    //   {
    //       Hash quorumSetHash; // D
    //       Value votes<>;      // X
    //       Value accepted<>;   // Y
    //   };
    //
    // ===========================================================================
    xdr.struct("ScpNomination", [
        [
            "quorumSetHash",
            xdr.lookup("Hash")
        ],
        [
            "votes",
            xdr.varArray(xdr.lookup("Value"), 2147483647)
        ],
        [
            "accepted",
            xdr.varArray(xdr.lookup("Value"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //           {
    //               Hash quorumSetHash;       // D
    //               SCPBallot ballot;         // b
    //               SCPBallot* prepared;      // p
    //               SCPBallot* preparedPrime; // p'
    //               uint32 nC;                // c.n
    //               uint32 nH;                // h.n
    //           }
    //
    // ===========================================================================
    xdr.struct("ScpStatementPrepare", [
        [
            "quorumSetHash",
            xdr.lookup("Hash")
        ],
        [
            "ballot",
            xdr.lookup("ScpBallot")
        ],
        [
            "prepared",
            xdr.option(xdr.lookup("ScpBallot"))
        ],
        [
            "preparedPrime",
            xdr.option(xdr.lookup("ScpBallot"))
        ],
        [
            "nC",
            xdr.lookup("Uint32")
        ],
        [
            "nH",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //           {
    //               SCPBallot ballot;   // b
    //               uint32 nPrepared;   // p.n
    //               uint32 nCommit;     // c.n
    //               uint32 nH;          // h.n
    //               Hash quorumSetHash; // D
    //           }
    //
    // ===========================================================================
    xdr.struct("ScpStatementConfirm", [
        [
            "ballot",
            xdr.lookup("ScpBallot")
        ],
        [
            "nPrepared",
            xdr.lookup("Uint32")
        ],
        [
            "nCommit",
            xdr.lookup("Uint32")
        ],
        [
            "nH",
            xdr.lookup("Uint32")
        ],
        [
            "quorumSetHash",
            xdr.lookup("Hash")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //           {
    //               SCPBallot commit;         // c
    //               uint32 nH;                // h.n
    //               Hash commitQuorumSetHash; // D used before EXTERNALIZE
    //           }
    //
    // ===========================================================================
    xdr.struct("ScpStatementExternalize", [
        [
            "commit",
            xdr.lookup("ScpBallot")
        ],
        [
            "nH",
            xdr.lookup("Uint32")
        ],
        [
            "commitQuorumSetHash",
            xdr.lookup("Hash")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (SCPStatementType type)
    //       {
    //       case SCP_ST_PREPARE:
    //           struct
    //           {
    //               Hash quorumSetHash;       // D
    //               SCPBallot ballot;         // b
    //               SCPBallot* prepared;      // p
    //               SCPBallot* preparedPrime; // p'
    //               uint32 nC;                // c.n
    //               uint32 nH;                // h.n
    //           } prepare;
    //       case SCP_ST_CONFIRM:
    //           struct
    //           {
    //               SCPBallot ballot;   // b
    //               uint32 nPrepared;   // p.n
    //               uint32 nCommit;     // c.n
    //               uint32 nH;          // h.n
    //               Hash quorumSetHash; // D
    //           } confirm;
    //       case SCP_ST_EXTERNALIZE:
    //           struct
    //           {
    //               SCPBallot commit;         // c
    //               uint32 nH;                // h.n
    //               Hash commitQuorumSetHash; // D used before EXTERNALIZE
    //           } externalize;
    //       case SCP_ST_NOMINATE:
    //           SCPNomination nominate;
    //       }
    //
    // ===========================================================================
    xdr.union("ScpStatementPledges", {
        switchOn: xdr.lookup("ScpStatementType"),
        switchName: "type",
        switches: [
            [
                "scpStPrepare",
                "prepare"
            ],
            [
                "scpStConfirm",
                "confirm"
            ],
            [
                "scpStExternalize",
                "externalize"
            ],
            [
                "scpStNominate",
                "nominate"
            ]
        ],
        arms: {
            prepare: xdr.lookup("ScpStatementPrepare"),
            confirm: xdr.lookup("ScpStatementConfirm"),
            externalize: xdr.lookup("ScpStatementExternalize"),
            nominate: xdr.lookup("ScpNomination")
        }
    });
    // === xdr source ============================================================
    //
    //   struct SCPStatement
    //   {
    //       NodeID nodeID;    // v
    //       uint64 slotIndex; // i
    //   
    //       union switch (SCPStatementType type)
    //       {
    //       case SCP_ST_PREPARE:
    //           struct
    //           {
    //               Hash quorumSetHash;       // D
    //               SCPBallot ballot;         // b
    //               SCPBallot* prepared;      // p
    //               SCPBallot* preparedPrime; // p'
    //               uint32 nC;                // c.n
    //               uint32 nH;                // h.n
    //           } prepare;
    //       case SCP_ST_CONFIRM:
    //           struct
    //           {
    //               SCPBallot ballot;   // b
    //               uint32 nPrepared;   // p.n
    //               uint32 nCommit;     // c.n
    //               uint32 nH;          // h.n
    //               Hash quorumSetHash; // D
    //           } confirm;
    //       case SCP_ST_EXTERNALIZE:
    //           struct
    //           {
    //               SCPBallot commit;         // c
    //               uint32 nH;                // h.n
    //               Hash commitQuorumSetHash; // D used before EXTERNALIZE
    //           } externalize;
    //       case SCP_ST_NOMINATE:
    //           SCPNomination nominate;
    //       }
    //       pledges;
    //   };
    //
    // ===========================================================================
    xdr.struct("ScpStatement", [
        [
            "nodeId",
            xdr.lookup("NodeId")
        ],
        [
            "slotIndex",
            xdr.lookup("Uint64")
        ],
        [
            "pledges",
            xdr.lookup("ScpStatementPledges")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SCPEnvelope
    //   {
    //       SCPStatement statement;
    //       Signature signature;
    //   };
    //
    // ===========================================================================
    xdr.struct("ScpEnvelope", [
        [
            "statement",
            xdr.lookup("ScpStatement")
        ],
        [
            "signature",
            xdr.lookup("Signature")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SCPQuorumSet
    //   {
    //       uint32 threshold;
    //       NodeID validators<>;
    //       SCPQuorumSet innerSets<>;
    //   };
    //
    // ===========================================================================
    xdr.struct("ScpQuorumSet", [
        [
            "threshold",
            xdr.lookup("Uint32")
        ],
        [
            "validators",
            xdr.varArray(xdr.lookup("NodeId"), 2147483647)
        ],
        [
            "innerSets",
            xdr.varArray(xdr.lookup("ScpQuorumSet"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   typedef PublicKey AccountID;
    //
    // ===========================================================================
    xdr.typedef("AccountId", xdr.lookup("PublicKey"));
    // === xdr source ============================================================
    //
    //   typedef opaque Thresholds[4];
    //
    // ===========================================================================
    xdr.typedef("Thresholds", xdr.opaque(4));
    // === xdr source ============================================================
    //
    //   typedef string string32<32>;
    //
    // ===========================================================================
    xdr.typedef("String32", xdr.string(32));
    // === xdr source ============================================================
    //
    //   typedef string string64<64>;
    //
    // ===========================================================================
    xdr.typedef("String64", xdr.string(64));
    // === xdr source ============================================================
    //
    //   typedef int64 SequenceNumber;
    //
    // ===========================================================================
    xdr.typedef("SequenceNumber", xdr.lookup("Int64"));
    // === xdr source ============================================================
    //
    //   typedef uint64 TimePoint;
    //
    // ===========================================================================
    xdr.typedef("TimePoint", xdr.lookup("Uint64"));
    // === xdr source ============================================================
    //
    //   typedef uint64 Duration;
    //
    // ===========================================================================
    xdr.typedef("Duration", xdr.lookup("Uint64"));
    // === xdr source ============================================================
    //
    //   typedef opaque DataValue<64>;
    //
    // ===========================================================================
    xdr.typedef("DataValue", xdr.varOpaque(64));
    // === xdr source ============================================================
    //
    //   typedef Hash PoolID;
    //
    // ===========================================================================
    xdr.typedef("PoolId", xdr.lookup("Hash"));
    // === xdr source ============================================================
    //
    //   typedef opaque AssetCode4[4];
    //
    // ===========================================================================
    xdr.typedef("AssetCode4", xdr.opaque(4));
    // === xdr source ============================================================
    //
    //   typedef opaque AssetCode12[12];
    //
    // ===========================================================================
    xdr.typedef("AssetCode12", xdr.opaque(12));
    // === xdr source ============================================================
    //
    //   enum AssetType
    //   {
    //       ASSET_TYPE_NATIVE = 0,
    //       ASSET_TYPE_CREDIT_ALPHANUM4 = 1,
    //       ASSET_TYPE_CREDIT_ALPHANUM12 = 2,
    //       ASSET_TYPE_POOL_SHARE = 3
    //   };
    //
    // ===========================================================================
    xdr.enum("AssetType", {
        assetTypeNative: 0,
        assetTypeCreditAlphanum4: 1,
        assetTypeCreditAlphanum12: 2,
        assetTypePoolShare: 3
    });
    // === xdr source ============================================================
    //
    //   union AssetCode switch (AssetType type)
    //   {
    //   case ASSET_TYPE_CREDIT_ALPHANUM4:
    //       AssetCode4 assetCode4;
    //   
    //   case ASSET_TYPE_CREDIT_ALPHANUM12:
    //       AssetCode12 assetCode12;
    //   
    //       // add other asset types here in the future
    //   };
    //
    // ===========================================================================
    xdr.union("AssetCode", {
        switchOn: xdr.lookup("AssetType"),
        switchName: "type",
        switches: [
            [
                "assetTypeCreditAlphanum4",
                "assetCode4"
            ],
            [
                "assetTypeCreditAlphanum12",
                "assetCode12"
            ]
        ],
        arms: {
            assetCode4: xdr.lookup("AssetCode4"),
            assetCode12: xdr.lookup("AssetCode12")
        }
    });
    // === xdr source ============================================================
    //
    //   struct AlphaNum4
    //   {
    //       AssetCode4 assetCode;
    //       AccountID issuer;
    //   };
    //
    // ===========================================================================
    xdr.struct("AlphaNum4", [
        [
            "assetCode",
            xdr.lookup("AssetCode4")
        ],
        [
            "issuer",
            xdr.lookup("AccountId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct AlphaNum12
    //   {
    //       AssetCode12 assetCode;
    //       AccountID issuer;
    //   };
    //
    // ===========================================================================
    xdr.struct("AlphaNum12", [
        [
            "assetCode",
            xdr.lookup("AssetCode12")
        ],
        [
            "issuer",
            xdr.lookup("AccountId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union Asset switch (AssetType type)
    //   {
    //   case ASSET_TYPE_NATIVE: // Not credit
    //       void;
    //   
    //   case ASSET_TYPE_CREDIT_ALPHANUM4:
    //       AlphaNum4 alphaNum4;
    //   
    //   case ASSET_TYPE_CREDIT_ALPHANUM12:
    //       AlphaNum12 alphaNum12;
    //   
    //       // add other asset types here in the future
    //   };
    //
    // ===========================================================================
    xdr.union("Asset", {
        switchOn: xdr.lookup("AssetType"),
        switchName: "type",
        switches: [
            [
                "assetTypeNative",
                xdr.void()
            ],
            [
                "assetTypeCreditAlphanum4",
                "alphaNum4"
            ],
            [
                "assetTypeCreditAlphanum12",
                "alphaNum12"
            ]
        ],
        arms: {
            alphaNum4: xdr.lookup("AlphaNum4"),
            alphaNum12: xdr.lookup("AlphaNum12")
        }
    });
    // === xdr source ============================================================
    //
    //   struct Price
    //   {
    //       int32 n; // numerator
    //       int32 d; // denominator
    //   };
    //
    // ===========================================================================
    xdr.struct("Price", [
        [
            "n",
            xdr.lookup("Int32")
        ],
        [
            "d",
            xdr.lookup("Int32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct Liabilities
    //   {
    //       int64 buying;
    //       int64 selling;
    //   };
    //
    // ===========================================================================
    xdr.struct("Liabilities", [
        [
            "buying",
            xdr.lookup("Int64")
        ],
        [
            "selling",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum ThresholdIndexes
    //   {
    //       THRESHOLD_MASTER_WEIGHT = 0,
    //       THRESHOLD_LOW = 1,
    //       THRESHOLD_MED = 2,
    //       THRESHOLD_HIGH = 3
    //   };
    //
    // ===========================================================================
    xdr.enum("ThresholdIndices", {
        thresholdMasterWeight: 0,
        thresholdLow: 1,
        thresholdMed: 2,
        thresholdHigh: 3
    });
    // === xdr source ============================================================
    //
    //   enum LedgerEntryType
    //   {
    //       ACCOUNT = 0,
    //       TRUSTLINE = 1,
    //       OFFER = 2,
    //       DATA = 3,
    //       CLAIMABLE_BALANCE = 4,
    //       LIQUIDITY_POOL = 5
    //   };
    //
    // ===========================================================================
    xdr.enum("LedgerEntryType", {
        account: 0,
        trustline: 1,
        offer: 2,
        data: 3,
        claimableBalance: 4,
        liquidityPool: 5
    });
    // === xdr source ============================================================
    //
    //   struct Signer
    //   {
    //       SignerKey key;
    //       uint32 weight; // really only need 1 byte
    //   };
    //
    // ===========================================================================
    xdr.struct("Signer", [
        [
            "key",
            xdr.lookup("SignerKey")
        ],
        [
            "weight",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum AccountFlags
    //   { // masks for each flag
    //   
    //       // Flags set on issuer accounts
    //       // TrustLines are created with authorized set to "false" requiring
    //       // the issuer to set it for each TrustLine
    //       AUTH_REQUIRED_FLAG = 0x1,
    //       // If set, the authorized flag in TrustLines can be cleared
    //       // otherwise, authorization cannot be revoked
    //       AUTH_REVOCABLE_FLAG = 0x2,
    //       // Once set, causes all AUTH_* flags to be read-only
    //       AUTH_IMMUTABLE_FLAG = 0x4,
    //       // Trustlines are created with clawback enabled set to "true",
    //       // and claimable balances created from those trustlines are created
    //       // with clawback enabled set to "true"
    //       AUTH_CLAWBACK_ENABLED_FLAG = 0x8
    //   };
    //
    // ===========================================================================
    xdr.enum("AccountFlags", {
        authRequiredFlag: 1,
        authRevocableFlag: 2,
        authImmutableFlag: 4,
        authClawbackEnabledFlag: 8
    });
    // === xdr source ============================================================
    //
    //   const MASK_ACCOUNT_FLAGS = 0x7;
    //
    // ===========================================================================
    xdr.const("MASK_ACCOUNT_FLAGS", 0x7);
    // === xdr source ============================================================
    //
    //   const MASK_ACCOUNT_FLAGS_V17 = 0xF;
    //
    // ===========================================================================
    xdr.const("MASK_ACCOUNT_FLAGS_V17", 0xF);
    // === xdr source ============================================================
    //
    //   const MAX_SIGNERS = 20;
    //
    // ===========================================================================
    xdr.const("MAX_SIGNERS", 20);
    // === xdr source ============================================================
    //
    //   typedef AccountID* SponsorshipDescriptor;
    //
    // ===========================================================================
    xdr.typedef("SponsorshipDescriptor", xdr.option(xdr.lookup("AccountId")));
    // === xdr source ============================================================
    //
    //   struct AccountEntryExtensionV3
    //   {
    //       // We can use this to add more fields, or because it is first, to
    //       // change AccountEntryExtensionV3 into a union.
    //       ExtensionPoint ext;
    //   
    //       // Ledger number at which `seqNum` took on its present value.
    //       uint32 seqLedger;
    //   
    //       // Time at which `seqNum` took on its present value.
    //       TimePoint seqTime;
    //   };
    //
    // ===========================================================================
    xdr.struct("AccountEntryExtensionV3", [
        [
            "ext",
            xdr.lookup("ExtensionPoint")
        ],
        [
            "seqLedger",
            xdr.lookup("Uint32")
        ],
        [
            "seqTime",
            xdr.lookup("TimePoint")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 3:
    //           AccountEntryExtensionV3 v3;
    //       }
    //
    // ===========================================================================
    xdr.union("AccountEntryExtensionV2Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                3,
                "v3"
            ]
        ],
        arms: {
            v3: xdr.lookup("AccountEntryExtensionV3")
        }
    });
    // === xdr source ============================================================
    //
    //   struct AccountEntryExtensionV2
    //   {
    //       uint32 numSponsored;
    //       uint32 numSponsoring;
    //       SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;
    //   
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 3:
    //           AccountEntryExtensionV3 v3;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("AccountEntryExtensionV2", [
        [
            "numSponsored",
            xdr.lookup("Uint32")
        ],
        [
            "numSponsoring",
            xdr.lookup("Uint32")
        ],
        [
            "signerSponsoringIDs",
            xdr.varArray(xdr.lookup("SponsorshipDescriptor"), xdr.lookup("MAX_SIGNERS"))
        ],
        [
            "ext",
            xdr.lookup("AccountEntryExtensionV2Ext")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 2:
    //           AccountEntryExtensionV2 v2;
    //       }
    //
    // ===========================================================================
    xdr.union("AccountEntryExtensionV1Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                2,
                "v2"
            ]
        ],
        arms: {
            v2: xdr.lookup("AccountEntryExtensionV2")
        }
    });
    // === xdr source ============================================================
    //
    //   struct AccountEntryExtensionV1
    //   {
    //       Liabilities liabilities;
    //   
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 2:
    //           AccountEntryExtensionV2 v2;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("AccountEntryExtensionV1", [
        [
            "liabilities",
            xdr.lookup("Liabilities")
        ],
        [
            "ext",
            xdr.lookup("AccountEntryExtensionV1Ext")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           AccountEntryExtensionV1 v1;
    //       }
    //
    // ===========================================================================
    xdr.union("AccountEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                1,
                "v1"
            ]
        ],
        arms: {
            v1: xdr.lookup("AccountEntryExtensionV1")
        }
    });
    // === xdr source ============================================================
    //
    //   struct AccountEntry
    //   {
    //       AccountID accountID;      // master public key for this account
    //       int64 balance;            // in stroops
    //       SequenceNumber seqNum;    // last sequence number used for this account
    //       uint32 numSubEntries;     // number of sub-entries this account has
    //                                 // drives the reserve
    //       AccountID* inflationDest; // Account to vote for during inflation
    //       uint32 flags;             // see AccountFlags
    //   
    //       string32 homeDomain; // can be used for reverse federation and memo lookup
    //   
    //       // fields used for signatures
    //       // thresholds stores unsigned bytes: [weight of master|low|medium|high]
    //       Thresholds thresholds;
    //   
    //       Signer signers<MAX_SIGNERS>; // possible signers for this account
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           AccountEntryExtensionV1 v1;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("AccountEntry", [
        [
            "accountId",
            xdr.lookup("AccountId")
        ],
        [
            "balance",
            xdr.lookup("Int64")
        ],
        [
            "seqNum",
            xdr.lookup("SequenceNumber")
        ],
        [
            "numSubEntries",
            xdr.lookup("Uint32")
        ],
        [
            "inflationDest",
            xdr.option(xdr.lookup("AccountId"))
        ],
        [
            "flags",
            xdr.lookup("Uint32")
        ],
        [
            "homeDomain",
            xdr.lookup("String32")
        ],
        [
            "thresholds",
            xdr.lookup("Thresholds")
        ],
        [
            "signers",
            xdr.varArray(xdr.lookup("Signer"), xdr.lookup("MAX_SIGNERS"))
        ],
        [
            "ext",
            xdr.lookup("AccountEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum TrustLineFlags
    //   {
    //       // issuer has authorized account to perform transactions with its credit
    //       AUTHORIZED_FLAG = 1,
    //       // issuer has authorized account to maintain and reduce liabilities for its
    //       // credit
    //       AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG = 2,
    //       // issuer has specified that it may clawback its credit, and that claimable
    //       // balances created with its credit may also be clawed back
    //       TRUSTLINE_CLAWBACK_ENABLED_FLAG = 4
    //   };
    //
    // ===========================================================================
    xdr.enum("TrustLineFlags", {
        authorizedFlag: 1,
        authorizedToMaintainLiabilitiesFlag: 2,
        trustlineClawbackEnabledFlag: 4
    });
    // === xdr source ============================================================
    //
    //   const MASK_TRUSTLINE_FLAGS = 1;
    //
    // ===========================================================================
    xdr.const("MASK_TRUSTLINE_FLAGS", 1);
    // === xdr source ============================================================
    //
    //   const MASK_TRUSTLINE_FLAGS_V13 = 3;
    //
    // ===========================================================================
    xdr.const("MASK_TRUSTLINE_FLAGS_V13", 3);
    // === xdr source ============================================================
    //
    //   const MASK_TRUSTLINE_FLAGS_V17 = 7;
    //
    // ===========================================================================
    xdr.const("MASK_TRUSTLINE_FLAGS_V17", 7);
    // === xdr source ============================================================
    //
    //   enum LiquidityPoolType
    //   {
    //       LIQUIDITY_POOL_CONSTANT_PRODUCT = 0
    //   };
    //
    // ===========================================================================
    xdr.enum("LiquidityPoolType", {
        liquidityPoolConstantProduct: 0
    });
    // === xdr source ============================================================
    //
    //   union TrustLineAsset switch (AssetType type)
    //   {
    //   case ASSET_TYPE_NATIVE: // Not credit
    //       void;
    //   
    //   case ASSET_TYPE_CREDIT_ALPHANUM4:
    //       AlphaNum4 alphaNum4;
    //   
    //   case ASSET_TYPE_CREDIT_ALPHANUM12:
    //       AlphaNum12 alphaNum12;
    //   
    //   case ASSET_TYPE_POOL_SHARE:
    //       PoolID liquidityPoolID;
    //   
    //       // add other asset types here in the future
    //   };
    //
    // ===========================================================================
    xdr.union("TrustLineAsset", {
        switchOn: xdr.lookup("AssetType"),
        switchName: "type",
        switches: [
            [
                "assetTypeNative",
                xdr.void()
            ],
            [
                "assetTypeCreditAlphanum4",
                "alphaNum4"
            ],
            [
                "assetTypeCreditAlphanum12",
                "alphaNum12"
            ],
            [
                "assetTypePoolShare",
                "liquidityPoolId"
            ]
        ],
        arms: {
            alphaNum4: xdr.lookup("AlphaNum4"),
            alphaNum12: xdr.lookup("AlphaNum12"),
            liquidityPoolId: xdr.lookup("PoolId")
        }
    });
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("TrustLineEntryExtensionV2Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct TrustLineEntryExtensionV2
    //   {
    //       int32 liquidityPoolUseCount;
    //   
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("TrustLineEntryExtensionV2", [
        [
            "liquidityPoolUseCount",
            xdr.lookup("Int32")
        ],
        [
            "ext",
            xdr.lookup("TrustLineEntryExtensionV2Ext")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //               {
    //               case 0:
    //                   void;
    //               case 2:
    //                   TrustLineEntryExtensionV2 v2;
    //               }
    //
    // ===========================================================================
    xdr.union("TrustLineEntryV1Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                2,
                "v2"
            ]
        ],
        arms: {
            v2: xdr.lookup("TrustLineEntryExtensionV2")
        }
    });
    // === xdr source ============================================================
    //
    //   struct
    //           {
    //               Liabilities liabilities;
    //   
    //               union switch (int v)
    //               {
    //               case 0:
    //                   void;
    //               case 2:
    //                   TrustLineEntryExtensionV2 v2;
    //               }
    //               ext;
    //           }
    //
    // ===========================================================================
    xdr.struct("TrustLineEntryV1", [
        [
            "liabilities",
            xdr.lookup("Liabilities")
        ],
        [
            "ext",
            xdr.lookup("TrustLineEntryV1Ext")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           struct
    //           {
    //               Liabilities liabilities;
    //   
    //               union switch (int v)
    //               {
    //               case 0:
    //                   void;
    //               case 2:
    //                   TrustLineEntryExtensionV2 v2;
    //               }
    //               ext;
    //           } v1;
    //       }
    //
    // ===========================================================================
    xdr.union("TrustLineEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                1,
                "v1"
            ]
        ],
        arms: {
            v1: xdr.lookup("TrustLineEntryV1")
        }
    });
    // === xdr source ============================================================
    //
    //   struct TrustLineEntry
    //   {
    //       AccountID accountID;  // account this trustline belongs to
    //       TrustLineAsset asset; // type of asset (with issuer)
    //       int64 balance;        // how much of this asset the user has.
    //                             // Asset defines the unit for this;
    //   
    //       int64 limit;  // balance cannot be above this
    //       uint32 flags; // see TrustLineFlags
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           struct
    //           {
    //               Liabilities liabilities;
    //   
    //               union switch (int v)
    //               {
    //               case 0:
    //                   void;
    //               case 2:
    //                   TrustLineEntryExtensionV2 v2;
    //               }
    //               ext;
    //           } v1;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("TrustLineEntry", [
        [
            "accountId",
            xdr.lookup("AccountId")
        ],
        [
            "asset",
            xdr.lookup("TrustLineAsset")
        ],
        [
            "balance",
            xdr.lookup("Int64")
        ],
        [
            "limit",
            xdr.lookup("Int64")
        ],
        [
            "flags",
            xdr.lookup("Uint32")
        ],
        [
            "ext",
            xdr.lookup("TrustLineEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum OfferEntryFlags
    //   {
    //       // an offer with this flag will not act on and take a reverse offer of equal
    //       // price
    //       PASSIVE_FLAG = 1
    //   };
    //
    // ===========================================================================
    xdr.enum("OfferEntryFlags", {
        passiveFlag: 1
    });
    // === xdr source ============================================================
    //
    //   const MASK_OFFERENTRY_FLAGS = 1;
    //
    // ===========================================================================
    xdr.const("MASK_OFFERENTRY_FLAGS", 1);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("OfferEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct OfferEntry
    //   {
    //       AccountID sellerID;
    //       int64 offerID;
    //       Asset selling; // A
    //       Asset buying;  // B
    //       int64 amount;  // amount of A
    //   
    //       /* price for this offer:
    //           price of A in terms of B
    //           price=AmountB/AmountA=priceNumerator/priceDenominator
    //           price is after fees
    //       */
    //       Price price;
    //       uint32 flags; // see OfferEntryFlags
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("OfferEntry", [
        [
            "sellerId",
            xdr.lookup("AccountId")
        ],
        [
            "offerId",
            xdr.lookup("Int64")
        ],
        [
            "selling",
            xdr.lookup("Asset")
        ],
        [
            "buying",
            xdr.lookup("Asset")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ],
        [
            "price",
            xdr.lookup("Price")
        ],
        [
            "flags",
            xdr.lookup("Uint32")
        ],
        [
            "ext",
            xdr.lookup("OfferEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("DataEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct DataEntry
    //   {
    //       AccountID accountID; // account this data belongs to
    //       string64 dataName;
    //       DataValue dataValue;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("DataEntry", [
        [
            "accountId",
            xdr.lookup("AccountId")
        ],
        [
            "dataName",
            xdr.lookup("String64")
        ],
        [
            "dataValue",
            xdr.lookup("DataValue")
        ],
        [
            "ext",
            xdr.lookup("DataEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum ClaimPredicateType
    //   {
    //       CLAIM_PREDICATE_UNCONDITIONAL = 0,
    //       CLAIM_PREDICATE_AND = 1,
    //       CLAIM_PREDICATE_OR = 2,
    //       CLAIM_PREDICATE_NOT = 3,
    //       CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME = 4,
    //       CLAIM_PREDICATE_BEFORE_RELATIVE_TIME = 5
    //   };
    //
    // ===========================================================================
    xdr.enum("ClaimPredicateType", {
        claimPredicateUnconditional: 0,
        claimPredicateAnd: 1,
        claimPredicateOr: 2,
        claimPredicateNot: 3,
        claimPredicateBeforeAbsoluteTime: 4,
        claimPredicateBeforeRelativeTime: 5
    });
    // === xdr source ============================================================
    //
    //   union ClaimPredicate switch (ClaimPredicateType type)
    //   {
    //   case CLAIM_PREDICATE_UNCONDITIONAL:
    //       void;
    //   case CLAIM_PREDICATE_AND:
    //       ClaimPredicate andPredicates<2>;
    //   case CLAIM_PREDICATE_OR:
    //       ClaimPredicate orPredicates<2>;
    //   case CLAIM_PREDICATE_NOT:
    //       ClaimPredicate* notPredicate;
    //   case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
    //       int64 absBefore; // Predicate will be true if closeTime < absBefore
    //   case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
    //       int64 relBefore; // Seconds since closeTime of the ledger in which the
    //                        // ClaimableBalanceEntry was created
    //   };
    //
    // ===========================================================================
    xdr.union("ClaimPredicate", {
        switchOn: xdr.lookup("ClaimPredicateType"),
        switchName: "type",
        switches: [
            [
                "claimPredicateUnconditional",
                xdr.void()
            ],
            [
                "claimPredicateAnd",
                "andPredicates"
            ],
            [
                "claimPredicateOr",
                "orPredicates"
            ],
            [
                "claimPredicateNot",
                "notPredicate"
            ],
            [
                "claimPredicateBeforeAbsoluteTime",
                "absBefore"
            ],
            [
                "claimPredicateBeforeRelativeTime",
                "relBefore"
            ]
        ],
        arms: {
            andPredicates: xdr.varArray(xdr.lookup("ClaimPredicate"), 2),
            orPredicates: xdr.varArray(xdr.lookup("ClaimPredicate"), 2),
            notPredicate: xdr.option(xdr.lookup("ClaimPredicate")),
            absBefore: xdr.lookup("Int64"),
            relBefore: xdr.lookup("Int64")
        }
    });
    // === xdr source ============================================================
    //
    //   enum ClaimantType
    //   {
    //       CLAIMANT_TYPE_V0 = 0
    //   };
    //
    // ===========================================================================
    xdr.enum("ClaimantType", {
        claimantTypeV0: 0
    });
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID destination;    // The account that can use this condition
    //           ClaimPredicate predicate; // Claimable if predicate is true
    //       }
    //
    // ===========================================================================
    xdr.struct("ClaimantV0", [
        [
            "destination",
            xdr.lookup("AccountId")
        ],
        [
            "predicate",
            xdr.lookup("ClaimPredicate")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union Claimant switch (ClaimantType type)
    //   {
    //   case CLAIMANT_TYPE_V0:
    //       struct
    //       {
    //           AccountID destination;    // The account that can use this condition
    //           ClaimPredicate predicate; // Claimable if predicate is true
    //       } v0;
    //   };
    //
    // ===========================================================================
    xdr.union("Claimant", {
        switchOn: xdr.lookup("ClaimantType"),
        switchName: "type",
        switches: [
            [
                "claimantTypeV0",
                "v0"
            ]
        ],
        arms: {
            v0: xdr.lookup("ClaimantV0")
        }
    });
    // === xdr source ============================================================
    //
    //   enum ClaimableBalanceIDType
    //   {
    //       CLAIMABLE_BALANCE_ID_TYPE_V0 = 0
    //   };
    //
    // ===========================================================================
    xdr.enum("ClaimableBalanceIdType", {
        claimableBalanceIdTypeV0: 0
    });
    // === xdr source ============================================================
    //
    //   union ClaimableBalanceID switch (ClaimableBalanceIDType type)
    //   {
    //   case CLAIMABLE_BALANCE_ID_TYPE_V0:
    //       Hash v0;
    //   };
    //
    // ===========================================================================
    xdr.union("ClaimableBalanceId", {
        switchOn: xdr.lookup("ClaimableBalanceIdType"),
        switchName: "type",
        switches: [
            [
                "claimableBalanceIdTypeV0",
                "v0"
            ]
        ],
        arms: {
            v0: xdr.lookup("Hash")
        }
    });
    // === xdr source ============================================================
    //
    //   enum ClaimableBalanceFlags
    //   {
    //       // If set, the issuer account of the asset held by the claimable balance may
    //       // clawback the claimable balance
    //       CLAIMABLE_BALANCE_CLAWBACK_ENABLED_FLAG = 0x1
    //   };
    //
    // ===========================================================================
    xdr.enum("ClaimableBalanceFlags", {
        claimableBalanceClawbackEnabledFlag: 1
    });
    // === xdr source ============================================================
    //
    //   const MASK_CLAIMABLE_BALANCE_FLAGS = 0x1;
    //
    // ===========================================================================
    xdr.const("MASK_CLAIMABLE_BALANCE_FLAGS", 0x1);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("ClaimableBalanceEntryExtensionV1Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct ClaimableBalanceEntryExtensionV1
    //   {
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   
    //       uint32 flags; // see ClaimableBalanceFlags
    //   };
    //
    // ===========================================================================
    xdr.struct("ClaimableBalanceEntryExtensionV1", [
        [
            "ext",
            xdr.lookup("ClaimableBalanceEntryExtensionV1Ext")
        ],
        [
            "flags",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           ClaimableBalanceEntryExtensionV1 v1;
    //       }
    //
    // ===========================================================================
    xdr.union("ClaimableBalanceEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                1,
                "v1"
            ]
        ],
        arms: {
            v1: xdr.lookup("ClaimableBalanceEntryExtensionV1")
        }
    });
    // === xdr source ============================================================
    //
    //   struct ClaimableBalanceEntry
    //   {
    //       // Unique identifier for this ClaimableBalanceEntry
    //       ClaimableBalanceID balanceID;
    //   
    //       // List of claimants with associated predicate
    //       Claimant claimants<10>;
    //   
    //       // Any asset including native
    //       Asset asset;
    //   
    //       // Amount of asset
    //       int64 amount;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           ClaimableBalanceEntryExtensionV1 v1;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("ClaimableBalanceEntry", [
        [
            "balanceId",
            xdr.lookup("ClaimableBalanceId")
        ],
        [
            "claimants",
            xdr.varArray(xdr.lookup("Claimant"), 10)
        ],
        [
            "asset",
            xdr.lookup("Asset")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ],
        [
            "ext",
            xdr.lookup("ClaimableBalanceEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct LiquidityPoolConstantProductParameters
    //   {
    //       Asset assetA; // assetA < assetB
    //       Asset assetB;
    //       int32 fee; // Fee is in basis points, so the actual rate is (fee/100)%
    //   };
    //
    // ===========================================================================
    xdr.struct("LiquidityPoolConstantProductParameters", [
        [
            "assetA",
            xdr.lookup("Asset")
        ],
        [
            "assetB",
            xdr.lookup("Asset")
        ],
        [
            "fee",
            xdr.lookup("Int32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //           {
    //               LiquidityPoolConstantProductParameters params;
    //   
    //               int64 reserveA;        // amount of A in the pool
    //               int64 reserveB;        // amount of B in the pool
    //               int64 totalPoolShares; // total number of pool shares issued
    //               int64 poolSharesTrustLineCount; // number of trust lines for the
    //                                               // associated pool shares
    //           }
    //
    // ===========================================================================
    xdr.struct("LiquidityPoolEntryConstantProduct", [
        [
            "params",
            xdr.lookup("LiquidityPoolConstantProductParameters")
        ],
        [
            "reserveA",
            xdr.lookup("Int64")
        ],
        [
            "reserveB",
            xdr.lookup("Int64")
        ],
        [
            "totalPoolShares",
            xdr.lookup("Int64")
        ],
        [
            "poolSharesTrustLineCount",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (LiquidityPoolType type)
    //       {
    //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:
    //           struct
    //           {
    //               LiquidityPoolConstantProductParameters params;
    //   
    //               int64 reserveA;        // amount of A in the pool
    //               int64 reserveB;        // amount of B in the pool
    //               int64 totalPoolShares; // total number of pool shares issued
    //               int64 poolSharesTrustLineCount; // number of trust lines for the
    //                                               // associated pool shares
    //           } constantProduct;
    //       }
    //
    // ===========================================================================
    xdr.union("LiquidityPoolEntryBody", {
        switchOn: xdr.lookup("LiquidityPoolType"),
        switchName: "type",
        switches: [
            [
                "liquidityPoolConstantProduct",
                "constantProduct"
            ]
        ],
        arms: {
            constantProduct: xdr.lookup("LiquidityPoolEntryConstantProduct")
        }
    });
    // === xdr source ============================================================
    //
    //   struct LiquidityPoolEntry
    //   {
    //       PoolID liquidityPoolID;
    //   
    //       union switch (LiquidityPoolType type)
    //       {
    //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:
    //           struct
    //           {
    //               LiquidityPoolConstantProductParameters params;
    //   
    //               int64 reserveA;        // amount of A in the pool
    //               int64 reserveB;        // amount of B in the pool
    //               int64 totalPoolShares; // total number of pool shares issued
    //               int64 poolSharesTrustLineCount; // number of trust lines for the
    //                                               // associated pool shares
    //           } constantProduct;
    //       }
    //       body;
    //   };
    //
    // ===========================================================================
    xdr.struct("LiquidityPoolEntry", [
        [
            "liquidityPoolId",
            xdr.lookup("PoolId")
        ],
        [
            "body",
            xdr.lookup("LiquidityPoolEntryBody")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("LedgerEntryExtensionV1Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct LedgerEntryExtensionV1
    //   {
    //       SponsorshipDescriptor sponsoringID;
    //   
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerEntryExtensionV1", [
        [
            "sponsoringId",
            xdr.lookup("SponsorshipDescriptor")
        ],
        [
            "ext",
            xdr.lookup("LedgerEntryExtensionV1Ext")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (LedgerEntryType type)
    //       {
    //       case ACCOUNT:
    //           AccountEntry account;
    //       case TRUSTLINE:
    //           TrustLineEntry trustLine;
    //       case OFFER:
    //           OfferEntry offer;
    //       case DATA:
    //           DataEntry data;
    //       case CLAIMABLE_BALANCE:
    //           ClaimableBalanceEntry claimableBalance;
    //       case LIQUIDITY_POOL:
    //           LiquidityPoolEntry liquidityPool;
    //       }
    //
    // ===========================================================================
    xdr.union("LedgerEntryData", {
        switchOn: xdr.lookup("LedgerEntryType"),
        switchName: "type",
        switches: [
            [
                "account",
                "account"
            ],
            [
                "trustline",
                "trustLine"
            ],
            [
                "offer",
                "offer"
            ],
            [
                "data",
                "data"
            ],
            [
                "claimableBalance",
                "claimableBalance"
            ],
            [
                "liquidityPool",
                "liquidityPool"
            ]
        ],
        arms: {
            account: xdr.lookup("AccountEntry"),
            trustLine: xdr.lookup("TrustLineEntry"),
            offer: xdr.lookup("OfferEntry"),
            data: xdr.lookup("DataEntry"),
            claimableBalance: xdr.lookup("ClaimableBalanceEntry"),
            liquidityPool: xdr.lookup("LiquidityPoolEntry")
        }
    });
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           LedgerEntryExtensionV1 v1;
    //       }
    //
    // ===========================================================================
    xdr.union("LedgerEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                1,
                "v1"
            ]
        ],
        arms: {
            v1: xdr.lookup("LedgerEntryExtensionV1")
        }
    });
    // === xdr source ============================================================
    //
    //   struct LedgerEntry
    //   {
    //       uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
    //   
    //       union switch (LedgerEntryType type)
    //       {
    //       case ACCOUNT:
    //           AccountEntry account;
    //       case TRUSTLINE:
    //           TrustLineEntry trustLine;
    //       case OFFER:
    //           OfferEntry offer;
    //       case DATA:
    //           DataEntry data;
    //       case CLAIMABLE_BALANCE:
    //           ClaimableBalanceEntry claimableBalance;
    //       case LIQUIDITY_POOL:
    //           LiquidityPoolEntry liquidityPool;
    //       }
    //       data;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           LedgerEntryExtensionV1 v1;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerEntry", [
        [
            "lastModifiedLedgerSeq",
            xdr.lookup("Uint32")
        ],
        [
            "data",
            xdr.lookup("LedgerEntryData")
        ],
        [
            "ext",
            xdr.lookup("LedgerEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID accountID;
    //       }
    //
    // ===========================================================================
    xdr.struct("LedgerKeyAccount", [
        [
            "accountId",
            xdr.lookup("AccountId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID accountID;
    //           TrustLineAsset asset;
    //       }
    //
    // ===========================================================================
    xdr.struct("LedgerKeyTrustLine", [
        [
            "accountId",
            xdr.lookup("AccountId")
        ],
        [
            "asset",
            xdr.lookup("TrustLineAsset")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID sellerID;
    //           int64 offerID;
    //       }
    //
    // ===========================================================================
    xdr.struct("LedgerKeyOffer", [
        [
            "sellerId",
            xdr.lookup("AccountId")
        ],
        [
            "offerId",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID accountID;
    //           string64 dataName;
    //       }
    //
    // ===========================================================================
    xdr.struct("LedgerKeyData", [
        [
            "accountId",
            xdr.lookup("AccountId")
        ],
        [
            "dataName",
            xdr.lookup("String64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           ClaimableBalanceID balanceID;
    //       }
    //
    // ===========================================================================
    xdr.struct("LedgerKeyClaimableBalance", [
        [
            "balanceId",
            xdr.lookup("ClaimableBalanceId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           PoolID liquidityPoolID;
    //       }
    //
    // ===========================================================================
    xdr.struct("LedgerKeyLiquidityPool", [
        [
            "liquidityPoolId",
            xdr.lookup("PoolId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union LedgerKey switch (LedgerEntryType type)
    //   {
    //   case ACCOUNT:
    //       struct
    //       {
    //           AccountID accountID;
    //       } account;
    //   
    //   case TRUSTLINE:
    //       struct
    //       {
    //           AccountID accountID;
    //           TrustLineAsset asset;
    //       } trustLine;
    //   
    //   case OFFER:
    //       struct
    //       {
    //           AccountID sellerID;
    //           int64 offerID;
    //       } offer;
    //   
    //   case DATA:
    //       struct
    //       {
    //           AccountID accountID;
    //           string64 dataName;
    //       } data;
    //   
    //   case CLAIMABLE_BALANCE:
    //       struct
    //       {
    //           ClaimableBalanceID balanceID;
    //       } claimableBalance;
    //   
    //   case LIQUIDITY_POOL:
    //       struct
    //       {
    //           PoolID liquidityPoolID;
    //       } liquidityPool;
    //   };
    //
    // ===========================================================================
    xdr.union("LedgerKey", {
        switchOn: xdr.lookup("LedgerEntryType"),
        switchName: "type",
        switches: [
            [
                "account",
                "account"
            ],
            [
                "trustline",
                "trustLine"
            ],
            [
                "offer",
                "offer"
            ],
            [
                "data",
                "data"
            ],
            [
                "claimableBalance",
                "claimableBalance"
            ],
            [
                "liquidityPool",
                "liquidityPool"
            ]
        ],
        arms: {
            account: xdr.lookup("LedgerKeyAccount"),
            trustLine: xdr.lookup("LedgerKeyTrustLine"),
            offer: xdr.lookup("LedgerKeyOffer"),
            data: xdr.lookup("LedgerKeyData"),
            claimableBalance: xdr.lookup("LedgerKeyClaimableBalance"),
            liquidityPool: xdr.lookup("LedgerKeyLiquidityPool")
        }
    });
    // === xdr source ============================================================
    //
    //   enum EnvelopeType
    //   {
    //       ENVELOPE_TYPE_TX_V0 = 0,
    //       ENVELOPE_TYPE_SCP = 1,
    //       ENVELOPE_TYPE_TX = 2,
    //       ENVELOPE_TYPE_AUTH = 3,
    //       ENVELOPE_TYPE_SCPVALUE = 4,
    //       ENVELOPE_TYPE_TX_FEE_BUMP = 5,
    //       ENVELOPE_TYPE_OP_ID = 6,
    //       ENVELOPE_TYPE_POOL_REVOKE_OP_ID = 7
    //   };
    //
    // ===========================================================================
    xdr.enum("EnvelopeType", {
        envelopeTypeTxV0: 0,
        envelopeTypeScp: 1,
        envelopeTypeTx: 2,
        envelopeTypeAuth: 3,
        envelopeTypeScpvalue: 4,
        envelopeTypeTxFeeBump: 5,
        envelopeTypeOpId: 6,
        envelopeTypePoolRevokeOpId: 7
    });
    // === xdr source ============================================================
    //
    //   typedef opaque UpgradeType<128>;
    //
    // ===========================================================================
    xdr.typedef("UpgradeType", xdr.varOpaque(128));
    // === xdr source ============================================================
    //
    //   enum StellarValueType
    //   {
    //       STELLAR_VALUE_BASIC = 0,
    //       STELLAR_VALUE_SIGNED = 1
    //   };
    //
    // ===========================================================================
    xdr.enum("StellarValueType", {
        stellarValueBasic: 0,
        stellarValueSigned: 1
    });
    // === xdr source ============================================================
    //
    //   struct LedgerCloseValueSignature
    //   {
    //       NodeID nodeID;       // which node introduced the value
    //       Signature signature; // nodeID's signature
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerCloseValueSignature", [
        [
            "nodeId",
            xdr.lookup("NodeId")
        ],
        [
            "signature",
            xdr.lookup("Signature")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (StellarValueType v)
    //       {
    //       case STELLAR_VALUE_BASIC:
    //           void;
    //       case STELLAR_VALUE_SIGNED:
    //           LedgerCloseValueSignature lcValueSignature;
    //       }
    //
    // ===========================================================================
    xdr.union("StellarValueExt", {
        switchOn: xdr.lookup("StellarValueType"),
        switchName: "v",
        switches: [
            [
                "stellarValueBasic",
                xdr.void()
            ],
            [
                "stellarValueSigned",
                "lcValueSignature"
            ]
        ],
        arms: {
            lcValueSignature: xdr.lookup("LedgerCloseValueSignature")
        }
    });
    // === xdr source ============================================================
    //
    //   struct StellarValue
    //   {
    //       Hash txSetHash;      // transaction set to apply to previous ledger
    //       TimePoint closeTime; // network close time
    //   
    //       // upgrades to apply to the previous ledger (usually empty)
    //       // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
    //       // unknown steps during consensus if needed.
    //       // see notes below on 'LedgerUpgrade' for more detail
    //       // max size is dictated by number of upgrade types (+ room for future)
    //       UpgradeType upgrades<6>;
    //   
    //       // reserved for future use
    //       union switch (StellarValueType v)
    //       {
    //       case STELLAR_VALUE_BASIC:
    //           void;
    //       case STELLAR_VALUE_SIGNED:
    //           LedgerCloseValueSignature lcValueSignature;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("StellarValue", [
        [
            "txSetHash",
            xdr.lookup("Hash")
        ],
        [
            "closeTime",
            xdr.lookup("TimePoint")
        ],
        [
            "upgrades",
            xdr.varArray(xdr.lookup("UpgradeType"), 6)
        ],
        [
            "ext",
            xdr.lookup("StellarValueExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   const MASK_LEDGER_HEADER_FLAGS = 0x7;
    //
    // ===========================================================================
    xdr.const("MASK_LEDGER_HEADER_FLAGS", 0x7);
    // === xdr source ============================================================
    //
    //   enum LedgerHeaderFlags
    //   {
    //       DISABLE_LIQUIDITY_POOL_TRADING_FLAG = 0x1,
    //       DISABLE_LIQUIDITY_POOL_DEPOSIT_FLAG = 0x2,
    //       DISABLE_LIQUIDITY_POOL_WITHDRAWAL_FLAG = 0x4
    //   };
    //
    // ===========================================================================
    xdr.enum("LedgerHeaderFlags", {
        disableLiquidityPoolTradingFlag: 1,
        disableLiquidityPoolDepositFlag: 2,
        disableLiquidityPoolWithdrawalFlag: 4
    });
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("LedgerHeaderExtensionV1Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct LedgerHeaderExtensionV1
    //   {
    //       uint32 flags; // LedgerHeaderFlags
    //   
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerHeaderExtensionV1", [
        [
            "flags",
            xdr.lookup("Uint32")
        ],
        [
            "ext",
            xdr.lookup("LedgerHeaderExtensionV1Ext")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           LedgerHeaderExtensionV1 v1;
    //       }
    //
    // ===========================================================================
    xdr.union("LedgerHeaderExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                1,
                "v1"
            ]
        ],
        arms: {
            v1: xdr.lookup("LedgerHeaderExtensionV1")
        }
    });
    // === xdr source ============================================================
    //
    //   struct LedgerHeader
    //   {
    //       uint32 ledgerVersion;    // the protocol version of the ledger
    //       Hash previousLedgerHash; // hash of the previous ledger header
    //       StellarValue scpValue;   // what consensus agreed to
    //       Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
    //       Hash bucketListHash;     // hash of the ledger state
    //   
    //       uint32 ledgerSeq; // sequence number of this ledger
    //   
    //       int64 totalCoins; // total number of stroops in existence.
    //                         // 10,000,000 stroops in 1 XLM
    //   
    //       int64 feePool;       // fees burned since last inflation run
    //       uint32 inflationSeq; // inflation sequence number
    //   
    //       uint64 idPool; // last used global ID, used for generating objects
    //   
    //       uint32 baseFee;     // base fee per operation in stroops
    //       uint32 baseReserve; // account base reserve in stroops
    //   
    //       uint32 maxTxSetSize; // maximum size a transaction set can be
    //   
    //       Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
    //                         // in time without walking the chain back ledger by ledger
    //                         // each slot contains the oldest ledger that is mod of
    //                         // either 50  5000  50000 or 500000 depending on index
    //                         // skipList[0] mod(50), skipList[1] mod(5000), etc
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           LedgerHeaderExtensionV1 v1;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerHeader", [
        [
            "ledgerVersion",
            xdr.lookup("Uint32")
        ],
        [
            "previousLedgerHash",
            xdr.lookup("Hash")
        ],
        [
            "scpValue",
            xdr.lookup("StellarValue")
        ],
        [
            "txSetResultHash",
            xdr.lookup("Hash")
        ],
        [
            "bucketListHash",
            xdr.lookup("Hash")
        ],
        [
            "ledgerSeq",
            xdr.lookup("Uint32")
        ],
        [
            "totalCoins",
            xdr.lookup("Int64")
        ],
        [
            "feePool",
            xdr.lookup("Int64")
        ],
        [
            "inflationSeq",
            xdr.lookup("Uint32")
        ],
        [
            "idPool",
            xdr.lookup("Uint64")
        ],
        [
            "baseFee",
            xdr.lookup("Uint32")
        ],
        [
            "baseReserve",
            xdr.lookup("Uint32")
        ],
        [
            "maxTxSetSize",
            xdr.lookup("Uint32")
        ],
        [
            "skipList",
            xdr.array(xdr.lookup("Hash"), 4)
        ],
        [
            "ext",
            xdr.lookup("LedgerHeaderExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum LedgerUpgradeType
    //   {
    //       LEDGER_UPGRADE_VERSION = 1,
    //       LEDGER_UPGRADE_BASE_FEE = 2,
    //       LEDGER_UPGRADE_MAX_TX_SET_SIZE = 3,
    //       LEDGER_UPGRADE_BASE_RESERVE = 4,
    //       LEDGER_UPGRADE_FLAGS = 5
    //   };
    //
    // ===========================================================================
    xdr.enum("LedgerUpgradeType", {
        ledgerUpgradeVersion: 1,
        ledgerUpgradeBaseFee: 2,
        ledgerUpgradeMaxTxSetSize: 3,
        ledgerUpgradeBaseReserve: 4,
        ledgerUpgradeFlags: 5
    });
    // === xdr source ============================================================
    //
    //   union LedgerUpgrade switch (LedgerUpgradeType type)
    //   {
    //   case LEDGER_UPGRADE_VERSION:
    //       uint32 newLedgerVersion; // update ledgerVersion
    //   case LEDGER_UPGRADE_BASE_FEE:
    //       uint32 newBaseFee; // update baseFee
    //   case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
    //       uint32 newMaxTxSetSize; // update maxTxSetSize
    //   case LEDGER_UPGRADE_BASE_RESERVE:
    //       uint32 newBaseReserve; // update baseReserve
    //   case LEDGER_UPGRADE_FLAGS:
    //       uint32 newFlags; // update flags
    //   };
    //
    // ===========================================================================
    xdr.union("LedgerUpgrade", {
        switchOn: xdr.lookup("LedgerUpgradeType"),
        switchName: "type",
        switches: [
            [
                "ledgerUpgradeVersion",
                "newLedgerVersion"
            ],
            [
                "ledgerUpgradeBaseFee",
                "newBaseFee"
            ],
            [
                "ledgerUpgradeMaxTxSetSize",
                "newMaxTxSetSize"
            ],
            [
                "ledgerUpgradeBaseReserve",
                "newBaseReserve"
            ],
            [
                "ledgerUpgradeFlags",
                "newFlags"
            ]
        ],
        arms: {
            newLedgerVersion: xdr.lookup("Uint32"),
            newBaseFee: xdr.lookup("Uint32"),
            newMaxTxSetSize: xdr.lookup("Uint32"),
            newBaseReserve: xdr.lookup("Uint32"),
            newFlags: xdr.lookup("Uint32")
        }
    });
    // === xdr source ============================================================
    //
    //   enum BucketEntryType
    //   {
    //       METAENTRY =
    //           -1, // At-and-after protocol 11: bucket metadata, should come first.
    //       LIVEENTRY = 0, // Before protocol 11: created-or-updated;
    //                      // At-and-after protocol 11: only updated.
    //       DEADENTRY = 1,
    //       INITENTRY = 2 // At-and-after protocol 11: only created.
    //   };
    //
    // ===========================================================================
    xdr.enum("BucketEntryType", {
        metaentry: -1,
        liveentry: 0,
        deadentry: 1,
        initentry: 2
    });
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("BucketMetadataExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct BucketMetadata
    //   {
    //       // Indicates the protocol version used to create / merge this bucket.
    //       uint32 ledgerVersion;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("BucketMetadata", [
        [
            "ledgerVersion",
            xdr.lookup("Uint32")
        ],
        [
            "ext",
            xdr.lookup("BucketMetadataExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union BucketEntry switch (BucketEntryType type)
    //   {
    //   case LIVEENTRY:
    //   case INITENTRY:
    //       LedgerEntry liveEntry;
    //   
    //   case DEADENTRY:
    //       LedgerKey deadEntry;
    //   case METAENTRY:
    //       BucketMetadata metaEntry;
    //   };
    //
    // ===========================================================================
    xdr.union("BucketEntry", {
        switchOn: xdr.lookup("BucketEntryType"),
        switchName: "type",
        switches: [
            [
                "liveentry",
                "liveEntry"
            ],
            [
                "initentry",
                "liveEntry"
            ],
            [
                "deadentry",
                "deadEntry"
            ],
            [
                "metaentry",
                "metaEntry"
            ]
        ],
        arms: {
            liveEntry: xdr.lookup("LedgerEntry"),
            deadEntry: xdr.lookup("LedgerKey"),
            metaEntry: xdr.lookup("BucketMetadata")
        }
    });
    // === xdr source ============================================================
    //
    //   enum TxSetComponentType
    //   {
    //     // txs with effective fee <= bid derived from a base fee (if any).
    //     // If base fee is not specified, no discount is applied.
    //     TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE = 0
    //   };
    //
    // ===========================================================================
    xdr.enum("TxSetComponentType", {
        txsetCompTxsMaybeDiscountedFee: 0
    });
    // === xdr source ============================================================
    //
    //   struct
    //     {
    //       int64* baseFee;
    //       TransactionEnvelope txs<>;
    //     }
    //
    // ===========================================================================
    xdr.struct("TxSetComponentTxsMaybeDiscountedFee", [
        [
            "baseFee",
            xdr.option(xdr.lookup("Int64"))
        ],
        [
            "txes",
            xdr.varArray(xdr.lookup("TransactionEnvelope"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union TxSetComponent switch (TxSetComponentType type)
    //   {
    //   case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:
    //     struct
    //     {
    //       int64* baseFee;
    //       TransactionEnvelope txs<>;
    //     } txsMaybeDiscountedFee;
    //   };
    //
    // ===========================================================================
    xdr.union("TxSetComponent", {
        switchOn: xdr.lookup("TxSetComponentType"),
        switchName: "type",
        switches: [
            [
                "txsetCompTxsMaybeDiscountedFee",
                "txsMaybeDiscountedFee"
            ]
        ],
        arms: {
            txsMaybeDiscountedFee: xdr.lookup("TxSetComponentTxsMaybeDiscountedFee")
        }
    });
    // === xdr source ============================================================
    //
    //   union TransactionPhase switch (int v)
    //   {
    //   case 0:
    //       TxSetComponent v0Components<>;
    //   };
    //
    // ===========================================================================
    xdr.union("TransactionPhase", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                "v0Components"
            ]
        ],
        arms: {
            v0Components: xdr.varArray(xdr.lookup("TxSetComponent"), 2147483647)
        }
    });
    // === xdr source ============================================================
    //
    //   struct TransactionSet
    //   {
    //       Hash previousLedgerHash;
    //       TransactionEnvelope txs<>;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionSet", [
        [
            "previousLedgerHash",
            xdr.lookup("Hash")
        ],
        [
            "txes",
            xdr.varArray(xdr.lookup("TransactionEnvelope"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct TransactionSetV1
    //   {
    //       Hash previousLedgerHash;
    //       TransactionPhase phases<>;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionSetV1", [
        [
            "previousLedgerHash",
            xdr.lookup("Hash")
        ],
        [
            "phases",
            xdr.varArray(xdr.lookup("TransactionPhase"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union GeneralizedTransactionSet switch (int v)
    //   {
    //   // We consider the legacy TransactionSet to be v0.
    //   case 1:
    //       TransactionSetV1 v1TxSet;
    //   };
    //
    // ===========================================================================
    xdr.union("GeneralizedTransactionSet", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                1,
                "v1TxSet"
            ]
        ],
        arms: {
            v1TxSet: xdr.lookup("TransactionSetV1")
        }
    });
    // === xdr source ============================================================
    //
    //   struct TransactionResultPair
    //   {
    //       Hash transactionHash;
    //       TransactionResult result; // result for the transaction
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionResultPair", [
        [
            "transactionHash",
            xdr.lookup("Hash")
        ],
        [
            "result",
            xdr.lookup("TransactionResult")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct TransactionResultSet
    //   {
    //       TransactionResultPair results<>;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionResultSet", [
        [
            "results",
            xdr.varArray(xdr.lookup("TransactionResultPair"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           GeneralizedTransactionSet generalizedTxSet;
    //       }
    //
    // ===========================================================================
    xdr.union("TransactionHistoryEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ],
            [
                1,
                "generalizedTxSet"
            ]
        ],
        arms: {
            generalizedTxSet: xdr.lookup("GeneralizedTransactionSet")
        }
    });
    // === xdr source ============================================================
    //
    //   struct TransactionHistoryEntry
    //   {
    //       uint32 ledgerSeq;
    //       TransactionSet txSet;
    //   
    //       // when v != 0, txSet must be empty
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       case 1:
    //           GeneralizedTransactionSet generalizedTxSet;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionHistoryEntry", [
        [
            "ledgerSeq",
            xdr.lookup("Uint32")
        ],
        [
            "txSet",
            xdr.lookup("TransactionSet")
        ],
        [
            "ext",
            xdr.lookup("TransactionHistoryEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("TransactionHistoryResultEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct TransactionHistoryResultEntry
    //   {
    //       uint32 ledgerSeq;
    //       TransactionResultSet txResultSet;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionHistoryResultEntry", [
        [
            "ledgerSeq",
            xdr.lookup("Uint32")
        ],
        [
            "txResultSet",
            xdr.lookup("TransactionResultSet")
        ],
        [
            "ext",
            xdr.lookup("TransactionHistoryResultEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("LedgerHeaderHistoryEntryExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct LedgerHeaderHistoryEntry
    //   {
    //       Hash hash;
    //       LedgerHeader header;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerHeaderHistoryEntry", [
        [
            "hash",
            xdr.lookup("Hash")
        ],
        [
            "header",
            xdr.lookup("LedgerHeader")
        ],
        [
            "ext",
            xdr.lookup("LedgerHeaderHistoryEntryExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct LedgerSCPMessages
    //   {
    //       uint32 ledgerSeq;
    //       SCPEnvelope messages<>;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerScpMessages", [
        [
            "ledgerSeq",
            xdr.lookup("Uint32")
        ],
        [
            "messages",
            xdr.varArray(xdr.lookup("ScpEnvelope"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SCPHistoryEntryV0
    //   {
    //       SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages
    //       LedgerSCPMessages ledgerMessages;
    //   };
    //
    // ===========================================================================
    xdr.struct("ScpHistoryEntryV0", [
        [
            "quorumSets",
            xdr.varArray(xdr.lookup("ScpQuorumSet"), 2147483647)
        ],
        [
            "ledgerMessages",
            xdr.lookup("LedgerScpMessages")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union SCPHistoryEntry switch (int v)
    //   {
    //   case 0:
    //       SCPHistoryEntryV0 v0;
    //   };
    //
    // ===========================================================================
    xdr.union("ScpHistoryEntry", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                "v0"
            ]
        ],
        arms: {
            v0: xdr.lookup("ScpHistoryEntryV0")
        }
    });
    // === xdr source ============================================================
    //
    //   enum LedgerEntryChangeType
    //   {
    //       LEDGER_ENTRY_CREATED = 0, // entry was added to the ledger
    //       LEDGER_ENTRY_UPDATED = 1, // entry was modified in the ledger
    //       LEDGER_ENTRY_REMOVED = 2, // entry was removed from the ledger
    //       LEDGER_ENTRY_STATE = 3    // value of the entry
    //   };
    //
    // ===========================================================================
    xdr.enum("LedgerEntryChangeType", {
        ledgerEntryCreated: 0,
        ledgerEntryUpdated: 1,
        ledgerEntryRemoved: 2,
        ledgerEntryState: 3
    });
    // === xdr source ============================================================
    //
    //   union LedgerEntryChange switch (LedgerEntryChangeType type)
    //   {
    //   case LEDGER_ENTRY_CREATED:
    //       LedgerEntry created;
    //   case LEDGER_ENTRY_UPDATED:
    //       LedgerEntry updated;
    //   case LEDGER_ENTRY_REMOVED:
    //       LedgerKey removed;
    //   case LEDGER_ENTRY_STATE:
    //       LedgerEntry state;
    //   };
    //
    // ===========================================================================
    xdr.union("LedgerEntryChange", {
        switchOn: xdr.lookup("LedgerEntryChangeType"),
        switchName: "type",
        switches: [
            [
                "ledgerEntryCreated",
                "created"
            ],
            [
                "ledgerEntryUpdated",
                "updated"
            ],
            [
                "ledgerEntryRemoved",
                "removed"
            ],
            [
                "ledgerEntryState",
                "state"
            ]
        ],
        arms: {
            created: xdr.lookup("LedgerEntry"),
            updated: xdr.lookup("LedgerEntry"),
            removed: xdr.lookup("LedgerKey"),
            state: xdr.lookup("LedgerEntry")
        }
    });
    // === xdr source ============================================================
    //
    //   typedef LedgerEntryChange LedgerEntryChanges<>;
    //
    // ===========================================================================
    xdr.typedef("LedgerEntryChanges", xdr.varArray(xdr.lookup("LedgerEntryChange"), 2147483647));
    // === xdr source ============================================================
    //
    //   struct OperationMeta
    //   {
    //       LedgerEntryChanges changes;
    //   };
    //
    // ===========================================================================
    xdr.struct("OperationMeta", [
        [
            "changes",
            xdr.lookup("LedgerEntryChanges")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct TransactionMetaV1
    //   {
    //       LedgerEntryChanges txChanges; // tx level changes if any
    //       OperationMeta operations<>;   // meta for each operation
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionMetaV1", [
        [
            "txChanges",
            xdr.lookup("LedgerEntryChanges")
        ],
        [
            "operations",
            xdr.varArray(xdr.lookup("OperationMeta"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct TransactionMetaV2
    //   {
    //       LedgerEntryChanges txChangesBefore; // tx level changes before operations
    //                                           // are applied if any
    //       OperationMeta operations<>;         // meta for each operation
    //       LedgerEntryChanges txChangesAfter;  // tx level changes after operations are
    //                                           // applied if any
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionMetaV2", [
        [
            "txChangesBefore",
            xdr.lookup("LedgerEntryChanges")
        ],
        [
            "operations",
            xdr.varArray(xdr.lookup("OperationMeta"), 2147483647)
        ],
        [
            "txChangesAfter",
            xdr.lookup("LedgerEntryChanges")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union TransactionMeta switch (int v)
    //   {
    //   case 0:
    //       OperationMeta operations<>;
    //   case 1:
    //       TransactionMetaV1 v1;
    //   case 2:
    //       TransactionMetaV2 v2;
    //   };
    //
    // ===========================================================================
    xdr.union("TransactionMeta", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                "operations"
            ],
            [
                1,
                "v1"
            ],
            [
                2,
                "v2"
            ]
        ],
        arms: {
            operations: xdr.varArray(xdr.lookup("OperationMeta"), 2147483647),
            v1: xdr.lookup("TransactionMetaV1"),
            v2: xdr.lookup("TransactionMetaV2")
        }
    });
    // === xdr source ============================================================
    //
    //   struct TransactionResultMeta
    //   {
    //       TransactionResultPair result;
    //       LedgerEntryChanges feeProcessing;
    //       TransactionMeta txApplyProcessing;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionResultMeta", [
        [
            "result",
            xdr.lookup("TransactionResultPair")
        ],
        [
            "feeProcessing",
            xdr.lookup("LedgerEntryChanges")
        ],
        [
            "txApplyProcessing",
            xdr.lookup("TransactionMeta")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct UpgradeEntryMeta
    //   {
    //       LedgerUpgrade upgrade;
    //       LedgerEntryChanges changes;
    //   };
    //
    // ===========================================================================
    xdr.struct("UpgradeEntryMeta", [
        [
            "upgrade",
            xdr.lookup("LedgerUpgrade")
        ],
        [
            "changes",
            xdr.lookup("LedgerEntryChanges")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct LedgerCloseMetaV0
    //   {
    //       LedgerHeaderHistoryEntry ledgerHeader;
    //       // NB: txSet is sorted in "Hash order"
    //       TransactionSet txSet;
    //   
    //       // NB: transactions are sorted in apply order here
    //       // fees for all transactions are processed first
    //       // followed by applying transactions
    //       TransactionResultMeta txProcessing<>;
    //   
    //       // upgrades are applied last
    //       UpgradeEntryMeta upgradesProcessing<>;
    //   
    //       // other misc information attached to the ledger close
    //       SCPHistoryEntry scpInfo<>;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerCloseMetaV0", [
        [
            "ledgerHeader",
            xdr.lookup("LedgerHeaderHistoryEntry")
        ],
        [
            "txSet",
            xdr.lookup("TransactionSet")
        ],
        [
            "txProcessing",
            xdr.varArray(xdr.lookup("TransactionResultMeta"), 2147483647)
        ],
        [
            "upgradesProcessing",
            xdr.varArray(xdr.lookup("UpgradeEntryMeta"), 2147483647)
        ],
        [
            "scpInfo",
            xdr.varArray(xdr.lookup("ScpHistoryEntry"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct LedgerCloseMetaV1
    //   {
    //       LedgerHeaderHistoryEntry ledgerHeader;
    //   
    //       GeneralizedTransactionSet txSet;
    //   
    //       // NB: transactions are sorted in apply order here
    //       // fees for all transactions are processed first
    //       // followed by applying transactions
    //       TransactionResultMeta txProcessing<>;
    //   
    //       // upgrades are applied last
    //       UpgradeEntryMeta upgradesProcessing<>;
    //   
    //       // other misc information attached to the ledger close
    //       SCPHistoryEntry scpInfo<>;
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerCloseMetaV1", [
        [
            "ledgerHeader",
            xdr.lookup("LedgerHeaderHistoryEntry")
        ],
        [
            "txSet",
            xdr.lookup("GeneralizedTransactionSet")
        ],
        [
            "txProcessing",
            xdr.varArray(xdr.lookup("TransactionResultMeta"), 2147483647)
        ],
        [
            "upgradesProcessing",
            xdr.varArray(xdr.lookup("UpgradeEntryMeta"), 2147483647)
        ],
        [
            "scpInfo",
            xdr.varArray(xdr.lookup("ScpHistoryEntry"), 2147483647)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union LedgerCloseMeta switch (int v)
    //   {
    //   case 0:
    //       LedgerCloseMetaV0 v0;
    //   case 1:
    //       LedgerCloseMetaV1 v1;
    //   };
    //
    // ===========================================================================
    xdr.union("LedgerCloseMeta", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                "v0"
            ],
            [
                1,
                "v1"
            ]
        ],
        arms: {
            v0: xdr.lookup("LedgerCloseMetaV0"),
            v1: xdr.lookup("LedgerCloseMetaV1")
        }
    });
    // === xdr source ============================================================
    //
    //   enum ErrorCode
    //   {
    //       ERR_MISC = 0, // Unspecific error
    //       ERR_DATA = 1, // Malformed data
    //       ERR_CONF = 2, // Misconfiguration error
    //       ERR_AUTH = 3, // Authentication failure
    //       ERR_LOAD = 4  // System overloaded
    //   };
    //
    // ===========================================================================
    xdr.enum("ErrorCode", {
        errMisc: 0,
        errData: 1,
        errConf: 2,
        errAuth: 3,
        errLoad: 4
    });
    // === xdr source ============================================================
    //
    //   struct Error
    //   {
    //       ErrorCode code;
    //       string msg<100>;
    //   };
    //
    // ===========================================================================
    xdr.struct("Error", [
        [
            "code",
            xdr.lookup("ErrorCode")
        ],
        [
            "msg",
            xdr.string(100)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SendMore
    //   {
    //       uint32 numMessages;
    //   };
    //
    // ===========================================================================
    xdr.struct("SendMore", [
        [
            "numMessages",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct AuthCert
    //   {
    //       Curve25519Public pubkey;
    //       uint64 expiration;
    //       Signature sig;
    //   };
    //
    // ===========================================================================
    xdr.struct("AuthCert", [
        [
            "pubkey",
            xdr.lookup("Curve25519Public")
        ],
        [
            "expiration",
            xdr.lookup("Uint64")
        ],
        [
            "sig",
            xdr.lookup("Signature")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct Hello
    //   {
    //       uint32 ledgerVersion;
    //       uint32 overlayVersion;
    //       uint32 overlayMinVersion;
    //       Hash networkID;
    //       string versionStr<100>;
    //       int listeningPort;
    //       NodeID peerID;
    //       AuthCert cert;
    //       uint256 nonce;
    //   };
    //
    // ===========================================================================
    xdr.struct("Hello", [
        [
            "ledgerVersion",
            xdr.lookup("Uint32")
        ],
        [
            "overlayVersion",
            xdr.lookup("Uint32")
        ],
        [
            "overlayMinVersion",
            xdr.lookup("Uint32")
        ],
        [
            "networkId",
            xdr.lookup("Hash")
        ],
        [
            "versionStr",
            xdr.string(100)
        ],
        [
            "listeningPort",
            xdr.int()
        ],
        [
            "peerId",
            xdr.lookup("NodeId")
        ],
        [
            "cert",
            xdr.lookup("AuthCert")
        ],
        [
            "nonce",
            xdr.lookup("Uint256")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct Auth
    //   {
    //       // Empty message, just to confirm
    //       // establishment of MAC keys.
    //       int unused;
    //   };
    //
    // ===========================================================================
    xdr.struct("Auth", [
        [
            "unused",
            xdr.int()
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum IPAddrType
    //   {
    //       IPv4 = 0,
    //       IPv6 = 1
    //   };
    //
    // ===========================================================================
    xdr.enum("IpAddrType", {
        iPv4: 0,
        iPv6: 1
    });
    // === xdr source ============================================================
    //
    //   union switch (IPAddrType type)
    //       {
    //       case IPv4:
    //           opaque ipv4[4];
    //       case IPv6:
    //           opaque ipv6[16];
    //       }
    //
    // ===========================================================================
    xdr.union("PeerAddressIp", {
        switchOn: xdr.lookup("IpAddrType"),
        switchName: "type",
        switches: [
            [
                "iPv4",
                "ipv4"
            ],
            [
                "iPv6",
                "ipv6"
            ]
        ],
        arms: {
            ipv4: xdr.opaque(4),
            ipv6: xdr.opaque(16)
        }
    });
    // === xdr source ============================================================
    //
    //   struct PeerAddress
    //   {
    //       union switch (IPAddrType type)
    //       {
    //       case IPv4:
    //           opaque ipv4[4];
    //       case IPv6:
    //           opaque ipv6[16];
    //       }
    //       ip;
    //       uint32 port;
    //       uint32 numFailures;
    //   };
    //
    // ===========================================================================
    xdr.struct("PeerAddress", [
        [
            "ip",
            xdr.lookup("PeerAddressIp")
        ],
        [
            "port",
            xdr.lookup("Uint32")
        ],
        [
            "numFailures",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum MessageType
    //   {
    //       ERROR_MSG = 0,
    //       AUTH = 2,
    //       DONT_HAVE = 3,
    //   
    //       GET_PEERS = 4, // gets a list of peers this guy knows about
    //       PEERS = 5,
    //   
    //       GET_TX_SET = 6, // gets a particular txset by hash
    //       TX_SET = 7,
    //       GENERALIZED_TX_SET = 17,
    //   
    //       TRANSACTION = 8, // pass on a tx you have heard about
    //   
    //       // SCP
    //       GET_SCP_QUORUMSET = 9,
    //       SCP_QUORUMSET = 10,
    //       SCP_MESSAGE = 11,
    //       GET_SCP_STATE = 12,
    //   
    //       // new messages
    //       HELLO = 13,
    //   
    //       SURVEY_REQUEST = 14,
    //       SURVEY_RESPONSE = 15,
    //   
    //       SEND_MORE = 16
    //   };
    //
    // ===========================================================================
    xdr.enum("MessageType", {
        errorMsg: 0,
        auth: 2,
        dontHave: 3,
        getPeers: 4,
        peers: 5,
        getTxSet: 6,
        txSet: 7,
        generalizedTxSet: 17,
        transaction: 8,
        getScpQuorumset: 9,
        scpQuorumset: 10,
        scpMessage: 11,
        getScpState: 12,
        hello: 13,
        surveyRequest: 14,
        surveyResponse: 15,
        sendMore: 16
    });
    // === xdr source ============================================================
    //
    //   struct DontHave
    //   {
    //       MessageType type;
    //       uint256 reqHash;
    //   };
    //
    // ===========================================================================
    xdr.struct("DontHave", [
        [
            "type",
            xdr.lookup("MessageType")
        ],
        [
            "reqHash",
            xdr.lookup("Uint256")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum SurveyMessageCommandType
    //   {
    //       SURVEY_TOPOLOGY = 0
    //   };
    //
    // ===========================================================================
    xdr.enum("SurveyMessageCommandType", {
        surveyTopology: 0
    });
    // === xdr source ============================================================
    //
    //   struct SurveyRequestMessage
    //   {
    //       NodeID surveyorPeerID;
    //       NodeID surveyedPeerID;
    //       uint32 ledgerNum;
    //       Curve25519Public encryptionKey;
    //       SurveyMessageCommandType commandType;
    //   };
    //
    // ===========================================================================
    xdr.struct("SurveyRequestMessage", [
        [
            "surveyorPeerId",
            xdr.lookup("NodeId")
        ],
        [
            "surveyedPeerId",
            xdr.lookup("NodeId")
        ],
        [
            "ledgerNum",
            xdr.lookup("Uint32")
        ],
        [
            "encryptionKey",
            xdr.lookup("Curve25519Public")
        ],
        [
            "commandType",
            xdr.lookup("SurveyMessageCommandType")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SignedSurveyRequestMessage
    //   {
    //       Signature requestSignature;
    //       SurveyRequestMessage request;
    //   };
    //
    // ===========================================================================
    xdr.struct("SignedSurveyRequestMessage", [
        [
            "requestSignature",
            xdr.lookup("Signature")
        ],
        [
            "request",
            xdr.lookup("SurveyRequestMessage")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   typedef opaque EncryptedBody<64000>;
    //
    // ===========================================================================
    xdr.typedef("EncryptedBody", xdr.varOpaque(64000));
    // === xdr source ============================================================
    //
    //   struct SurveyResponseMessage
    //   {
    //       NodeID surveyorPeerID;
    //       NodeID surveyedPeerID;
    //       uint32 ledgerNum;
    //       SurveyMessageCommandType commandType;
    //       EncryptedBody encryptedBody;
    //   };
    //
    // ===========================================================================
    xdr.struct("SurveyResponseMessage", [
        [
            "surveyorPeerId",
            xdr.lookup("NodeId")
        ],
        [
            "surveyedPeerId",
            xdr.lookup("NodeId")
        ],
        [
            "ledgerNum",
            xdr.lookup("Uint32")
        ],
        [
            "commandType",
            xdr.lookup("SurveyMessageCommandType")
        ],
        [
            "encryptedBody",
            xdr.lookup("EncryptedBody")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SignedSurveyResponseMessage
    //   {
    //       Signature responseSignature;
    //       SurveyResponseMessage response;
    //   };
    //
    // ===========================================================================
    xdr.struct("SignedSurveyResponseMessage", [
        [
            "responseSignature",
            xdr.lookup("Signature")
        ],
        [
            "response",
            xdr.lookup("SurveyResponseMessage")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct PeerStats
    //   {
    //       NodeID id;
    //       string versionStr<100>;
    //       uint64 messagesRead;
    //       uint64 messagesWritten;
    //       uint64 bytesRead;
    //       uint64 bytesWritten;
    //       uint64 secondsConnected;
    //   
    //       uint64 uniqueFloodBytesRecv;
    //       uint64 duplicateFloodBytesRecv;
    //       uint64 uniqueFetchBytesRecv;
    //       uint64 duplicateFetchBytesRecv;
    //   
    //       uint64 uniqueFloodMessageRecv;
    //       uint64 duplicateFloodMessageRecv;
    //       uint64 uniqueFetchMessageRecv;
    //       uint64 duplicateFetchMessageRecv;
    //   };
    //
    // ===========================================================================
    xdr.struct("PeerStats", [
        [
            "id",
            xdr.lookup("NodeId")
        ],
        [
            "versionStr",
            xdr.string(100)
        ],
        [
            "messagesRead",
            xdr.lookup("Uint64")
        ],
        [
            "messagesWritten",
            xdr.lookup("Uint64")
        ],
        [
            "bytesRead",
            xdr.lookup("Uint64")
        ],
        [
            "bytesWritten",
            xdr.lookup("Uint64")
        ],
        [
            "secondsConnected",
            xdr.lookup("Uint64")
        ],
        [
            "uniqueFloodBytesRecv",
            xdr.lookup("Uint64")
        ],
        [
            "duplicateFloodBytesRecv",
            xdr.lookup("Uint64")
        ],
        [
            "uniqueFetchBytesRecv",
            xdr.lookup("Uint64")
        ],
        [
            "duplicateFetchBytesRecv",
            xdr.lookup("Uint64")
        ],
        [
            "uniqueFloodMessageRecv",
            xdr.lookup("Uint64")
        ],
        [
            "duplicateFloodMessageRecv",
            xdr.lookup("Uint64")
        ],
        [
            "uniqueFetchMessageRecv",
            xdr.lookup("Uint64")
        ],
        [
            "duplicateFetchMessageRecv",
            xdr.lookup("Uint64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   typedef PeerStats PeerStatList<25>;
    //
    // ===========================================================================
    xdr.typedef("PeerStatList", xdr.varArray(xdr.lookup("PeerStats"), 25));
    // === xdr source ============================================================
    //
    //   struct TopologyResponseBody
    //   {
    //       PeerStatList inboundPeers;
    //       PeerStatList outboundPeers;
    //   
    //       uint32 totalInboundPeerCount;
    //       uint32 totalOutboundPeerCount;
    //   };
    //
    // ===========================================================================
    xdr.struct("TopologyResponseBody", [
        [
            "inboundPeers",
            xdr.lookup("PeerStatList")
        ],
        [
            "outboundPeers",
            xdr.lookup("PeerStatList")
        ],
        [
            "totalInboundPeerCount",
            xdr.lookup("Uint32")
        ],
        [
            "totalOutboundPeerCount",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union SurveyResponseBody switch (SurveyMessageCommandType type)
    //   {
    //   case SURVEY_TOPOLOGY:
    //       TopologyResponseBody topologyResponseBody;
    //   };
    //
    // ===========================================================================
    xdr.union("SurveyResponseBody", {
        switchOn: xdr.lookup("SurveyMessageCommandType"),
        switchName: "type",
        switches: [
            [
                "surveyTopology",
                "topologyResponseBody"
            ]
        ],
        arms: {
            topologyResponseBody: xdr.lookup("TopologyResponseBody")
        }
    });
    // === xdr source ============================================================
    //
    //   union StellarMessage switch (MessageType type)
    //   {
    //   case ERROR_MSG:
    //       Error error;
    //   case HELLO:
    //       Hello hello;
    //   case AUTH:
    //       Auth auth;
    //   case DONT_HAVE:
    //       DontHave dontHave;
    //   case GET_PEERS:
    //       void;
    //   case PEERS:
    //       PeerAddress peers<100>;
    //   
    //   case GET_TX_SET:
    //       uint256 txSetHash;
    //   case TX_SET:
    //       TransactionSet txSet;
    //   case GENERALIZED_TX_SET:
    //       GeneralizedTransactionSet generalizedTxSet;
    //   
    //   case TRANSACTION:
    //       TransactionEnvelope transaction;
    //   
    //   case SURVEY_REQUEST:
    //       SignedSurveyRequestMessage signedSurveyRequestMessage;
    //   
    //   case SURVEY_RESPONSE:
    //       SignedSurveyResponseMessage signedSurveyResponseMessage;
    //   
    //   // SCP
    //   case GET_SCP_QUORUMSET:
    //       uint256 qSetHash;
    //   case SCP_QUORUMSET:
    //       SCPQuorumSet qSet;
    //   case SCP_MESSAGE:
    //       SCPEnvelope envelope;
    //   case GET_SCP_STATE:
    //       uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest
    //   case SEND_MORE:
    //       SendMore sendMoreMessage;
    //   };
    //
    // ===========================================================================
    xdr.union("StellarMessage", {
        switchOn: xdr.lookup("MessageType"),
        switchName: "type",
        switches: [
            [
                "errorMsg",
                "error"
            ],
            [
                "hello",
                "hello"
            ],
            [
                "auth",
                "auth"
            ],
            [
                "dontHave",
                "dontHave"
            ],
            [
                "getPeers",
                xdr.void()
            ],
            [
                "peers",
                "peers"
            ],
            [
                "getTxSet",
                "txSetHash"
            ],
            [
                "txSet",
                "txSet"
            ],
            [
                "generalizedTxSet",
                "generalizedTxSet"
            ],
            [
                "transaction",
                "transaction"
            ],
            [
                "surveyRequest",
                "signedSurveyRequestMessage"
            ],
            [
                "surveyResponse",
                "signedSurveyResponseMessage"
            ],
            [
                "getScpQuorumset",
                "qSetHash"
            ],
            [
                "scpQuorumset",
                "qSet"
            ],
            [
                "scpMessage",
                "envelope"
            ],
            [
                "getScpState",
                "getScpLedgerSeq"
            ],
            [
                "sendMore",
                "sendMoreMessage"
            ]
        ],
        arms: {
            error: xdr.lookup("Error"),
            hello: xdr.lookup("Hello"),
            auth: xdr.lookup("Auth"),
            dontHave: xdr.lookup("DontHave"),
            peers: xdr.varArray(xdr.lookup("PeerAddress"), 100),
            txSetHash: xdr.lookup("Uint256"),
            txSet: xdr.lookup("TransactionSet"),
            generalizedTxSet: xdr.lookup("GeneralizedTransactionSet"),
            transaction: xdr.lookup("TransactionEnvelope"),
            signedSurveyRequestMessage: xdr.lookup("SignedSurveyRequestMessage"),
            signedSurveyResponseMessage: xdr.lookup("SignedSurveyResponseMessage"),
            qSetHash: xdr.lookup("Uint256"),
            qSet: xdr.lookup("ScpQuorumSet"),
            envelope: xdr.lookup("ScpEnvelope"),
            getScpLedgerSeq: xdr.lookup("Uint32"),
            sendMoreMessage: xdr.lookup("SendMore")
        }
    });
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           uint64 sequence;
    //           StellarMessage message;
    //           HmacSha256Mac mac;
    //       }
    //
    // ===========================================================================
    xdr.struct("AuthenticatedMessageV0", [
        [
            "sequence",
            xdr.lookup("Uint64")
        ],
        [
            "message",
            xdr.lookup("StellarMessage")
        ],
        [
            "mac",
            xdr.lookup("HmacSha256Mac")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union AuthenticatedMessage switch (uint32 v)
    //   {
    //   case 0:
    //       struct
    //       {
    //           uint64 sequence;
    //           StellarMessage message;
    //           HmacSha256Mac mac;
    //       } v0;
    //   };
    //
    // ===========================================================================
    xdr.union("AuthenticatedMessage", {
        switchOn: xdr.lookup("Uint32"),
        switchName: "v",
        switches: [
            [
                0,
                "v0"
            ]
        ],
        arms: {
            v0: xdr.lookup("AuthenticatedMessageV0")
        }
    });
    // === xdr source ============================================================
    //
    //   union LiquidityPoolParameters switch (LiquidityPoolType type)
    //   {
    //   case LIQUIDITY_POOL_CONSTANT_PRODUCT:
    //       LiquidityPoolConstantProductParameters constantProduct;
    //   };
    //
    // ===========================================================================
    xdr.union("LiquidityPoolParameters", {
        switchOn: xdr.lookup("LiquidityPoolType"),
        switchName: "type",
        switches: [
            [
                "liquidityPoolConstantProduct",
                "constantProduct"
            ]
        ],
        arms: {
            constantProduct: xdr.lookup("LiquidityPoolConstantProductParameters")
        }
    });
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           uint64 id;
    //           uint256 ed25519;
    //       }
    //
    // ===========================================================================
    xdr.struct("MuxedAccountMed25519", [
        [
            "id",
            xdr.lookup("Uint64")
        ],
        [
            "ed25519",
            xdr.lookup("Uint256")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union MuxedAccount switch (CryptoKeyType type)
    //   {
    //   case KEY_TYPE_ED25519:
    //       uint256 ed25519;
    //   case KEY_TYPE_MUXED_ED25519:
    //       struct
    //       {
    //           uint64 id;
    //           uint256 ed25519;
    //       } med25519;
    //   };
    //
    // ===========================================================================
    xdr.union("MuxedAccount", {
        switchOn: xdr.lookup("CryptoKeyType"),
        switchName: "type",
        switches: [
            [
                "keyTypeEd25519",
                "ed25519"
            ],
            [
                "keyTypeMuxedEd25519",
                "med25519"
            ]
        ],
        arms: {
            ed25519: xdr.lookup("Uint256"),
            med25519: xdr.lookup("MuxedAccountMed25519")
        }
    });
    // === xdr source ============================================================
    //
    //   struct DecoratedSignature
    //   {
    //       SignatureHint hint;  // last 4 bytes of the public key, used as a hint
    //       Signature signature; // actual signature
    //   };
    //
    // ===========================================================================
    xdr.struct("DecoratedSignature", [
        [
            "hint",
            xdr.lookup("SignatureHint")
        ],
        [
            "signature",
            xdr.lookup("Signature")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum OperationType
    //   {
    //       CREATE_ACCOUNT = 0,
    //       PAYMENT = 1,
    //       PATH_PAYMENT_STRICT_RECEIVE = 2,
    //       MANAGE_SELL_OFFER = 3,
    //       CREATE_PASSIVE_SELL_OFFER = 4,
    //       SET_OPTIONS = 5,
    //       CHANGE_TRUST = 6,
    //       ALLOW_TRUST = 7,
    //       ACCOUNT_MERGE = 8,
    //       INFLATION = 9,
    //       MANAGE_DATA = 10,
    //       BUMP_SEQUENCE = 11,
    //       MANAGE_BUY_OFFER = 12,
    //       PATH_PAYMENT_STRICT_SEND = 13,
    //       CREATE_CLAIMABLE_BALANCE = 14,
    //       CLAIM_CLAIMABLE_BALANCE = 15,
    //       BEGIN_SPONSORING_FUTURE_RESERVES = 16,
    //       END_SPONSORING_FUTURE_RESERVES = 17,
    //       REVOKE_SPONSORSHIP = 18,
    //       CLAWBACK = 19,
    //       CLAWBACK_CLAIMABLE_BALANCE = 20,
    //       SET_TRUST_LINE_FLAGS = 21,
    //       LIQUIDITY_POOL_DEPOSIT = 22,
    //       LIQUIDITY_POOL_WITHDRAW = 23
    //   };
    //
    // ===========================================================================
    xdr.enum("OperationType", {
        createAccount: 0,
        payment: 1,
        pathPaymentStrictReceive: 2,
        manageSellOffer: 3,
        createPassiveSellOffer: 4,
        setOptions: 5,
        changeTrust: 6,
        allowTrust: 7,
        accountMerge: 8,
        inflation: 9,
        manageData: 10,
        bumpSequence: 11,
        manageBuyOffer: 12,
        pathPaymentStrictSend: 13,
        createClaimableBalance: 14,
        claimClaimableBalance: 15,
        beginSponsoringFutureReserves: 16,
        endSponsoringFutureReserves: 17,
        revokeSponsorship: 18,
        clawback: 19,
        clawbackClaimableBalance: 20,
        setTrustLineFlags: 21,
        liquidityPoolDeposit: 22,
        liquidityPoolWithdraw: 23
    });
    // === xdr source ============================================================
    //
    //   struct CreateAccountOp
    //   {
    //       AccountID destination; // account to create
    //       int64 startingBalance; // amount they end up with
    //   };
    //
    // ===========================================================================
    xdr.struct("CreateAccountOp", [
        [
            "destination",
            xdr.lookup("AccountId")
        ],
        [
            "startingBalance",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct PaymentOp
    //   {
    //       MuxedAccount destination; // recipient of the payment
    //       Asset asset;              // what they end up with
    //       int64 amount;             // amount they end up with
    //   };
    //
    // ===========================================================================
    xdr.struct("PaymentOp", [
        [
            "destination",
            xdr.lookup("MuxedAccount")
        ],
        [
            "asset",
            xdr.lookup("Asset")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct PathPaymentStrictReceiveOp
    //   {
    //       Asset sendAsset; // asset we pay with
    //       int64 sendMax;   // the maximum amount of sendAsset to
    //                        // send (excluding fees).
    //                        // The operation will fail if can't be met
    //   
    //       MuxedAccount destination; // recipient of the payment
    //       Asset destAsset;          // what they end up with
    //       int64 destAmount;         // amount they end up with
    //   
    //       Asset path<5>; // additional hops it must go through to get there
    //   };
    //
    // ===========================================================================
    xdr.struct("PathPaymentStrictReceiveOp", [
        [
            "sendAsset",
            xdr.lookup("Asset")
        ],
        [
            "sendMax",
            xdr.lookup("Int64")
        ],
        [
            "destination",
            xdr.lookup("MuxedAccount")
        ],
        [
            "destAsset",
            xdr.lookup("Asset")
        ],
        [
            "destAmount",
            xdr.lookup("Int64")
        ],
        [
            "path",
            xdr.varArray(xdr.lookup("Asset"), 5)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct PathPaymentStrictSendOp
    //   {
    //       Asset sendAsset;  // asset we pay with
    //       int64 sendAmount; // amount of sendAsset to send (excluding fees)
    //   
    //       MuxedAccount destination; // recipient of the payment
    //       Asset destAsset;          // what they end up with
    //       int64 destMin;            // the minimum amount of dest asset to
    //                                 // be received
    //                                 // The operation will fail if it can't be met
    //   
    //       Asset path<5>; // additional hops it must go through to get there
    //   };
    //
    // ===========================================================================
    xdr.struct("PathPaymentStrictSendOp", [
        [
            "sendAsset",
            xdr.lookup("Asset")
        ],
        [
            "sendAmount",
            xdr.lookup("Int64")
        ],
        [
            "destination",
            xdr.lookup("MuxedAccount")
        ],
        [
            "destAsset",
            xdr.lookup("Asset")
        ],
        [
            "destMin",
            xdr.lookup("Int64")
        ],
        [
            "path",
            xdr.varArray(xdr.lookup("Asset"), 5)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct ManageSellOfferOp
    //   {
    //       Asset selling;
    //       Asset buying;
    //       int64 amount; // amount being sold. if set to 0, delete the offer
    //       Price price;  // price of thing being sold in terms of what you are buying
    //   
    //       // 0=create a new offer, otherwise edit an existing offer
    //       int64 offerID;
    //   };
    //
    // ===========================================================================
    xdr.struct("ManageSellOfferOp", [
        [
            "selling",
            xdr.lookup("Asset")
        ],
        [
            "buying",
            xdr.lookup("Asset")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ],
        [
            "price",
            xdr.lookup("Price")
        ],
        [
            "offerId",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct ManageBuyOfferOp
    //   {
    //       Asset selling;
    //       Asset buying;
    //       int64 buyAmount; // amount being bought. if set to 0, delete the offer
    //       Price price;     // price of thing being bought in terms of what you are
    //                        // selling
    //   
    //       // 0=create a new offer, otherwise edit an existing offer
    //       int64 offerID;
    //   };
    //
    // ===========================================================================
    xdr.struct("ManageBuyOfferOp", [
        [
            "selling",
            xdr.lookup("Asset")
        ],
        [
            "buying",
            xdr.lookup("Asset")
        ],
        [
            "buyAmount",
            xdr.lookup("Int64")
        ],
        [
            "price",
            xdr.lookup("Price")
        ],
        [
            "offerId",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct CreatePassiveSellOfferOp
    //   {
    //       Asset selling; // A
    //       Asset buying;  // B
    //       int64 amount;  // amount taker gets
    //       Price price;   // cost of A in terms of B
    //   };
    //
    // ===========================================================================
    xdr.struct("CreatePassiveSellOfferOp", [
        [
            "selling",
            xdr.lookup("Asset")
        ],
        [
            "buying",
            xdr.lookup("Asset")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ],
        [
            "price",
            xdr.lookup("Price")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SetOptionsOp
    //   {
    //       AccountID* inflationDest; // sets the inflation destination
    //   
    //       uint32* clearFlags; // which flags to clear
    //       uint32* setFlags;   // which flags to set
    //   
    //       // account threshold manipulation
    //       uint32* masterWeight; // weight of the master account
    //       uint32* lowThreshold;
    //       uint32* medThreshold;
    //       uint32* highThreshold;
    //   
    //       string32* homeDomain; // sets the home domain
    //   
    //       // Add, update or remove a signer for the account
    //       // signer is deleted if the weight is 0
    //       Signer* signer;
    //   };
    //
    // ===========================================================================
    xdr.struct("SetOptionsOp", [
        [
            "inflationDest",
            xdr.option(xdr.lookup("AccountId"))
        ],
        [
            "clearFlags",
            xdr.option(xdr.lookup("Uint32"))
        ],
        [
            "setFlags",
            xdr.option(xdr.lookup("Uint32"))
        ],
        [
            "masterWeight",
            xdr.option(xdr.lookup("Uint32"))
        ],
        [
            "lowThreshold",
            xdr.option(xdr.lookup("Uint32"))
        ],
        [
            "medThreshold",
            xdr.option(xdr.lookup("Uint32"))
        ],
        [
            "highThreshold",
            xdr.option(xdr.lookup("Uint32"))
        ],
        [
            "homeDomain",
            xdr.option(xdr.lookup("String32"))
        ],
        [
            "signer",
            xdr.option(xdr.lookup("Signer"))
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union ChangeTrustAsset switch (AssetType type)
    //   {
    //   case ASSET_TYPE_NATIVE: // Not credit
    //       void;
    //   
    //   case ASSET_TYPE_CREDIT_ALPHANUM4:
    //       AlphaNum4 alphaNum4;
    //   
    //   case ASSET_TYPE_CREDIT_ALPHANUM12:
    //       AlphaNum12 alphaNum12;
    //   
    //   case ASSET_TYPE_POOL_SHARE:
    //       LiquidityPoolParameters liquidityPool;
    //   
    //       // add other asset types here in the future
    //   };
    //
    // ===========================================================================
    xdr.union("ChangeTrustAsset", {
        switchOn: xdr.lookup("AssetType"),
        switchName: "type",
        switches: [
            [
                "assetTypeNative",
                xdr.void()
            ],
            [
                "assetTypeCreditAlphanum4",
                "alphaNum4"
            ],
            [
                "assetTypeCreditAlphanum12",
                "alphaNum12"
            ],
            [
                "assetTypePoolShare",
                "liquidityPool"
            ]
        ],
        arms: {
            alphaNum4: xdr.lookup("AlphaNum4"),
            alphaNum12: xdr.lookup("AlphaNum12"),
            liquidityPool: xdr.lookup("LiquidityPoolParameters")
        }
    });
    // === xdr source ============================================================
    //
    //   struct ChangeTrustOp
    //   {
    //       ChangeTrustAsset line;
    //   
    //       // if limit is set to 0, deletes the trust line
    //       int64 limit;
    //   };
    //
    // ===========================================================================
    xdr.struct("ChangeTrustOp", [
        [
            "line",
            xdr.lookup("ChangeTrustAsset")
        ],
        [
            "limit",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct AllowTrustOp
    //   {
    //       AccountID trustor;
    //       AssetCode asset;
    //   
    //       // One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG
    //       uint32 authorize;
    //   };
    //
    // ===========================================================================
    xdr.struct("AllowTrustOp", [
        [
            "trustor",
            xdr.lookup("AccountId")
        ],
        [
            "asset",
            xdr.lookup("AssetCode")
        ],
        [
            "authorize",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct ManageDataOp
    //   {
    //       string64 dataName;
    //       DataValue* dataValue; // set to null to clear
    //   };
    //
    // ===========================================================================
    xdr.struct("ManageDataOp", [
        [
            "dataName",
            xdr.lookup("String64")
        ],
        [
            "dataValue",
            xdr.option(xdr.lookup("DataValue"))
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct BumpSequenceOp
    //   {
    //       SequenceNumber bumpTo;
    //   };
    //
    // ===========================================================================
    xdr.struct("BumpSequenceOp", [
        [
            "bumpTo",
            xdr.lookup("SequenceNumber")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct CreateClaimableBalanceOp
    //   {
    //       Asset asset;
    //       int64 amount;
    //       Claimant claimants<10>;
    //   };
    //
    // ===========================================================================
    xdr.struct("CreateClaimableBalanceOp", [
        [
            "asset",
            xdr.lookup("Asset")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ],
        [
            "claimants",
            xdr.varArray(xdr.lookup("Claimant"), 10)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct ClaimClaimableBalanceOp
    //   {
    //       ClaimableBalanceID balanceID;
    //   };
    //
    // ===========================================================================
    xdr.struct("ClaimClaimableBalanceOp", [
        [
            "balanceId",
            xdr.lookup("ClaimableBalanceId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct BeginSponsoringFutureReservesOp
    //   {
    //       AccountID sponsoredID;
    //   };
    //
    // ===========================================================================
    xdr.struct("BeginSponsoringFutureReservesOp", [
        [
            "sponsoredId",
            xdr.lookup("AccountId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum RevokeSponsorshipType
    //   {
    //       REVOKE_SPONSORSHIP_LEDGER_ENTRY = 0,
    //       REVOKE_SPONSORSHIP_SIGNER = 1
    //   };
    //
    // ===========================================================================
    xdr.enum("RevokeSponsorshipType", {
        revokeSponsorshipLedgerEntry: 0,
        revokeSponsorshipSigner: 1
    });
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID accountID;
    //           SignerKey signerKey;
    //       }
    //
    // ===========================================================================
    xdr.struct("RevokeSponsorshipOpSigner", [
        [
            "accountId",
            xdr.lookup("AccountId")
        ],
        [
            "signerKey",
            xdr.lookup("SignerKey")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union RevokeSponsorshipOp switch (RevokeSponsorshipType type)
    //   {
    //   case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
    //       LedgerKey ledgerKey;
    //   case REVOKE_SPONSORSHIP_SIGNER:
    //       struct
    //       {
    //           AccountID accountID;
    //           SignerKey signerKey;
    //       } signer;
    //   };
    //
    // ===========================================================================
    xdr.union("RevokeSponsorshipOp", {
        switchOn: xdr.lookup("RevokeSponsorshipType"),
        switchName: "type",
        switches: [
            [
                "revokeSponsorshipLedgerEntry",
                "ledgerKey"
            ],
            [
                "revokeSponsorshipSigner",
                "signer"
            ]
        ],
        arms: {
            ledgerKey: xdr.lookup("LedgerKey"),
            signer: xdr.lookup("RevokeSponsorshipOpSigner")
        }
    });
    // === xdr source ============================================================
    //
    //   struct ClawbackOp
    //   {
    //       Asset asset;
    //       MuxedAccount from;
    //       int64 amount;
    //   };
    //
    // ===========================================================================
    xdr.struct("ClawbackOp", [
        [
            "asset",
            xdr.lookup("Asset")
        ],
        [
            "from",
            xdr.lookup("MuxedAccount")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct ClawbackClaimableBalanceOp
    //   {
    //       ClaimableBalanceID balanceID;
    //   };
    //
    // ===========================================================================
    xdr.struct("ClawbackClaimableBalanceOp", [
        [
            "balanceId",
            xdr.lookup("ClaimableBalanceId")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct SetTrustLineFlagsOp
    //   {
    //       AccountID trustor;
    //       Asset asset;
    //   
    //       uint32 clearFlags; // which flags to clear
    //       uint32 setFlags;   // which flags to set
    //   };
    //
    // ===========================================================================
    xdr.struct("SetTrustLineFlagsOp", [
        [
            "trustor",
            xdr.lookup("AccountId")
        ],
        [
            "asset",
            xdr.lookup("Asset")
        ],
        [
            "clearFlags",
            xdr.lookup("Uint32")
        ],
        [
            "setFlags",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   const LIQUIDITY_POOL_FEE_V18 = 30;
    //
    // ===========================================================================
    xdr.const("LIQUIDITY_POOL_FEE_V18", 30);
    // === xdr source ============================================================
    //
    //   struct LiquidityPoolDepositOp
    //   {
    //       PoolID liquidityPoolID;
    //       int64 maxAmountA; // maximum amount of first asset to deposit
    //       int64 maxAmountB; // maximum amount of second asset to deposit
    //       Price minPrice;   // minimum depositA/depositB
    //       Price maxPrice;   // maximum depositA/depositB
    //   };
    //
    // ===========================================================================
    xdr.struct("LiquidityPoolDepositOp", [
        [
            "liquidityPoolId",
            xdr.lookup("PoolId")
        ],
        [
            "maxAmountA",
            xdr.lookup("Int64")
        ],
        [
            "maxAmountB",
            xdr.lookup("Int64")
        ],
        [
            "minPrice",
            xdr.lookup("Price")
        ],
        [
            "maxPrice",
            xdr.lookup("Price")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct LiquidityPoolWithdrawOp
    //   {
    //       PoolID liquidityPoolID;
    //       int64 amount;     // amount of pool shares to withdraw
    //       int64 minAmountA; // minimum amount of first asset to withdraw
    //       int64 minAmountB; // minimum amount of second asset to withdraw
    //   };
    //
    // ===========================================================================
    xdr.struct("LiquidityPoolWithdrawOp", [
        [
            "liquidityPoolId",
            xdr.lookup("PoolId")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ],
        [
            "minAmountA",
            xdr.lookup("Int64")
        ],
        [
            "minAmountB",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (OperationType type)
    //       {
    //       case CREATE_ACCOUNT:
    //           CreateAccountOp createAccountOp;
    //       case PAYMENT:
    //           PaymentOp paymentOp;
    //       case PATH_PAYMENT_STRICT_RECEIVE:
    //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;
    //       case MANAGE_SELL_OFFER:
    //           ManageSellOfferOp manageSellOfferOp;
    //       case CREATE_PASSIVE_SELL_OFFER:
    //           CreatePassiveSellOfferOp createPassiveSellOfferOp;
    //       case SET_OPTIONS:
    //           SetOptionsOp setOptionsOp;
    //       case CHANGE_TRUST:
    //           ChangeTrustOp changeTrustOp;
    //       case ALLOW_TRUST:
    //           AllowTrustOp allowTrustOp;
    //       case ACCOUNT_MERGE:
    //           MuxedAccount destination;
    //       case INFLATION:
    //           void;
    //       case MANAGE_DATA:
    //           ManageDataOp manageDataOp;
    //       case BUMP_SEQUENCE:
    //           BumpSequenceOp bumpSequenceOp;
    //       case MANAGE_BUY_OFFER:
    //           ManageBuyOfferOp manageBuyOfferOp;
    //       case PATH_PAYMENT_STRICT_SEND:
    //           PathPaymentStrictSendOp pathPaymentStrictSendOp;
    //       case CREATE_CLAIMABLE_BALANCE:
    //           CreateClaimableBalanceOp createClaimableBalanceOp;
    //       case CLAIM_CLAIMABLE_BALANCE:
    //           ClaimClaimableBalanceOp claimClaimableBalanceOp;
    //       case BEGIN_SPONSORING_FUTURE_RESERVES:
    //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;
    //       case END_SPONSORING_FUTURE_RESERVES:
    //           void;
    //       case REVOKE_SPONSORSHIP:
    //           RevokeSponsorshipOp revokeSponsorshipOp;
    //       case CLAWBACK:
    //           ClawbackOp clawbackOp;
    //       case CLAWBACK_CLAIMABLE_BALANCE:
    //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;
    //       case SET_TRUST_LINE_FLAGS:
    //           SetTrustLineFlagsOp setTrustLineFlagsOp;
    //       case LIQUIDITY_POOL_DEPOSIT:
    //           LiquidityPoolDepositOp liquidityPoolDepositOp;
    //       case LIQUIDITY_POOL_WITHDRAW:
    //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;
    //       }
    //
    // ===========================================================================
    xdr.union("OperationBody", {
        switchOn: xdr.lookup("OperationType"),
        switchName: "type",
        switches: [
            [
                "createAccount",
                "createAccountOp"
            ],
            [
                "payment",
                "paymentOp"
            ],
            [
                "pathPaymentStrictReceive",
                "pathPaymentStrictReceiveOp"
            ],
            [
                "manageSellOffer",
                "manageSellOfferOp"
            ],
            [
                "createPassiveSellOffer",
                "createPassiveSellOfferOp"
            ],
            [
                "setOptions",
                "setOptionsOp"
            ],
            [
                "changeTrust",
                "changeTrustOp"
            ],
            [
                "allowTrust",
                "allowTrustOp"
            ],
            [
                "accountMerge",
                "destination"
            ],
            [
                "inflation",
                xdr.void()
            ],
            [
                "manageData",
                "manageDataOp"
            ],
            [
                "bumpSequence",
                "bumpSequenceOp"
            ],
            [
                "manageBuyOffer",
                "manageBuyOfferOp"
            ],
            [
                "pathPaymentStrictSend",
                "pathPaymentStrictSendOp"
            ],
            [
                "createClaimableBalance",
                "createClaimableBalanceOp"
            ],
            [
                "claimClaimableBalance",
                "claimClaimableBalanceOp"
            ],
            [
                "beginSponsoringFutureReserves",
                "beginSponsoringFutureReservesOp"
            ],
            [
                "endSponsoringFutureReserves",
                xdr.void()
            ],
            [
                "revokeSponsorship",
                "revokeSponsorshipOp"
            ],
            [
                "clawback",
                "clawbackOp"
            ],
            [
                "clawbackClaimableBalance",
                "clawbackClaimableBalanceOp"
            ],
            [
                "setTrustLineFlags",
                "setTrustLineFlagsOp"
            ],
            [
                "liquidityPoolDeposit",
                "liquidityPoolDepositOp"
            ],
            [
                "liquidityPoolWithdraw",
                "liquidityPoolWithdrawOp"
            ]
        ],
        arms: {
            createAccountOp: xdr.lookup("CreateAccountOp"),
            paymentOp: xdr.lookup("PaymentOp"),
            pathPaymentStrictReceiveOp: xdr.lookup("PathPaymentStrictReceiveOp"),
            manageSellOfferOp: xdr.lookup("ManageSellOfferOp"),
            createPassiveSellOfferOp: xdr.lookup("CreatePassiveSellOfferOp"),
            setOptionsOp: xdr.lookup("SetOptionsOp"),
            changeTrustOp: xdr.lookup("ChangeTrustOp"),
            allowTrustOp: xdr.lookup("AllowTrustOp"),
            destination: xdr.lookup("MuxedAccount"),
            manageDataOp: xdr.lookup("ManageDataOp"),
            bumpSequenceOp: xdr.lookup("BumpSequenceOp"),
            manageBuyOfferOp: xdr.lookup("ManageBuyOfferOp"),
            pathPaymentStrictSendOp: xdr.lookup("PathPaymentStrictSendOp"),
            createClaimableBalanceOp: xdr.lookup("CreateClaimableBalanceOp"),
            claimClaimableBalanceOp: xdr.lookup("ClaimClaimableBalanceOp"),
            beginSponsoringFutureReservesOp: xdr.lookup("BeginSponsoringFutureReservesOp"),
            revokeSponsorshipOp: xdr.lookup("RevokeSponsorshipOp"),
            clawbackOp: xdr.lookup("ClawbackOp"),
            clawbackClaimableBalanceOp: xdr.lookup("ClawbackClaimableBalanceOp"),
            setTrustLineFlagsOp: xdr.lookup("SetTrustLineFlagsOp"),
            liquidityPoolDepositOp: xdr.lookup("LiquidityPoolDepositOp"),
            liquidityPoolWithdrawOp: xdr.lookup("LiquidityPoolWithdrawOp")
        }
    });
    // === xdr source ============================================================
    //
    //   struct Operation
    //   {
    //       // sourceAccount is the account used to run the operation
    //       // if not set, the runtime defaults to "sourceAccount" specified at
    //       // the transaction level
    //       MuxedAccount* sourceAccount;
    //   
    //       union switch (OperationType type)
    //       {
    //       case CREATE_ACCOUNT:
    //           CreateAccountOp createAccountOp;
    //       case PAYMENT:
    //           PaymentOp paymentOp;
    //       case PATH_PAYMENT_STRICT_RECEIVE:
    //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;
    //       case MANAGE_SELL_OFFER:
    //           ManageSellOfferOp manageSellOfferOp;
    //       case CREATE_PASSIVE_SELL_OFFER:
    //           CreatePassiveSellOfferOp createPassiveSellOfferOp;
    //       case SET_OPTIONS:
    //           SetOptionsOp setOptionsOp;
    //       case CHANGE_TRUST:
    //           ChangeTrustOp changeTrustOp;
    //       case ALLOW_TRUST:
    //           AllowTrustOp allowTrustOp;
    //       case ACCOUNT_MERGE:
    //           MuxedAccount destination;
    //       case INFLATION:
    //           void;
    //       case MANAGE_DATA:
    //           ManageDataOp manageDataOp;
    //       case BUMP_SEQUENCE:
    //           BumpSequenceOp bumpSequenceOp;
    //       case MANAGE_BUY_OFFER:
    //           ManageBuyOfferOp manageBuyOfferOp;
    //       case PATH_PAYMENT_STRICT_SEND:
    //           PathPaymentStrictSendOp pathPaymentStrictSendOp;
    //       case CREATE_CLAIMABLE_BALANCE:
    //           CreateClaimableBalanceOp createClaimableBalanceOp;
    //       case CLAIM_CLAIMABLE_BALANCE:
    //           ClaimClaimableBalanceOp claimClaimableBalanceOp;
    //       case BEGIN_SPONSORING_FUTURE_RESERVES:
    //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;
    //       case END_SPONSORING_FUTURE_RESERVES:
    //           void;
    //       case REVOKE_SPONSORSHIP:
    //           RevokeSponsorshipOp revokeSponsorshipOp;
    //       case CLAWBACK:
    //           ClawbackOp clawbackOp;
    //       case CLAWBACK_CLAIMABLE_BALANCE:
    //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;
    //       case SET_TRUST_LINE_FLAGS:
    //           SetTrustLineFlagsOp setTrustLineFlagsOp;
    //       case LIQUIDITY_POOL_DEPOSIT:
    //           LiquidityPoolDepositOp liquidityPoolDepositOp;
    //       case LIQUIDITY_POOL_WITHDRAW:
    //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;
    //       }
    //       body;
    //   };
    //
    // ===========================================================================
    xdr.struct("Operation", [
        [
            "sourceAccount",
            xdr.option(xdr.lookup("MuxedAccount"))
        ],
        [
            "body",
            xdr.lookup("OperationBody")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID sourceAccount;
    //           SequenceNumber seqNum;
    //           uint32 opNum;
    //       }
    //
    // ===========================================================================
    xdr.struct("HashIdPreimageOperationId", [
        [
            "sourceAccount",
            xdr.lookup("AccountId")
        ],
        [
            "seqNum",
            xdr.lookup("SequenceNumber")
        ],
        [
            "opNum",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           AccountID sourceAccount;
    //           SequenceNumber seqNum;
    //           uint32 opNum;
    //           PoolID liquidityPoolID;
    //           Asset asset;
    //       }
    //
    // ===========================================================================
    xdr.struct("HashIdPreimageRevokeId", [
        [
            "sourceAccount",
            xdr.lookup("AccountId")
        ],
        [
            "seqNum",
            xdr.lookup("SequenceNumber")
        ],
        [
            "opNum",
            xdr.lookup("Uint32")
        ],
        [
            "liquidityPoolId",
            xdr.lookup("PoolId")
        ],
        [
            "asset",
            xdr.lookup("Asset")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union HashIDPreimage switch (EnvelopeType type)
    //   {
    //   case ENVELOPE_TYPE_OP_ID:
    //       struct
    //       {
    //           AccountID sourceAccount;
    //           SequenceNumber seqNum;
    //           uint32 opNum;
    //       } operationID;
    //   case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
    //       struct
    //       {
    //           AccountID sourceAccount;
    //           SequenceNumber seqNum;
    //           uint32 opNum;
    //           PoolID liquidityPoolID;
    //           Asset asset;
    //       } revokeID;
    //   };
    //
    // ===========================================================================
    xdr.union("HashIdPreimage", {
        switchOn: xdr.lookup("EnvelopeType"),
        switchName: "type",
        switches: [
            [
                "envelopeTypeOpId",
                "operationId"
            ],
            [
                "envelopeTypePoolRevokeOpId",
                "revokeId"
            ]
        ],
        arms: {
            operationId: xdr.lookup("HashIdPreimageOperationId"),
            revokeId: xdr.lookup("HashIdPreimageRevokeId")
        }
    });
    // === xdr source ============================================================
    //
    //   enum MemoType
    //   {
    //       MEMO_NONE = 0,
    //       MEMO_TEXT = 1,
    //       MEMO_ID = 2,
    //       MEMO_HASH = 3,
    //       MEMO_RETURN = 4
    //   };
    //
    // ===========================================================================
    xdr.enum("MemoType", {
        memoNone: 0,
        memoText: 1,
        memoId: 2,
        memoHash: 3,
        memoReturn: 4
    });
    // === xdr source ============================================================
    //
    //   union Memo switch (MemoType type)
    //   {
    //   case MEMO_NONE:
    //       void;
    //   case MEMO_TEXT:
    //       string text<28>;
    //   case MEMO_ID:
    //       uint64 id;
    //   case MEMO_HASH:
    //       Hash hash; // the hash of what to pull from the content server
    //   case MEMO_RETURN:
    //       Hash retHash; // the hash of the tx you are rejecting
    //   };
    //
    // ===========================================================================
    xdr.union("Memo", {
        switchOn: xdr.lookup("MemoType"),
        switchName: "type",
        switches: [
            [
                "memoNone",
                xdr.void()
            ],
            [
                "memoText",
                "text"
            ],
            [
                "memoId",
                "id"
            ],
            [
                "memoHash",
                "hash"
            ],
            [
                "memoReturn",
                "retHash"
            ]
        ],
        arms: {
            text: xdr.string(28),
            id: xdr.lookup("Uint64"),
            hash: xdr.lookup("Hash"),
            retHash: xdr.lookup("Hash")
        }
    });
    // === xdr source ============================================================
    //
    //   struct TimeBounds
    //   {
    //       TimePoint minTime;
    //       TimePoint maxTime; // 0 here means no maxTime
    //   };
    //
    // ===========================================================================
    xdr.struct("TimeBounds", [
        [
            "minTime",
            xdr.lookup("TimePoint")
        ],
        [
            "maxTime",
            xdr.lookup("TimePoint")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct LedgerBounds
    //   {
    //       uint32 minLedger;
    //       uint32 maxLedger; // 0 here means no maxLedger
    //   };
    //
    // ===========================================================================
    xdr.struct("LedgerBounds", [
        [
            "minLedger",
            xdr.lookup("Uint32")
        ],
        [
            "maxLedger",
            xdr.lookup("Uint32")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct PreconditionsV2
    //   {
    //       TimeBounds* timeBounds;
    //   
    //       // Transaction only valid for ledger numbers n such that
    //       // minLedger <= n < maxLedger (if maxLedger == 0, then
    //       // only minLedger is checked)
    //       LedgerBounds* ledgerBounds;
    //   
    //       // If NULL, only valid when sourceAccount's sequence number
    //       // is seqNum - 1.  Otherwise, valid when sourceAccount's
    //       // sequence number n satisfies minSeqNum <= n < tx.seqNum.
    //       // Note that after execution the account's sequence number
    //       // is always raised to tx.seqNum, and a transaction is not
    //       // valid if tx.seqNum is too high to ensure replay protection.
    //       SequenceNumber* minSeqNum;
    //   
    //       // For the transaction to be valid, the current ledger time must
    //       // be at least minSeqAge greater than sourceAccount's seqTime.
    //       Duration minSeqAge;
    //   
    //       // For the transaction to be valid, the current ledger number
    //       // must be at least minSeqLedgerGap greater than sourceAccount's
    //       // seqLedger.
    //       uint32 minSeqLedgerGap;
    //   
    //       // For the transaction to be valid, there must be a signature
    //       // corresponding to every Signer in this array, even if the
    //       // signature is not otherwise required by the sourceAccount or
    //       // operations.
    //       SignerKey extraSigners<2>;
    //   };
    //
    // ===========================================================================
    xdr.struct("PreconditionsV2", [
        [
            "timeBounds",
            xdr.option(xdr.lookup("TimeBounds"))
        ],
        [
            "ledgerBounds",
            xdr.option(xdr.lookup("LedgerBounds"))
        ],
        [
            "minSeqNum",
            xdr.option(xdr.lookup("SequenceNumber"))
        ],
        [
            "minSeqAge",
            xdr.lookup("Duration")
        ],
        [
            "minSeqLedgerGap",
            xdr.lookup("Uint32")
        ],
        [
            "extraSigners",
            xdr.varArray(xdr.lookup("SignerKey"), 2)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum PreconditionType
    //   {
    //       PRECOND_NONE = 0,
    //       PRECOND_TIME = 1,
    //       PRECOND_V2 = 2
    //   };
    //
    // ===========================================================================
    xdr.enum("PreconditionType", {
        precondNone: 0,
        precondTime: 1,
        precondV2: 2
    });
    // === xdr source ============================================================
    //
    //   union Preconditions switch (PreconditionType type)
    //   {
    //   case PRECOND_NONE:
    //       void;
    //   case PRECOND_TIME:
    //       TimeBounds timeBounds;
    //   case PRECOND_V2:
    //       PreconditionsV2 v2;
    //   };
    //
    // ===========================================================================
    xdr.union("Preconditions", {
        switchOn: xdr.lookup("PreconditionType"),
        switchName: "type",
        switches: [
            [
                "precondNone",
                xdr.void()
            ],
            [
                "precondTime",
                "timeBounds"
            ],
            [
                "precondV2",
                "v2"
            ]
        ],
        arms: {
            timeBounds: xdr.lookup("TimeBounds"),
            v2: xdr.lookup("PreconditionsV2")
        }
    });
    // === xdr source ============================================================
    //
    //   const MAX_OPS_PER_TX = 100;
    //
    // ===========================================================================
    xdr.const("MAX_OPS_PER_TX", 100);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("TransactionV0Ext", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct TransactionV0
    //   {
    //       uint256 sourceAccountEd25519;
    //       uint32 fee;
    //       SequenceNumber seqNum;
    //       TimeBounds* timeBounds;
    //       Memo memo;
    //       Operation operations<MAX_OPS_PER_TX>;
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionV0", [
        [
            "sourceAccountEd25519",
            xdr.lookup("Uint256")
        ],
        [
            "fee",
            xdr.lookup("Uint32")
        ],
        [
            "seqNum",
            xdr.lookup("SequenceNumber")
        ],
        [
            "timeBounds",
            xdr.option(xdr.lookup("TimeBounds"))
        ],
        [
            "memo",
            xdr.lookup("Memo")
        ],
        [
            "operations",
            xdr.varArray(xdr.lookup("Operation"), xdr.lookup("MAX_OPS_PER_TX"))
        ],
        [
            "ext",
            xdr.lookup("TransactionV0Ext")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct TransactionV0Envelope
    //   {
    //       TransactionV0 tx;
    //       /* Each decorated signature is a signature over the SHA256 hash of
    //        * a TransactionSignaturePayload */
    //       DecoratedSignature signatures<20>;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionV0Envelope", [
        [
            "tx",
            xdr.lookup("TransactionV0")
        ],
        [
            "signatures",
            xdr.varArray(xdr.lookup("DecoratedSignature"), 20)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("TransactionExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct Transaction
    //   {
    //       // account used to run the transaction
    //       MuxedAccount sourceAccount;
    //   
    //       // the fee the sourceAccount will pay
    //       uint32 fee;
    //   
    //       // sequence number to consume in the account
    //       SequenceNumber seqNum;
    //   
    //       // validity conditions
    //       Preconditions cond;
    //   
    //       Memo memo;
    //   
    //       Operation operations<MAX_OPS_PER_TX>;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("Transaction", [
        [
            "sourceAccount",
            xdr.lookup("MuxedAccount")
        ],
        [
            "fee",
            xdr.lookup("Uint32")
        ],
        [
            "seqNum",
            xdr.lookup("SequenceNumber")
        ],
        [
            "cond",
            xdr.lookup("Preconditions")
        ],
        [
            "memo",
            xdr.lookup("Memo")
        ],
        [
            "operations",
            xdr.varArray(xdr.lookup("Operation"), xdr.lookup("MAX_OPS_PER_TX"))
        ],
        [
            "ext",
            xdr.lookup("TransactionExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct TransactionV1Envelope
    //   {
    //       Transaction tx;
    //       /* Each decorated signature is a signature over the SHA256 hash of
    //        * a TransactionSignaturePayload */
    //       DecoratedSignature signatures<20>;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionV1Envelope", [
        [
            "tx",
            xdr.lookup("Transaction")
        ],
        [
            "signatures",
            xdr.varArray(xdr.lookup("DecoratedSignature"), 20)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (EnvelopeType type)
    //       {
    //       case ENVELOPE_TYPE_TX:
    //           TransactionV1Envelope v1;
    //       }
    //
    // ===========================================================================
    xdr.union("FeeBumpTransactionInnerTx", {
        switchOn: xdr.lookup("EnvelopeType"),
        switchName: "type",
        switches: [
            [
                "envelopeTypeTx",
                "v1"
            ]
        ],
        arms: {
            v1: xdr.lookup("TransactionV1Envelope")
        }
    });
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("FeeBumpTransactionExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct FeeBumpTransaction
    //   {
    //       MuxedAccount feeSource;
    //       int64 fee;
    //       union switch (EnvelopeType type)
    //       {
    //       case ENVELOPE_TYPE_TX:
    //           TransactionV1Envelope v1;
    //       }
    //       innerTx;
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("FeeBumpTransaction", [
        [
            "feeSource",
            xdr.lookup("MuxedAccount")
        ],
        [
            "fee",
            xdr.lookup("Int64")
        ],
        [
            "innerTx",
            xdr.lookup("FeeBumpTransactionInnerTx")
        ],
        [
            "ext",
            xdr.lookup("FeeBumpTransactionExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct FeeBumpTransactionEnvelope
    //   {
    //       FeeBumpTransaction tx;
    //       /* Each decorated signature is a signature over the SHA256 hash of
    //        * a TransactionSignaturePayload */
    //       DecoratedSignature signatures<20>;
    //   };
    //
    // ===========================================================================
    xdr.struct("FeeBumpTransactionEnvelope", [
        [
            "tx",
            xdr.lookup("FeeBumpTransaction")
        ],
        [
            "signatures",
            xdr.varArray(xdr.lookup("DecoratedSignature"), 20)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union TransactionEnvelope switch (EnvelopeType type)
    //   {
    //   case ENVELOPE_TYPE_TX_V0:
    //       TransactionV0Envelope v0;
    //   case ENVELOPE_TYPE_TX:
    //       TransactionV1Envelope v1;
    //   case ENVELOPE_TYPE_TX_FEE_BUMP:
    //       FeeBumpTransactionEnvelope feeBump;
    //   };
    //
    // ===========================================================================
    xdr.union("TransactionEnvelope", {
        switchOn: xdr.lookup("EnvelopeType"),
        switchName: "type",
        switches: [
            [
                "envelopeTypeTxV0",
                "v0"
            ],
            [
                "envelopeTypeTx",
                "v1"
            ],
            [
                "envelopeTypeTxFeeBump",
                "feeBump"
            ]
        ],
        arms: {
            v0: xdr.lookup("TransactionV0Envelope"),
            v1: xdr.lookup("TransactionV1Envelope"),
            feeBump: xdr.lookup("FeeBumpTransactionEnvelope")
        }
    });
    // === xdr source ============================================================
    //
    //   union switch (EnvelopeType type)
    //       {
    //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0
    //       case ENVELOPE_TYPE_TX:
    //           Transaction tx;
    //       case ENVELOPE_TYPE_TX_FEE_BUMP:
    //           FeeBumpTransaction feeBump;
    //       }
    //
    // ===========================================================================
    xdr.union("TransactionSignaturePayloadTaggedTransaction", {
        switchOn: xdr.lookup("EnvelopeType"),
        switchName: "type",
        switches: [
            [
                "envelopeTypeTx",
                "tx"
            ],
            [
                "envelopeTypeTxFeeBump",
                "feeBump"
            ]
        ],
        arms: {
            tx: xdr.lookup("Transaction"),
            feeBump: xdr.lookup("FeeBumpTransaction")
        }
    });
    // === xdr source ============================================================
    //
    //   struct TransactionSignaturePayload
    //   {
    //       Hash networkId;
    //       union switch (EnvelopeType type)
    //       {
    //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0
    //       case ENVELOPE_TYPE_TX:
    //           Transaction tx;
    //       case ENVELOPE_TYPE_TX_FEE_BUMP:
    //           FeeBumpTransaction feeBump;
    //       }
    //       taggedTransaction;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionSignaturePayload", [
        [
            "networkId",
            xdr.lookup("Hash")
        ],
        [
            "taggedTransaction",
            xdr.lookup("TransactionSignaturePayloadTaggedTransaction")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   enum ClaimAtomType
    //   {
    //       CLAIM_ATOM_TYPE_V0 = 0,
    //       CLAIM_ATOM_TYPE_ORDER_BOOK = 1,
    //       CLAIM_ATOM_TYPE_LIQUIDITY_POOL = 2
    //   };
    //
    // ===========================================================================
    xdr.enum("ClaimAtomType", {
        claimAtomTypeV0: 0,
        claimAtomTypeOrderBook: 1,
        claimAtomTypeLiquidityPool: 2
    });
    // === xdr source ============================================================
    //
    //   struct ClaimOfferAtomV0
    //   {
    //       // emitted to identify the offer
    //       uint256 sellerEd25519; // Account that owns the offer
    //       int64 offerID;
    //   
    //       // amount and asset taken from the owner
    //       Asset assetSold;
    //       int64 amountSold;
    //   
    //       // amount and asset sent to the owner
    //       Asset assetBought;
    //       int64 amountBought;
    //   };
    //
    // ===========================================================================
    xdr.struct("ClaimOfferAtomV0", [
        [
            "sellerEd25519",
            xdr.lookup("Uint256")
        ],
        [
            "offerId",
            xdr.lookup("Int64")
        ],
        [
            "assetSold",
            xdr.lookup("Asset")
        ],
        [
            "amountSold",
            xdr.lookup("Int64")
        ],
        [
            "assetBought",
            xdr.lookup("Asset")
        ],
        [
            "amountBought",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct ClaimOfferAtom
    //   {
    //       // emitted to identify the offer
    //       AccountID sellerID; // Account that owns the offer
    //       int64 offerID;
    //   
    //       // amount and asset taken from the owner
    //       Asset assetSold;
    //       int64 amountSold;
    //   
    //       // amount and asset sent to the owner
    //       Asset assetBought;
    //       int64 amountBought;
    //   };
    //
    // ===========================================================================
    xdr.struct("ClaimOfferAtom", [
        [
            "sellerId",
            xdr.lookup("AccountId")
        ],
        [
            "offerId",
            xdr.lookup("Int64")
        ],
        [
            "assetSold",
            xdr.lookup("Asset")
        ],
        [
            "amountSold",
            xdr.lookup("Int64")
        ],
        [
            "assetBought",
            xdr.lookup("Asset")
        ],
        [
            "amountBought",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct ClaimLiquidityAtom
    //   {
    //       PoolID liquidityPoolID;
    //   
    //       // amount and asset taken from the pool
    //       Asset assetSold;
    //       int64 amountSold;
    //   
    //       // amount and asset sent to the pool
    //       Asset assetBought;
    //       int64 amountBought;
    //   };
    //
    // ===========================================================================
    xdr.struct("ClaimLiquidityAtom", [
        [
            "liquidityPoolId",
            xdr.lookup("PoolId")
        ],
        [
            "assetSold",
            xdr.lookup("Asset")
        ],
        [
            "amountSold",
            xdr.lookup("Int64")
        ],
        [
            "assetBought",
            xdr.lookup("Asset")
        ],
        [
            "amountBought",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union ClaimAtom switch (ClaimAtomType type)
    //   {
    //   case CLAIM_ATOM_TYPE_V0:
    //       ClaimOfferAtomV0 v0;
    //   case CLAIM_ATOM_TYPE_ORDER_BOOK:
    //       ClaimOfferAtom orderBook;
    //   case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:
    //       ClaimLiquidityAtom liquidityPool;
    //   };
    //
    // ===========================================================================
    xdr.union("ClaimAtom", {
        switchOn: xdr.lookup("ClaimAtomType"),
        switchName: "type",
        switches: [
            [
                "claimAtomTypeV0",
                "v0"
            ],
            [
                "claimAtomTypeOrderBook",
                "orderBook"
            ],
            [
                "claimAtomTypeLiquidityPool",
                "liquidityPool"
            ]
        ],
        arms: {
            v0: xdr.lookup("ClaimOfferAtomV0"),
            orderBook: xdr.lookup("ClaimOfferAtom"),
            liquidityPool: xdr.lookup("ClaimLiquidityAtom")
        }
    });
    // === xdr source ============================================================
    //
    //   enum CreateAccountResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       CREATE_ACCOUNT_SUCCESS = 0, // account was created
    //   
    //       // codes considered as "failure" for the operation
    //       CREATE_ACCOUNT_MALFORMED = -1,   // invalid destination
    //       CREATE_ACCOUNT_UNDERFUNDED = -2, // not enough funds in source account
    //       CREATE_ACCOUNT_LOW_RESERVE =
    //           -3, // would create an account below the min reserve
    //       CREATE_ACCOUNT_ALREADY_EXIST = -4 // account already exists
    //   };
    //
    // ===========================================================================
    xdr.enum("CreateAccountResultCode", {
        createAccountSuccess: 0,
        createAccountMalformed: -1,
        createAccountUnderfunded: -2,
        createAccountLowReserve: -3,
        createAccountAlreadyExist: -4
    });
    // === xdr source ============================================================
    //
    //   union CreateAccountResult switch (CreateAccountResultCode code)
    //   {
    //   case CREATE_ACCOUNT_SUCCESS:
    //       void;
    //   case CREATE_ACCOUNT_MALFORMED:
    //   case CREATE_ACCOUNT_UNDERFUNDED:
    //   case CREATE_ACCOUNT_LOW_RESERVE:
    //   case CREATE_ACCOUNT_ALREADY_EXIST:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("CreateAccountResult", {
        switchOn: xdr.lookup("CreateAccountResultCode"),
        switchName: "code",
        switches: [
            [
                "createAccountSuccess",
                xdr.void()
            ],
            [
                "createAccountMalformed",
                xdr.void()
            ],
            [
                "createAccountUnderfunded",
                xdr.void()
            ],
            [
                "createAccountLowReserve",
                xdr.void()
            ],
            [
                "createAccountAlreadyExist",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum PaymentResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       PAYMENT_SUCCESS = 0, // payment successfully completed
    //   
    //       // codes considered as "failure" for the operation
    //       PAYMENT_MALFORMED = -1,          // bad input
    //       PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account
    //       PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account
    //       PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer
    //       PAYMENT_NO_DESTINATION = -5,     // destination account does not exist
    //       PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset
    //       PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset
    //       PAYMENT_LINE_FULL = -8,      // destination would go above their limit
    //       PAYMENT_NO_ISSUER = -9       // missing issuer on asset
    //   };
    //
    // ===========================================================================
    xdr.enum("PaymentResultCode", {
        paymentSuccess: 0,
        paymentMalformed: -1,
        paymentUnderfunded: -2,
        paymentSrcNoTrust: -3,
        paymentSrcNotAuthorized: -4,
        paymentNoDestination: -5,
        paymentNoTrust: -6,
        paymentNotAuthorized: -7,
        paymentLineFull: -8,
        paymentNoIssuer: -9
    });
    // === xdr source ============================================================
    //
    //   union PaymentResult switch (PaymentResultCode code)
    //   {
    //   case PAYMENT_SUCCESS:
    //       void;
    //   case PAYMENT_MALFORMED:
    //   case PAYMENT_UNDERFUNDED:
    //   case PAYMENT_SRC_NO_TRUST:
    //   case PAYMENT_SRC_NOT_AUTHORIZED:
    //   case PAYMENT_NO_DESTINATION:
    //   case PAYMENT_NO_TRUST:
    //   case PAYMENT_NOT_AUTHORIZED:
    //   case PAYMENT_LINE_FULL:
    //   case PAYMENT_NO_ISSUER:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("PaymentResult", {
        switchOn: xdr.lookup("PaymentResultCode"),
        switchName: "code",
        switches: [
            [
                "paymentSuccess",
                xdr.void()
            ],
            [
                "paymentMalformed",
                xdr.void()
            ],
            [
                "paymentUnderfunded",
                xdr.void()
            ],
            [
                "paymentSrcNoTrust",
                xdr.void()
            ],
            [
                "paymentSrcNotAuthorized",
                xdr.void()
            ],
            [
                "paymentNoDestination",
                xdr.void()
            ],
            [
                "paymentNoTrust",
                xdr.void()
            ],
            [
                "paymentNotAuthorized",
                xdr.void()
            ],
            [
                "paymentLineFull",
                xdr.void()
            ],
            [
                "paymentNoIssuer",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum PathPaymentStrictReceiveResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       PATH_PAYMENT_STRICT_RECEIVE_SUCCESS = 0, // success
    //   
    //       // codes considered as "failure" for the operation
    //       PATH_PAYMENT_STRICT_RECEIVE_MALFORMED = -1, // bad input
    //       PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED =
    //           -2, // not enough funds in source account
    //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST =
    //           -3, // no trust line on source account
    //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED =
    //           -4, // source not authorized to transfer
    //       PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION =
    //           -5, // destination account does not exist
    //       PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST =
    //           -6, // dest missing a trust line for asset
    //       PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED =
    //           -7, // dest not authorized to hold asset
    //       PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL =
    //           -8, // dest would go above their limit
    //       PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER = -9, // missing issuer on one asset
    //       PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS =
    //           -10, // not enough offers to satisfy path
    //       PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF =
    //           -11, // would cross one of its own offers
    //       PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX = -12 // could not satisfy sendmax
    //   };
    //
    // ===========================================================================
    xdr.enum("PathPaymentStrictReceiveResultCode", {
        pathPaymentStrictReceiveSuccess: 0,
        pathPaymentStrictReceiveMalformed: -1,
        pathPaymentStrictReceiveUnderfunded: -2,
        pathPaymentStrictReceiveSrcNoTrust: -3,
        pathPaymentStrictReceiveSrcNotAuthorized: -4,
        pathPaymentStrictReceiveNoDestination: -5,
        pathPaymentStrictReceiveNoTrust: -6,
        pathPaymentStrictReceiveNotAuthorized: -7,
        pathPaymentStrictReceiveLineFull: -8,
        pathPaymentStrictReceiveNoIssuer: -9,
        pathPaymentStrictReceiveTooFewOffers: -10,
        pathPaymentStrictReceiveOfferCrossSelf: -11,
        pathPaymentStrictReceiveOverSendmax: -12
    });
    // === xdr source ============================================================
    //
    //   struct SimplePaymentResult
    //   {
    //       AccountID destination;
    //       Asset asset;
    //       int64 amount;
    //   };
    //
    // ===========================================================================
    xdr.struct("SimplePaymentResult", [
        [
            "destination",
            xdr.lookup("AccountId")
        ],
        [
            "asset",
            xdr.lookup("Asset")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           ClaimAtom offers<>;
    //           SimplePaymentResult last;
    //       }
    //
    // ===========================================================================
    xdr.struct("PathPaymentStrictReceiveResultSuccess", [
        [
            "offers",
            xdr.varArray(xdr.lookup("ClaimAtom"), 2147483647)
        ],
        [
            "last",
            xdr.lookup("SimplePaymentResult")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union PathPaymentStrictReceiveResult switch (
    //       PathPaymentStrictReceiveResultCode code)
    //   {
    //   case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:
    //       struct
    //       {
    //           ClaimAtom offers<>;
    //           SimplePaymentResult last;
    //       } success;
    //   case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:
    //   case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:
    //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:
    //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:
    //   case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:
    //   case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:
    //   case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:
    //   case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:
    //       void;
    //   case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:
    //       Asset noIssuer; // the asset that caused the error
    //   case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:
    //   case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:
    //   case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("PathPaymentStrictReceiveResult", {
        switchOn: xdr.lookup("PathPaymentStrictReceiveResultCode"),
        switchName: "code",
        switches: [
            [
                "pathPaymentStrictReceiveSuccess",
                "success"
            ],
            [
                "pathPaymentStrictReceiveMalformed",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveUnderfunded",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveSrcNoTrust",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveSrcNotAuthorized",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveNoDestination",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveNoTrust",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveNotAuthorized",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveLineFull",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveNoIssuer",
                "noIssuer"
            ],
            [
                "pathPaymentStrictReceiveTooFewOffers",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveOfferCrossSelf",
                xdr.void()
            ],
            [
                "pathPaymentStrictReceiveOverSendmax",
                xdr.void()
            ]
        ],
        arms: {
            success: xdr.lookup("PathPaymentStrictReceiveResultSuccess"),
            noIssuer: xdr.lookup("Asset")
        }
    });
    // === xdr source ============================================================
    //
    //   enum PathPaymentStrictSendResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       PATH_PAYMENT_STRICT_SEND_SUCCESS = 0, // success
    //   
    //       // codes considered as "failure" for the operation
    //       PATH_PAYMENT_STRICT_SEND_MALFORMED = -1, // bad input
    //       PATH_PAYMENT_STRICT_SEND_UNDERFUNDED =
    //           -2, // not enough funds in source account
    //       PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST =
    //           -3, // no trust line on source account
    //       PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED =
    //           -4, // source not authorized to transfer
    //       PATH_PAYMENT_STRICT_SEND_NO_DESTINATION =
    //           -5, // destination account does not exist
    //       PATH_PAYMENT_STRICT_SEND_NO_TRUST =
    //           -6, // dest missing a trust line for asset
    //       PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED =
    //           -7, // dest not authorized to hold asset
    //       PATH_PAYMENT_STRICT_SEND_LINE_FULL = -8, // dest would go above their limit
    //       PATH_PAYMENT_STRICT_SEND_NO_ISSUER = -9, // missing issuer on one asset
    //       PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS =
    //           -10, // not enough offers to satisfy path
    //       PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF =
    //           -11, // would cross one of its own offers
    //       PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN = -12 // could not satisfy destMin
    //   };
    //
    // ===========================================================================
    xdr.enum("PathPaymentStrictSendResultCode", {
        pathPaymentStrictSendSuccess: 0,
        pathPaymentStrictSendMalformed: -1,
        pathPaymentStrictSendUnderfunded: -2,
        pathPaymentStrictSendSrcNoTrust: -3,
        pathPaymentStrictSendSrcNotAuthorized: -4,
        pathPaymentStrictSendNoDestination: -5,
        pathPaymentStrictSendNoTrust: -6,
        pathPaymentStrictSendNotAuthorized: -7,
        pathPaymentStrictSendLineFull: -8,
        pathPaymentStrictSendNoIssuer: -9,
        pathPaymentStrictSendTooFewOffers: -10,
        pathPaymentStrictSendOfferCrossSelf: -11,
        pathPaymentStrictSendUnderDestmin: -12
    });
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           ClaimAtom offers<>;
    //           SimplePaymentResult last;
    //       }
    //
    // ===========================================================================
    xdr.struct("PathPaymentStrictSendResultSuccess", [
        [
            "offers",
            xdr.varArray(xdr.lookup("ClaimAtom"), 2147483647)
        ],
        [
            "last",
            xdr.lookup("SimplePaymentResult")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)
    //   {
    //   case PATH_PAYMENT_STRICT_SEND_SUCCESS:
    //       struct
    //       {
    //           ClaimAtom offers<>;
    //           SimplePaymentResult last;
    //       } success;
    //   case PATH_PAYMENT_STRICT_SEND_MALFORMED:
    //   case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:
    //   case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:
    //   case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:
    //   case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:
    //   case PATH_PAYMENT_STRICT_SEND_NO_TRUST:
    //   case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:
    //   case PATH_PAYMENT_STRICT_SEND_LINE_FULL:
    //       void;
    //   case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:
    //       Asset noIssuer; // the asset that caused the error
    //   case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:
    //   case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:
    //   case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("PathPaymentStrictSendResult", {
        switchOn: xdr.lookup("PathPaymentStrictSendResultCode"),
        switchName: "code",
        switches: [
            [
                "pathPaymentStrictSendSuccess",
                "success"
            ],
            [
                "pathPaymentStrictSendMalformed",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendUnderfunded",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendSrcNoTrust",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendSrcNotAuthorized",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendNoDestination",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendNoTrust",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendNotAuthorized",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendLineFull",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendNoIssuer",
                "noIssuer"
            ],
            [
                "pathPaymentStrictSendTooFewOffers",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendOfferCrossSelf",
                xdr.void()
            ],
            [
                "pathPaymentStrictSendUnderDestmin",
                xdr.void()
            ]
        ],
        arms: {
            success: xdr.lookup("PathPaymentStrictSendResultSuccess"),
            noIssuer: xdr.lookup("Asset")
        }
    });
    // === xdr source ============================================================
    //
    //   enum ManageSellOfferResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       MANAGE_SELL_OFFER_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       MANAGE_SELL_OFFER_MALFORMED = -1, // generated offer would be invalid
    //       MANAGE_SELL_OFFER_SELL_NO_TRUST =
    //           -2,                              // no trust line for what we're selling
    //       MANAGE_SELL_OFFER_BUY_NO_TRUST = -3, // no trust line for what we're buying
    //       MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell
    //       MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy
    //       MANAGE_SELL_OFFER_LINE_FULL = -6, // can't receive more of what it's buying
    //       MANAGE_SELL_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell
    //       MANAGE_SELL_OFFER_CROSS_SELF =
    //           -8, // would cross an offer from the same user
    //       MANAGE_SELL_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling
    //       MANAGE_SELL_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying
    //   
    //       // update errors
    //       MANAGE_SELL_OFFER_NOT_FOUND =
    //           -11, // offerID does not match an existing offer
    //   
    //       MANAGE_SELL_OFFER_LOW_RESERVE =
    //           -12 // not enough funds to create a new Offer
    //   };
    //
    // ===========================================================================
    xdr.enum("ManageSellOfferResultCode", {
        manageSellOfferSuccess: 0,
        manageSellOfferMalformed: -1,
        manageSellOfferSellNoTrust: -2,
        manageSellOfferBuyNoTrust: -3,
        manageSellOfferSellNotAuthorized: -4,
        manageSellOfferBuyNotAuthorized: -5,
        manageSellOfferLineFull: -6,
        manageSellOfferUnderfunded: -7,
        manageSellOfferCrossSelf: -8,
        manageSellOfferSellNoIssuer: -9,
        manageSellOfferBuyNoIssuer: -10,
        manageSellOfferNotFound: -11,
        manageSellOfferLowReserve: -12
    });
    // === xdr source ============================================================
    //
    //   enum ManageOfferEffect
    //   {
    //       MANAGE_OFFER_CREATED = 0,
    //       MANAGE_OFFER_UPDATED = 1,
    //       MANAGE_OFFER_DELETED = 2
    //   };
    //
    // ===========================================================================
    xdr.enum("ManageOfferEffect", {
        manageOfferCreated: 0,
        manageOfferUpdated: 1,
        manageOfferDeleted: 2
    });
    // === xdr source ============================================================
    //
    //   union switch (ManageOfferEffect effect)
    //       {
    //       case MANAGE_OFFER_CREATED:
    //       case MANAGE_OFFER_UPDATED:
    //           OfferEntry offer;
    //       case MANAGE_OFFER_DELETED:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("ManageOfferSuccessResultOffer", {
        switchOn: xdr.lookup("ManageOfferEffect"),
        switchName: "effect",
        switches: [
            [
                "manageOfferCreated",
                "offer"
            ],
            [
                "manageOfferUpdated",
                "offer"
            ],
            [
                "manageOfferDeleted",
                xdr.void()
            ]
        ],
        arms: {
            offer: xdr.lookup("OfferEntry")
        }
    });
    // === xdr source ============================================================
    //
    //   struct ManageOfferSuccessResult
    //   {
    //       // offers that got claimed while creating this offer
    //       ClaimAtom offersClaimed<>;
    //   
    //       union switch (ManageOfferEffect effect)
    //       {
    //       case MANAGE_OFFER_CREATED:
    //       case MANAGE_OFFER_UPDATED:
    //           OfferEntry offer;
    //       case MANAGE_OFFER_DELETED:
    //           void;
    //       }
    //       offer;
    //   };
    //
    // ===========================================================================
    xdr.struct("ManageOfferSuccessResult", [
        [
            "offersClaimed",
            xdr.varArray(xdr.lookup("ClaimAtom"), 2147483647)
        ],
        [
            "offer",
            xdr.lookup("ManageOfferSuccessResultOffer")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union ManageSellOfferResult switch (ManageSellOfferResultCode code)
    //   {
    //   case MANAGE_SELL_OFFER_SUCCESS:
    //       ManageOfferSuccessResult success;
    //   case MANAGE_SELL_OFFER_MALFORMED:
    //   case MANAGE_SELL_OFFER_SELL_NO_TRUST:
    //   case MANAGE_SELL_OFFER_BUY_NO_TRUST:
    //   case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:
    //   case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:
    //   case MANAGE_SELL_OFFER_LINE_FULL:
    //   case MANAGE_SELL_OFFER_UNDERFUNDED:
    //   case MANAGE_SELL_OFFER_CROSS_SELF:
    //   case MANAGE_SELL_OFFER_SELL_NO_ISSUER:
    //   case MANAGE_SELL_OFFER_BUY_NO_ISSUER:
    //   case MANAGE_SELL_OFFER_NOT_FOUND:
    //   case MANAGE_SELL_OFFER_LOW_RESERVE:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ManageSellOfferResult", {
        switchOn: xdr.lookup("ManageSellOfferResultCode"),
        switchName: "code",
        switches: [
            [
                "manageSellOfferSuccess",
                "success"
            ],
            [
                "manageSellOfferMalformed",
                xdr.void()
            ],
            [
                "manageSellOfferSellNoTrust",
                xdr.void()
            ],
            [
                "manageSellOfferBuyNoTrust",
                xdr.void()
            ],
            [
                "manageSellOfferSellNotAuthorized",
                xdr.void()
            ],
            [
                "manageSellOfferBuyNotAuthorized",
                xdr.void()
            ],
            [
                "manageSellOfferLineFull",
                xdr.void()
            ],
            [
                "manageSellOfferUnderfunded",
                xdr.void()
            ],
            [
                "manageSellOfferCrossSelf",
                xdr.void()
            ],
            [
                "manageSellOfferSellNoIssuer",
                xdr.void()
            ],
            [
                "manageSellOfferBuyNoIssuer",
                xdr.void()
            ],
            [
                "manageSellOfferNotFound",
                xdr.void()
            ],
            [
                "manageSellOfferLowReserve",
                xdr.void()
            ]
        ],
        arms: {
            success: xdr.lookup("ManageOfferSuccessResult")
        }
    });
    // === xdr source ============================================================
    //
    //   enum ManageBuyOfferResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       MANAGE_BUY_OFFER_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       MANAGE_BUY_OFFER_MALFORMED = -1,     // generated offer would be invalid
    //       MANAGE_BUY_OFFER_SELL_NO_TRUST = -2, // no trust line for what we're selling
    //       MANAGE_BUY_OFFER_BUY_NO_TRUST = -3,  // no trust line for what we're buying
    //       MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell
    //       MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy
    //       MANAGE_BUY_OFFER_LINE_FULL = -6,   // can't receive more of what it's buying
    //       MANAGE_BUY_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell
    //       MANAGE_BUY_OFFER_CROSS_SELF = -8, // would cross an offer from the same user
    //       MANAGE_BUY_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling
    //       MANAGE_BUY_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying
    //   
    //       // update errors
    //       MANAGE_BUY_OFFER_NOT_FOUND =
    //           -11, // offerID does not match an existing offer
    //   
    //       MANAGE_BUY_OFFER_LOW_RESERVE = -12 // not enough funds to create a new Offer
    //   };
    //
    // ===========================================================================
    xdr.enum("ManageBuyOfferResultCode", {
        manageBuyOfferSuccess: 0,
        manageBuyOfferMalformed: -1,
        manageBuyOfferSellNoTrust: -2,
        manageBuyOfferBuyNoTrust: -3,
        manageBuyOfferSellNotAuthorized: -4,
        manageBuyOfferBuyNotAuthorized: -5,
        manageBuyOfferLineFull: -6,
        manageBuyOfferUnderfunded: -7,
        manageBuyOfferCrossSelf: -8,
        manageBuyOfferSellNoIssuer: -9,
        manageBuyOfferBuyNoIssuer: -10,
        manageBuyOfferNotFound: -11,
        manageBuyOfferLowReserve: -12
    });
    // === xdr source ============================================================
    //
    //   union ManageBuyOfferResult switch (ManageBuyOfferResultCode code)
    //   {
    //   case MANAGE_BUY_OFFER_SUCCESS:
    //       ManageOfferSuccessResult success;
    //   case MANAGE_BUY_OFFER_MALFORMED:
    //   case MANAGE_BUY_OFFER_SELL_NO_TRUST:
    //   case MANAGE_BUY_OFFER_BUY_NO_TRUST:
    //   case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED:
    //   case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED:
    //   case MANAGE_BUY_OFFER_LINE_FULL:
    //   case MANAGE_BUY_OFFER_UNDERFUNDED:
    //   case MANAGE_BUY_OFFER_CROSS_SELF:
    //   case MANAGE_BUY_OFFER_SELL_NO_ISSUER:
    //   case MANAGE_BUY_OFFER_BUY_NO_ISSUER:
    //   case MANAGE_BUY_OFFER_NOT_FOUND:
    //   case MANAGE_BUY_OFFER_LOW_RESERVE:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ManageBuyOfferResult", {
        switchOn: xdr.lookup("ManageBuyOfferResultCode"),
        switchName: "code",
        switches: [
            [
                "manageBuyOfferSuccess",
                "success"
            ],
            [
                "manageBuyOfferMalformed",
                xdr.void()
            ],
            [
                "manageBuyOfferSellNoTrust",
                xdr.void()
            ],
            [
                "manageBuyOfferBuyNoTrust",
                xdr.void()
            ],
            [
                "manageBuyOfferSellNotAuthorized",
                xdr.void()
            ],
            [
                "manageBuyOfferBuyNotAuthorized",
                xdr.void()
            ],
            [
                "manageBuyOfferLineFull",
                xdr.void()
            ],
            [
                "manageBuyOfferUnderfunded",
                xdr.void()
            ],
            [
                "manageBuyOfferCrossSelf",
                xdr.void()
            ],
            [
                "manageBuyOfferSellNoIssuer",
                xdr.void()
            ],
            [
                "manageBuyOfferBuyNoIssuer",
                xdr.void()
            ],
            [
                "manageBuyOfferNotFound",
                xdr.void()
            ],
            [
                "manageBuyOfferLowReserve",
                xdr.void()
            ]
        ],
        arms: {
            success: xdr.lookup("ManageOfferSuccessResult")
        }
    });
    // === xdr source ============================================================
    //
    //   enum SetOptionsResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       SET_OPTIONS_SUCCESS = 0,
    //       // codes considered as "failure" for the operation
    //       SET_OPTIONS_LOW_RESERVE = -1,      // not enough funds to add a signer
    //       SET_OPTIONS_TOO_MANY_SIGNERS = -2, // max number of signers already reached
    //       SET_OPTIONS_BAD_FLAGS = -3,        // invalid combination of clear/set flags
    //       SET_OPTIONS_INVALID_INFLATION = -4,      // inflation account does not exist
    //       SET_OPTIONS_CANT_CHANGE = -5,            // can no longer change this option
    //       SET_OPTIONS_UNKNOWN_FLAG = -6,           // can't set an unknown flag
    //       SET_OPTIONS_THRESHOLD_OUT_OF_RANGE = -7, // bad value for weight/threshold
    //       SET_OPTIONS_BAD_SIGNER = -8,             // signer cannot be masterkey
    //       SET_OPTIONS_INVALID_HOME_DOMAIN = -9,    // malformed home domain
    //       SET_OPTIONS_AUTH_REVOCABLE_REQUIRED =
    //           -10 // auth revocable is required for clawback
    //   };
    //
    // ===========================================================================
    xdr.enum("SetOptionsResultCode", {
        setOptionsSuccess: 0,
        setOptionsLowReserve: -1,
        setOptionsTooManySigners: -2,
        setOptionsBadFlags: -3,
        setOptionsInvalidInflation: -4,
        setOptionsCantChange: -5,
        setOptionsUnknownFlag: -6,
        setOptionsThresholdOutOfRange: -7,
        setOptionsBadSigner: -8,
        setOptionsInvalidHomeDomain: -9,
        setOptionsAuthRevocableRequired: -10
    });
    // === xdr source ============================================================
    //
    //   union SetOptionsResult switch (SetOptionsResultCode code)
    //   {
    //   case SET_OPTIONS_SUCCESS:
    //       void;
    //   case SET_OPTIONS_LOW_RESERVE:
    //   case SET_OPTIONS_TOO_MANY_SIGNERS:
    //   case SET_OPTIONS_BAD_FLAGS:
    //   case SET_OPTIONS_INVALID_INFLATION:
    //   case SET_OPTIONS_CANT_CHANGE:
    //   case SET_OPTIONS_UNKNOWN_FLAG:
    //   case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:
    //   case SET_OPTIONS_BAD_SIGNER:
    //   case SET_OPTIONS_INVALID_HOME_DOMAIN:
    //   case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("SetOptionsResult", {
        switchOn: xdr.lookup("SetOptionsResultCode"),
        switchName: "code",
        switches: [
            [
                "setOptionsSuccess",
                xdr.void()
            ],
            [
                "setOptionsLowReserve",
                xdr.void()
            ],
            [
                "setOptionsTooManySigners",
                xdr.void()
            ],
            [
                "setOptionsBadFlags",
                xdr.void()
            ],
            [
                "setOptionsInvalidInflation",
                xdr.void()
            ],
            [
                "setOptionsCantChange",
                xdr.void()
            ],
            [
                "setOptionsUnknownFlag",
                xdr.void()
            ],
            [
                "setOptionsThresholdOutOfRange",
                xdr.void()
            ],
            [
                "setOptionsBadSigner",
                xdr.void()
            ],
            [
                "setOptionsInvalidHomeDomain",
                xdr.void()
            ],
            [
                "setOptionsAuthRevocableRequired",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum ChangeTrustResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       CHANGE_TRUST_SUCCESS = 0,
    //       // codes considered as "failure" for the operation
    //       CHANGE_TRUST_MALFORMED = -1,     // bad input
    //       CHANGE_TRUST_NO_ISSUER = -2,     // could not find issuer
    //       CHANGE_TRUST_INVALID_LIMIT = -3, // cannot drop limit below balance
    //                                        // cannot create with a limit of 0
    //       CHANGE_TRUST_LOW_RESERVE =
    //           -4, // not enough funds to create a new trust line,
    //       CHANGE_TRUST_SELF_NOT_ALLOWED = -5,   // trusting self is not allowed
    //       CHANGE_TRUST_TRUST_LINE_MISSING = -6, // Asset trustline is missing for pool
    //       CHANGE_TRUST_CANNOT_DELETE =
    //           -7, // Asset trustline is still referenced in a pool
    //       CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES =
    //           -8 // Asset trustline is deauthorized
    //   };
    //
    // ===========================================================================
    xdr.enum("ChangeTrustResultCode", {
        changeTrustSuccess: 0,
        changeTrustMalformed: -1,
        changeTrustNoIssuer: -2,
        changeTrustInvalidLimit: -3,
        changeTrustLowReserve: -4,
        changeTrustSelfNotAllowed: -5,
        changeTrustTrustLineMissing: -6,
        changeTrustCannotDelete: -7,
        changeTrustNotAuthMaintainLiabilities: -8
    });
    // === xdr source ============================================================
    //
    //   union ChangeTrustResult switch (ChangeTrustResultCode code)
    //   {
    //   case CHANGE_TRUST_SUCCESS:
    //       void;
    //   case CHANGE_TRUST_MALFORMED:
    //   case CHANGE_TRUST_NO_ISSUER:
    //   case CHANGE_TRUST_INVALID_LIMIT:
    //   case CHANGE_TRUST_LOW_RESERVE:
    //   case CHANGE_TRUST_SELF_NOT_ALLOWED:
    //   case CHANGE_TRUST_TRUST_LINE_MISSING:
    //   case CHANGE_TRUST_CANNOT_DELETE:
    //   case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ChangeTrustResult", {
        switchOn: xdr.lookup("ChangeTrustResultCode"),
        switchName: "code",
        switches: [
            [
                "changeTrustSuccess",
                xdr.void()
            ],
            [
                "changeTrustMalformed",
                xdr.void()
            ],
            [
                "changeTrustNoIssuer",
                xdr.void()
            ],
            [
                "changeTrustInvalidLimit",
                xdr.void()
            ],
            [
                "changeTrustLowReserve",
                xdr.void()
            ],
            [
                "changeTrustSelfNotAllowed",
                xdr.void()
            ],
            [
                "changeTrustTrustLineMissing",
                xdr.void()
            ],
            [
                "changeTrustCannotDelete",
                xdr.void()
            ],
            [
                "changeTrustNotAuthMaintainLiabilities",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum AllowTrustResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       ALLOW_TRUST_SUCCESS = 0,
    //       // codes considered as "failure" for the operation
    //       ALLOW_TRUST_MALFORMED = -1,     // asset is not ASSET_TYPE_ALPHANUM
    //       ALLOW_TRUST_NO_TRUST_LINE = -2, // trustor does not have a trustline
    //                                       // source account does not require trust
    //       ALLOW_TRUST_TRUST_NOT_REQUIRED = -3,
    //       ALLOW_TRUST_CANT_REVOKE = -4,      // source account can't revoke trust,
    //       ALLOW_TRUST_SELF_NOT_ALLOWED = -5, // trusting self is not allowed
    //       ALLOW_TRUST_LOW_RESERVE = -6       // claimable balances can't be created
    //                                          // on revoke due to low reserves
    //   };
    //
    // ===========================================================================
    xdr.enum("AllowTrustResultCode", {
        allowTrustSuccess: 0,
        allowTrustMalformed: -1,
        allowTrustNoTrustLine: -2,
        allowTrustTrustNotRequired: -3,
        allowTrustCantRevoke: -4,
        allowTrustSelfNotAllowed: -5,
        allowTrustLowReserve: -6
    });
    // === xdr source ============================================================
    //
    //   union AllowTrustResult switch (AllowTrustResultCode code)
    //   {
    //   case ALLOW_TRUST_SUCCESS:
    //       void;
    //   case ALLOW_TRUST_MALFORMED:
    //   case ALLOW_TRUST_NO_TRUST_LINE:
    //   case ALLOW_TRUST_TRUST_NOT_REQUIRED:
    //   case ALLOW_TRUST_CANT_REVOKE:
    //   case ALLOW_TRUST_SELF_NOT_ALLOWED:
    //   case ALLOW_TRUST_LOW_RESERVE:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("AllowTrustResult", {
        switchOn: xdr.lookup("AllowTrustResultCode"),
        switchName: "code",
        switches: [
            [
                "allowTrustSuccess",
                xdr.void()
            ],
            [
                "allowTrustMalformed",
                xdr.void()
            ],
            [
                "allowTrustNoTrustLine",
                xdr.void()
            ],
            [
                "allowTrustTrustNotRequired",
                xdr.void()
            ],
            [
                "allowTrustCantRevoke",
                xdr.void()
            ],
            [
                "allowTrustSelfNotAllowed",
                xdr.void()
            ],
            [
                "allowTrustLowReserve",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum AccountMergeResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       ACCOUNT_MERGE_SUCCESS = 0,
    //       // codes considered as "failure" for the operation
    //       ACCOUNT_MERGE_MALFORMED = -1,       // can't merge onto itself
    //       ACCOUNT_MERGE_NO_ACCOUNT = -2,      // destination does not exist
    //       ACCOUNT_MERGE_IMMUTABLE_SET = -3,   // source account has AUTH_IMMUTABLE set
    //       ACCOUNT_MERGE_HAS_SUB_ENTRIES = -4, // account has trust lines/offers
    //       ACCOUNT_MERGE_SEQNUM_TOO_FAR = -5,  // sequence number is over max allowed
    //       ACCOUNT_MERGE_DEST_FULL = -6,       // can't add source balance to
    //                                           // destination balance
    //       ACCOUNT_MERGE_IS_SPONSOR = -7       // can't merge account that is a sponsor
    //   };
    //
    // ===========================================================================
    xdr.enum("AccountMergeResultCode", {
        accountMergeSuccess: 0,
        accountMergeMalformed: -1,
        accountMergeNoAccount: -2,
        accountMergeImmutableSet: -3,
        accountMergeHasSubEntries: -4,
        accountMergeSeqnumTooFar: -5,
        accountMergeDestFull: -6,
        accountMergeIsSponsor: -7
    });
    // === xdr source ============================================================
    //
    //   union AccountMergeResult switch (AccountMergeResultCode code)
    //   {
    //   case ACCOUNT_MERGE_SUCCESS:
    //       int64 sourceAccountBalance; // how much got transferred from source account
    //   case ACCOUNT_MERGE_MALFORMED:
    //   case ACCOUNT_MERGE_NO_ACCOUNT:
    //   case ACCOUNT_MERGE_IMMUTABLE_SET:
    //   case ACCOUNT_MERGE_HAS_SUB_ENTRIES:
    //   case ACCOUNT_MERGE_SEQNUM_TOO_FAR:
    //   case ACCOUNT_MERGE_DEST_FULL:
    //   case ACCOUNT_MERGE_IS_SPONSOR:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("AccountMergeResult", {
        switchOn: xdr.lookup("AccountMergeResultCode"),
        switchName: "code",
        switches: [
            [
                "accountMergeSuccess",
                "sourceAccountBalance"
            ],
            [
                "accountMergeMalformed",
                xdr.void()
            ],
            [
                "accountMergeNoAccount",
                xdr.void()
            ],
            [
                "accountMergeImmutableSet",
                xdr.void()
            ],
            [
                "accountMergeHasSubEntries",
                xdr.void()
            ],
            [
                "accountMergeSeqnumTooFar",
                xdr.void()
            ],
            [
                "accountMergeDestFull",
                xdr.void()
            ],
            [
                "accountMergeIsSponsor",
                xdr.void()
            ]
        ],
        arms: {
            sourceAccountBalance: xdr.lookup("Int64")
        }
    });
    // === xdr source ============================================================
    //
    //   enum InflationResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       INFLATION_SUCCESS = 0,
    //       // codes considered as "failure" for the operation
    //       INFLATION_NOT_TIME = -1
    //   };
    //
    // ===========================================================================
    xdr.enum("InflationResultCode", {
        inflationSuccess: 0,
        inflationNotTime: -1
    });
    // === xdr source ============================================================
    //
    //   struct InflationPayout // or use PaymentResultAtom to limit types?
    //   {
    //       AccountID destination;
    //       int64 amount;
    //   };
    //
    // ===========================================================================
    xdr.struct("InflationPayout", [
        [
            "destination",
            xdr.lookup("AccountId")
        ],
        [
            "amount",
            xdr.lookup("Int64")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union InflationResult switch (InflationResultCode code)
    //   {
    //   case INFLATION_SUCCESS:
    //       InflationPayout payouts<>;
    //   case INFLATION_NOT_TIME:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("InflationResult", {
        switchOn: xdr.lookup("InflationResultCode"),
        switchName: "code",
        switches: [
            [
                "inflationSuccess",
                "payouts"
            ],
            [
                "inflationNotTime",
                xdr.void()
            ]
        ],
        arms: {
            payouts: xdr.varArray(xdr.lookup("InflationPayout"), 2147483647)
        }
    });
    // === xdr source ============================================================
    //
    //   enum ManageDataResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       MANAGE_DATA_SUCCESS = 0,
    //       // codes considered as "failure" for the operation
    //       MANAGE_DATA_NOT_SUPPORTED_YET =
    //           -1, // The network hasn't moved to this protocol change yet
    //       MANAGE_DATA_NAME_NOT_FOUND =
    //           -2, // Trying to remove a Data Entry that isn't there
    //       MANAGE_DATA_LOW_RESERVE = -3, // not enough funds to create a new Data Entry
    //       MANAGE_DATA_INVALID_NAME = -4 // Name not a valid string
    //   };
    //
    // ===========================================================================
    xdr.enum("ManageDataResultCode", {
        manageDataSuccess: 0,
        manageDataNotSupportedYet: -1,
        manageDataNameNotFound: -2,
        manageDataLowReserve: -3,
        manageDataInvalidName: -4
    });
    // === xdr source ============================================================
    //
    //   union ManageDataResult switch (ManageDataResultCode code)
    //   {
    //   case MANAGE_DATA_SUCCESS:
    //       void;
    //   case MANAGE_DATA_NOT_SUPPORTED_YET:
    //   case MANAGE_DATA_NAME_NOT_FOUND:
    //   case MANAGE_DATA_LOW_RESERVE:
    //   case MANAGE_DATA_INVALID_NAME:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ManageDataResult", {
        switchOn: xdr.lookup("ManageDataResultCode"),
        switchName: "code",
        switches: [
            [
                "manageDataSuccess",
                xdr.void()
            ],
            [
                "manageDataNotSupportedYet",
                xdr.void()
            ],
            [
                "manageDataNameNotFound",
                xdr.void()
            ],
            [
                "manageDataLowReserve",
                xdr.void()
            ],
            [
                "manageDataInvalidName",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum BumpSequenceResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       BUMP_SEQUENCE_SUCCESS = 0,
    //       // codes considered as "failure" for the operation
    //       BUMP_SEQUENCE_BAD_SEQ = -1 // `bumpTo` is not within bounds
    //   };
    //
    // ===========================================================================
    xdr.enum("BumpSequenceResultCode", {
        bumpSequenceSuccess: 0,
        bumpSequenceBadSeq: -1
    });
    // === xdr source ============================================================
    //
    //   union BumpSequenceResult switch (BumpSequenceResultCode code)
    //   {
    //   case BUMP_SEQUENCE_SUCCESS:
    //       void;
    //   case BUMP_SEQUENCE_BAD_SEQ:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("BumpSequenceResult", {
        switchOn: xdr.lookup("BumpSequenceResultCode"),
        switchName: "code",
        switches: [
            [
                "bumpSequenceSuccess",
                xdr.void()
            ],
            [
                "bumpSequenceBadSeq",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum CreateClaimableBalanceResultCode
    //   {
    //       CREATE_CLAIMABLE_BALANCE_SUCCESS = 0,
    //       CREATE_CLAIMABLE_BALANCE_MALFORMED = -1,
    //       CREATE_CLAIMABLE_BALANCE_LOW_RESERVE = -2,
    //       CREATE_CLAIMABLE_BALANCE_NO_TRUST = -3,
    //       CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -4,
    //       CREATE_CLAIMABLE_BALANCE_UNDERFUNDED = -5
    //   };
    //
    // ===========================================================================
    xdr.enum("CreateClaimableBalanceResultCode", {
        createClaimableBalanceSuccess: 0,
        createClaimableBalanceMalformed: -1,
        createClaimableBalanceLowReserve: -2,
        createClaimableBalanceNoTrust: -3,
        createClaimableBalanceNotAuthorized: -4,
        createClaimableBalanceUnderfunded: -5
    });
    // === xdr source ============================================================
    //
    //   union CreateClaimableBalanceResult switch (
    //       CreateClaimableBalanceResultCode code)
    //   {
    //   case CREATE_CLAIMABLE_BALANCE_SUCCESS:
    //       ClaimableBalanceID balanceID;
    //   case CREATE_CLAIMABLE_BALANCE_MALFORMED:
    //   case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:
    //   case CREATE_CLAIMABLE_BALANCE_NO_TRUST:
    //   case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
    //   case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("CreateClaimableBalanceResult", {
        switchOn: xdr.lookup("CreateClaimableBalanceResultCode"),
        switchName: "code",
        switches: [
            [
                "createClaimableBalanceSuccess",
                "balanceId"
            ],
            [
                "createClaimableBalanceMalformed",
                xdr.void()
            ],
            [
                "createClaimableBalanceLowReserve",
                xdr.void()
            ],
            [
                "createClaimableBalanceNoTrust",
                xdr.void()
            ],
            [
                "createClaimableBalanceNotAuthorized",
                xdr.void()
            ],
            [
                "createClaimableBalanceUnderfunded",
                xdr.void()
            ]
        ],
        arms: {
            balanceId: xdr.lookup("ClaimableBalanceId")
        }
    });
    // === xdr source ============================================================
    //
    //   enum ClaimClaimableBalanceResultCode
    //   {
    //       CLAIM_CLAIMABLE_BALANCE_SUCCESS = 0,
    //       CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,
    //       CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM = -2,
    //       CLAIM_CLAIMABLE_BALANCE_LINE_FULL = -3,
    //       CLAIM_CLAIMABLE_BALANCE_NO_TRUST = -4,
    //       CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -5
    //   };
    //
    // ===========================================================================
    xdr.enum("ClaimClaimableBalanceResultCode", {
        claimClaimableBalanceSuccess: 0,
        claimClaimableBalanceDoesNotExist: -1,
        claimClaimableBalanceCannotClaim: -2,
        claimClaimableBalanceLineFull: -3,
        claimClaimableBalanceNoTrust: -4,
        claimClaimableBalanceNotAuthorized: -5
    });
    // === xdr source ============================================================
    //
    //   union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)
    //   {
    //   case CLAIM_CLAIMABLE_BALANCE_SUCCESS:
    //       void;
    //   case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
    //   case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:
    //   case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:
    //   case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:
    //   case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ClaimClaimableBalanceResult", {
        switchOn: xdr.lookup("ClaimClaimableBalanceResultCode"),
        switchName: "code",
        switches: [
            [
                "claimClaimableBalanceSuccess",
                xdr.void()
            ],
            [
                "claimClaimableBalanceDoesNotExist",
                xdr.void()
            ],
            [
                "claimClaimableBalanceCannotClaim",
                xdr.void()
            ],
            [
                "claimClaimableBalanceLineFull",
                xdr.void()
            ],
            [
                "claimClaimableBalanceNoTrust",
                xdr.void()
            ],
            [
                "claimClaimableBalanceNotAuthorized",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum BeginSponsoringFutureReservesResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED = -1,
    //       BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED = -2,
    //       BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE = -3
    //   };
    //
    // ===========================================================================
    xdr.enum("BeginSponsoringFutureReservesResultCode", {
        beginSponsoringFutureReservesSuccess: 0,
        beginSponsoringFutureReservesMalformed: -1,
        beginSponsoringFutureReservesAlreadySponsored: -2,
        beginSponsoringFutureReservesRecursive: -3
    });
    // === xdr source ============================================================
    //
    //   union BeginSponsoringFutureReservesResult switch (
    //       BeginSponsoringFutureReservesResultCode code)
    //   {
    //   case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:
    //       void;
    //   case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:
    //   case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:
    //   case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("BeginSponsoringFutureReservesResult", {
        switchOn: xdr.lookup("BeginSponsoringFutureReservesResultCode"),
        switchName: "code",
        switches: [
            [
                "beginSponsoringFutureReservesSuccess",
                xdr.void()
            ],
            [
                "beginSponsoringFutureReservesMalformed",
                xdr.void()
            ],
            [
                "beginSponsoringFutureReservesAlreadySponsored",
                xdr.void()
            ],
            [
                "beginSponsoringFutureReservesRecursive",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum EndSponsoringFutureReservesResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       END_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED = -1
    //   };
    //
    // ===========================================================================
    xdr.enum("EndSponsoringFutureReservesResultCode", {
        endSponsoringFutureReservesSuccess: 0,
        endSponsoringFutureReservesNotSponsored: -1
    });
    // === xdr source ============================================================
    //
    //   union EndSponsoringFutureReservesResult switch (
    //       EndSponsoringFutureReservesResultCode code)
    //   {
    //   case END_SPONSORING_FUTURE_RESERVES_SUCCESS:
    //       void;
    //   case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("EndSponsoringFutureReservesResult", {
        switchOn: xdr.lookup("EndSponsoringFutureReservesResultCode"),
        switchName: "code",
        switches: [
            [
                "endSponsoringFutureReservesSuccess",
                xdr.void()
            ],
            [
                "endSponsoringFutureReservesNotSponsored",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum RevokeSponsorshipResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       REVOKE_SPONSORSHIP_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       REVOKE_SPONSORSHIP_DOES_NOT_EXIST = -1,
    //       REVOKE_SPONSORSHIP_NOT_SPONSOR = -2,
    //       REVOKE_SPONSORSHIP_LOW_RESERVE = -3,
    //       REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE = -4,
    //       REVOKE_SPONSORSHIP_MALFORMED = -5
    //   };
    //
    // ===========================================================================
    xdr.enum("RevokeSponsorshipResultCode", {
        revokeSponsorshipSuccess: 0,
        revokeSponsorshipDoesNotExist: -1,
        revokeSponsorshipNotSponsor: -2,
        revokeSponsorshipLowReserve: -3,
        revokeSponsorshipOnlyTransferable: -4,
        revokeSponsorshipMalformed: -5
    });
    // === xdr source ============================================================
    //
    //   union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)
    //   {
    //   case REVOKE_SPONSORSHIP_SUCCESS:
    //       void;
    //   case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:
    //   case REVOKE_SPONSORSHIP_NOT_SPONSOR:
    //   case REVOKE_SPONSORSHIP_LOW_RESERVE:
    //   case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:
    //   case REVOKE_SPONSORSHIP_MALFORMED:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("RevokeSponsorshipResult", {
        switchOn: xdr.lookup("RevokeSponsorshipResultCode"),
        switchName: "code",
        switches: [
            [
                "revokeSponsorshipSuccess",
                xdr.void()
            ],
            [
                "revokeSponsorshipDoesNotExist",
                xdr.void()
            ],
            [
                "revokeSponsorshipNotSponsor",
                xdr.void()
            ],
            [
                "revokeSponsorshipLowReserve",
                xdr.void()
            ],
            [
                "revokeSponsorshipOnlyTransferable",
                xdr.void()
            ],
            [
                "revokeSponsorshipMalformed",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum ClawbackResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       CLAWBACK_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       CLAWBACK_MALFORMED = -1,
    //       CLAWBACK_NOT_CLAWBACK_ENABLED = -2,
    //       CLAWBACK_NO_TRUST = -3,
    //       CLAWBACK_UNDERFUNDED = -4
    //   };
    //
    // ===========================================================================
    xdr.enum("ClawbackResultCode", {
        clawbackSuccess: 0,
        clawbackMalformed: -1,
        clawbackNotClawbackEnabled: -2,
        clawbackNoTrust: -3,
        clawbackUnderfunded: -4
    });
    // === xdr source ============================================================
    //
    //   union ClawbackResult switch (ClawbackResultCode code)
    //   {
    //   case CLAWBACK_SUCCESS:
    //       void;
    //   case CLAWBACK_MALFORMED:
    //   case CLAWBACK_NOT_CLAWBACK_ENABLED:
    //   case CLAWBACK_NO_TRUST:
    //   case CLAWBACK_UNDERFUNDED:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ClawbackResult", {
        switchOn: xdr.lookup("ClawbackResultCode"),
        switchName: "code",
        switches: [
            [
                "clawbackSuccess",
                xdr.void()
            ],
            [
                "clawbackMalformed",
                xdr.void()
            ],
            [
                "clawbackNotClawbackEnabled",
                xdr.void()
            ],
            [
                "clawbackNoTrust",
                xdr.void()
            ],
            [
                "clawbackUnderfunded",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum ClawbackClaimableBalanceResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       CLAWBACK_CLAIMABLE_BALANCE_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,
    //       CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER = -2,
    //       CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED = -3
    //   };
    //
    // ===========================================================================
    xdr.enum("ClawbackClaimableBalanceResultCode", {
        clawbackClaimableBalanceSuccess: 0,
        clawbackClaimableBalanceDoesNotExist: -1,
        clawbackClaimableBalanceNotIssuer: -2,
        clawbackClaimableBalanceNotClawbackEnabled: -3
    });
    // === xdr source ============================================================
    //
    //   union ClawbackClaimableBalanceResult switch (
    //       ClawbackClaimableBalanceResultCode code)
    //   {
    //   case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:
    //       void;
    //   case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
    //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:
    //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ClawbackClaimableBalanceResult", {
        switchOn: xdr.lookup("ClawbackClaimableBalanceResultCode"),
        switchName: "code",
        switches: [
            [
                "clawbackClaimableBalanceSuccess",
                xdr.void()
            ],
            [
                "clawbackClaimableBalanceDoesNotExist",
                xdr.void()
            ],
            [
                "clawbackClaimableBalanceNotIssuer",
                xdr.void()
            ],
            [
                "clawbackClaimableBalanceNotClawbackEnabled",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum SetTrustLineFlagsResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       SET_TRUST_LINE_FLAGS_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       SET_TRUST_LINE_FLAGS_MALFORMED = -1,
    //       SET_TRUST_LINE_FLAGS_NO_TRUST_LINE = -2,
    //       SET_TRUST_LINE_FLAGS_CANT_REVOKE = -3,
    //       SET_TRUST_LINE_FLAGS_INVALID_STATE = -4,
    //       SET_TRUST_LINE_FLAGS_LOW_RESERVE = -5 // claimable balances can't be created
    //                                             // on revoke due to low reserves
    //   };
    //
    // ===========================================================================
    xdr.enum("SetTrustLineFlagsResultCode", {
        setTrustLineFlagsSuccess: 0,
        setTrustLineFlagsMalformed: -1,
        setTrustLineFlagsNoTrustLine: -2,
        setTrustLineFlagsCantRevoke: -3,
        setTrustLineFlagsInvalidState: -4,
        setTrustLineFlagsLowReserve: -5
    });
    // === xdr source ============================================================
    //
    //   union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code)
    //   {
    //   case SET_TRUST_LINE_FLAGS_SUCCESS:
    //       void;
    //   case SET_TRUST_LINE_FLAGS_MALFORMED:
    //   case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE:
    //   case SET_TRUST_LINE_FLAGS_CANT_REVOKE:
    //   case SET_TRUST_LINE_FLAGS_INVALID_STATE:
    //   case SET_TRUST_LINE_FLAGS_LOW_RESERVE:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("SetTrustLineFlagsResult", {
        switchOn: xdr.lookup("SetTrustLineFlagsResultCode"),
        switchName: "code",
        switches: [
            [
                "setTrustLineFlagsSuccess",
                xdr.void()
            ],
            [
                "setTrustLineFlagsMalformed",
                xdr.void()
            ],
            [
                "setTrustLineFlagsNoTrustLine",
                xdr.void()
            ],
            [
                "setTrustLineFlagsCantRevoke",
                xdr.void()
            ],
            [
                "setTrustLineFlagsInvalidState",
                xdr.void()
            ],
            [
                "setTrustLineFlagsLowReserve",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum LiquidityPoolDepositResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       LIQUIDITY_POOL_DEPOSIT_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       LIQUIDITY_POOL_DEPOSIT_MALFORMED = -1,      // bad input
    //       LIQUIDITY_POOL_DEPOSIT_NO_TRUST = -2,       // no trust line for one of the
    //                                                   // assets
    //       LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED = -3, // not authorized for one of the
    //                                                   // assets
    //       LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED = -4,    // not enough balance for one of
    //                                                   // the assets
    //       LIQUIDITY_POOL_DEPOSIT_LINE_FULL = -5,      // pool share trust line doesn't
    //                                                   // have sufficient limit
    //       LIQUIDITY_POOL_DEPOSIT_BAD_PRICE = -6,      // deposit price outside bounds
    //       LIQUIDITY_POOL_DEPOSIT_POOL_FULL = -7       // pool reserves are full
    //   };
    //
    // ===========================================================================
    xdr.enum("LiquidityPoolDepositResultCode", {
        liquidityPoolDepositSuccess: 0,
        liquidityPoolDepositMalformed: -1,
        liquidityPoolDepositNoTrust: -2,
        liquidityPoolDepositNotAuthorized: -3,
        liquidityPoolDepositUnderfunded: -4,
        liquidityPoolDepositLineFull: -5,
        liquidityPoolDepositBadPrice: -6,
        liquidityPoolDepositPoolFull: -7
    });
    // === xdr source ============================================================
    //
    //   union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)
    //   {
    //   case LIQUIDITY_POOL_DEPOSIT_SUCCESS:
    //       void;
    //   case LIQUIDITY_POOL_DEPOSIT_MALFORMED:
    //   case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:
    //   case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:
    //   case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:
    //   case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:
    //   case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:
    //   case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("LiquidityPoolDepositResult", {
        switchOn: xdr.lookup("LiquidityPoolDepositResultCode"),
        switchName: "code",
        switches: [
            [
                "liquidityPoolDepositSuccess",
                xdr.void()
            ],
            [
                "liquidityPoolDepositMalformed",
                xdr.void()
            ],
            [
                "liquidityPoolDepositNoTrust",
                xdr.void()
            ],
            [
                "liquidityPoolDepositNotAuthorized",
                xdr.void()
            ],
            [
                "liquidityPoolDepositUnderfunded",
                xdr.void()
            ],
            [
                "liquidityPoolDepositLineFull",
                xdr.void()
            ],
            [
                "liquidityPoolDepositBadPrice",
                xdr.void()
            ],
            [
                "liquidityPoolDepositPoolFull",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum LiquidityPoolWithdrawResultCode
    //   {
    //       // codes considered as "success" for the operation
    //       LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,
    //   
    //       // codes considered as "failure" for the operation
    //       LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input
    //       LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the
    //                                                  // assets
    //       LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the
    //                                                  // pool share
    //       LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one
    //                                                  // of the assets
    //       LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough
    //   };
    //
    // ===========================================================================
    xdr.enum("LiquidityPoolWithdrawResultCode", {
        liquidityPoolWithdrawSuccess: 0,
        liquidityPoolWithdrawMalformed: -1,
        liquidityPoolWithdrawNoTrust: -2,
        liquidityPoolWithdrawUnderfunded: -3,
        liquidityPoolWithdrawLineFull: -4,
        liquidityPoolWithdrawUnderMinimum: -5
    });
    // === xdr source ============================================================
    //
    //   union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)
    //   {
    //   case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
    //       void;
    //   case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
    //   case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
    //   case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
    //   case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
    //   case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("LiquidityPoolWithdrawResult", {
        switchOn: xdr.lookup("LiquidityPoolWithdrawResultCode"),
        switchName: "code",
        switches: [
            [
                "liquidityPoolWithdrawSuccess",
                xdr.void()
            ],
            [
                "liquidityPoolWithdrawMalformed",
                xdr.void()
            ],
            [
                "liquidityPoolWithdrawNoTrust",
                xdr.void()
            ],
            [
                "liquidityPoolWithdrawUnderfunded",
                xdr.void()
            ],
            [
                "liquidityPoolWithdrawLineFull",
                xdr.void()
            ],
            [
                "liquidityPoolWithdrawUnderMinimum",
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum OperationResultCode
    //   {
    //       opINNER = 0, // inner object result is valid
    //   
    //       opBAD_AUTH = -1,            // too few valid signatures / wrong network
    //       opNO_ACCOUNT = -2,          // source account was not found
    //       opNOT_SUPPORTED = -3,       // operation not supported at this time
    //       opTOO_MANY_SUBENTRIES = -4, // max number of subentries already reached
    //       opEXCEEDED_WORK_LIMIT = -5, // operation did too much work
    //       opTOO_MANY_SPONSORING = -6  // account is sponsoring too many entries
    //   };
    //
    // ===========================================================================
    xdr.enum("OperationResultCode", {
        opInner: 0,
        opBadAuth: -1,
        opNoAccount: -2,
        opNotSupported: -3,
        opTooManySubentries: -4,
        opExceededWorkLimit: -5,
        opTooManySponsoring: -6
    });
    // === xdr source ============================================================
    //
    //   union switch (OperationType type)
    //       {
    //       case CREATE_ACCOUNT:
    //           CreateAccountResult createAccountResult;
    //       case PAYMENT:
    //           PaymentResult paymentResult;
    //       case PATH_PAYMENT_STRICT_RECEIVE:
    //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;
    //       case MANAGE_SELL_OFFER:
    //           ManageSellOfferResult manageSellOfferResult;
    //       case CREATE_PASSIVE_SELL_OFFER:
    //           ManageSellOfferResult createPassiveSellOfferResult;
    //       case SET_OPTIONS:
    //           SetOptionsResult setOptionsResult;
    //       case CHANGE_TRUST:
    //           ChangeTrustResult changeTrustResult;
    //       case ALLOW_TRUST:
    //           AllowTrustResult allowTrustResult;
    //       case ACCOUNT_MERGE:
    //           AccountMergeResult accountMergeResult;
    //       case INFLATION:
    //           InflationResult inflationResult;
    //       case MANAGE_DATA:
    //           ManageDataResult manageDataResult;
    //       case BUMP_SEQUENCE:
    //           BumpSequenceResult bumpSeqResult;
    //       case MANAGE_BUY_OFFER:
    //           ManageBuyOfferResult manageBuyOfferResult;
    //       case PATH_PAYMENT_STRICT_SEND:
    //           PathPaymentStrictSendResult pathPaymentStrictSendResult;
    //       case CREATE_CLAIMABLE_BALANCE:
    //           CreateClaimableBalanceResult createClaimableBalanceResult;
    //       case CLAIM_CLAIMABLE_BALANCE:
    //           ClaimClaimableBalanceResult claimClaimableBalanceResult;
    //       case BEGIN_SPONSORING_FUTURE_RESERVES:
    //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;
    //       case END_SPONSORING_FUTURE_RESERVES:
    //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;
    //       case REVOKE_SPONSORSHIP:
    //           RevokeSponsorshipResult revokeSponsorshipResult;
    //       case CLAWBACK:
    //           ClawbackResult clawbackResult;
    //       case CLAWBACK_CLAIMABLE_BALANCE:
    //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;
    //       case SET_TRUST_LINE_FLAGS:
    //           SetTrustLineFlagsResult setTrustLineFlagsResult;
    //       case LIQUIDITY_POOL_DEPOSIT:
    //           LiquidityPoolDepositResult liquidityPoolDepositResult;
    //       case LIQUIDITY_POOL_WITHDRAW:
    //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;
    //       }
    //
    // ===========================================================================
    xdr.union("OperationResultTr", {
        switchOn: xdr.lookup("OperationType"),
        switchName: "type",
        switches: [
            [
                "createAccount",
                "createAccountResult"
            ],
            [
                "payment",
                "paymentResult"
            ],
            [
                "pathPaymentStrictReceive",
                "pathPaymentStrictReceiveResult"
            ],
            [
                "manageSellOffer",
                "manageSellOfferResult"
            ],
            [
                "createPassiveSellOffer",
                "createPassiveSellOfferResult"
            ],
            [
                "setOptions",
                "setOptionsResult"
            ],
            [
                "changeTrust",
                "changeTrustResult"
            ],
            [
                "allowTrust",
                "allowTrustResult"
            ],
            [
                "accountMerge",
                "accountMergeResult"
            ],
            [
                "inflation",
                "inflationResult"
            ],
            [
                "manageData",
                "manageDataResult"
            ],
            [
                "bumpSequence",
                "bumpSeqResult"
            ],
            [
                "manageBuyOffer",
                "manageBuyOfferResult"
            ],
            [
                "pathPaymentStrictSend",
                "pathPaymentStrictSendResult"
            ],
            [
                "createClaimableBalance",
                "createClaimableBalanceResult"
            ],
            [
                "claimClaimableBalance",
                "claimClaimableBalanceResult"
            ],
            [
                "beginSponsoringFutureReserves",
                "beginSponsoringFutureReservesResult"
            ],
            [
                "endSponsoringFutureReserves",
                "endSponsoringFutureReservesResult"
            ],
            [
                "revokeSponsorship",
                "revokeSponsorshipResult"
            ],
            [
                "clawback",
                "clawbackResult"
            ],
            [
                "clawbackClaimableBalance",
                "clawbackClaimableBalanceResult"
            ],
            [
                "setTrustLineFlags",
                "setTrustLineFlagsResult"
            ],
            [
                "liquidityPoolDeposit",
                "liquidityPoolDepositResult"
            ],
            [
                "liquidityPoolWithdraw",
                "liquidityPoolWithdrawResult"
            ]
        ],
        arms: {
            createAccountResult: xdr.lookup("CreateAccountResult"),
            paymentResult: xdr.lookup("PaymentResult"),
            pathPaymentStrictReceiveResult: xdr.lookup("PathPaymentStrictReceiveResult"),
            manageSellOfferResult: xdr.lookup("ManageSellOfferResult"),
            createPassiveSellOfferResult: xdr.lookup("ManageSellOfferResult"),
            setOptionsResult: xdr.lookup("SetOptionsResult"),
            changeTrustResult: xdr.lookup("ChangeTrustResult"),
            allowTrustResult: xdr.lookup("AllowTrustResult"),
            accountMergeResult: xdr.lookup("AccountMergeResult"),
            inflationResult: xdr.lookup("InflationResult"),
            manageDataResult: xdr.lookup("ManageDataResult"),
            bumpSeqResult: xdr.lookup("BumpSequenceResult"),
            manageBuyOfferResult: xdr.lookup("ManageBuyOfferResult"),
            pathPaymentStrictSendResult: xdr.lookup("PathPaymentStrictSendResult"),
            createClaimableBalanceResult: xdr.lookup("CreateClaimableBalanceResult"),
            claimClaimableBalanceResult: xdr.lookup("ClaimClaimableBalanceResult"),
            beginSponsoringFutureReservesResult: xdr.lookup("BeginSponsoringFutureReservesResult"),
            endSponsoringFutureReservesResult: xdr.lookup("EndSponsoringFutureReservesResult"),
            revokeSponsorshipResult: xdr.lookup("RevokeSponsorshipResult"),
            clawbackResult: xdr.lookup("ClawbackResult"),
            clawbackClaimableBalanceResult: xdr.lookup("ClawbackClaimableBalanceResult"),
            setTrustLineFlagsResult: xdr.lookup("SetTrustLineFlagsResult"),
            liquidityPoolDepositResult: xdr.lookup("LiquidityPoolDepositResult"),
            liquidityPoolWithdrawResult: xdr.lookup("LiquidityPoolWithdrawResult")
        }
    });
    // === xdr source ============================================================
    //
    //   union OperationResult switch (OperationResultCode code)
    //   {
    //   case opINNER:
    //       union switch (OperationType type)
    //       {
    //       case CREATE_ACCOUNT:
    //           CreateAccountResult createAccountResult;
    //       case PAYMENT:
    //           PaymentResult paymentResult;
    //       case PATH_PAYMENT_STRICT_RECEIVE:
    //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;
    //       case MANAGE_SELL_OFFER:
    //           ManageSellOfferResult manageSellOfferResult;
    //       case CREATE_PASSIVE_SELL_OFFER:
    //           ManageSellOfferResult createPassiveSellOfferResult;
    //       case SET_OPTIONS:
    //           SetOptionsResult setOptionsResult;
    //       case CHANGE_TRUST:
    //           ChangeTrustResult changeTrustResult;
    //       case ALLOW_TRUST:
    //           AllowTrustResult allowTrustResult;
    //       case ACCOUNT_MERGE:
    //           AccountMergeResult accountMergeResult;
    //       case INFLATION:
    //           InflationResult inflationResult;
    //       case MANAGE_DATA:
    //           ManageDataResult manageDataResult;
    //       case BUMP_SEQUENCE:
    //           BumpSequenceResult bumpSeqResult;
    //       case MANAGE_BUY_OFFER:
    //           ManageBuyOfferResult manageBuyOfferResult;
    //       case PATH_PAYMENT_STRICT_SEND:
    //           PathPaymentStrictSendResult pathPaymentStrictSendResult;
    //       case CREATE_CLAIMABLE_BALANCE:
    //           CreateClaimableBalanceResult createClaimableBalanceResult;
    //       case CLAIM_CLAIMABLE_BALANCE:
    //           ClaimClaimableBalanceResult claimClaimableBalanceResult;
    //       case BEGIN_SPONSORING_FUTURE_RESERVES:
    //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;
    //       case END_SPONSORING_FUTURE_RESERVES:
    //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;
    //       case REVOKE_SPONSORSHIP:
    //           RevokeSponsorshipResult revokeSponsorshipResult;
    //       case CLAWBACK:
    //           ClawbackResult clawbackResult;
    //       case CLAWBACK_CLAIMABLE_BALANCE:
    //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;
    //       case SET_TRUST_LINE_FLAGS:
    //           SetTrustLineFlagsResult setTrustLineFlagsResult;
    //       case LIQUIDITY_POOL_DEPOSIT:
    //           LiquidityPoolDepositResult liquidityPoolDepositResult;
    //       case LIQUIDITY_POOL_WITHDRAW:
    //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;
    //       }
    //       tr;
    //   case opBAD_AUTH:
    //   case opNO_ACCOUNT:
    //   case opNOT_SUPPORTED:
    //   case opTOO_MANY_SUBENTRIES:
    //   case opEXCEEDED_WORK_LIMIT:
    //   case opTOO_MANY_SPONSORING:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("OperationResult", {
        switchOn: xdr.lookup("OperationResultCode"),
        switchName: "code",
        switches: [
            [
                "opInner",
                "tr"
            ],
            [
                "opBadAuth",
                xdr.void()
            ],
            [
                "opNoAccount",
                xdr.void()
            ],
            [
                "opNotSupported",
                xdr.void()
            ],
            [
                "opTooManySubentries",
                xdr.void()
            ],
            [
                "opExceededWorkLimit",
                xdr.void()
            ],
            [
                "opTooManySponsoring",
                xdr.void()
            ]
        ],
        arms: {
            tr: xdr.lookup("OperationResultTr")
        }
    });
    // === xdr source ============================================================
    //
    //   enum TransactionResultCode
    //   {
    //       txFEE_BUMP_INNER_SUCCESS = 1, // fee bump inner transaction succeeded
    //       txSUCCESS = 0,                // all operations succeeded
    //   
    //       txFAILED = -1, // one of the operations failed (none were applied)
    //   
    //       txTOO_EARLY = -2,         // ledger closeTime before minTime
    //       txTOO_LATE = -3,          // ledger closeTime after maxTime
    //       txMISSING_OPERATION = -4, // no operation was specified
    //       txBAD_SEQ = -5,           // sequence number does not match source account
    //   
    //       txBAD_AUTH = -6,             // too few valid signatures / wrong network
    //       txINSUFFICIENT_BALANCE = -7, // fee would bring account below reserve
    //       txNO_ACCOUNT = -8,           // source account not found
    //       txINSUFFICIENT_FEE = -9,     // fee is too small
    //       txBAD_AUTH_EXTRA = -10,      // unused signatures attached to transaction
    //       txINTERNAL_ERROR = -11,      // an unknown error occurred
    //   
    //       txNOT_SUPPORTED = -12,         // transaction type not supported
    //       txFEE_BUMP_INNER_FAILED = -13, // fee bump inner transaction failed
    //       txBAD_SPONSORSHIP = -14,       // sponsorship not confirmed
    //       txBAD_MIN_SEQ_AGE_OR_GAP =
    //           -15, // minSeqAge or minSeqLedgerGap conditions not met
    //       txMALFORMED = -16 // precondition is invalid
    //   };
    //
    // ===========================================================================
    xdr.enum("TransactionResultCode", {
        txFeeBumpInnerSuccess: 1,
        txSuccess: 0,
        txFailed: -1,
        txTooEarly: -2,
        txTooLate: -3,
        txMissingOperation: -4,
        txBadSeq: -5,
        txBadAuth: -6,
        txInsufficientBalance: -7,
        txNoAccount: -8,
        txInsufficientFee: -9,
        txBadAuthExtra: -10,
        txInternalError: -11,
        txNotSupported: -12,
        txFeeBumpInnerFailed: -13,
        txBadSponsorship: -14,
        txBadMinSeqAgeOrGap: -15,
        txMalformed: -16
    });
    // === xdr source ============================================================
    //
    //   union switch (TransactionResultCode code)
    //       {
    //       // txFEE_BUMP_INNER_SUCCESS is not included
    //       case txSUCCESS:
    //       case txFAILED:
    //           OperationResult results<>;
    //       case txTOO_EARLY:
    //       case txTOO_LATE:
    //       case txMISSING_OPERATION:
    //       case txBAD_SEQ:
    //       case txBAD_AUTH:
    //       case txINSUFFICIENT_BALANCE:
    //       case txNO_ACCOUNT:
    //       case txINSUFFICIENT_FEE:
    //       case txBAD_AUTH_EXTRA:
    //       case txINTERNAL_ERROR:
    //       case txNOT_SUPPORTED:
    //       // txFEE_BUMP_INNER_FAILED is not included
    //       case txBAD_SPONSORSHIP:
    //       case txBAD_MIN_SEQ_AGE_OR_GAP:
    //       case txMALFORMED:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("InnerTransactionResultResult", {
        switchOn: xdr.lookup("TransactionResultCode"),
        switchName: "code",
        switches: [
            [
                "txSuccess",
                "results"
            ],
            [
                "txFailed",
                "results"
            ],
            [
                "txTooEarly",
                xdr.void()
            ],
            [
                "txTooLate",
                xdr.void()
            ],
            [
                "txMissingOperation",
                xdr.void()
            ],
            [
                "txBadSeq",
                xdr.void()
            ],
            [
                "txBadAuth",
                xdr.void()
            ],
            [
                "txInsufficientBalance",
                xdr.void()
            ],
            [
                "txNoAccount",
                xdr.void()
            ],
            [
                "txInsufficientFee",
                xdr.void()
            ],
            [
                "txBadAuthExtra",
                xdr.void()
            ],
            [
                "txInternalError",
                xdr.void()
            ],
            [
                "txNotSupported",
                xdr.void()
            ],
            [
                "txBadSponsorship",
                xdr.void()
            ],
            [
                "txBadMinSeqAgeOrGap",
                xdr.void()
            ],
            [
                "txMalformed",
                xdr.void()
            ]
        ],
        arms: {
            results: xdr.varArray(xdr.lookup("OperationResult"), 2147483647)
        }
    });
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("InnerTransactionResultExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct InnerTransactionResult
    //   {
    //       // Always 0. Here for binary compatibility.
    //       int64 feeCharged;
    //   
    //       union switch (TransactionResultCode code)
    //       {
    //       // txFEE_BUMP_INNER_SUCCESS is not included
    //       case txSUCCESS:
    //       case txFAILED:
    //           OperationResult results<>;
    //       case txTOO_EARLY:
    //       case txTOO_LATE:
    //       case txMISSING_OPERATION:
    //       case txBAD_SEQ:
    //       case txBAD_AUTH:
    //       case txINSUFFICIENT_BALANCE:
    //       case txNO_ACCOUNT:
    //       case txINSUFFICIENT_FEE:
    //       case txBAD_AUTH_EXTRA:
    //       case txINTERNAL_ERROR:
    //       case txNOT_SUPPORTED:
    //       // txFEE_BUMP_INNER_FAILED is not included
    //       case txBAD_SPONSORSHIP:
    //       case txBAD_MIN_SEQ_AGE_OR_GAP:
    //       case txMALFORMED:
    //           void;
    //       }
    //       result;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("InnerTransactionResult", [
        [
            "feeCharged",
            xdr.lookup("Int64")
        ],
        [
            "result",
            xdr.lookup("InnerTransactionResultResult")
        ],
        [
            "ext",
            xdr.lookup("InnerTransactionResultExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct InnerTransactionResultPair
    //   {
    //       Hash transactionHash;          // hash of the inner transaction
    //       InnerTransactionResult result; // result for the inner transaction
    //   };
    //
    // ===========================================================================
    xdr.struct("InnerTransactionResultPair", [
        [
            "transactionHash",
            xdr.lookup("Hash")
        ],
        [
            "result",
            xdr.lookup("InnerTransactionResult")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union switch (TransactionResultCode code)
    //       {
    //       case txFEE_BUMP_INNER_SUCCESS:
    //       case txFEE_BUMP_INNER_FAILED:
    //           InnerTransactionResultPair innerResultPair;
    //       case txSUCCESS:
    //       case txFAILED:
    //           OperationResult results<>;
    //       case txTOO_EARLY:
    //       case txTOO_LATE:
    //       case txMISSING_OPERATION:
    //       case txBAD_SEQ:
    //       case txBAD_AUTH:
    //       case txINSUFFICIENT_BALANCE:
    //       case txNO_ACCOUNT:
    //       case txINSUFFICIENT_FEE:
    //       case txBAD_AUTH_EXTRA:
    //       case txINTERNAL_ERROR:
    //       case txNOT_SUPPORTED:
    //       // case txFEE_BUMP_INNER_FAILED: handled above
    //       case txBAD_SPONSORSHIP:
    //       case txBAD_MIN_SEQ_AGE_OR_GAP:
    //       case txMALFORMED:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("TransactionResultResult", {
        switchOn: xdr.lookup("TransactionResultCode"),
        switchName: "code",
        switches: [
            [
                "txFeeBumpInnerSuccess",
                "innerResultPair"
            ],
            [
                "txFeeBumpInnerFailed",
                "innerResultPair"
            ],
            [
                "txSuccess",
                "results"
            ],
            [
                "txFailed",
                "results"
            ],
            [
                "txTooEarly",
                xdr.void()
            ],
            [
                "txTooLate",
                xdr.void()
            ],
            [
                "txMissingOperation",
                xdr.void()
            ],
            [
                "txBadSeq",
                xdr.void()
            ],
            [
                "txBadAuth",
                xdr.void()
            ],
            [
                "txInsufficientBalance",
                xdr.void()
            ],
            [
                "txNoAccount",
                xdr.void()
            ],
            [
                "txInsufficientFee",
                xdr.void()
            ],
            [
                "txBadAuthExtra",
                xdr.void()
            ],
            [
                "txInternalError",
                xdr.void()
            ],
            [
                "txNotSupported",
                xdr.void()
            ],
            [
                "txBadSponsorship",
                xdr.void()
            ],
            [
                "txBadMinSeqAgeOrGap",
                xdr.void()
            ],
            [
                "txMalformed",
                xdr.void()
            ]
        ],
        arms: {
            innerResultPair: xdr.lookup("InnerTransactionResultPair"),
            results: xdr.varArray(xdr.lookup("OperationResult"), 2147483647)
        }
    });
    // === xdr source ============================================================
    //
    //   union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //
    // ===========================================================================
    xdr.union("TransactionResultExt", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   struct TransactionResult
    //   {
    //       int64 feeCharged; // actual fee charged for the transaction
    //   
    //       union switch (TransactionResultCode code)
    //       {
    //       case txFEE_BUMP_INNER_SUCCESS:
    //       case txFEE_BUMP_INNER_FAILED:
    //           InnerTransactionResultPair innerResultPair;
    //       case txSUCCESS:
    //       case txFAILED:
    //           OperationResult results<>;
    //       case txTOO_EARLY:
    //       case txTOO_LATE:
    //       case txMISSING_OPERATION:
    //       case txBAD_SEQ:
    //       case txBAD_AUTH:
    //       case txINSUFFICIENT_BALANCE:
    //       case txNO_ACCOUNT:
    //       case txINSUFFICIENT_FEE:
    //       case txBAD_AUTH_EXTRA:
    //       case txINTERNAL_ERROR:
    //       case txNOT_SUPPORTED:
    //       // case txFEE_BUMP_INNER_FAILED: handled above
    //       case txBAD_SPONSORSHIP:
    //       case txBAD_MIN_SEQ_AGE_OR_GAP:
    //       case txMALFORMED:
    //           void;
    //       }
    //       result;
    //   
    //       // reserved for future use
    //       union switch (int v)
    //       {
    //       case 0:
    //           void;
    //       }
    //       ext;
    //   };
    //
    // ===========================================================================
    xdr.struct("TransactionResult", [
        [
            "feeCharged",
            xdr.lookup("Int64")
        ],
        [
            "result",
            xdr.lookup("TransactionResultResult")
        ],
        [
            "ext",
            xdr.lookup("TransactionResultExt")
        ]
    ]);
    // === xdr source ============================================================
    //
    //   typedef opaque Hash[32];
    //
    // ===========================================================================
    xdr.typedef("Hash", xdr.opaque(32));
    // === xdr source ============================================================
    //
    //   typedef opaque uint256[32];
    //
    // ===========================================================================
    xdr.typedef("Uint256", xdr.opaque(32));
    // === xdr source ============================================================
    //
    //   typedef unsigned int uint32;
    //
    // ===========================================================================
    xdr.typedef("Uint32", xdr.uint());
    // === xdr source ============================================================
    //
    //   typedef int int32;
    //
    // ===========================================================================
    xdr.typedef("Int32", xdr.int());
    // === xdr source ============================================================
    //
    //   typedef unsigned hyper uint64;
    //
    // ===========================================================================
    xdr.typedef("Uint64", xdr.uhyper());
    // === xdr source ============================================================
    //
    //   typedef hyper int64;
    //
    // ===========================================================================
    xdr.typedef("Int64", xdr.hyper());
    // === xdr source ============================================================
    //
    //   union ExtensionPoint switch (int v)
    //   {
    //   case 0:
    //       void;
    //   };
    //
    // ===========================================================================
    xdr.union("ExtensionPoint", {
        switchOn: xdr.int(),
        switchName: "v",
        switches: [
            [
                0,
                xdr.void()
            ]
        ],
        arms: {}
    });
    // === xdr source ============================================================
    //
    //   enum CryptoKeyType
    //   {
    //       KEY_TYPE_ED25519 = 0,
    //       KEY_TYPE_PRE_AUTH_TX = 1,
    //       KEY_TYPE_HASH_X = 2,
    //       KEY_TYPE_ED25519_SIGNED_PAYLOAD = 3,
    //       // MUXED enum values for supported type are derived from the enum values
    //       // above by ORing them with 0x100
    //       KEY_TYPE_MUXED_ED25519 = 0x100
    //   };
    //
    // ===========================================================================
    xdr.enum("CryptoKeyType", {
        keyTypeEd25519: 0,
        keyTypePreAuthTx: 1,
        keyTypeHashX: 2,
        keyTypeEd25519SignedPayload: 3,
        keyTypeMuxedEd25519: 256
    });
    // === xdr source ============================================================
    //
    //   enum PublicKeyType
    //   {
    //       PUBLIC_KEY_TYPE_ED25519 = KEY_TYPE_ED25519
    //   };
    //
    // ===========================================================================
    xdr.enum("PublicKeyType", {
        publicKeyTypeEd25519: 0
    });
    // === xdr source ============================================================
    //
    //   enum SignerKeyType
    //   {
    //       SIGNER_KEY_TYPE_ED25519 = KEY_TYPE_ED25519,
    //       SIGNER_KEY_TYPE_PRE_AUTH_TX = KEY_TYPE_PRE_AUTH_TX,
    //       SIGNER_KEY_TYPE_HASH_X = KEY_TYPE_HASH_X,
    //       SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD = KEY_TYPE_ED25519_SIGNED_PAYLOAD
    //   };
    //
    // ===========================================================================
    xdr.enum("SignerKeyType", {
        signerKeyTypeEd25519: 0,
        signerKeyTypePreAuthTx: 1,
        signerKeyTypeHashX: 2,
        signerKeyTypeEd25519SignedPayload: 3
    });
    // === xdr source ============================================================
    //
    //   union PublicKey switch (PublicKeyType type)
    //   {
    //   case PUBLIC_KEY_TYPE_ED25519:
    //       uint256 ed25519;
    //   };
    //
    // ===========================================================================
    xdr.union("PublicKey", {
        switchOn: xdr.lookup("PublicKeyType"),
        switchName: "type",
        switches: [
            [
                "publicKeyTypeEd25519",
                "ed25519"
            ]
        ],
        arms: {
            ed25519: xdr.lookup("Uint256")
        }
    });
    // === xdr source ============================================================
    //
    //   struct
    //       {
    //           /* Public key that must sign the payload. */
    //           uint256 ed25519;
    //           /* Payload to be raw signed by ed25519. */
    //           opaque payload<64>;
    //       }
    //
    // ===========================================================================
    xdr.struct("SignerKeyEd25519SignedPayload", [
        [
            "ed25519",
            xdr.lookup("Uint256")
        ],
        [
            "payload",
            xdr.varOpaque(64)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   union SignerKey switch (SignerKeyType type)
    //   {
    //   case SIGNER_KEY_TYPE_ED25519:
    //       uint256 ed25519;
    //   case SIGNER_KEY_TYPE_PRE_AUTH_TX:
    //       /* SHA-256 Hash of TransactionSignaturePayload structure */
    //       uint256 preAuthTx;
    //   case SIGNER_KEY_TYPE_HASH_X:
    //       /* Hash of random 256 bit preimage X */
    //       uint256 hashX;
    //   case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
    //       struct
    //       {
    //           /* Public key that must sign the payload. */
    //           uint256 ed25519;
    //           /* Payload to be raw signed by ed25519. */
    //           opaque payload<64>;
    //       } ed25519SignedPayload;
    //   };
    //
    // ===========================================================================
    xdr.union("SignerKey", {
        switchOn: xdr.lookup("SignerKeyType"),
        switchName: "type",
        switches: [
            [
                "signerKeyTypeEd25519",
                "ed25519"
            ],
            [
                "signerKeyTypePreAuthTx",
                "preAuthTx"
            ],
            [
                "signerKeyTypeHashX",
                "hashX"
            ],
            [
                "signerKeyTypeEd25519SignedPayload",
                "ed25519SignedPayload"
            ]
        ],
        arms: {
            ed25519: xdr.lookup("Uint256"),
            preAuthTx: xdr.lookup("Uint256"),
            hashX: xdr.lookup("Uint256"),
            ed25519SignedPayload: xdr.lookup("SignerKeyEd25519SignedPayload")
        }
    });
    // === xdr source ============================================================
    //
    //   typedef opaque Signature<64>;
    //
    // ===========================================================================
    xdr.typedef("Signature", xdr.varOpaque(64));
    // === xdr source ============================================================
    //
    //   typedef opaque SignatureHint[4];
    //
    // ===========================================================================
    xdr.typedef("SignatureHint", xdr.opaque(4));
    // === xdr source ============================================================
    //
    //   typedef PublicKey NodeID;
    //
    // ===========================================================================
    xdr.typedef("NodeId", xdr.lookup("PublicKey"));
    // === xdr source ============================================================
    //
    //   struct Curve25519Secret
    //   {
    //       opaque key[32];
    //   };
    //
    // ===========================================================================
    xdr.struct("Curve25519Secret", [
        [
            "key",
            xdr.opaque(32)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct Curve25519Public
    //   {
    //       opaque key[32];
    //   };
    //
    // ===========================================================================
    xdr.struct("Curve25519Public", [
        [
            "key",
            xdr.opaque(32)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct HmacSha256Key
    //   {
    //       opaque key[32];
    //   };
    //
    // ===========================================================================
    xdr.struct("HmacSha256Key", [
        [
            "key",
            xdr.opaque(32)
        ]
    ]);
    // === xdr source ============================================================
    //
    //   struct HmacSha256Mac
    //   {
    //       opaque mac[32];
    //   };
    //
    // ===========================================================================
    xdr.struct("HmacSha256Mac", [
        [
            "mac",
            xdr.opaque(32)
        ]
    ]);
}); // Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
/* jshint maxstatements:2147483647  */ /* jshint esnext:true  */ exports.default = types;

},{"d01885dbe8229bd0":"inVSw"}],"inVSw":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _types = require("2ed34751cf4a838f");
Object.keys(_types).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _types[key];
        }
    });
});
var _config = require("ff0c2280cee858e");
Object.keys(_config).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _config[key];
        }
    });
});

},{"2ed34751cf4a838f":"517Fj","ff0c2280cee858e":"cQrJ0"}],"517Fj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _int = require("1062d21778cb4b79");
Object.keys(_int).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _int[key];
        }
    });
});
var _hyper = require("27e238ff0a092ac2");
Object.keys(_hyper).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _hyper[key];
        }
    });
});
var _unsignedInt = require("68d47c82f033edc5");
Object.keys(_unsignedInt).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _unsignedInt[key];
        }
    });
});
var _unsignedHyper = require("72735a284efd59f");
Object.keys(_unsignedHyper).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _unsignedHyper[key];
        }
    });
});
var _float = require("a826ef367ed20bda");
Object.keys(_float).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _float[key];
        }
    });
});
var _double = require("c8fcf8407b8fd3a5");
Object.keys(_double).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _double[key];
        }
    });
});
var _quadruple = require("1417d74a12ad0b1c");
Object.keys(_quadruple).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _quadruple[key];
        }
    });
});
var _bool = require("caa4daa7b1559d56");
Object.keys(_bool).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _bool[key];
        }
    });
});
var _string = require("eddf5bd014badff2");
Object.keys(_string).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _string[key];
        }
    });
});
var _opaque = require("4ba740b2181b705");
Object.keys(_opaque).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _opaque[key];
        }
    });
});
var _varOpaque = require("31d632889a06970c");
Object.keys(_varOpaque).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _varOpaque[key];
        }
    });
});
var _array = require("b8d3093a202ae242");
Object.keys(_array).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _array[key];
        }
    });
});
var _varArray = require("4f84aa7b74ae1ab9");
Object.keys(_varArray).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _varArray[key];
        }
    });
});
var _option = require("754b7c55fb056c3f");
Object.keys(_option).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _option[key];
        }
    });
});
var _void = require("cd35606e7cb480fc");
Object.keys(_void).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _void[key];
        }
    });
});
var _enum = require("99d1d3cac236f621");
Object.keys(_enum).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _enum[key];
        }
    });
});
var _struct = require("52e88be7868a5c49");
Object.keys(_struct).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _struct[key];
        }
    });
});
var _union = require("3c64e75f6a78f1a4");
Object.keys(_union).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _union[key];
        }
    });
});

},{"1062d21778cb4b79":"3CLLQ","27e238ff0a092ac2":"dhlJz","68d47c82f033edc5":"lGVKD","72735a284efd59f":"37AAb","a826ef367ed20bda":"9Y9Ne","c8fcf8407b8fd3a5":"ciWqF","1417d74a12ad0b1c":"eIKWv","caa4daa7b1559d56":"gjEnX","eddf5bd014badff2":"4nhCF","4ba740b2181b705":"jXmup","31d632889a06970c":"50slM","b8d3093a202ae242":"c1hAD","4f84aa7b74ae1ab9":"hY9DR","754b7c55fb056c3f":"fJYhO","cd35606e7cb480fc":"807py","99d1d3cac236f621":"cedwL","52e88be7868a5c49":"j0fWg","3c64e75f6a78f1a4":"8qqYh"}],"3CLLQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Int = undefined;
var _isNumber = require("d40457c4b6e3660a");
var _isNumber2 = _interopRequireDefault(_isNumber);
var _ioMixin = require("a197e80c08a38aa7");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Int = exports.Int = {
    read: function read(io) {
        return io.readInt32BE();
    },
    write: function write(value, io) {
        if (!(0, _isNumber2.default)(value)) throw new Error("XDR Write Error: not a number");
        if (Math.floor(value) !== value) throw new Error("XDR Write Error: not an integer");
        io.writeInt32BE(value);
    },
    isValid: function isValid(value) {
        if (!(0, _isNumber2.default)(value)) return false;
        if (Math.floor(value) !== value) return false;
        return value >= Int.MIN_VALUE && value <= Int.MAX_VALUE;
    }
};
Int.MAX_VALUE = Math.pow(2, 31) - 1;
Int.MIN_VALUE = -Math.pow(2, 31);
(0, _ioMixin2.default)(Int);

},{"d40457c4b6e3660a":"crELm","a197e80c08a38aa7":"l9AiM"}],"crELm":[function(require,module,exports) {
var baseGetTag = require("2270b2197286aec2"), isObjectLike = require("f4921ac9fea065fa");
/** `Object#toString` result references. */ var numberTag = "[object Number]";
/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */ function isNumber(value) {
    return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
}
module.exports = isNumber;

},{"2270b2197286aec2":"lOnbo","f4921ac9fea065fa":"3BLi4"}],"l9AiM":[function(require,module,exports) {
var Buffer = require("c73c723bee9bf9b5").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = includeIoMixin;
var _extend = require("cc5d5a12ed68c890");
var _extend2 = _interopRequireDefault(_extend);
var _isFunction = require("f161a2dcbb5785ed");
var _isFunction2 = _interopRequireDefault(_isFunction);
var _cursor = require("bef88857b80f85c5");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// TODO: build a system to grow a buffer as we write to it
var BUFFER_SIZE = Math.pow(2, 16);
var staticMethods = {
    toXDR: function toXDR(val) {
        var cursor = new _cursor.Cursor(BUFFER_SIZE);
        this.write(val, cursor);
        var bytesWritten = cursor.tell();
        cursor.rewind();
        return cursor.slice(bytesWritten).buffer();
    },
    fromXDR: function fromXDR(input) {
        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "raw";
        var buffer = void 0;
        switch(format){
            case "raw":
                buffer = input;
                break;
            case "hex":
                buffer = Buffer.from(input, "hex");
                break;
            case "base64":
                buffer = Buffer.from(input, "base64");
                break;
            default:
                throw new Error("Invalid format " + format + ', must be "raw", "hex", "base64"');
        }
        var cursor = new _cursor.Cursor(buffer);
        var result = this.read(cursor);
        // TODO: error out if the entire buffer isn't consumed
        return result;
    },
    validateXDR: function validateXDR(input) {
        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "raw";
        try {
            this.fromXDR(input, format);
            return true;
        } catch (e) {
            return false;
        }
    }
};
var instanceMethods = {
    toXDR: function toXDR() {
        var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "raw";
        var buffer = this.constructor.toXDR(this);
        switch(format){
            case "raw":
                return buffer;
            case "hex":
                return buffer.toString("hex");
            case "base64":
                return buffer.toString("base64");
            default:
                throw new Error("Invalid format " + format + ', must be "raw", "hex", "base64"');
        }
    }
};
function includeIoMixin(obj) {
    (0, _extend2.default)(obj, staticMethods);
    if ((0, _isFunction2.default)(obj)) (0, _extend2.default)(obj.prototype, instanceMethods);
}

},{"c73c723bee9bf9b5":"fCgem","cc5d5a12ed68c890":"9LWOR","f161a2dcbb5785ed":"cfti6","bef88857b80f85c5":"7ItMo"}],"9LWOR":[function(require,module,exports) {
module.exports = require("9c931d0cb5c58b1b");

},{"9c931d0cb5c58b1b":"f6ius"}],"f6ius":[function(require,module,exports) {
var copyObject = require("c32446170f229906"), createAssigner = require("98f2c03fec9fccbf"), keysIn = require("3a6d4c54c82b78b5");
/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */ var assignIn = createAssigner(function(object, source) {
    copyObject(source, keysIn(source), object);
});
module.exports = assignIn;

},{"c32446170f229906":"gfA7W","98f2c03fec9fccbf":"7RrvA","3a6d4c54c82b78b5":"c9sMs"}],"gfA7W":[function(require,module,exports) {
var assignValue = require("f13d2e778604b43c"), baseAssignValue = require("a1156ee0e49355c7");
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while(++index < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) baseAssignValue(object, key, newValue);
        else assignValue(object, key, newValue);
    }
    return object;
}
module.exports = copyObject;

},{"f13d2e778604b43c":"5M3eX","a1156ee0e49355c7":"fprBU"}],"5M3eX":[function(require,module,exports) {
var baseAssignValue = require("396dc4ec8cc37b1e"), eq = require("1720efa158c53534");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignValue;

},{"396dc4ec8cc37b1e":"fprBU","1720efa158c53534":"aVz5f"}],"fprBU":[function(require,module,exports) {
var defineProperty = require("68cb13c1bb5fa3cc");
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty) defineProperty(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
    });
    else object[key] = value;
}
module.exports = baseAssignValue;

},{"68cb13c1bb5fa3cc":"cZOnw"}],"cZOnw":[function(require,module,exports) {
var getNative = require("b015010a7675b1ba");
var defineProperty = function() {
    try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
    } catch (e) {}
}();
module.exports = defineProperty;

},{"b015010a7675b1ba":"9PCIl"}],"9PCIl":[function(require,module,exports) {
var baseIsNative = require("249fbbeaf18b9153"), getValue = require("7163d262a6a92896");
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;

},{"249fbbeaf18b9153":"2U9Pn","7163d262a6a92896":"kKx5I"}],"2U9Pn":[function(require,module,exports) {
var isFunction = require("56c1f3bbfe3bf8c2"), isMasked = require("de17a36098e40441"), isObject = require("3ca481ff133d135a"), toSource = require("b8658cbddb01616");
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;

},{"56c1f3bbfe3bf8c2":"cfti6","de17a36098e40441":"cMDzi","3ca481ff133d135a":"cGhqJ","b8658cbddb01616":"bYHc7"}],"cMDzi":[function(require,module,exports) {
var coreJsData = require("bae2edfa5d95b405");
/** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;

},{"bae2edfa5d95b405":"6gJwQ"}],"6gJwQ":[function(require,module,exports) {
var root = require("4334d918336b26a1");
/** Used to detect overreaching core-js shims. */ var coreJsData = root["__core-js_shared__"];
module.exports = coreJsData;

},{"4334d918336b26a1":"dSYUs"}],"bYHc7":[function(require,module,exports) {
/** Used for built-in method references. */ var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + "";
        } catch (e) {}
    }
    return "";
}
module.exports = toSource;

},{}],"kKx5I":[function(require,module,exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;

},{}],"aVz5f":[function(require,module,exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;

},{}],"7RrvA":[function(require,module,exports) {
var baseRest = require("98b057142bffeeef"), isIterateeCall = require("617b5f2c714bdd1f");
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */ function createAssigner(assigner) {
    return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
        }
        object = Object(object);
        while(++index < length){
            var source = sources[index];
            if (source) assigner(object, source, index, customizer);
        }
        return object;
    });
}
module.exports = createAssigner;

},{"98b057142bffeeef":"kd260","617b5f2c714bdd1f":"7JSn7"}],"kd260":[function(require,module,exports) {
var identity = require("eb7d30887dbbe025"), overRest = require("148ad32e14a18578"), setToString = require("fe089c8d5f6514e7");
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */ function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
}
module.exports = baseRest;

},{"eb7d30887dbbe025":"dgTUN","148ad32e14a18578":"16F1z","fe089c8d5f6514e7":"b5kjI"}],"16F1z":[function(require,module,exports) {
var apply = require("135308771f5491b9");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */ function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while(++index < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while(++index < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
    };
}
module.exports = overRest;

},{"135308771f5491b9":"gUweg"}],"gUweg":[function(require,module,exports) {
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
module.exports = apply;

},{}],"b5kjI":[function(require,module,exports) {
var baseSetToString = require("733209afa25fa693"), shortOut = require("b4d05c0a8a5cb6e6");
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var setToString = shortOut(baseSetToString);
module.exports = setToString;

},{"733209afa25fa693":"lgihM","b4d05c0a8a5cb6e6":"7ulLs"}],"lgihM":[function(require,module,exports) {
var constant = require("7cbe4c720d651b5c"), defineProperty = require("8a0b6eacece75ef9"), identity = require("c15d1e23f188d297");
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
    });
};
module.exports = baseSetToString;

},{"7cbe4c720d651b5c":"1HI6K","8a0b6eacece75ef9":"cZOnw","c15d1e23f188d297":"dgTUN"}],"1HI6K":[function(require,module,exports) {
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */ function constant(value) {
    return function() {
        return value;
    };
}
module.exports = constant;

},{}],"7ulLs":[function(require,module,exports) {
/** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */ function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if (++count >= HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
module.exports = shortOut;

},{}],"7JSn7":[function(require,module,exports) {
var eq = require("8b648c62750f73fb"), isArrayLike = require("4cb13c97fc393c9"), isIndex = require("be6f9e7cca77ccba"), isObject = require("8a5b1d08f5deb609");
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */ function isIterateeCall(value, index, object) {
    if (!isObject(object)) return false;
    var type = typeof index;
    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) return eq(object[index], value);
    return false;
}
module.exports = isIterateeCall;

},{"8b648c62750f73fb":"aVz5f","4cb13c97fc393c9":"gMCbp","be6f9e7cca77ccba":"aJpx0","8a5b1d08f5deb609":"cGhqJ"}],"7ItMo":[function(require,module,exports) {
var Buffer = require("3e799aa906de1a3a").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Cursor = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _util = require("173e80e6c13b4822");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Cursor = function() {
    function Cursor(buffer) {
        _classCallCheck(this, Cursor);
        if (!(buffer instanceof Buffer)) buffer = typeof buffer === "number" ? Buffer.alloc(buffer) : Buffer.from(buffer);
        this._setBuffer(buffer);
        this.rewind();
    }
    _createClass(Cursor, [
        {
            key: "_setBuffer",
            value: function _setBuffer(buffer) {
                this._buffer = buffer;
                this.length = buffer.length;
            }
        },
        {
            key: "buffer",
            value: function buffer() {
                return this._buffer;
            }
        },
        {
            key: "tap",
            value: function tap(cb) {
                cb(this);
                return this;
            }
        },
        {
            key: "clone",
            value: function clone(newIndex) {
                var c = new this.constructor(this.buffer());
                c.seek(arguments.length === 0 ? this.tell() : newIndex);
                return c;
            }
        },
        {
            key: "tell",
            value: function tell() {
                return this._index;
            }
        },
        {
            key: "seek",
            value: function seek(op, index) {
                if (arguments.length === 1) {
                    index = op;
                    op = "=";
                }
                if (op === "+") this._index += index;
                else if (op === "-") this._index -= index;
                else this._index = index;
                return this;
            }
        },
        {
            key: "rewind",
            value: function rewind() {
                return this.seek(0);
            }
        },
        {
            key: "eof",
            value: function eof() {
                return this.tell() === this.buffer().length;
            }
        },
        {
            key: "write",
            value: function write(string, length, encoding) {
                return this.seek("+", this.buffer().write(string, this.tell(), length, encoding));
            }
        },
        {
            key: "fill",
            value: function fill(value, length) {
                if (arguments.length === 1) length = this.buffer().length - this.tell();
                this.buffer().fill(value, this.tell(), this.tell() + length);
                this.seek("+", length);
                return this;
            }
        },
        {
            key: "slice",
            value: function slice(length) {
                if (arguments.length === 0) length = this.length - this.tell();
                var c = new this.constructor(this.buffer().slice(this.tell(), this.tell() + length));
                this.seek("+", length);
                return c;
            }
        },
        {
            key: "copyFrom",
            value: function copyFrom(source) {
                var buf = source instanceof Buffer ? source : source.buffer();
                buf.copy(this.buffer(), this.tell(), 0, buf.length);
                this.seek("+", buf.length);
                return this;
            }
        },
        {
            key: "concat",
            value: function concat(list) {
                list.forEach(function(item, i) {
                    if (item instanceof Cursor) list[i] = item.buffer();
                });
                list.unshift(this.buffer());
                var b = Buffer.concat(list);
                this._setBuffer(b);
                return this;
            }
        },
        {
            key: "toString",
            value: function toString(encoding, length) {
                if (arguments.length === 0) {
                    encoding = "utf8";
                    length = this.buffer().length - this.tell();
                } else if (arguments.length === 1) length = this.buffer().length - this.tell();
                var val = this.buffer().toString(encoding, this.tell(), this.tell() + length);
                this.seek("+", length);
                return val;
            }
        },
        {
            key: "writeBufferPadded",
            value: function writeBufferPadded(buffer) {
                var padding = (0, _util.calculatePadding)(buffer.length);
                var paddingBuffer = Buffer.alloc(padding);
                return this.copyFrom(new Cursor(buffer)).copyFrom(new Cursor(paddingBuffer));
            }
        }
    ]);
    return Cursor;
}();
[
    [
        1,
        [
            "readInt8",
            "readUInt8"
        ]
    ],
    [
        2,
        [
            "readInt16BE",
            "readInt16LE",
            "readUInt16BE",
            "readUInt16LE"
        ]
    ],
    [
        4,
        [
            "readInt32BE",
            "readInt32LE",
            "readUInt32BE",
            "readUInt32LE",
            "readFloatBE",
            "readFloatLE"
        ]
    ],
    [
        8,
        [
            "readDoubleBE",
            "readDoubleLE"
        ]
    ]
].forEach(function(arr) {
    arr[1].forEach(function(method) {
        Cursor.prototype[method] = function read() {
            var val = this.buffer()[method](this.tell());
            this.seek("+", arr[0]);
            return val;
        };
    });
});
[
    [
        1,
        [
            "writeInt8",
            "writeUInt8"
        ]
    ],
    [
        2,
        [
            "writeInt16BE",
            "writeInt16LE",
            "writeUInt16BE",
            "writeUInt16LE"
        ]
    ],
    [
        4,
        [
            "writeInt32BE",
            "writeInt32LE",
            "writeUInt32BE",
            "writeUInt32LE",
            "writeFloatBE",
            "writeFloatLE"
        ]
    ],
    [
        8,
        [
            "writeDoubleBE",
            "writeDoubleLE"
        ]
    ]
].forEach(function(arr) {
    arr[1].forEach(function(method) {
        Cursor.prototype[method] = function write(val) {
            this.buffer()[method](val, this.tell());
            this.seek("+", arr[0]);
            return this;
        };
    });
});
exports.Cursor = Cursor;

},{"3e799aa906de1a3a":"fCgem","173e80e6c13b4822":"6fvg5"}],"6fvg5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.calculatePadding = calculatePadding;
exports.slicePadding = slicePadding;
var _every = require("cf32b5f08bb03816");
var _every2 = _interopRequireDefault(_every);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function calculatePadding(length) {
    switch(length % 4){
        case 0:
            return 0;
        case 1:
            return 3;
        case 2:
            return 2;
        case 3:
            return 1;
        default:
            return null;
    }
}
function slicePadding(io, length) {
    var padding = io.slice(length);
    var allZero = (0, _every2.default)(padding.buffer(), function(byte) {
        return byte === 0;
    });
    if (allZero !== true) throw new Error("XDR Read Error: invalid padding");
}

},{"cf32b5f08bb03816":"cCqOu"}],"cCqOu":[function(require,module,exports) {
var arrayEvery = require("5f7e24fd93a608f"), baseEvery = require("c82fe75075ef138"), baseIteratee = require("5c04803fd4a483fd"), isArray = require("f10d372e0ee18c15"), isIterateeCall = require("3b30b26d4453fe4b");
/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */ function every(collection, predicate, guard) {
    var func = isArray(collection) ? arrayEvery : baseEvery;
    if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
    return func(collection, baseIteratee(predicate, 3));
}
module.exports = every;

},{"5f7e24fd93a608f":"cjxds","c82fe75075ef138":"k0V6y","5c04803fd4a483fd":"2fsgg","f10d372e0ee18c15":"dZaTH","3b30b26d4453fe4b":"7JSn7"}],"cjxds":[function(require,module,exports) {
/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */ function arrayEvery(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (!predicate(array[index], index, array)) return false;
    }
    return true;
}
module.exports = arrayEvery;

},{}],"k0V6y":[function(require,module,exports) {
var baseEach = require("3133e182423b692c");
/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */ function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
    });
    return result;
}
module.exports = baseEvery;

},{"3133e182423b692c":"1glfs"}],"1glfs":[function(require,module,exports) {
var baseForOwn = require("3d744c0feddb1e28"), createBaseEach = require("485b4dac52b485cf");
/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */ var baseEach = createBaseEach(baseForOwn);
module.exports = baseEach;

},{"3d744c0feddb1e28":"6MqUM","485b4dac52b485cf":"dfv3e"}],"6MqUM":[function(require,module,exports) {
var baseFor = require("7b491232c7efd861"), keys = require("9d3c7cfe5d823f58");
/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */ function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
}
module.exports = baseForOwn;

},{"7b491232c7efd861":"k0bbR","9d3c7cfe5d823f58":"6fHVw"}],"6fHVw":[function(require,module,exports) {
var arrayLikeKeys = require("3bf3cd14686c0668"), baseKeys = require("d791555c8dc443ac"), isArrayLike = require("35d049b968efdd5");
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

},{"3bf3cd14686c0668":"dquIQ","d791555c8dc443ac":"c0eiI","35d049b968efdd5":"gMCbp"}],"c0eiI":[function(require,module,exports) {
var isPrototype = require("615ca81ad4365b0d"), nativeKeys = require("d855f810ab7868f2");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != "constructor") result.push(key);
    return result;
}
module.exports = baseKeys;

},{"615ca81ad4365b0d":"iG4eR","d855f810ab7868f2":"k97u2"}],"k97u2":[function(require,module,exports) {
var overArg = require("c22902646dd1bdf5");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

},{"c22902646dd1bdf5":"dpUvl"}],"dpUvl":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;

},{}],"dfv3e":[function(require,module,exports) {
var isArrayLike = require("910e3d23209c5640");
/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */ function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
        if (collection == null) return collection;
        if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
        while(fromRight ? index-- : ++index < length){
            if (iteratee(iterable[index], index, iterable) === false) break;
        }
        return collection;
    };
}
module.exports = createBaseEach;

},{"910e3d23209c5640":"gMCbp"}],"2fsgg":[function(require,module,exports) {
var baseMatches = require("3678a5ab85a2602c"), baseMatchesProperty = require("2407bb68bc174ab5"), identity = require("b0d981c941016fb"), isArray = require("a10e72bbbd5f5dc3"), property = require("8b01bae91edafb4a");
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */ function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == "function") return value;
    if (value == null) return identity;
    if (typeof value == "object") return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    return property(value);
}
module.exports = baseIteratee;

},{"3678a5ab85a2602c":"2mdwX","2407bb68bc174ab5":"48kxC","b0d981c941016fb":"dgTUN","a10e72bbbd5f5dc3":"dZaTH","8b01bae91edafb4a":"8aSQI"}],"2mdwX":[function(require,module,exports) {
var baseIsMatch = require("1681933345437bbb"), getMatchData = require("14ff46742ebf51b6"), matchesStrictComparable = require("175b7a5b1a542d7f");
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
    };
}
module.exports = baseMatches;

},{"1681933345437bbb":"joJZV","14ff46742ebf51b6":"48Qyi","175b7a5b1a542d7f":"a9Bav"}],"joJZV":[function(require,module,exports) {
var Stack = require("5b2e79dc114add06"), baseIsEqual = require("b4d6ec0a1bc1adf6");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */ function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) return !length;
    object = Object(object);
    while(index--){
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
    }
    while(++index < length){
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) return false;
        } else {
            var stack = new Stack;
            if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
            if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
        }
    }
    return true;
}
module.exports = baseIsMatch;

},{"5b2e79dc114add06":"atP87","b4d6ec0a1bc1adf6":"7i3qr"}],"atP87":[function(require,module,exports) {
var ListCache = require("107f269fa559c9f8"), stackClear = require("79829815bbb8881f"), stackDelete = require("f1269ebb5d856d50"), stackGet = require("9dd66935370b70ed"), stackHas = require("9e44abbb485d86a0"), stackSet = require("5b84f7174f4bcd3f");
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype["delete"] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

},{"107f269fa559c9f8":"3UZeo","79829815bbb8881f":"6CpyN","f1269ebb5d856d50":"dGFb0","9dd66935370b70ed":"6zFUp","9e44abbb485d86a0":"3VJUX","5b84f7174f4bcd3f":"ZfrYM"}],"3UZeo":[function(require,module,exports) {
var listCacheClear = require("7a27ad6a92962df8"), listCacheDelete = require("253ce4d6c2f5fd0c"), listCacheGet = require("500cf2b3d85ec54f"), listCacheHas = require("3250d0630edd22f"), listCacheSet = require("b192df62bf447f5");
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype["delete"] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

},{"7a27ad6a92962df8":"7AKQv","253ce4d6c2f5fd0c":"j2Z5O","500cf2b3d85ec54f":"6Zrrs","3250d0630edd22f":"i1CBK","b192df62bf447f5":"2Rcur"}],"7AKQv":[function(require,module,exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;

},{}],"j2Z5O":[function(require,module,exports) {
var assocIndexOf = require("24b6ec1a00d7224d");
/** Used for built-in method references. */ var arrayProto = Array.prototype;
/** Built-in value references. */ var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = listCacheDelete;

},{"24b6ec1a00d7224d":"cRVsl"}],"cRVsl":[function(require,module,exports) {
var eq = require("dc3b8f4303d70261");
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = assocIndexOf;

},{"dc3b8f4303d70261":"aVz5f"}],"6Zrrs":[function(require,module,exports) {
var assocIndexOf = require("fe902397c1317022");
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;

},{"fe902397c1317022":"cRVsl"}],"i1CBK":[function(require,module,exports) {
var assocIndexOf = require("8c41fb7eb494482e");
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;

},{"8c41fb7eb494482e":"cRVsl"}],"2Rcur":[function(require,module,exports) {
var assocIndexOf = require("3e30a33b5608c157");
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = listCacheSet;

},{"3e30a33b5608c157":"cRVsl"}],"6CpyN":[function(require,module,exports) {
var ListCache = require("d6ee74a97ea7a67");
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;

},{"d6ee74a97ea7a67":"3UZeo"}],"dGFb0":[function(require,module,exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;

},{}],"6zFUp":[function(require,module,exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;

},{}],"3VJUX":[function(require,module,exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;

},{}],"ZfrYM":[function(require,module,exports) {
var ListCache = require("2a6730a95430901a"), Map = require("a59f9459acf5d23e"), MapCache = require("319b94bf540910a");
/** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;

},{"2a6730a95430901a":"3UZeo","a59f9459acf5d23e":"8YjF4","319b94bf540910a":"664I1"}],"8YjF4":[function(require,module,exports) {
var getNative = require("1642be671ac8074d"), root = require("99ec21dd1cd65509");
/* Built-in method references that are verified to be native. */ var Map = getNative(root, "Map");
module.exports = Map;

},{"1642be671ac8074d":"9PCIl","99ec21dd1cd65509":"dSYUs"}],"664I1":[function(require,module,exports) {
var mapCacheClear = require("cf42e8bbc667a835"), mapCacheDelete = require("6729bc42c4e402e4"), mapCacheGet = require("a20420cc62883bd5"), mapCacheHas = require("713de1a6c6cf28d6"), mapCacheSet = require("e2a67a530eafae30");
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype["delete"] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

},{"cf42e8bbc667a835":"7kHs4","6729bc42c4e402e4":"4ny9y","a20420cc62883bd5":"gVeFY","713de1a6c6cf28d6":"idSOY","e2a67a530eafae30":"lXUJT"}],"7kHs4":[function(require,module,exports) {
var Hash = require("fe13332727f74f01"), ListCache = require("1434268a7484f1c0"), Map = require("6214cc298bc69fb5");
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        "hash": new Hash,
        "map": new (Map || ListCache),
        "string": new Hash
    };
}
module.exports = mapCacheClear;

},{"fe13332727f74f01":"jFMT5","1434268a7484f1c0":"3UZeo","6214cc298bc69fb5":"8YjF4"}],"jFMT5":[function(require,module,exports) {
var hashClear = require("f86abab0433586cb"), hashDelete = require("1bc34269cfb431fa"), hashGet = require("b74819fd76cfba0d"), hashHas = require("e9080402f113a6d3"), hashSet = require("bc0cebadccec9f24");
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype["delete"] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

},{"f86abab0433586cb":"f2NRo","1bc34269cfb431fa":"cCdgz","b74819fd76cfba0d":"eKqTO","e9080402f113a6d3":"ghnqP","bc0cebadccec9f24":"6i99R"}],"f2NRo":[function(require,module,exports) {
var nativeCreate = require("52cc7c9427ab54ab");
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
}
module.exports = hashClear;

},{"52cc7c9427ab54ab":"6i8Uf"}],"6i8Uf":[function(require,module,exports) {
var getNative = require("6cf4bf268ac671be");
/* Built-in method references that are verified to be native. */ var nativeCreate = getNative(Object, "create");
module.exports = nativeCreate;

},{"6cf4bf268ac671be":"9PCIl"}],"cCdgz":[function(require,module,exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;

},{}],"eKqTO":[function(require,module,exports) {
var nativeCreate = require("f318f96af147968a");
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;

},{"f318f96af147968a":"6i8Uf"}],"ghnqP":[function(require,module,exports) {
var nativeCreate = require("a76dc1cdb4769b43");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;

},{"a76dc1cdb4769b43":"6i8Uf"}],"6i99R":[function(require,module,exports) {
var nativeCreate = require("1d600965281d75e4");
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;

},{"1d600965281d75e4":"6i8Uf"}],"4ny9y":[function(require,module,exports) {
var getMapData = require("8f68ccbec3d172ba");
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;

},{"8f68ccbec3d172ba":"aptgk"}],"aptgk":[function(require,module,exports) {
var isKeyable = require("fc83cb2348208568");
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
module.exports = getMapData;

},{"fc83cb2348208568":"icylN"}],"icylN":[function(require,module,exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
module.exports = isKeyable;

},{}],"gVeFY":[function(require,module,exports) {
var getMapData = require("20fabac5f0a40790");
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;

},{"20fabac5f0a40790":"aptgk"}],"idSOY":[function(require,module,exports) {
var getMapData = require("475746120e75978e");
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;

},{"475746120e75978e":"aptgk"}],"lXUJT":[function(require,module,exports) {
var getMapData = require("f8eb8491144354dd");
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;

},{"f8eb8491144354dd":"aptgk"}],"7i3qr":[function(require,module,exports) {
var baseIsEqualDeep = require("dedca52b85da3948"), isObjectLike = require("9b4333cf3190d3d0");
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}
module.exports = baseIsEqual;

},{"dedca52b85da3948":"6GoQ9","9b4333cf3190d3d0":"3BLi4"}],"6GoQ9":[function(require,module,exports) {
var Stack = require("f5c7b7ce97b792bc"), equalArrays = require("7f49d9691486207e"), equalByTag = require("d34478c2ea6c9dd"), equalObjects = require("8fffcd979690d53"), getTag = require("43e2f1a75c7cfadc"), isArray = require("24dc69db4c14a616"), isBuffer = require("2b3a29afbcf67e9a"), isTypedArray = require("36bf8efc48737c6d");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = baseIsEqualDeep;

},{"f5c7b7ce97b792bc":"atP87","7f49d9691486207e":"dQBwf","d34478c2ea6c9dd":"iqa6H","8fffcd979690d53":"klCEf","43e2f1a75c7cfadc":"cRPhM","24dc69db4c14a616":"dZaTH","2b3a29afbcf67e9a":"cn85h","36bf8efc48737c6d":"6SVKk"}],"dQBwf":[function(require,module,exports) {
var SetCache = require("5a461047923b47f0"), arraySome = require("8caad66e8cc5763e"), cacheHas = require("c11fc3ffa306032b");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while(++index < arrLength){
        var arrValue = array[index], othValue = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
}
module.exports = equalArrays;

},{"5a461047923b47f0":"1SXrY","8caad66e8cc5763e":"aLDHW","c11fc3ffa306032b":"70cVb"}],"1SXrY":[function(require,module,exports) {
var MapCache = require("66a86a64e85614ba"), setCacheAdd = require("1d401a6e10253664"), setCacheHas = require("c9013445cefba4c6");
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while(++index < length)this.add(values[index]);
}
// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

},{"66a86a64e85614ba":"664I1","1d401a6e10253664":"cZViu","c9013445cefba4c6":"4zNID"}],"cZViu":[function(require,module,exports) {
/** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = "__lodash_hash_undefined__";
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
}
module.exports = setCacheAdd;

},{}],"4zNID":[function(require,module,exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = setCacheHas;

},{}],"aLDHW":[function(require,module,exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
module.exports = arraySome;

},{}],"70cVb":[function(require,module,exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = cacheHas;

},{}],"iqa6H":[function(require,module,exports) {
var Symbol = require("1ffd549b16701447"), Uint8Array = require("81bed4a3448090ca"), eq = require("79d5613eaf5aedc9"), equalArrays = require("ff633ed20d0731ec"), mapToArray = require("328f2fef25a97219"), setToArray = require("23abc037ff10e0a4");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
            return true;
        case boolTag:
        case dateTag:
        case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);
        case errorTag:
            return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + "";
        case mapTag:
            var convert = mapToArray;
        case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
        case symbolTag:
            if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
    }
    return false;
}
module.exports = equalByTag;

},{"1ffd549b16701447":"7lsL9","81bed4a3448090ca":"6xFrA","79d5613eaf5aedc9":"aVz5f","ff633ed20d0731ec":"dQBwf","328f2fef25a97219":"kAwkU","23abc037ff10e0a4":"2qJif"}],"6xFrA":[function(require,module,exports) {
var root = require("78cc63c8c9e8a137");
/** Built-in value references. */ var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

},{"78cc63c8c9e8a137":"dSYUs"}],"kAwkU":[function(require,module,exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = mapToArray;

},{}],"2qJif":[function(require,module,exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = setToArray;

},{}],"klCEf":[function(require,module,exports) {
var getAllKeys = require("9076fa4998483ae0");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while(++index < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) result = false;
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
}
module.exports = equalObjects;

},{"9076fa4998483ae0":"d2kML"}],"d2kML":[function(require,module,exports) {
var baseGetAllKeys = require("74a03d1418647a62"), getSymbols = require("e3cc330ebbaae0f0"), keys = require("49c6111ce167d330");
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
}
module.exports = getAllKeys;

},{"74a03d1418647a62":"aeckf","e3cc330ebbaae0f0":"5p5Yd","49c6111ce167d330":"6fHVw"}],"aeckf":[function(require,module,exports) {
var arrayPush = require("52f8ccd012d0940d"), isArray = require("4e98e052b97847c5");
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}
module.exports = baseGetAllKeys;

},{"52f8ccd012d0940d":"ivo5r","4e98e052b97847c5":"dZaTH"}],"ivo5r":[function(require,module,exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length)array[offset + index] = values[index];
    return array;
}
module.exports = arrayPush;

},{}],"5p5Yd":[function(require,module,exports) {
var arrayFilter = require("f7cfc106196e4f2c"), stubArray = require("a15be43ccd8d5fd4");
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) return [];
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = getSymbols;

},{"f7cfc106196e4f2c":"hmIQ7","a15be43ccd8d5fd4":"6TgRy"}],"hmIQ7":[function(require,module,exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
module.exports = arrayFilter;

},{}],"6TgRy":[function(require,module,exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function stubArray() {
    return [];
}
module.exports = stubArray;

},{}],"cRPhM":[function(require,module,exports) {
var DataView = require("d3815597c4e39259"), Map = require("e3cd5c9e279f8777"), Promise = require("1d45e0220c4dbab1"), Set = require("5b3ad470f6295f8e"), WeakMap = require("6ade9e1690b31892"), baseGetTag = require("de46125efe6287ed"), toSource = require("1460a83c9437d5e");
/** `Object#toString` result references. */ var mapTag = "[object Map]", objectTag = "[object Object]", promiseTag = "[object Promise]", setTag = "[object Set]", weakMapTag = "[object WeakMap]";
var dataViewTag = "[object DataView]";
/** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var getTag = baseGetTag;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
    var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
    if (ctorString) switch(ctorString){
        case dataViewCtorString:
            return dataViewTag;
        case mapCtorString:
            return mapTag;
        case promiseCtorString:
            return promiseTag;
        case setCtorString:
            return setTag;
        case weakMapCtorString:
            return weakMapTag;
    }
    return result;
};
module.exports = getTag;

},{"d3815597c4e39259":"ejRu5","e3cd5c9e279f8777":"8YjF4","1d45e0220c4dbab1":"jbvCt","5b3ad470f6295f8e":"4xGLf","6ade9e1690b31892":"av50V","de46125efe6287ed":"lOnbo","1460a83c9437d5e":"bYHc7"}],"ejRu5":[function(require,module,exports) {
var getNative = require("77ba383924f9ce88"), root = require("8bc45482b93b9a2b");
/* Built-in method references that are verified to be native. */ var DataView = getNative(root, "DataView");
module.exports = DataView;

},{"77ba383924f9ce88":"9PCIl","8bc45482b93b9a2b":"dSYUs"}],"jbvCt":[function(require,module,exports) {
var getNative = require("f820834ac7b16fc9"), root = require("565a6b760803648f");
/* Built-in method references that are verified to be native. */ var Promise = getNative(root, "Promise");
module.exports = Promise;

},{"f820834ac7b16fc9":"9PCIl","565a6b760803648f":"dSYUs"}],"4xGLf":[function(require,module,exports) {
var getNative = require("105769198f637390"), root = require("6e6dbcfad071a19a");
/* Built-in method references that are verified to be native. */ var Set = getNative(root, "Set");
module.exports = Set;

},{"105769198f637390":"9PCIl","6e6dbcfad071a19a":"dSYUs"}],"av50V":[function(require,module,exports) {
var getNative = require("ca11eb428bf359a7"), root = require("bed78346f0e9a8e6");
/* Built-in method references that are verified to be native. */ var WeakMap = getNative(root, "WeakMap");
module.exports = WeakMap;

},{"ca11eb428bf359a7":"9PCIl","bed78346f0e9a8e6":"dSYUs"}],"48Qyi":[function(require,module,exports) {
var isStrictComparable = require("417e6a7c475f5c47"), keys = require("3e0e6e5ad42454f2");
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */ function getMatchData(object) {
    var result = keys(object), length = result.length;
    while(length--){
        var key = result[length], value = object[key];
        result[length] = [
            key,
            value,
            isStrictComparable(value)
        ];
    }
    return result;
}
module.exports = getMatchData;

},{"417e6a7c475f5c47":"lpdGS","3e0e6e5ad42454f2":"6fHVw"}],"lpdGS":[function(require,module,exports) {
var isObject = require("4dbb08cb156b5273");
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */ function isStrictComparable(value) {
    return value === value && !isObject(value);
}
module.exports = isStrictComparable;

},{"4dbb08cb156b5273":"cGhqJ"}],"a9Bav":[function(require,module,exports) {
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function matchesStrictComparable(key, srcValue) {
    return function(object) {
        if (object == null) return false;
        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
}
module.exports = matchesStrictComparable;

},{}],"48kxC":[function(require,module,exports) {
var baseIsEqual = require("1f4777d7dd0d7a12"), get = require("3aa4d428f1f5675b"), hasIn = require("43fee99209178c3c"), isKey = require("20af9321ca4c290"), isStrictComparable = require("51e9de0105c06f0f"), matchesStrictComparable = require("a9732a6cc6092e50"), toKey = require("4bce6713791f9f22");
/** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */ function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
    return function(object) {
        var objValue = get(object, path);
        return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
}
module.exports = baseMatchesProperty;

},{"1f4777d7dd0d7a12":"7i3qr","3aa4d428f1f5675b":"8UELX","43fee99209178c3c":"57qii","20af9321ca4c290":"4wPWG","51e9de0105c06f0f":"lpdGS","a9732a6cc6092e50":"a9Bav","4bce6713791f9f22":"bEgue"}],"8UELX":[function(require,module,exports) {
var baseGet = require("8b89c8880c94d4f1");
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */ function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
}
module.exports = get;

},{"8b89c8880c94d4f1":"kMRe3"}],"kMRe3":[function(require,module,exports) {
var castPath = require("a29f2b573e70931b"), toKey = require("4a9d8d28e6a7165b");
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */ function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length = path.length;
    while(object != null && index < length)object = object[toKey(path[index++])];
    return index && index == length ? object : undefined;
}
module.exports = baseGet;

},{"a29f2b573e70931b":"apxk5","4a9d8d28e6a7165b":"bEgue"}],"apxk5":[function(require,module,exports) {
var isArray = require("10fe41971c0449a8"), isKey = require("33ea76929dcc4962"), stringToPath = require("f54828c0c514ab12"), toString = require("803709a7c860a8ea");
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */ function castPath(value, object) {
    if (isArray(value)) return value;
    return isKey(value, object) ? [
        value
    ] : stringToPath(toString(value));
}
module.exports = castPath;

},{"10fe41971c0449a8":"dZaTH","33ea76929dcc4962":"4wPWG","f54828c0c514ab12":"1m1j5","803709a7c860a8ea":"joIdQ"}],"4wPWG":[function(require,module,exports) {
var isArray = require("5a7bb5aff1c4489"), isSymbol = require("245511a268e3603a");
/** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */ function isKey(value, object) {
    if (isArray(value)) return false;
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) return true;
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}
module.exports = isKey;

},{"5a7bb5aff1c4489":"dZaTH","245511a268e3603a":"i3BHC"}],"i3BHC":[function(require,module,exports) {
var baseGetTag = require("32468f36190a157"), isObjectLike = require("486a3b2ab07b089e");
/** `Object#toString` result references. */ var symbolTag = "[object Symbol]";
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;

},{"32468f36190a157":"lOnbo","486a3b2ab07b089e":"3BLi4"}],"1m1j5":[function(require,module,exports) {
var memoizeCapped = require("5d78b1333796ca4d");
/** Used to match property names within property paths. */ var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */ ) result.push("");
    string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
    });
    return result;
});
module.exports = stringToPath;

},{"5d78b1333796ca4d":"j3xlQ"}],"j3xlQ":[function(require,module,exports) {
var memoize = require("b7dd51b6f3b7b12f");
/** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function memoizeCapped(func) {
    var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
module.exports = memoizeCapped;

},{"b7dd51b6f3b7b12f":"azHKC"}],"azHKC":[function(require,module,exports) {
var MapCache = require("a8e319311dc35430");
/** Error message constants. */ var FUNC_ERROR_TEXT = "Expected a function";
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function memoize(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") throw new TypeError(FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new (memoize.Cache || MapCache);
    return memoized;
}
// Expose `MapCache`.
memoize.Cache = MapCache;
module.exports = memoize;

},{"a8e319311dc35430":"664I1"}],"joIdQ":[function(require,module,exports) {
var baseToString = require("93576f12c8cf2d87");
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function toString(value) {
    return value == null ? "" : baseToString(value);
}
module.exports = toString;

},{"93576f12c8cf2d87":"goDP8"}],"goDP8":[function(require,module,exports) {
var Symbol = require("835962f31443fb1b"), arrayMap = require("ee1aa9ff2e547ebb"), isArray = require("2ffe85c6751c3e99"), isSymbol = require("248af1991eabac67");
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == "string") return value;
    if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + "";
    if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : "";
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
module.exports = baseToString;

},{"835962f31443fb1b":"7lsL9","ee1aa9ff2e547ebb":"imI5Z","2ffe85c6751c3e99":"dZaTH","248af1991eabac67":"i3BHC"}],"imI5Z":[function(require,module,exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while(++index < length)result[index] = iteratee(array[index], index, array);
    return result;
}
module.exports = arrayMap;

},{}],"bEgue":[function(require,module,exports) {
var isSymbol = require("46dba43a1bdad783");
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) return value;
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
module.exports = toKey;

},{"46dba43a1bdad783":"i3BHC"}],"57qii":[function(require,module,exports) {
var baseHasIn = require("8ea2e074379ea405"), hasPath = require("5f07f72adf0ad372");
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */ function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
}
module.exports = hasIn;

},{"8ea2e074379ea405":"in8KZ","5f07f72adf0ad372":"4QNMG"}],"in8KZ":[function(require,module,exports) {
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */ function baseHasIn(object, key) {
    return object != null && key in Object(object);
}
module.exports = baseHasIn;

},{}],"4QNMG":[function(require,module,exports) {
var castPath = require("cd730fd06e5739c3"), isArguments = require("60b95f0eaba72d81"), isArray = require("dc63274682347a86"), isIndex = require("f5db61e34565b629"), isLength = require("1f708a94a05761fc"), toKey = require("934408b6a11a71bf");
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */ function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length = path.length, result = false;
    while(++index < length){
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) break;
        object = object[key];
    }
    if (result || ++index != length) return result;
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}
module.exports = hasPath;

},{"cd730fd06e5739c3":"apxk5","60b95f0eaba72d81":"8ReNj","dc63274682347a86":"dZaTH","f5db61e34565b629":"aJpx0","1f708a94a05761fc":"hrTBx","934408b6a11a71bf":"bEgue"}],"8aSQI":[function(require,module,exports) {
var baseProperty = require("e963055b76dc103d"), basePropertyDeep = require("68b9c61ea86a4867"), isKey = require("9c1f077df2a972ff"), toKey = require("f144402190356b93");
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */ function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}
module.exports = property;

},{"e963055b76dc103d":"4HOmE","68b9c61ea86a4867":"c9dhz","9c1f077df2a972ff":"4wPWG","f144402190356b93":"bEgue"}],"4HOmE":[function(require,module,exports) {
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function baseProperty(key) {
    return function(object) {
        return object == null ? undefined : object[key];
    };
}
module.exports = baseProperty;

},{}],"c9dhz":[function(require,module,exports) {
var baseGet = require("f9e7e4a9aa3d857");
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */ function basePropertyDeep(path) {
    return function(object) {
        return baseGet(object, path);
    };
}
module.exports = basePropertyDeep;

},{"f9e7e4a9aa3d857":"kMRe3"}],"dhlJz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Hyper = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);
    if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) return undefined;
        else return get(parent, property, receiver);
    } else if ("value" in desc) return desc.value;
    else {
        var getter = desc.get;
        if (getter === undefined) return undefined;
        return getter.call(receiver);
    }
};
var _long = require("4d1cdeaa0ab4f787");
var _long2 = _interopRequireDefault(_long);
var _ioMixin = require("bcd845f380c3f322");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
var Hyper = exports.Hyper = function(_Long) {
    _inherits(Hyper, _Long);
    _createClass(Hyper, null, [
        {
            key: "read",
            value: function read(io) {
                var high = io.readInt32BE();
                var low = io.readInt32BE();
                return this.fromBits(low, high);
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (!(value instanceof this)) throw new Error("XDR Write Error: " + value + " is not a Hyper");
                io.writeInt32BE(value.high);
                io.writeInt32BE(value.low);
            }
        },
        {
            key: "fromString",
            value: function fromString(string) {
                if (!/^-?\d+$/.test(string)) throw new Error("Invalid hyper string: " + string);
                var result = _get(Hyper.__proto__ || Object.getPrototypeOf(Hyper), "fromString", this).call(this, string, false);
                return new this(result.low, result.high);
            }
        },
        {
            key: "fromBits",
            value: function fromBits(low, high) {
                var result = _get(Hyper.__proto__ || Object.getPrototypeOf(Hyper), "fromBits", this).call(this, low, high, false);
                return new this(result.low, result.high);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                return value instanceof this;
            }
        }
    ]);
    function Hyper(low, high) {
        _classCallCheck(this, Hyper);
        return _possibleConstructorReturn(this, (Hyper.__proto__ || Object.getPrototypeOf(Hyper)).call(this, low, high, false));
    }
    return Hyper;
}(_long2.default);
(0, _ioMixin2.default)(Hyper);
Hyper.MAX_VALUE = new Hyper(_long2.default.MAX_VALUE.low, _long2.default.MAX_VALUE.high);
Hyper.MIN_VALUE = new Hyper(_long2.default.MIN_VALUE.low, _long2.default.MIN_VALUE.high);

},{"4d1cdeaa0ab4f787":"l3RhI","bcd845f380c3f322":"l9AiM"}],"l3RhI":[function(require,module,exports) {
/*
 Copyright 2013 Daniel Wirtz <dcode@dcode.io>
 Copyright 2009 The Closure Library Authors. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS-IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */ /**
 * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/Long.js for details
 */ (function(global, factory) {
    /* AMD */ if (typeof define === "function" && define["amd"]) define([], factory);
    else if (module && module["exports"]) module["exports"] = factory();
    else (global["dcodeIO"] = global["dcodeIO"] || {})["Long"] = factory();
})(this, function() {
    "use strict";
    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     * @exports Long
     * @class A Long class for representing a 64 bit two's-complement integer value.
     * @param {number} low The low (signed) 32 bits of the long
     * @param {number} high The high (signed) 32 bits of the long
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @constructor
     */ function Long(low, high, unsigned) {
        /**
         * The low 32 bits as a signed value.
         * @type {number}
         * @expose
         */ this.low = low | 0;
        /**
         * The high 32 bits as a signed value.
         * @type {number}
         * @expose
         */ this.high = high | 0;
        /**
         * Whether unsigned or not.
         * @type {boolean}
         * @expose
         */ this.unsigned = !!unsigned;
    }
    // The internal representation of a long is the two given signed, 32-bit values.
    // We use 32-bit pieces because these are the size of integers on which
    // Javascript performs bit-operations.  For operations like addition and
    // multiplication, we split each number into 16 bit pieces, which can easily be
    // multiplied within Javascript's floating-point representation without overflow
    // or change in sign.
    //
    // In the algorithms below, we frequently reduce the negative case to the
    // positive case by negating the input(s) and then post-processing the result.
    // Note that we must ALWAYS check specially whether those values are MIN_VALUE
    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
    // a positive number, it overflows back into a negative).  Not handling this
    // case would often result in infinite recursion.
    //
    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
    // methods on which they depend.
    /**
     * An indicator used to reliably determine if an object is a Long or not.
     * @type {boolean}
     * @const
     * @expose
     * @private
     */ Long.__isLong__;
    Object.defineProperty(Long.prototype, "__isLong__", {
        value: true,
        enumerable: false,
        configurable: false
    });
    /**
     * Tests if the specified object is a Long.
     * @param {*} obj Object
     * @returns {boolean}
     * @expose
     */ Long.isLong = function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
    };
    /**
     * A cache of the Long representations of small integer values.
     * @type {!Object}
     * @inner
     */ var INT_CACHE = {};
    /**
     * A cache of the Long representations of small unsigned integer values.
     * @type {!Object}
     * @inner
     */ var UINT_CACHE = {};
    /**
     * Returns a Long representing the given 32 bit integer value.
     * @param {number} value The 32 bit integer in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     * @expose
     */ Long.fromInt = function fromInt(value, unsigned) {
        var obj, cachedObj;
        if (!unsigned) {
            value = value | 0;
            if (-128 <= value && value < 128) {
                cachedObj = INT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = new Long(value, value < 0 ? -1 : 0, false);
            if (-128 <= value && value < 128) INT_CACHE[value] = obj;
            return obj;
        } else {
            value = value >>> 0;
            if (0 <= value && value < 256) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj) return cachedObj;
            }
            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);
            if (0 <= value && value < 256) UINT_CACHE[value] = obj;
            return obj;
        }
    };
    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @param {number} value The number in question
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     * @expose
     */ Long.fromNumber = function fromNumber(value, unsigned) {
        unsigned = !!unsigned;
        if (isNaN(value) || !isFinite(value)) return Long.ZERO;
        if (!unsigned && value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;
        if (!unsigned && value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;
        if (unsigned && value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;
        if (value < 0) return Long.fromNumber(-value, unsigned).negate();
        return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
    };
    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
     *  assumed to use 32 bits.
     * @param {number} lowBits The low 32 bits
     * @param {number} highBits The high 32 bits
     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @returns {!Long} The corresponding Long value
     * @expose
     */ Long.fromBits = function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    };
    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @param {string} str The textual representation of the Long
     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed
     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
     * @returns {!Long} The corresponding Long value
     * @expose
     */ Long.fromString = function fromString(str, unsigned, radix) {
        if (str.length === 0) throw Error("number format error: empty string");
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return Long.ZERO;
        if (typeof unsigned === "number") radix = unsigned, unsigned = false;
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw Error("radix out of range: " + radix);
        var p;
        if ((p = str.indexOf("-")) > 0) throw Error('number format error: interior "-" character: ' + str);
        else if (p === 0) return Long.fromString(str.substring(1), unsigned, radix).negate();
        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 8));
        var result = Long.ZERO;
        for(var i = 0; i < str.length; i += 8){
            var size = Math.min(8, str.length - i);
            var value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = Long.fromNumber(Math.pow(radix, size));
                result = result.multiply(power).add(Long.fromNumber(value));
            } else {
                result = result.multiply(radixToPower);
                result = result.add(Long.fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    };
    /**
     * Converts the specified value to a Long.
     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
     * @returns {!Long}
     * @expose
     */ Long.fromValue = function fromValue(val) {
        if (val /* is compatible */  instanceof Long) return val;
        if (typeof val === "number") return Long.fromNumber(val);
        if (typeof val === "string") return Long.fromString(val);
        // Throws for non-objects, converts non-instanceof Long:
        return new Long(val.low, val.high, val.unsigned);
    };
    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
    // no runtime penalty for these.
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_16_DBL = 65536;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_24_DBL = 16777216;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    /**
     * @type {number}
     * @const
     * @inner
     */ var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    /**
     * @type {!Long}
     * @const
     * @inner
     */ var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);
    /**
     * Signed zero.
     * @type {!Long}
     * @expose
     */ Long.ZERO = Long.fromInt(0);
    /**
     * Unsigned zero.
     * @type {!Long}
     * @expose
     */ Long.UZERO = Long.fromInt(0, true);
    /**
     * Signed one.
     * @type {!Long}
     * @expose
     */ Long.ONE = Long.fromInt(1);
    /**
     * Unsigned one.
     * @type {!Long}
     * @expose
     */ Long.UONE = Long.fromInt(1, true);
    /**
     * Signed negative one.
     * @type {!Long}
     * @expose
     */ Long.NEG_ONE = Long.fromInt(-1);
    /**
     * Maximum signed value.
     * @type {!Long}
     * @expose
     */ Long.MAX_VALUE = Long.fromBits(-1, 2147483647, false);
    /**
     * Maximum unsigned value.
     * @type {!Long}
     * @expose
     */ Long.MAX_UNSIGNED_VALUE = Long.fromBits(-1, -1, true);
    /**
     * Minimum signed value.
     * @type {!Long}
     * @expose
     */ Long.MIN_VALUE = Long.fromBits(0, -2147483648, false);
    /**
     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
     * @returns {number}
     * @expose
     */ Long.prototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
    };
    /**
     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
     * @returns {number}
     * @expose
     */ Long.prototype.toNumber = function toNumber() {
        if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };
    /**
     * Converts the Long to a string written in the specified radix.
     * @param {number=} radix Radix (2-36), defaults to 10
     * @returns {string}
     * @override
     * @throws {RangeError} If `radix` is out of range
     * @expose
     */ Long.prototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix) throw RangeError("radix out of range: " + radix);
        if (this.isZero()) return "0";
        var rem;
        if (this.isNegative()) {
            if (this.equals(Long.MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = Long.fromNumber(radix);
                var div = this.divide(radixLong);
                rem = div.multiply(radixLong).subtract(this);
                return div.toString(radix) + rem.toInt().toString(radix);
            } else return "-" + this.negate().toString(radix);
        }
        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);
        rem = this;
        var result = "";
        while(true){
            var remDiv = rem.divide(radixToPower), intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) return digits + result;
            else {
                while(digits.length < 6)digits = "0" + digits;
                result = "" + digits + result;
            }
        }
    };
    /**
     * Gets the high 32 bits as a signed integer.
     * @returns {number} Signed high bits
     * @expose
     */ Long.prototype.getHighBits = function getHighBits() {
        return this.high;
    };
    /**
     * Gets the high 32 bits as an unsigned integer.
     * @returns {number} Unsigned high bits
     * @expose
     */ Long.prototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
    };
    /**
     * Gets the low 32 bits as a signed integer.
     * @returns {number} Signed low bits
     * @expose
     */ Long.prototype.getLowBits = function getLowBits() {
        return this.low;
    };
    /**
     * Gets the low 32 bits as an unsigned integer.
     * @returns {number} Unsigned low bits
     * @expose
     */ Long.prototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
    };
    /**
     * Gets the number of bits needed to represent the absolute value of this Long.
     * @returns {number}
     * @expose
     */ Long.prototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative()) return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for(var bit = 31; bit > 0; bit--)if ((val & 1 << bit) != 0) break;
        return this.high != 0 ? bit + 33 : bit + 1;
    };
    /**
     * Tests if this Long's value equals zero.
     * @returns {boolean}
     * @expose
     */ Long.prototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
    };
    /**
     * Tests if this Long's value is negative.
     * @returns {boolean}
     * @expose
     */ Long.prototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
    };
    /**
     * Tests if this Long's value is positive.
     * @returns {boolean}
     * @expose
     */ Long.prototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
    };
    /**
     * Tests if this Long's value is odd.
     * @returns {boolean}
     * @expose
     */ Long.prototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
    };
    /**
     * Tests if this Long's value is even.
     * @returns {boolean}
     * @expose
     */ Long.prototype.isEven = function isEven() {
        return (this.low & 1) === 0;
    };
    /**
     * Tests if this Long's value equals the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.equals = function equals(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
        return this.high === other.high && this.low === other.low;
    };
    /**
     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.eq = Long.prototype.equals;
    /**
     * Tests if this Long's value differs from the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.notEquals = function notEquals(other) {
        return !this.equals(/* validates */ other);
    };
    /**
     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.neq = Long.prototype.notEquals;
    /**
     * Tests if this Long's value is less than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.lessThan = function lessThan(other) {
        return this.compare(/* validates */ other) < 0;
    };
    /**
     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.lt = Long.prototype.lessThan;
    /**
     * Tests if this Long's value is less than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.compare(/* validates */ other) <= 0;
    };
    /**
     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.lte = Long.prototype.lessThanOrEqual;
    /**
     * Tests if this Long's value is greater than the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.greaterThan = function greaterThan(other) {
        return this.compare(/* validates */ other) > 0;
    };
    /**
     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.gt = Long.prototype.greaterThan;
    /**
     * Tests if this Long's value is greater than or equal the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.compare(/* validates */ other) >= 0;
    };
    /**
     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
     * @function
     * @param {!Long|number|string} other Other value
     * @returns {boolean}
     * @expose
     */ Long.prototype.gte = Long.prototype.greaterThanOrEqual;
    /**
     * Compares this Long's value with the specified's.
     * @param {!Long|number|string} other Other value
     * @returns {number} 0 if they are the same, 1 if the this is greater and -1
     *  if the given one is greater
     * @expose
     */ Long.prototype.compare = function compare(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        if (this.equals(other)) return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg) return -1;
        if (!thisNeg && otherNeg) return 1;
        // At this point the sign bits are the same
        if (!this.unsigned) return this.subtract(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
    };
    /**
     * Negates this Long's value.
     * @returns {!Long} Negated Long
     * @expose
     */ Long.prototype.negate = function negate() {
        if (!this.unsigned && this.equals(Long.MIN_VALUE)) return Long.MIN_VALUE;
        return this.not().add(Long.ONE);
    };
    /**
     * Negates this Long's value. This is an alias of {@link Long#negate}.
     * @function
     * @returns {!Long} Negated Long
     * @expose
     */ Long.prototype.neg = Long.prototype.negate;
    /**
     * Returns the sum of this and the specified Long.
     * @param {!Long|number|string} addend Addend
     * @returns {!Long} Sum
     * @expose
     */ Long.prototype.add = function add(addend) {
        if (!Long.isLong(addend)) addend = Long.fromValue(addend);
        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xFFFF;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xFFFF;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 + b48;
        c48 &= 0xFFFF;
        return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /**
     * Returns the difference of this and the specified Long.
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     * @expose
     */ Long.prototype.subtract = function subtract(subtrahend) {
        if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);
        return this.add(subtrahend.negate());
    };
    /**
     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
     * @function
     * @param {!Long|number|string} subtrahend Subtrahend
     * @returns {!Long} Difference
     * @expose
     */ Long.prototype.sub = Long.prototype.subtract;
    /**
     * Returns the product of this and the specified Long.
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     * @expose
     */ Long.prototype.multiply = function multiply(multiplier) {
        if (this.isZero()) return Long.ZERO;
        if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);
        if (multiplier.isZero()) return Long.ZERO;
        if (this.equals(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        if (multiplier.equals(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        if (this.isNegative()) {
            if (multiplier.isNegative()) return this.negate().multiply(multiplier.negate());
            else return this.negate().multiply(multiplier).negate();
        } else if (multiplier.isNegative()) return this.multiply(multiplier.negate()).negate();
        // If both longs are small, use float multiplication
        if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xFFFF;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xFFFF;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xFFFF;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xFFFF;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xFFFF;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xFFFF;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xFFFF;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xFFFF;
        return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
    };
    /**
     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
     * @function
     * @param {!Long|number|string} multiplier Multiplier
     * @returns {!Long} Product
     * @expose
     */ Long.prototype.mul = Long.prototype.multiply;
    /**
     * Returns this Long divided by the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     * @expose
     */ Long.prototype.divide = function divide(divisor) {
        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);
        if (divisor.isZero()) throw new Error("division by zero");
        if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;
        var approx, rem, res;
        if (this.equals(Long.MIN_VALUE)) {
            if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE)) return Long.MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.equals(Long.MIN_VALUE)) return Long.ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shiftRight(1);
                approx = halfThis.divide(divisor).shiftLeft(1);
                if (approx.equals(Long.ZERO)) return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;
                else {
                    rem = this.subtract(divisor.multiply(approx));
                    res = approx.add(rem.divide(divisor));
                    return res;
                }
            }
        } else if (divisor.equals(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative()) return this.negate().divide(divisor.negate());
            return this.negate().divide(divisor).negate();
        } else if (divisor.isNegative()) return this.divide(divisor.negate()).negate();
        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        res = Long.ZERO;
        rem = this;
        while(rem.greaterThanOrEqual(divisor)){
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48), // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
            approxRes = Long.fromNumber(approx), approxRem = approxRes.multiply(divisor);
            while(approxRem.isNegative() || approxRem.greaterThan(rem)){
                approx -= delta;
                approxRes = Long.fromNumber(approx, this.unsigned);
                approxRem = approxRes.multiply(divisor);
            }
            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero()) approxRes = Long.ONE;
            res = res.add(approxRes);
            rem = rem.subtract(approxRem);
        }
        return res;
    };
    /**
     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Quotient
     * @expose
     */ Long.prototype.div = Long.prototype.divide;
    /**
     * Returns this Long modulo the specified.
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     * @expose
     */ Long.prototype.modulo = function modulo(divisor) {
        if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);
        return this.subtract(this.divide(divisor).multiply(divisor));
    };
    /**
     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
     * @function
     * @param {!Long|number|string} divisor Divisor
     * @returns {!Long} Remainder
     * @expose
     */ Long.prototype.mod = Long.prototype.modulo;
    /**
     * Returns the bitwise NOT of this Long.
     * @returns {!Long}
     * @expose
     */ Long.prototype.not = function not() {
        return Long.fromBits(~this.low, ~this.high, this.unsigned);
    };
    /**
     * Returns the bitwise AND of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     * @expose
     */ Long.prototype.and = function and(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    /**
     * Returns the bitwise OR of this Long and the specified.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     * @expose
     */ Long.prototype.or = function or(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    /**
     * Returns the bitwise XOR of this Long and the given one.
     * @param {!Long|number|string} other Other Long
     * @returns {!Long}
     * @expose
     */ Long.prototype.xor = function xor(other) {
        if (!Long.isLong(other)) other = Long.fromValue(other);
        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */ Long.prototype.shiftLeft = function shiftLeft(numBits) {
        if (Long.isLong(numBits)) numBits = numBits.toInt();
        if ((numBits &= 63) === 0) return this;
        else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */ Long.prototype.shl = Long.prototype.shiftLeft;
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */ Long.prototype.shiftRight = function shiftRight(numBits) {
        if (Long.isLong(numBits)) numBits = numBits.toInt();
        if ((numBits &= 63) === 0) return this;
        else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    };
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */ Long.prototype.shr = Long.prototype.shiftRight;
    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */ Long.prototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (Long.isLong(numBits)) numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0) return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
            } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);
            else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);
        }
    };
    /**
     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
     * @function
     * @param {number|!Long} numBits Number of bits
     * @returns {!Long} Shifted Long
     * @expose
     */ Long.prototype.shru = Long.prototype.shiftRightUnsigned;
    /**
     * Converts this Long to signed.
     * @returns {!Long} Signed long
     * @expose
     */ Long.prototype.toSigned = function toSigned() {
        if (!this.unsigned) return this;
        return new Long(this.low, this.high, false);
    };
    /**
     * Converts this Long to unsigned.
     * @returns {!Long} Unsigned long
     * @expose
     */ Long.prototype.toUnsigned = function toUnsigned() {
        if (this.unsigned) return this;
        return new Long(this.low, this.high, true);
    };
    return Long;
});

},{}],"lGVKD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnsignedInt = undefined;
var _isNumber = require("d4ecef5ca7121a69");
var _isNumber2 = _interopRequireDefault(_isNumber);
var _ioMixin = require("dad4ad7dae7a7727");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var UnsignedInt = exports.UnsignedInt = {
    read: function read(io) {
        return io.readUInt32BE();
    },
    write: function write(value, io) {
        if (!(0, _isNumber2.default)(value)) throw new Error("XDR Write Error: not a number");
        if (Math.floor(value) !== value) throw new Error("XDR Write Error: not an integer");
        if (value < 0) throw new Error("XDR Write Error: negative number " + value);
        io.writeUInt32BE(value);
    },
    isValid: function isValid(value) {
        if (!(0, _isNumber2.default)(value)) return false;
        if (Math.floor(value) !== value) return false;
        return value >= UnsignedInt.MIN_VALUE && value <= UnsignedInt.MAX_VALUE;
    }
};
UnsignedInt.MAX_VALUE = Math.pow(2, 32) - 1;
UnsignedInt.MIN_VALUE = 0;
(0, _ioMixin2.default)(UnsignedInt);

},{"d4ecef5ca7121a69":"crELm","dad4ad7dae7a7727":"l9AiM"}],"37AAb":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UnsignedHyper = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);
    if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) return undefined;
        else return get(parent, property, receiver);
    } else if ("value" in desc) return desc.value;
    else {
        var getter = desc.get;
        if (getter === undefined) return undefined;
        return getter.call(receiver);
    }
};
var _long = require("c5bddcb349917e35");
var _long2 = _interopRequireDefault(_long);
var _ioMixin = require("c3102c28c689a945");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
var UnsignedHyper = exports.UnsignedHyper = function(_Long) {
    _inherits(UnsignedHyper, _Long);
    _createClass(UnsignedHyper, null, [
        {
            key: "read",
            value: function read(io) {
                var high = io.readInt32BE();
                var low = io.readInt32BE();
                return this.fromBits(low, high);
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (!(value instanceof this)) throw new Error("XDR Write Error: " + value + " is not an UnsignedHyper");
                io.writeInt32BE(value.high);
                io.writeInt32BE(value.low);
            }
        },
        {
            key: "fromString",
            value: function fromString(string) {
                if (!/^\d+$/.test(string)) throw new Error("Invalid hyper string: " + string);
                var result = _get(UnsignedHyper.__proto__ || Object.getPrototypeOf(UnsignedHyper), "fromString", this).call(this, string, true);
                return new this(result.low, result.high);
            }
        },
        {
            key: "fromBits",
            value: function fromBits(low, high) {
                var result = _get(UnsignedHyper.__proto__ || Object.getPrototypeOf(UnsignedHyper), "fromBits", this).call(this, low, high, true);
                return new this(result.low, result.high);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                return value instanceof this;
            }
        }
    ]);
    function UnsignedHyper(low, high) {
        _classCallCheck(this, UnsignedHyper);
        return _possibleConstructorReturn(this, (UnsignedHyper.__proto__ || Object.getPrototypeOf(UnsignedHyper)).call(this, low, high, true));
    }
    return UnsignedHyper;
}(_long2.default);
(0, _ioMixin2.default)(UnsignedHyper);
UnsignedHyper.MAX_VALUE = new UnsignedHyper(_long2.default.MAX_UNSIGNED_VALUE.low, _long2.default.MAX_UNSIGNED_VALUE.high);
UnsignedHyper.MIN_VALUE = new UnsignedHyper(_long2.default.MIN_VALUE.low, _long2.default.MIN_VALUE.high);

},{"c5bddcb349917e35":"l3RhI","c3102c28c689a945":"l9AiM"}],"9Y9Ne":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Float = undefined;
var _isNumber = require("8d5e851d58c0a63f");
var _isNumber2 = _interopRequireDefault(_isNumber);
var _ioMixin = require("87288a13d76163e0");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Float = exports.Float = {
    read: function read(io) {
        return io.readFloatBE();
    },
    write: function write(value, io) {
        if (!(0, _isNumber2.default)(value)) throw new Error("XDR Write Error: not a number");
        io.writeFloatBE(value);
    },
    isValid: function isValid(value) {
        return (0, _isNumber2.default)(value);
    }
};
(0, _ioMixin2.default)(Float);

},{"8d5e851d58c0a63f":"crELm","87288a13d76163e0":"l9AiM"}],"ciWqF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Double = undefined;
var _isNumber = require("c9bcfbffa3828228");
var _isNumber2 = _interopRequireDefault(_isNumber);
var _ioMixin = require("cd7d2259e51e8aae");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Double = exports.Double = {
    read: function read(io) {
        return io.readDoubleBE();
    },
    write: function write(value, io) {
        if (!(0, _isNumber2.default)(value)) throw new Error("XDR Write Error: not a number");
        io.writeDoubleBE(value);
    },
    isValid: function isValid(value) {
        return (0, _isNumber2.default)(value);
    }
};
(0, _ioMixin2.default)(Double);

},{"c9bcfbffa3828228":"crELm","cd7d2259e51e8aae":"l9AiM"}],"eIKWv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Quadruple = undefined;
var _ioMixin = require("d80254416ce6ac40");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Quadruple = exports.Quadruple = {
    /* jshint unused: false */ read: function read() {
        throw new Error("XDR Read Error: quadruple not supported");
    },
    write: function write() {
        throw new Error("XDR Write Error: quadruple not supported");
    },
    isValid: function isValid() {
        return false;
    }
};
(0, _ioMixin2.default)(Quadruple);

},{"d80254416ce6ac40":"l9AiM"}],"gjEnX":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Bool = undefined;
var _isBoolean = require("6632b16356870fc9");
var _isBoolean2 = _interopRequireDefault(_isBoolean);
var _int = require("c417901e56e72f10");
var _ioMixin = require("aa74172e8894cf02");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Bool = exports.Bool = {
    read: function read(io) {
        var value = _int.Int.read(io);
        switch(value){
            case 0:
                return false;
            case 1:
                return true;
            default:
                throw new Error("XDR Read Error: Got " + value + " when trying to read a bool");
        }
    },
    write: function write(value, io) {
        var intVal = value ? 1 : 0;
        return _int.Int.write(intVal, io);
    },
    isValid: function isValid(value) {
        return (0, _isBoolean2.default)(value);
    }
};
(0, _ioMixin2.default)(Bool);

},{"6632b16356870fc9":"3vg3p","c417901e56e72f10":"3CLLQ","aa74172e8894cf02":"l9AiM"}],"3vg3p":[function(require,module,exports) {
var baseGetTag = require("edbbe8c2b178cb8e"), isObjectLike = require("168b7851d8a0ffce");
/** `Object#toString` result references. */ var boolTag = "[object Boolean]";
/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */ function isBoolean(value) {
    return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
}
module.exports = isBoolean;

},{"edbbe8c2b178cb8e":"lOnbo","168b7851d8a0ffce":"3BLi4"}],"4nhCF":[function(require,module,exports) {
var Buffer = require("b77ed7252f37f7e2").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.String = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _isString = require("cd2ace82a48aa73c");
var _isString2 = _interopRequireDefault(_isString);
var _isArray = require("3e21993207856bbe");
var _isArray2 = _interopRequireDefault(_isArray);
var _int = require("bba24c121bd6a13f");
var _unsignedInt = require("2e28887daa0671b6");
var _util = require("a63c3019f7607f7e");
var _ioMixin = require("543c26f4d2064bc2");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var String = exports.String = function() {
    function String() {
        var maxLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _unsignedInt.UnsignedInt.MAX_VALUE;
        _classCallCheck(this, String);
        this._maxLength = maxLength;
    }
    _createClass(String, [
        {
            key: "read",
            value: function read(io) {
                var length = _int.Int.read(io);
                if (length > this._maxLength) throw new Error("XDR Read Error: Saw " + length + " length String," + ("max allowed is " + this._maxLength));
                var padding = (0, _util.calculatePadding)(length);
                var result = io.slice(length);
                (0, _util.slicePadding)(io, padding);
                return result.buffer();
            }
        },
        {
            key: "readString",
            value: function readString(io) {
                return this.read(io).toString("utf8");
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (value.length > this._maxLength) throw new Error("XDR Write Error: Got " + value.length + " bytes," + ("max allows is " + this._maxLength));
                var buffer = void 0;
                if ((0, _isString2.default)(value)) buffer = Buffer.from(value, "utf8");
                else buffer = Buffer.from(value);
                _int.Int.write(buffer.length, io);
                io.writeBufferPadded(buffer);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                var buffer = void 0;
                if ((0, _isString2.default)(value)) buffer = Buffer.from(value, "utf8");
                else if ((0, _isArray2.default)(value) || Buffer.isBuffer(value)) buffer = Buffer.from(value);
                else return false;
                return buffer.length <= this._maxLength;
            }
        }
    ]);
    return String;
}();
(0, _ioMixin2.default)(String.prototype);

},{"b77ed7252f37f7e2":"fCgem","cd2ace82a48aa73c":"iAF7t","3e21993207856bbe":"dZaTH","bba24c121bd6a13f":"3CLLQ","2e28887daa0671b6":"lGVKD","a63c3019f7607f7e":"6fvg5","543c26f4d2064bc2":"l9AiM"}],"iAF7t":[function(require,module,exports) {
var baseGetTag = require("ea24ec912ebdc21d"), isArray = require("42643b2626eca9c2"), isObjectLike = require("7c62b3a6cf6f4880");
/** `Object#toString` result references. */ var stringTag = "[object String]";
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */ function isString(value) {
    return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
}
module.exports = isString;

},{"ea24ec912ebdc21d":"lOnbo","42643b2626eca9c2":"dZaTH","7c62b3a6cf6f4880":"3BLi4"}],"jXmup":[function(require,module,exports) {
var Buffer = require("58e9d264597896a1").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Opaque = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _util = require("8518de43d9be9ffb");
var _ioMixin = require("8d1d353d152c7579");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Opaque = exports.Opaque = function() {
    function Opaque(length) {
        _classCallCheck(this, Opaque);
        this._length = length;
        this._padding = (0, _util.calculatePadding)(length);
    }
    _createClass(Opaque, [
        {
            key: "read",
            value: function read(io) {
                var result = io.slice(this._length);
                (0, _util.slicePadding)(io, this._padding);
                return result.buffer();
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (value.length !== this._length) throw new Error("XDR Write Error: Got " + value.length + " bytes, expected " + this._length);
                io.writeBufferPadded(value);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                return Buffer.isBuffer(value) && value.length === this._length;
            }
        }
    ]);
    return Opaque;
}();
(0, _ioMixin2.default)(Opaque.prototype);

},{"58e9d264597896a1":"fCgem","8518de43d9be9ffb":"6fvg5","8d1d353d152c7579":"l9AiM"}],"50slM":[function(require,module,exports) {
var Buffer = require("2e7cdc81d7b63d8b").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VarOpaque = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _int = require("f7b92b4cea4a3389");
var _unsignedInt = require("c88939078f3a6fa");
var _util = require("bfb54f861befe52e");
var _ioMixin = require("970e11b48fe06095");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var VarOpaque = exports.VarOpaque = function() {
    function VarOpaque() {
        var maxLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _unsignedInt.UnsignedInt.MAX_VALUE;
        _classCallCheck(this, VarOpaque);
        this._maxLength = maxLength;
    }
    _createClass(VarOpaque, [
        {
            key: "read",
            value: function read(io) {
                var length = _int.Int.read(io);
                if (length > this._maxLength) throw new Error("XDR Read Error: Saw " + length + " length VarOpaque," + ("max allowed is " + this._maxLength));
                var padding = (0, _util.calculatePadding)(length);
                var result = io.slice(length);
                (0, _util.slicePadding)(io, padding);
                return result.buffer();
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (value.length > this._maxLength) throw new Error("XDR Write Error: Got " + value.length + " bytes," + ("max allows is " + this._maxLength));
                _int.Int.write(value.length, io);
                io.writeBufferPadded(value);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                return Buffer.isBuffer(value) && value.length <= this._maxLength;
            }
        }
    ]);
    return VarOpaque;
}();
(0, _ioMixin2.default)(VarOpaque.prototype);

},{"2e7cdc81d7b63d8b":"fCgem","f7b92b4cea4a3389":"3CLLQ","c88939078f3a6fa":"lGVKD","bfb54f861befe52e":"6fvg5","970e11b48fe06095":"l9AiM"}],"c1hAD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Array = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _every = require("b669922bcf098fa9");
var _every2 = _interopRequireDefault(_every);
var _each = require("11bf40d10296b2fa");
var _each2 = _interopRequireDefault(_each);
var _times = require("10922c041290fc45");
var _times2 = _interopRequireDefault(_times);
var _isArray = require("98dd7dd04e5b1ec6");
var _isArray2 = _interopRequireDefault(_isArray);
var _ioMixin = require("1b312c26a199e768");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Array = exports.Array = function() {
    function Array(childType, length) {
        _classCallCheck(this, Array);
        this._childType = childType;
        this._length = length;
    }
    _createClass(Array, [
        {
            key: "read",
            value: function read(io) {
                var _this = this;
                return (0, _times2.default)(this._length, function() {
                    return _this._childType.read(io);
                });
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                var _this2 = this;
                if (!(0, _isArray2.default)(value)) throw new Error("XDR Write Error: value is not array");
                if (value.length !== this._length) throw new Error("XDR Write Error: Got array of size " + value.length + "," + ("expected " + this._length));
                (0, _each2.default)(value, function(child) {
                    return _this2._childType.write(child, io);
                });
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                var _this3 = this;
                if (!(0, _isArray2.default)(value)) return false;
                if (value.length !== this._length) return false;
                return (0, _every2.default)(value, function(child) {
                    return _this3._childType.isValid(child);
                });
            }
        }
    ]);
    return Array;
}();
(0, _ioMixin2.default)(Array.prototype);

},{"b669922bcf098fa9":"cCqOu","11bf40d10296b2fa":"lSBun","10922c041290fc45":"k3C7L","98dd7dd04e5b1ec6":"dZaTH","1b312c26a199e768":"l9AiM"}],"lSBun":[function(require,module,exports) {
module.exports = require("6043e9bc631b2c8d");

},{"6043e9bc631b2c8d":"WMtKm"}],"WMtKm":[function(require,module,exports) {
var arrayEach = require("63646892319a21f5"), baseEach = require("65d38e4f6bf5666b"), castFunction = require("714118923e58ccd2"), isArray = require("d3150e5537fd48fa");
/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */ function forEach(collection, iteratee) {
    var func = isArray(collection) ? arrayEach : baseEach;
    return func(collection, castFunction(iteratee));
}
module.exports = forEach;

},{"63646892319a21f5":"kMhnH","65d38e4f6bf5666b":"1glfs","714118923e58ccd2":"9qOGA","d3150e5537fd48fa":"dZaTH"}],"kMhnH":[function(require,module,exports) {
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (iteratee(array[index], index, array) === false) break;
    }
    return array;
}
module.exports = arrayEach;

},{}],"k3C7L":[function(require,module,exports) {
var baseTimes = require("e9351bee5a621d3"), castFunction = require("382445a5b3d47096"), toInteger = require("6f23c5d9fcf45ffc");
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMin = Math.min;
/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */ function times(n, iteratee) {
    n = toInteger(n);
    if (n < 1 || n > MAX_SAFE_INTEGER) return [];
    var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
    iteratee = castFunction(iteratee);
    n -= MAX_ARRAY_LENGTH;
    var result = baseTimes(length, iteratee);
    while(++index < n)iteratee(index);
    return result;
}
module.exports = times;

},{"e9351bee5a621d3":"odqYd","382445a5b3d47096":"9qOGA","6f23c5d9fcf45ffc":"ds6ZT"}],"ds6ZT":[function(require,module,exports) {
var toFinite = require("11955deeb2957dae");
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */ function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
}
module.exports = toInteger;

},{"11955deeb2957dae":"dkCNj"}],"dkCNj":[function(require,module,exports) {
var toNumber = require("afb273f979d7f2c3");
/** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_INTEGER = 1.7976931348623157e+308;
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */ function toFinite(value) {
    if (!value) return value === 0 ? value : 0;
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
}
module.exports = toFinite;

},{"afb273f979d7f2c3":"12NaH"}],"12NaH":[function(require,module,exports) {
var baseTrim = require("7fdb96beb16feb56"), isObject = require("f5c2a7a645cc1eda"), isSymbol = require("787776a4bdfbd135");
/** Used as references for various `Number` constants. */ var NAN = 0 / 0;
/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */ function toNumber(value) {
    if (typeof value == "number") return value;
    if (isSymbol(value)) return NAN;
    if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
    }
    if (typeof value != "string") return value === 0 ? value : +value;
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = toNumber;

},{"7fdb96beb16feb56":"eUJZ3","f5c2a7a645cc1eda":"cGhqJ","787776a4bdfbd135":"i3BHC"}],"eUJZ3":[function(require,module,exports) {
var trimmedEndIndex = require("a33f640b1b95e7b6");
/** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */ function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
}
module.exports = baseTrim;

},{"a33f640b1b95e7b6":"hHJmS"}],"hHJmS":[function(require,module,exports) {
/** Used to match a single whitespace character. */ var reWhitespace = /\s/;
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */ function trimmedEndIndex(string) {
    var index = string.length;
    while(index-- && reWhitespace.test(string.charAt(index)));
    return index;
}
module.exports = trimmedEndIndex;

},{}],"hY9DR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.VarArray = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _every = require("1607d2c0f5ad1fe5");
var _every2 = _interopRequireDefault(_every);
var _each = require("666112e61de9531c");
var _each2 = _interopRequireDefault(_each);
var _times = require("5aecbe6edea54eb3");
var _times2 = _interopRequireDefault(_times);
var _isArray = require("460dfd14a4999a79");
var _isArray2 = _interopRequireDefault(_isArray);
var _unsignedInt = require("ab51677cfcd62c2b");
var _int = require("736fef0719bcc6bb");
var _ioMixin = require("b9d5e67756060958");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var VarArray = exports.VarArray = function() {
    function VarArray(childType) {
        var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _unsignedInt.UnsignedInt.MAX_VALUE;
        _classCallCheck(this, VarArray);
        this._childType = childType;
        this._maxLength = maxLength;
    }
    _createClass(VarArray, [
        {
            key: "read",
            value: function read(io) {
                var _this = this;
                var length = _int.Int.read(io);
                if (length > this._maxLength) throw new Error("XDR Read Error: Saw " + length + " length VarArray," + ("max allowed is " + this._maxLength));
                return (0, _times2.default)(length, function() {
                    return _this._childType.read(io);
                });
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                var _this2 = this;
                if (!(0, _isArray2.default)(value)) throw new Error("XDR Write Error: value is not array");
                if (value.length > this._maxLength) throw new Error("XDR Write Error: Got array of size " + value.length + "," + ("max allowed is " + this._maxLength));
                _int.Int.write(value.length, io);
                (0, _each2.default)(value, function(child) {
                    return _this2._childType.write(child, io);
                });
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                var _this3 = this;
                if (!(0, _isArray2.default)(value)) return false;
                if (value.length > this._maxLength) return false;
                return (0, _every2.default)(value, function(child) {
                    return _this3._childType.isValid(child);
                });
            }
        }
    ]);
    return VarArray;
}();
(0, _ioMixin2.default)(VarArray.prototype);

},{"1607d2c0f5ad1fe5":"cCqOu","666112e61de9531c":"lSBun","5aecbe6edea54eb3":"k3C7L","460dfd14a4999a79":"dZaTH","ab51677cfcd62c2b":"lGVKD","736fef0719bcc6bb":"3CLLQ","b9d5e67756060958":"l9AiM"}],"fJYhO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Option = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _isNull = require("f3d7938f2dee65f2");
var _isNull2 = _interopRequireDefault(_isNull);
var _isUndefined = require("e304db7ef8724c18");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _bool = require("a2a9c0227cd6d5a4");
var _ioMixin = require("c10daac55ebda929");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Option = exports.Option = function() {
    function Option(childType) {
        _classCallCheck(this, Option);
        this._childType = childType;
    }
    _createClass(Option, [
        {
            key: "read",
            value: function read(io) {
                if (_bool.Bool.read(io)) return this._childType.read(io);
                return undefined;
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                var isPresent = !((0, _isNull2.default)(value) || (0, _isUndefined2.default)(value));
                _bool.Bool.write(isPresent, io);
                if (isPresent) this._childType.write(value, io);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                if ((0, _isNull2.default)(value)) return true;
                if ((0, _isUndefined2.default)(value)) return true;
                return this._childType.isValid(value);
            }
        }
    ]);
    return Option;
}();
(0, _ioMixin2.default)(Option.prototype);

},{"f3d7938f2dee65f2":"fJpci","e304db7ef8724c18":"aaheT","a2a9c0227cd6d5a4":"gjEnX","c10daac55ebda929":"l9AiM"}],"fJpci":[function(require,module,exports) {
/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */ function isNull(value) {
    return value === null;
}
module.exports = isNull;

},{}],"aaheT":[function(require,module,exports) {
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */ function isUndefined(value) {
    return value === undefined;
}
module.exports = isUndefined;

},{}],"807py":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Void = undefined;
var _isUndefined = require("91906618be9590d6");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _ioMixin = require("57c23106c3188480");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Void = exports.Void = {
    /* jshint unused: false */ read: function read() {
        return undefined;
    },
    write: function write(value) {
        if (!(0, _isUndefined2.default)(value)) throw new Error("XDR Write Error: trying to write value to a void slot");
    },
    isValid: function isValid(value) {
        return (0, _isUndefined2.default)(value);
    }
};
(0, _ioMixin2.default)(Void);

},{"91906618be9590d6":"aaheT","57c23106c3188480":"l9AiM"}],"cedwL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Enum = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _each = require("3c9176c43e702090");
var _each2 = _interopRequireDefault(_each);
var _values = require("8275249a4f97277e");
var _values2 = _interopRequireDefault(_values);
var _int = require("c6df9a0892f40d59");
var _ioMixin = require("66b6493931bbb3ce");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Enum = exports.Enum = function() {
    function Enum(name, value) {
        _classCallCheck(this, Enum);
        this.name = name;
        this.value = value;
    }
    _createClass(Enum, null, [
        {
            key: "read",
            value: function read(io) {
                var intVal = _int.Int.read(io);
                if (!this._byValue.has(intVal)) throw new Error("XDR Read Error: Unknown " + this.enumName + " member for value " + intVal);
                return this._byValue.get(intVal);
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (!(value instanceof this)) throw new Error("XDR Write Error: Unknown " + value + " is not a " + this.enumName);
                _int.Int.write(value.value, io);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                return value instanceof this;
            }
        },
        {
            key: "members",
            value: function members() {
                return this._members;
            }
        },
        {
            key: "values",
            value: function values() {
                return (0, _values2.default)(this._members);
            }
        },
        {
            key: "fromName",
            value: function fromName(name) {
                var result = this._members[name];
                if (!result) throw new Error(name + " is not a member of " + this.enumName);
                return result;
            }
        },
        {
            key: "fromValue",
            value: function fromValue(value) {
                var result = this._byValue.get(value);
                if (!result) throw new Error(value + " is not a value of any member of " + this.enumName);
                return result;
            }
        },
        {
            key: "create",
            value: function create(context, name, members) {
                var ChildEnum = function(_Enum) {
                    _inherits(ChildEnum, _Enum);
                    function ChildEnum() {
                        _classCallCheck(this, ChildEnum);
                        return _possibleConstructorReturn(this, (ChildEnum.__proto__ || Object.getPrototypeOf(ChildEnum)).apply(this, arguments));
                    }
                    return ChildEnum;
                }(Enum);
                ChildEnum.enumName = name;
                context.results[name] = ChildEnum;
                ChildEnum._members = {};
                ChildEnum._byValue = new Map();
                (0, _each2.default)(members, function(value, key) {
                    var inst = new ChildEnum(key, value);
                    ChildEnum._members[key] = inst;
                    ChildEnum._byValue.set(value, inst);
                    ChildEnum[key] = function() {
                        return inst;
                    };
                });
                return ChildEnum;
            }
        }
    ]);
    return Enum;
}();
(0, _ioMixin2.default)(Enum);

},{"3c9176c43e702090":"lSBun","8275249a4f97277e":"cKAPx","c6df9a0892f40d59":"3CLLQ","66b6493931bbb3ce":"l9AiM"}],"cKAPx":[function(require,module,exports) {
var baseValues = require("7b3a4e962650d910"), keys = require("ef844527f208222");
/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */ function values(object) {
    return object == null ? [] : baseValues(object, keys(object));
}
module.exports = values;

},{"7b3a4e962650d910":"1CRl4","ef844527f208222":"6fHVw"}],"1CRl4":[function(require,module,exports) {
var arrayMap = require("c7e3507c6bd43e22");
/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */ function baseValues(object, props) {
    return arrayMap(props, function(key) {
        return object[key];
    });
}
module.exports = baseValues;

},{"c7e3507c6bd43e22":"imI5Z"}],"j0fWg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Struct = undefined;
var _slicedToArray = function() {
    function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally{
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    return function(arr, i) {
        if (Array.isArray(arr)) return arr;
        else if (Symbol.iterator in Object(arr)) return sliceIterator(arr, i);
        else throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
}();
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _each = require("d1ff26fefb262e6d");
var _each2 = _interopRequireDefault(_each);
var _map = require("f45a8f20306638b6");
var _map2 = _interopRequireDefault(_map);
var _isUndefined = require("49f54391e28bdd5");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _fromPairs = require("5f3519110d0c0718");
var _fromPairs2 = _interopRequireDefault(_fromPairs);
var _reference = require("e05dda40a4320cc2");
var _ioMixin = require("562a387d8d7d40a8");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Struct = exports.Struct = function() {
    function Struct(attributes) {
        _classCallCheck(this, Struct);
        this._attributes = attributes || {};
    }
    _createClass(Struct, null, [
        {
            key: "read",
            value: function read(io) {
                var fields = (0, _map2.default)(this._fields, function(field) {
                    var _field = _slicedToArray(field, 2), name = _field[0], type = _field[1];
                    var value = type.read(io);
                    return [
                        name,
                        value
                    ];
                });
                return new this((0, _fromPairs2.default)(fields));
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (!(value instanceof this)) throw new Error("XDR Write Error: " + value + " is not a " + this.structName);
                (0, _each2.default)(this._fields, function(field) {
                    var _field2 = _slicedToArray(field, 2), name = _field2[0], type = _field2[1];
                    var attribute = value._attributes[name];
                    type.write(attribute, io);
                });
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                return value instanceof this;
            }
        },
        {
            key: "create",
            value: function create(context, name, fields) {
                var ChildStruct = function(_Struct) {
                    _inherits(ChildStruct, _Struct);
                    function ChildStruct() {
                        _classCallCheck(this, ChildStruct);
                        return _possibleConstructorReturn(this, (ChildStruct.__proto__ || Object.getPrototypeOf(ChildStruct)).apply(this, arguments));
                    }
                    return ChildStruct;
                }(Struct);
                ChildStruct.structName = name;
                context.results[name] = ChildStruct;
                ChildStruct._fields = fields.map(function(_ref) {
                    var _ref2 = _slicedToArray(_ref, 2), fieldName = _ref2[0], field = _ref2[1];
                    if (field instanceof _reference.Reference) field = field.resolve(context);
                    return [
                        fieldName,
                        field
                    ];
                });
                (0, _each2.default)(ChildStruct._fields, function(field) {
                    var _field3 = _slicedToArray(field, 1), fieldName = _field3[0];
                    ChildStruct.prototype[fieldName] = getReadOrWriteAttribute(fieldName);
                });
                return ChildStruct;
            }
        }
    ]);
    return Struct;
}();
(0, _ioMixin2.default)(Struct);
function getReadOrWriteAttribute(name) {
    return function readOrWriteAttribute(value) {
        if (!(0, _isUndefined2.default)(value)) this._attributes[name] = value;
        return this._attributes[name];
    };
}

},{"d1ff26fefb262e6d":"lSBun","f45a8f20306638b6":"94CDd","49f54391e28bdd5":"aaheT","5f3519110d0c0718":"31Z2R","e05dda40a4320cc2":"k9Ysj","562a387d8d7d40a8":"l9AiM"}],"94CDd":[function(require,module,exports) {
var arrayMap = require("758d1948422f3dfe"), baseIteratee = require("66a3efee09c350c3"), baseMap = require("7722812d81c8f726"), isArray = require("b539084892a6b947");
/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */ function map(collection, iteratee) {
    var func = isArray(collection) ? arrayMap : baseMap;
    return func(collection, baseIteratee(iteratee, 3));
}
module.exports = map;

},{"758d1948422f3dfe":"imI5Z","66a3efee09c350c3":"2fsgg","7722812d81c8f726":"cLeHB","b539084892a6b947":"dZaTH"}],"cLeHB":[function(require,module,exports) {
var baseEach = require("aa873356b92f1bf5"), isArrayLike = require("357d57d2a919d9c6");
/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function baseMap(collection, iteratee) {
    var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
    baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
    });
    return result;
}
module.exports = baseMap;

},{"aa873356b92f1bf5":"1glfs","357d57d2a919d9c6":"gMCbp"}],"31Z2R":[function(require,module,exports) {
/**
 * The inverse of `_.toPairs`; this method returns an object composed
 * from key-value `pairs`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} pairs The key-value pairs.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.fromPairs([['a', 1], ['b', 2]]);
 * // => { 'a': 1, 'b': 2 }
 */ function fromPairs(pairs) {
    var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
    while(++index < length){
        var pair = pairs[index];
        result[pair[0]] = pair[1];
    }
    return result;
}
module.exports = fromPairs;

},{}],"k9Ysj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Reference = exports.Reference = function() {
    function Reference() {
        _classCallCheck(this, Reference);
    }
    _createClass(Reference, [
        {
            key: "resolve",
            /* jshint unused: false */ value: function resolve() {
                throw new Error("implement resolve in child class");
            }
        }
    ]);
    return Reference;
}();

},{}],"8qqYh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Union = undefined;
var _slicedToArray = function() {
    function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally{
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    return function(arr, i) {
        if (Array.isArray(arr)) return arr;
        else if (Symbol.iterator in Object(arr)) return sliceIterator(arr, i);
        else throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
}();
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _each = require("797301aa65dab223");
var _each2 = _interopRequireDefault(_each);
var _isUndefined = require("8c5f661b8d169198");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _isString = require("25345931b8817942");
var _isString2 = _interopRequireDefault(_isString);
var _void = require("c689afe2b2cb0ed0");
var _reference = require("8eda26dcebb8a54e");
var _ioMixin = require("3d072755e447d133");
var _ioMixin2 = _interopRequireDefault(_ioMixin);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var Union = exports.Union = function() {
    function Union(aSwitch, value) {
        _classCallCheck(this, Union);
        this.set(aSwitch, value);
    }
    _createClass(Union, [
        {
            key: "set",
            value: function set(aSwitch, value) {
                if ((0, _isString2.default)(aSwitch)) aSwitch = this.constructor._switchOn.fromName(aSwitch);
                this._switch = aSwitch;
                this._arm = this.constructor.armForSwitch(this._switch);
                this._armType = this.constructor.armTypeForArm(this._arm);
                this._value = value;
            }
        },
        {
            key: "get",
            value: function get() {
                var armName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._arm;
                if (this._arm !== _void.Void && this._arm !== armName) throw new Error(armName + " not set");
                return this._value;
            }
        },
        {
            key: "switch",
            value: function _switch() {
                return this._switch;
            }
        },
        {
            key: "arm",
            value: function arm() {
                return this._arm;
            }
        },
        {
            key: "armType",
            value: function armType() {
                return this._armType;
            }
        },
        {
            key: "value",
            value: function value() {
                return this._value;
            }
        }
    ], [
        {
            key: "armForSwitch",
            value: function armForSwitch(aSwitch) {
                if (this._switches.has(aSwitch)) return this._switches.get(aSwitch);
                if (this._defaultArm) return this._defaultArm;
                throw new Error("Bad union switch: " + aSwitch);
            }
        },
        {
            key: "armTypeForArm",
            value: function armTypeForArm(arm) {
                if (arm === _void.Void) return _void.Void;
                return this._arms[arm];
            }
        },
        {
            key: "read",
            value: function read(io) {
                var aSwitch = this._switchOn.read(io);
                var arm = this.armForSwitch(aSwitch);
                var armType = this.armTypeForArm(arm);
                var value = void 0;
                if (!(0, _isUndefined2.default)(armType)) value = armType.read(io);
                else value = arm.read(io);
                return new this(aSwitch, value);
            }
        },
        {
            key: "write",
            value: function write(value, io) {
                if (!(value instanceof this)) throw new Error("XDR Write Error: " + value + " is not a " + this.unionName);
                this._switchOn.write(value.switch(), io);
                value.armType().write(value.value(), io);
            }
        },
        {
            key: "isValid",
            value: function isValid(value) {
                return value instanceof this;
            }
        },
        {
            key: "create",
            value: function create(context, name, config) {
                var ChildUnion = function(_Union) {
                    _inherits(ChildUnion, _Union);
                    function ChildUnion() {
                        _classCallCheck(this, ChildUnion);
                        return _possibleConstructorReturn(this, (ChildUnion.__proto__ || Object.getPrototypeOf(ChildUnion)).apply(this, arguments));
                    }
                    return ChildUnion;
                }(Union);
                ChildUnion.unionName = name;
                context.results[name] = ChildUnion;
                if (config.switchOn instanceof _reference.Reference) ChildUnion._switchOn = config.switchOn.resolve(context);
                else ChildUnion._switchOn = config.switchOn;
                ChildUnion._switches = new Map();
                ChildUnion._arms = {};
                (0, _each2.default)(config.arms, function(value, armsName) {
                    if (value instanceof _reference.Reference) value = value.resolve(context);
                    ChildUnion._arms[armsName] = value;
                });
                // resolve default arm
                var defaultArm = config.defaultArm;
                if (defaultArm instanceof _reference.Reference) defaultArm = defaultArm.resolve(context);
                ChildUnion._defaultArm = defaultArm;
                (0, _each2.default)(config.switches, function(_ref) {
                    var _ref2 = _slicedToArray(_ref, 2), aSwitch = _ref2[0], armName = _ref2[1];
                    if ((0, _isString2.default)(aSwitch)) aSwitch = ChildUnion._switchOn.fromName(aSwitch);
                    ChildUnion._switches.set(aSwitch, armName);
                });
                // add enum-based helpers
                // NOTE: we don't have good notation for "is a subclass of XDR.Enum",
                //  and so we use the following check (does _switchOn have a `values`
                //  attribute) to approximate the intent.
                if (!(0, _isUndefined2.default)(ChildUnion._switchOn.values)) (0, _each2.default)(ChildUnion._switchOn.values(), function(aSwitch) {
                    // Add enum-based constrocutors
                    ChildUnion[aSwitch.name] = function(value) {
                        return new ChildUnion(aSwitch, value);
                    };
                    // Add enum-based "set" helpers
                    // (note: normally I'd use an arrow function but the use of `this`
                    // here might rely on it NOT being an arrow function. so just keep it.)
                    ChildUnion.prototype[aSwitch.name] = function set(value) {
                        return this.set(aSwitch, value);
                    };
                });
                // Add arm accessor helpers
                (0, _each2.default)(ChildUnion._arms, function(type, armsName) {
                    if (type === _void.Void) return;
                    ChildUnion.prototype[armsName] = function get() {
                        return this.get(armsName);
                    };
                });
                return ChildUnion;
            }
        }
    ]);
    return Union;
}();
(0, _ioMixin2.default)(Union);

},{"797301aa65dab223":"lSBun","8c5f661b8d169198":"aaheT","25345931b8817942":"iAF7t","c689afe2b2cb0ed0":"807py","8eda26dcebb8a54e":"k9Ysj","3d072755e447d133":"l9AiM"}],"cQrJ0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _reference = require("f6255519f20f035f");
Object.keys(_reference).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function get() {
            return _reference[key];
        }
    });
});
exports.config = config;
var _isUndefined = require("383e0333aa791996");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _each = require("9fad87d527e4892b");
var _each2 = _interopRequireDefault(_each);
var _types = require("bc64b917b891dc3f");
var XDRTypes = _interopRequireWildcard(_types);
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
        newObj.default = obj;
        return newObj;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
function config(fn) {
    var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (fn) {
        var builder = new TypeBuilder(types);
        fn(builder);
        builder.resolve();
    }
    return types;
}
var SimpleReference = function(_Reference) {
    _inherits(SimpleReference, _Reference);
    function SimpleReference(name) {
        _classCallCheck(this, SimpleReference);
        var _this = _possibleConstructorReturn(this, (SimpleReference.__proto__ || Object.getPrototypeOf(SimpleReference)).call(this));
        _this.name = name;
        return _this;
    }
    _createClass(SimpleReference, [
        {
            key: "resolve",
            value: function resolve(context) {
                var defn = context.definitions[this.name];
                return defn.resolve(context);
            }
        }
    ]);
    return SimpleReference;
}(_reference.Reference);
var ArrayReference = function(_Reference2) {
    _inherits(ArrayReference, _Reference2);
    function ArrayReference(childReference, length) {
        var variable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        _classCallCheck(this, ArrayReference);
        var _this2 = _possibleConstructorReturn(this, (ArrayReference.__proto__ || Object.getPrototypeOf(ArrayReference)).call(this));
        _this2.childReference = childReference;
        _this2.length = length;
        _this2.variable = variable;
        return _this2;
    }
    _createClass(ArrayReference, [
        {
            key: "resolve",
            value: function resolve(context) {
                var resolvedChild = this.childReference;
                var length = this.length;
                if (resolvedChild instanceof _reference.Reference) resolvedChild = resolvedChild.resolve(context);
                if (length instanceof _reference.Reference) length = length.resolve(context);
                if (this.variable) return new XDRTypes.VarArray(resolvedChild, length);
                return new XDRTypes.Array(resolvedChild, length);
            }
        }
    ]);
    return ArrayReference;
}(_reference.Reference);
var OptionReference = function(_Reference3) {
    _inherits(OptionReference, _Reference3);
    function OptionReference(childReference) {
        _classCallCheck(this, OptionReference);
        var _this3 = _possibleConstructorReturn(this, (OptionReference.__proto__ || Object.getPrototypeOf(OptionReference)).call(this));
        _this3.childReference = childReference;
        _this3.name = childReference.name;
        return _this3;
    }
    _createClass(OptionReference, [
        {
            key: "resolve",
            value: function resolve(context) {
                var resolvedChild = this.childReference;
                if (resolvedChild instanceof _reference.Reference) resolvedChild = resolvedChild.resolve(context);
                return new XDRTypes.Option(resolvedChild);
            }
        }
    ]);
    return OptionReference;
}(_reference.Reference);
var SizedReference = function(_Reference4) {
    _inherits(SizedReference, _Reference4);
    function SizedReference(sizedType, length) {
        _classCallCheck(this, SizedReference);
        var _this4 = _possibleConstructorReturn(this, (SizedReference.__proto__ || Object.getPrototypeOf(SizedReference)).call(this));
        _this4.sizedType = sizedType;
        _this4.length = length;
        return _this4;
    }
    _createClass(SizedReference, [
        {
            key: "resolve",
            value: function resolve(context) {
                var length = this.length;
                if (length instanceof _reference.Reference) length = length.resolve(context);
                return new this.sizedType(length);
            }
        }
    ]);
    return SizedReference;
}(_reference.Reference);
var Definition = function() {
    function Definition(constructor, name, cfg) {
        _classCallCheck(this, Definition);
        this.constructor = constructor;
        this.name = name;
        this.config = cfg;
    }
    // resolve calls the constructor of this definition with the provided context
    // and this definitions config values.  The definitions constructor should
    // populate the final type on `context.results`, and may refer to other
    // definitions through `context.definitions`
    _createClass(Definition, [
        {
            key: "resolve",
            value: function resolve(context) {
                if (this.name in context.results) return context.results[this.name];
                return this.constructor(context, this.name, this.config);
            }
        }
    ]);
    return Definition;
}();
// let the reference resoltion system do it's thing
// the "constructor" for a typedef just returns the resolved value
function createTypedef(context, typeName, value) {
    if (value instanceof _reference.Reference) value = value.resolve(context);
    context.results[typeName] = value;
    return value;
}
function createConst(context, name, value) {
    context.results[name] = value;
    return value;
}
var TypeBuilder = function() {
    function TypeBuilder(destination) {
        _classCallCheck(this, TypeBuilder);
        this._destination = destination;
        this._definitions = {};
    }
    _createClass(TypeBuilder, [
        {
            key: "enum",
            value: function _enum(name, members) {
                var result = new Definition(XDRTypes.Enum.create, name, members);
                this.define(name, result);
            }
        },
        {
            key: "struct",
            value: function struct(name, members) {
                var result = new Definition(XDRTypes.Struct.create, name, members);
                this.define(name, result);
            }
        },
        {
            key: "union",
            value: function union(name, cfg) {
                var result = new Definition(XDRTypes.Union.create, name, cfg);
                this.define(name, result);
            }
        },
        {
            key: "typedef",
            value: function typedef(name, cfg) {
                var result = new Definition(createTypedef, name, cfg);
                this.define(name, result);
            }
        },
        {
            key: "const",
            value: function _const(name, cfg) {
                var result = new Definition(createConst, name, cfg);
                this.define(name, result);
            }
        },
        {
            key: "void",
            value: function _void() {
                return XDRTypes.Void;
            }
        },
        {
            key: "bool",
            value: function bool() {
                return XDRTypes.Bool;
            }
        },
        {
            key: "int",
            value: function int() {
                return XDRTypes.Int;
            }
        },
        {
            key: "hyper",
            value: function hyper() {
                return XDRTypes.Hyper;
            }
        },
        {
            key: "uint",
            value: function uint() {
                return XDRTypes.UnsignedInt;
            }
        },
        {
            key: "uhyper",
            value: function uhyper() {
                return XDRTypes.UnsignedHyper;
            }
        },
        {
            key: "float",
            value: function float() {
                return XDRTypes.Float;
            }
        },
        {
            key: "double",
            value: function double() {
                return XDRTypes.Double;
            }
        },
        {
            key: "quadruple",
            value: function quadruple() {
                return XDRTypes.Quadruple;
            }
        },
        {
            key: "string",
            value: function string(length) {
                return new SizedReference(XDRTypes.String, length);
            }
        },
        {
            key: "opaque",
            value: function opaque(length) {
                return new SizedReference(XDRTypes.Opaque, length);
            }
        },
        {
            key: "varOpaque",
            value: function varOpaque(length) {
                return new SizedReference(XDRTypes.VarOpaque, length);
            }
        },
        {
            key: "array",
            value: function array(childType, length) {
                return new ArrayReference(childType, length);
            }
        },
        {
            key: "varArray",
            value: function varArray(childType, maxLength) {
                return new ArrayReference(childType, maxLength, true);
            }
        },
        {
            key: "option",
            value: function option(childType) {
                return new OptionReference(childType);
            }
        },
        {
            key: "define",
            value: function define(name, definition) {
                if ((0, _isUndefined2.default)(this._destination[name])) this._definitions[name] = definition;
                else throw new Error("XDRTypes Error:" + name + " is already defined");
            }
        },
        {
            key: "lookup",
            value: function lookup(name) {
                return new SimpleReference(name);
            }
        },
        {
            key: "resolve",
            value: function resolve() {
                var _this5 = this;
                (0, _each2.default)(this._definitions, function(defn) {
                    defn.resolve({
                        definitions: _this5._definitions,
                        results: _this5._destination
                    });
                });
            }
        }
    ]);
    return TypeBuilder;
}();

},{"f6255519f20f035f":"k9Ysj","383e0333aa791996":"aaheT","9fad87d527e4892b":"lSBun","bc64b917b891dc3f":"517Fj"}],"hLdvN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Asset = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _clone = require("afd8249f6ef19bb2");
var _clone2 = _interopRequireDefault(_clone);
var _padEnd = require("54df260ef795a877");
var _padEnd2 = _interopRequireDefault(_padEnd);
var _trimEnd = require("318a929c5f8d802a");
var _trimEnd2 = _interopRequireDefault(_trimEnd);
var _xdr = require("94f1ea54b91334fc");
var _xdr2 = _interopRequireDefault(_xdr);
var _keypair = require("e368453bb63779ba");
var _strkey = require("d4f3bdac998239f");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * Asset class represents an asset, either the native asset (`XLM`)
 * or an asset code / issuer account ID pair.
 *
 * An asset code describes an asset code and issuer pair. In the case of the native
 * asset XLM, the issuer will be null.
 *
 * @constructor
 * @param {string} code - The asset code.
 * @param {string} issuer - The account ID of the issuer.
 */ var Asset = exports.Asset = function() {
    function Asset(code, issuer) {
        _classCallCheck(this, Asset);
        if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) throw new Error("Asset code is invalid (maximum alphanumeric, 12 characters at max)");
        if (String(code).toLowerCase() !== "xlm" && !issuer) throw new Error("Issuer cannot be null");
        if (issuer && !_strkey.StrKey.isValidEd25519PublicKey(issuer)) throw new Error("Issuer is invalid");
        if (String(code).toLowerCase() === "xlm") // transform all xLM, Xlm, etc. variants -> XLM
        this.code = "XLM";
        else this.code = code;
        this.issuer = issuer;
    }
    /**
   * Returns an asset object for the native asset.
   * @Return {Asset}
   */ _createClass(Asset, [
        {
            key: "toXDRObject",
            /**
     * Returns the xdr.Asset object for this asset.
     * @returns {xdr.Asset} XDR asset object
     */ value: function toXDRObject() {
                return this._toXDRObject(_xdr2.default.Asset);
            }
        },
        {
            key: "toChangeTrustXDRObject",
            value: function toChangeTrustXDRObject() {
                return this._toXDRObject(_xdr2.default.ChangeTrustAsset);
            }
        },
        {
            key: "toTrustLineXDRObject",
            value: function toTrustLineXDRObject() {
                return this._toXDRObject(_xdr2.default.TrustLineAsset);
            }
        },
        {
            key: "_toXDRObject",
            value: function _toXDRObject() {
                var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _xdr2.default.Asset;
                if (this.isNative()) return xdrAsset.assetTypeNative();
                var xdrType = void 0;
                var xdrTypeString = void 0;
                if (this.code.length <= 4) {
                    xdrType = _xdr2.default.AlphaNum4;
                    xdrTypeString = "assetTypeCreditAlphanum4";
                } else {
                    xdrType = _xdr2.default.AlphaNum12;
                    xdrTypeString = "assetTypeCreditAlphanum12";
                }
                // pad code with null bytes if necessary
                var padLength = this.code.length <= 4 ? 4 : 12;
                var paddedCode = (0, _padEnd2.default)(this.code, padLength, "\0");
                // eslint-disable-next-line new-cap
                var assetType = new xdrType({
                    assetCode: paddedCode,
                    issuer: _keypair.Keypair.fromPublicKey(this.issuer).xdrAccountId()
                });
                return new xdrAsset(xdrTypeString, assetType);
            }
        },
        {
            key: "getCode",
            value: function getCode() {
                return (0, _clone2.default)(this.code);
            }
        },
        {
            key: "getIssuer",
            value: function getIssuer() {
                return (0, _clone2.default)(this.issuer);
            }
        },
        {
            key: "getAssetType",
            value: function getAssetType() {
                switch(this.getRawAssetType()){
                    case _xdr2.default.AssetType.assetTypeNative():
                        return "native";
                    case _xdr2.default.AssetType.assetTypeCreditAlphanum4():
                        return "credit_alphanum4";
                    case _xdr2.default.AssetType.assetTypeCreditAlphanum12():
                        return "credit_alphanum12";
                    default:
                        return "unknown";
                }
            }
        },
        {
            key: "getRawAssetType",
            value: function getRawAssetType() {
                if (this.isNative()) return _xdr2.default.AssetType.assetTypeNative();
                if (this.code.length <= 4) return _xdr2.default.AssetType.assetTypeCreditAlphanum4();
                return _xdr2.default.AssetType.assetTypeCreditAlphanum12();
            }
        },
        {
            key: "isNative",
            value: function isNative() {
                return !this.issuer;
            }
        },
        {
            key: "equals",
            value: function equals(asset) {
                return this.code === asset.getCode() && this.issuer === asset.getIssuer();
            }
        },
        {
            key: "toString",
            value: function toString() {
                if (this.isNative()) return "native";
                return this.getCode() + ":" + this.getIssuer();
            }
        }
    ], [
        {
            key: "native",
            value: function native() {
                return new Asset("XLM");
            }
        },
        {
            key: "fromOperation",
            value: function fromOperation(assetXdr) {
                var anum = void 0;
                var code = void 0;
                var issuer = void 0;
                switch(assetXdr.switch()){
                    case _xdr2.default.AssetType.assetTypeNative():
                        return this.native();
                    case _xdr2.default.AssetType.assetTypeCreditAlphanum4():
                        anum = assetXdr.alphaNum4();
                    /* falls through */ case _xdr2.default.AssetType.assetTypeCreditAlphanum12():
                        anum = anum || assetXdr.alphaNum12();
                        issuer = _strkey.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());
                        code = (0, _trimEnd2.default)(anum.assetCode(), "\0");
                        return new this(code, issuer);
                    default:
                        throw new Error("Invalid asset type: " + assetXdr.switch().name);
                }
            }
        },
        {
            key: "compare",
            value: function compare(assetA, assetB) {
                if (!assetA || !(assetA instanceof Asset)) throw new Error("assetA is invalid");
                if (!assetB || !(assetB instanceof Asset)) throw new Error("assetB is invalid");
                if (assetA.equals(assetB)) return 0;
                // Compare asset types.
                var xdrAtype = assetA.getRawAssetType().value;
                var xdrBtype = assetB.getRawAssetType().value;
                if (xdrAtype !== xdrBtype) return xdrAtype < xdrBtype ? -1 : 1;
                // Compare asset codes.
                var result = asciiCompare(assetA.getCode(), assetB.getCode());
                if (result !== 0) return result;
                // Compare asset issuers.
                return asciiCompare(assetA.getIssuer(), assetB.getIssuer());
            }
        }
    ]);
    return Asset;
}();
/**
 * Compares two ASCII strings in lexographic order with uppercase precedence.
 *
 * @param   {string} a - the first string to compare
 * @param   {string} b - the second
 * @returns {number} like all `compare()`s:
 *     -1 if `a < b`, 0 if `a == b`, and 1 if `a > b`
 *
 * @warning No type-checks are done on the parameters
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare
 */ function asciiCompare(a, b) {
    return a.localeCompare(b, "en", {
        caseFirst: "upper"
    });
}

},{"afd8249f6ef19bb2":"edHVe","54df260ef795a877":"eVEhv","318a929c5f8d802a":"29TDm","94f1ea54b91334fc":"gxpVH","e368453bb63779ba":"kfbNf","d4f3bdac998239f":"gjDua"}],"edHVe":[function(require,module,exports) {
var baseClone = require("e2f335474aaf8021");
/** Used to compose bitmasks for cloning. */ var CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */ function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG);
}
module.exports = clone;

},{"e2f335474aaf8021":"2GC2p"}],"2GC2p":[function(require,module,exports) {
var Stack = require("a70d3dd908f8be3b"), arrayEach = require("c195b76f9fec28a8"), assignValue = require("c800b82d40cdbb6"), baseAssign = require("c5a62189e9465f32"), baseAssignIn = require("8db911b0840424e"), cloneBuffer = require("171a458327f02fc7"), copyArray = require("bf04e40b853f4de1"), copySymbols = require("7d9d2536ab0b2a43"), copySymbolsIn = require("9654de9f8d36b7e8"), getAllKeys = require("2c014af211ea8283"), getAllKeysIn = require("f7866f2cf3b8b90b"), getTag = require("6be38f0ef51726ce"), initCloneArray = require("8d61f709c2b1225b"), initCloneByTag = require("bc5616512837de96"), initCloneObject = require("c0317dcb95f125c6"), isArray = require("4ffd576bfc23ea14"), isBuffer = require("d6c39457d5589281"), isMap = require("4a9dd2bf5676ed2c"), isObject = require("715bc52b7f81cb12"), isSet = require("d06f570924dc2ea2"), keys = require("12193031f42bd022"), keysIn = require("9eec517f820bc15c");
/** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */ var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
/** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */ function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
    if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
    if (result !== undefined) return result;
    if (!isObject(value)) return value;
    var isArr = isArray(value);
    if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) return copyArray(value, result);
    } else {
        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
        if (isBuffer(value)) return cloneBuffer(value, isDeep);
        if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        } else {
            if (!cloneableTags[tag]) return object ? value : {};
            result = initCloneByTag(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack);
    var stacked = stack.get(value);
    if (stacked) return stacked;
    stack.set(value, result);
    if (isSet(value)) value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    else if (isMap(value)) value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props = isArr ? undefined : keysFunc(value);
    arrayEach(props || value, function(subValue, key) {
        if (props) {
            key = subValue;
            subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
}
module.exports = baseClone;

},{"a70d3dd908f8be3b":"atP87","c195b76f9fec28a8":"kMhnH","c800b82d40cdbb6":"5M3eX","c5a62189e9465f32":"fNRtQ","8db911b0840424e":"6Gpuu","171a458327f02fc7":"6zXd4","bf04e40b853f4de1":"jJ8fu","7d9d2536ab0b2a43":"78Za0","9654de9f8d36b7e8":"lhZg2","2c014af211ea8283":"d2kML","f7866f2cf3b8b90b":"6BBOq","6be38f0ef51726ce":"cRPhM","8d61f709c2b1225b":"1RKeS","bc5616512837de96":"26ysD","c0317dcb95f125c6":"dG1H0","4ffd576bfc23ea14":"dZaTH","d6c39457d5589281":"cn85h","4a9dd2bf5676ed2c":"3qbv8","715bc52b7f81cb12":"cGhqJ","d06f570924dc2ea2":"bZrVh","12193031f42bd022":"6fHVw","9eec517f820bc15c":"c9sMs"}],"fNRtQ":[function(require,module,exports) {
var copyObject = require("a7682e6393c40ef4"), keys = require("510b2525bedbc839");
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
}
module.exports = baseAssign;

},{"a7682e6393c40ef4":"gfA7W","510b2525bedbc839":"6fHVw"}],"6Gpuu":[function(require,module,exports) {
var copyObject = require("3897ebe8a75ea631"), keysIn = require("5e25735cdb2591a2");
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
}
module.exports = baseAssignIn;

},{"3897ebe8a75ea631":"gfA7W","5e25735cdb2591a2":"c9sMs"}],"6zXd4":[function(require,module,exports) {
var root = require("f3199c200860e466");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
module.exports = cloneBuffer;

},{"f3199c200860e466":"dSYUs"}],"jJ8fu":[function(require,module,exports) {
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while(++index < length)array[index] = source[index];
    return array;
}
module.exports = copyArray;

},{}],"78Za0":[function(require,module,exports) {
var copyObject = require("40cd6c04a474c2b3"), getSymbols = require("c7623854b700efcb");
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
}
module.exports = copySymbols;

},{"40cd6c04a474c2b3":"gfA7W","c7623854b700efcb":"5p5Yd"}],"lhZg2":[function(require,module,exports) {
var copyObject = require("356b54fef564d36f"), getSymbolsIn = require("85c5721722634e4d");
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
}
module.exports = copySymbolsIn;

},{"356b54fef564d36f":"gfA7W","85c5721722634e4d":"dVaAc"}],"dVaAc":[function(require,module,exports) {
var arrayPush = require("7271ddd190549c71"), getPrototype = require("2c6fa4525383cca2"), getSymbols = require("2d45f841b7eb5fb5"), stubArray = require("7cffcb92ef416cc4");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while(object){
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
    }
    return result;
};
module.exports = getSymbolsIn;

},{"7271ddd190549c71":"ivo5r","2c6fa4525383cca2":"8ASKT","2d45f841b7eb5fb5":"5p5Yd","7cffcb92ef416cc4":"6TgRy"}],"8ASKT":[function(require,module,exports) {
var overArg = require("6181210e1595789");
/** Built-in value references. */ var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;

},{"6181210e1595789":"dpUvl"}],"6BBOq":[function(require,module,exports) {
var baseGetAllKeys = require("370bd07b16f22c9a"), getSymbolsIn = require("675700745a5cc014"), keysIn = require("c6ac6b4c1f11077");
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
}
module.exports = getAllKeysIn;

},{"370bd07b16f22c9a":"aeckf","675700745a5cc014":"dVaAc","c6ac6b4c1f11077":"c9sMs"}],"1RKeS":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */ function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
module.exports = initCloneArray;

},{}],"26ysD":[function(require,module,exports) {
var cloneArrayBuffer = require("d0012a50374b7894"), cloneDataView = require("707b3ff59936739c"), cloneRegExp = require("bce04f4a15875b76"), cloneSymbol = require("3ad9bcaf79f93100"), cloneTypedArray = require("b583474592f7af25");
/** `Object#toString` result references. */ var boolTag = "[object Boolean]", dateTag = "[object Date]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch(tag){
        case arrayBufferTag:
            return cloneArrayBuffer(object);
        case boolTag:
        case dateTag:
            return new Ctor(+object);
        case dataViewTag:
            return cloneDataView(object, isDeep);
        case float32Tag:
        case float64Tag:
        case int8Tag:
        case int16Tag:
        case int32Tag:
        case uint8Tag:
        case uint8ClampedTag:
        case uint16Tag:
        case uint32Tag:
            return cloneTypedArray(object, isDeep);
        case mapTag:
            return new Ctor;
        case numberTag:
        case stringTag:
            return new Ctor(object);
        case regexpTag:
            return cloneRegExp(object);
        case setTag:
            return new Ctor;
        case symbolTag:
            return cloneSymbol(object);
    }
}
module.exports = initCloneByTag;

},{"d0012a50374b7894":"7fi2W","707b3ff59936739c":"hEqzP","bce04f4a15875b76":"aeJOQ","3ad9bcaf79f93100":"5ScBc","b583474592f7af25":"7eG7Y"}],"7fi2W":[function(require,module,exports) {
var Uint8Array = require("4df3472156c1331c");
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
module.exports = cloneArrayBuffer;

},{"4df3472156c1331c":"6xFrA"}],"hEqzP":[function(require,module,exports) {
var cloneArrayBuffer = require("c0e85bdb1ebd06ea");
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */ function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
module.exports = cloneDataView;

},{"c0e85bdb1ebd06ea":"7fi2W"}],"aeJOQ":[function(require,module,exports) {
/** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */ function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
module.exports = cloneRegExp;

},{}],"5ScBc":[function(require,module,exports) {
var Symbol = require("212d85403cea9b60");
/** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */ function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
module.exports = cloneSymbol;

},{"212d85403cea9b60":"7lsL9"}],"7eG7Y":[function(require,module,exports) {
var cloneArrayBuffer = require("7cd1937cad009d9");
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
module.exports = cloneTypedArray;

},{"7cd1937cad009d9":"7fi2W"}],"dG1H0":[function(require,module,exports) {
var baseCreate = require("4420ff076cbd53d"), getPrototype = require("6a38e5f6b9b90604"), isPrototype = require("749d5e191a765732");
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}
module.exports = initCloneObject;

},{"4420ff076cbd53d":"ef1VZ","6a38e5f6b9b90604":"8ASKT","749d5e191a765732":"iG4eR"}],"ef1VZ":[function(require,module,exports) {
var isObject = require("b5646c7280a3dd63");
/** Built-in value references. */ var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var baseCreate = function() {
    function object() {}
    return function(proto) {
        if (!isObject(proto)) return {};
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
module.exports = baseCreate;

},{"b5646c7280a3dd63":"cGhqJ"}],"3qbv8":[function(require,module,exports) {
var baseIsMap = require("51ea97a23455981f"), baseUnary = require("c1c51f3026e1bda1"), nodeUtil = require("26f9e1484f079aff");
/* Node.js helper references. */ var nodeIsMap = nodeUtil && nodeUtil.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
module.exports = isMap;

},{"51ea97a23455981f":"9v3CD","c1c51f3026e1bda1":"eJXq4","26f9e1484f079aff":"5edNe"}],"9v3CD":[function(require,module,exports) {
var getTag = require("e93c52e17ae01440"), isObjectLike = require("a4223e42eada5732");
/** `Object#toString` result references. */ var mapTag = "[object Map]";
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */ function baseIsMap(value) {
    return isObjectLike(value) && getTag(value) == mapTag;
}
module.exports = baseIsMap;

},{"e93c52e17ae01440":"cRPhM","a4223e42eada5732":"3BLi4"}],"bZrVh":[function(require,module,exports) {
var baseIsSet = require("9f80d3b34b3cc37e"), baseUnary = require("2ddd4305b9bd0785"), nodeUtil = require("d7506f9d4ef4489d");
/* Node.js helper references. */ var nodeIsSet = nodeUtil && nodeUtil.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
module.exports = isSet;

},{"9f80d3b34b3cc37e":"7lzzg","2ddd4305b9bd0785":"eJXq4","d7506f9d4ef4489d":"5edNe"}],"7lzzg":[function(require,module,exports) {
var getTag = require("103fe8729d3c06ac"), isObjectLike = require("7f7de5c05e7cdebc");
/** `Object#toString` result references. */ var setTag = "[object Set]";
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */ function baseIsSet(value) {
    return isObjectLike(value) && getTag(value) == setTag;
}
module.exports = baseIsSet;

},{"103fe8729d3c06ac":"cRPhM","7f7de5c05e7cdebc":"3BLi4"}],"eVEhv":[function(require,module,exports) {
var createPadding = require("d685a07665262d32"), stringSize = require("ba46a4300a911786"), toInteger = require("92048274a7a6714"), toString = require("56e0895ffe3a5154");
/**
 * Pads `string` on the right side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padEnd('abc', 6);
 * // => 'abc   '
 *
 * _.padEnd('abc', 6, '_-');
 * // => 'abc_-_'
 *
 * _.padEnd('abc', 3);
 * // => 'abc'
 */ function padEnd(string, length, chars) {
    string = toString(string);
    length = toInteger(length);
    var strLength = length ? stringSize(string) : 0;
    return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
}
module.exports = padEnd;

},{"d685a07665262d32":"a3dPj","ba46a4300a911786":"gcktq","92048274a7a6714":"ds6ZT","56e0895ffe3a5154":"joIdQ"}],"a3dPj":[function(require,module,exports) {
var baseRepeat = require("a0eb5f4d03cb4815"), baseToString = require("9d334f5f7796baa6"), castSlice = require("7b6b07016fcb64a6"), hasUnicode = require("a7c6406ae4291ed0"), stringSize = require("d8f1ab88e683ba1e"), stringToArray = require("bd601db2c6f62b1b");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil;
/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */ function createPadding(length, chars) {
    chars = chars === undefined ? " " : baseToString(chars);
    var charsLength = chars.length;
    if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
    var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
    return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join("") : result.slice(0, length);
}
module.exports = createPadding;

},{"a0eb5f4d03cb4815":"4kUJm","9d334f5f7796baa6":"goDP8","7b6b07016fcb64a6":"eHx77","a7c6406ae4291ed0":"b3sZ0","d8f1ab88e683ba1e":"gcktq","bd601db2c6f62b1b":"dl1Gh"}],"4kUJm":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeFloor = Math.floor;
/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */ function baseRepeat(string, n) {
    var result = "";
    if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
    // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
    do {
        if (n % 2) result += string;
        n = nativeFloor(n / 2);
        if (n) string += string;
    }while (n);
    return result;
}
module.exports = baseRepeat;

},{}],"eHx77":[function(require,module,exports) {
var baseSlice = require("d80c541fc4886443");
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */ function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
}
module.exports = castSlice;

},{"d80c541fc4886443":"cqqI2"}],"cqqI2":[function(require,module,exports) {
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */ function baseSlice(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) start = -start > length ? 0 : length + start;
    end = end > length ? length : end;
    if (end < 0) end += length;
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while(++index < length)result[index] = array[index + start];
    return result;
}
module.exports = baseSlice;

},{}],"b3sZ0":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = "\ud800-\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
/** Used to compose unicode capture groups. */ var rsZWJ = "\\u200d";
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */ function hasUnicode(string) {
    return reHasUnicode.test(string);
}
module.exports = hasUnicode;

},{}],"gcktq":[function(require,module,exports) {
var asciiSize = require("5ec3de1b807d55a6"), hasUnicode = require("84b713ede90fddcd"), unicodeSize = require("a6339280966a0904");
/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */ function stringSize(string) {
    return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
}
module.exports = stringSize;

},{"5ec3de1b807d55a6":"fmaVM","84b713ede90fddcd":"b3sZ0","a6339280966a0904":"3ovfG"}],"fmaVM":[function(require,module,exports) {
var baseProperty = require("bd45a8175d0ef447");
/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */ var asciiSize = baseProperty("length");
module.exports = asciiSize;

},{"bd45a8175d0ef447":"4HOmE"}],"3ovfG":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = "\ud800-\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
/** Used to compose unicode capture groups. */ var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\ud83c[\udffb-\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\ud83c[\udde6-\uddff]){2}", rsSurrPair = "[\ud800-\udbff][\udc00-\udfff]", rsZWJ = "\\u200d";
/** Used to compose unicode regexes. */ var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [
    rsNonAstral + rsCombo + "?",
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
].join("|") + ")";
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */ function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while(reUnicode.test(string))++result;
    return result;
}
module.exports = unicodeSize;

},{}],"dl1Gh":[function(require,module,exports) {
var asciiToArray = require("401ff77b0af78b4"), hasUnicode = require("1da6828261794e81"), unicodeToArray = require("ce204ed5702648ff");
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function stringToArray(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
module.exports = stringToArray;

},{"401ff77b0af78b4":"1GB6M","1da6828261794e81":"b3sZ0","ce204ed5702648ff":"5Z8Ku"}],"1GB6M":[function(require,module,exports) {
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function asciiToArray(string) {
    return string.split("");
}
module.exports = asciiToArray;

},{}],"5Z8Ku":[function(require,module,exports) {
/** Used to compose unicode character classes. */ var rsAstralRange = "\ud800-\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f";
/** Used to compose unicode capture groups. */ var rsAstral = "[" + rsAstralRange + "]", rsCombo = "[" + rsComboRange + "]", rsFitz = "\ud83c[\udffb-\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\ud83c[\udde6-\uddff]){2}", rsSurrPair = "[\ud800-\udbff][\udc00-\udfff]", rsZWJ = "\\u200d";
/** Used to compose unicode regexes. */ var reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [
    rsNonAstral + rsCombo + "?",
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral
].join("|") + ")";
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */ function unicodeToArray(string) {
    return string.match(reUnicode) || [];
}
module.exports = unicodeToArray;

},{}],"29TDm":[function(require,module,exports) {
var baseToString = require("2bdfd13ef10e042b"), castSlice = require("f04f18803eb7fd0c"), charsEndIndex = require("a3565dca62fabd50"), stringToArray = require("d1c2ab95343ebc42"), toString = require("9e2ac514b1aa5591"), trimmedEndIndex = require("60ef46fde6ee1510");
/**
 * Removes trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimEnd('  abc  ');
 * // => '  abc'
 *
 * _.trimEnd('-_-abc-_-', '_-');
 * // => '-_-abc'
 */ function trimEnd(string, chars, guard) {
    string = toString(string);
    if (string && (guard || chars === undefined)) return string.slice(0, trimmedEndIndex(string) + 1);
    if (!string || !(chars = baseToString(chars))) return string;
    var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
    return castSlice(strSymbols, 0, end).join("");
}
module.exports = trimEnd;

},{"2bdfd13ef10e042b":"goDP8","f04f18803eb7fd0c":"eHx77","a3565dca62fabd50":"cCxi6","d1c2ab95343ebc42":"dl1Gh","9e2ac514b1aa5591":"joIdQ","60ef46fde6ee1510":"hHJmS"}],"cCxi6":[function(require,module,exports) {
var baseIndexOf = require("7794a9dda9adf6fb");
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */ function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;
    while(index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
    return index;
}
module.exports = charsEndIndex;

},{"7794a9dda9adf6fb":"8NgWU"}],"8NgWU":[function(require,module,exports) {
var baseFindIndex = require("98cccdf3b4f6c112"), baseIsNaN = require("38bc0f194a586c7e"), strictIndexOf = require("723bbbadb4c29f71");
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}
module.exports = baseIndexOf;

},{"98cccdf3b4f6c112":"630D7","38bc0f194a586c7e":"47cqG","723bbbadb4c29f71":"8MeE0"}],"630D7":[function(require,module,exports) {
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while(fromRight ? index-- : ++index < length){
        if (predicate(array[index], index, array)) return index;
    }
    return -1;
}
module.exports = baseFindIndex;

},{}],"47cqG":[function(require,module,exports) {
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */ function baseIsNaN(value) {
    return value !== value;
}
module.exports = baseIsNaN;

},{}],"8MeE0":[function(require,module,exports) {
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length = array.length;
    while(++index < length){
        if (array[index] === value) return index;
    }
    return -1;
}
module.exports = strictIndexOf;

},{}],"kfbNf":[function(require,module,exports) {
var Buffer = require("7c86aaf0936c8c69").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Keypair = undefined;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}(); /* eslint no-bitwise: ["error", {"allow": ["^"]}] */ 
var _tweetnacl = require("e579f0bd5096478d");
var _tweetnacl2 = _interopRequireDefault(_tweetnacl);
var _isUndefined = require("590db45d5ea6e471");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _isString = require("73a05aef23e6ec91");
var _isString2 = _interopRequireDefault(_isString);
var _signing = require("c3ce71a78d53750b");
var _strkey = require("c6cd2eee5b4919a4");
var _hashing = require("ebfddb6980cec70d");
var _xdr = require("ab9b4c605c1a78b8");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * `Keypair` represents public (and secret) keys of the account.
 *
 * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other
 * public-key signature systems.
 *
 * Use more convenient methods to create `Keypair` object:
 * * `{@link Keypair.fromPublicKey}`
 * * `{@link Keypair.fromSecret}`
 * * `{@link Keypair.random}`
 *
 * @constructor
 * @param {object} keys At least one of keys must be provided.
 * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)
 * @param {Buffer} [keys.publicKey] Raw public key
 * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)
 */ var Keypair = exports.Keypair = function() {
    function Keypair(keys) {
        _classCallCheck(this, Keypair);
        if (keys.type !== "ed25519") throw new Error("Invalid keys type");
        this.type = keys.type;
        if (keys.secretKey) {
            keys.secretKey = Buffer.from(keys.secretKey);
            if (keys.secretKey.length !== 32) throw new Error("secretKey length is invalid");
            this._secretSeed = keys.secretKey;
            this._publicKey = (0, _signing.generate)(keys.secretKey);
            this._secretKey = Buffer.concat([
                keys.secretKey,
                this._publicKey
            ]);
            if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) throw new Error("secretKey does not match publicKey");
        } else {
            this._publicKey = Buffer.from(keys.publicKey);
            if (this._publicKey.length !== 32) throw new Error("publicKey length is invalid");
        }
    }
    /**
   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending
   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.
   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)
   * @returns {Keypair}
   */ _createClass(Keypair, [
        {
            key: "xdrAccountId",
            value: function xdrAccountId() {
                return new _xdr2.default.AccountId.publicKeyTypeEd25519(this._publicKey);
            }
        },
        {
            key: "xdrPublicKey",
            value: function xdrPublicKey() {
                return new _xdr2.default.PublicKey.publicKeyTypeEd25519(this._publicKey);
            }
        },
        {
            key: "xdrMuxedAccount",
            value: function xdrMuxedAccount(id) {
                if (!(0, _isUndefined2.default)(id)) {
                    if (!(0, _isString2.default)(id)) throw new TypeError("expected string for ID, got " + (typeof id === "undefined" ? "undefined" : _typeof(id)));
                    return _xdr2.default.MuxedAccount.keyTypeMuxedEd25519(new _xdr2.default.MuxedAccountMed25519({
                        id: _xdr2.default.Uint64.fromString(id),
                        ed25519: this._publicKey
                    }));
                }
                return new _xdr2.default.MuxedAccount.keyTypeEd25519(this._publicKey);
            }
        },
        {
            key: "rawPublicKey",
            value: function rawPublicKey() {
                return this._publicKey;
            }
        },
        {
            key: "signatureHint",
            value: function signatureHint() {
                var a = this.xdrAccountId().toXDR();
                return a.slice(a.length - 4);
            }
        },
        {
            key: "publicKey",
            value: function publicKey() {
                return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);
            }
        },
        {
            key: "secret",
            value: function secret() {
                if (!this._secretSeed) throw new Error("no secret key available");
                if (this.type === "ed25519") return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);
                throw new Error("Invalid Keypair type");
            }
        },
        {
            key: "rawSecretKey",
            value: function rawSecretKey() {
                return this._secretSeed;
            }
        },
        {
            key: "canSign",
            value: function canSign() {
                return !!this._secretKey;
            }
        },
        {
            key: "sign",
            value: function sign(data) {
                if (!this.canSign()) throw new Error("cannot sign: no secret key available");
                return (0, _signing.sign)(data, this._secretKey);
            }
        },
        {
            key: "verify",
            value: function verify(data, signature) {
                return (0, _signing.verify)(data, signature, this._publicKey);
            }
        },
        {
            key: "signDecorated",
            value: function signDecorated(data) {
                var signature = this.sign(data);
                var hint = this.signatureHint();
                return new _xdr2.default.DecoratedSignature({
                    hint: hint,
                    signature: signature
                });
            }
        },
        {
            key: "signPayloadDecorated",
            value: function signPayloadDecorated(data) {
                var signature = this.sign(data);
                var keyHint = this.signatureHint();
                var hint = Buffer.from(data.slice(-4));
                if (hint.length < 4) // append zeroes as needed
                hint = Buffer.concat([
                    hint,
                    Buffer.alloc(4 - data.length, 0)
                ]);
                return new _xdr2.default.DecoratedSignature({
                    hint: hint.map(function(byte, i) {
                        return byte ^ keyHint[i];
                    }),
                    signature: signature
                });
            }
        }
    ], [
        {
            key: "fromSecret",
            value: function fromSecret(secret) {
                var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);
                return this.fromRawEd25519Seed(rawSecret);
            }
        },
        {
            key: "fromRawEd25519Seed",
            value: function fromRawEd25519Seed(rawSeed) {
                return new this({
                    type: "ed25519",
                    secretKey: rawSeed
                });
            }
        },
        {
            key: "master",
            value: function master(networkPassphrase) {
                if (!networkPassphrase) throw new Error("No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.");
                return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));
            }
        },
        {
            key: "fromPublicKey",
            value: function fromPublicKey(publicKey) {
                publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);
                if (publicKey.length !== 32) throw new Error("Invalid Stellar public key");
                return new this({
                    type: "ed25519",
                    publicKey: publicKey
                });
            }
        },
        {
            key: "random",
            value: function random() {
                var secret = _tweetnacl2.default.randomBytes(32);
                return this.fromRawEd25519Seed(secret);
            }
        }
    ]);
    return Keypair;
}();

},{"7c86aaf0936c8c69":"fCgem","e579f0bd5096478d":"3J9rh","590db45d5ea6e471":"aaheT","73a05aef23e6ec91":"iAF7t","c3ce71a78d53750b":"fvAO6","c6cd2eee5b4919a4":"gjDua","ebfddb6980cec70d":"efCju","ab9b4c605c1a78b8":"gxpVH"}],"gjDua":[function(require,module,exports) {
var Buffer = require("6dd62dcafd9f038e").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StrKey = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}(); /* eslint no-bitwise: ["error", {"allow": ["<<"]}] */ 
exports.decodeCheck = decodeCheck;
exports.encodeCheck = encodeCheck;
var _base = require("19e13da4999a4f13");
var _base2 = _interopRequireDefault(_base);
var _crc = require("48617113cf4bf4a6");
var _crc2 = _interopRequireDefault(_crc);
var _isUndefined = require("e1af3b7408e6fdb8");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _isNull = require("f9978332f2ad6d7c");
var _isNull2 = _interopRequireDefault(_isNull);
var _isString = require("3c388dcedc48a037");
var _isString2 = _interopRequireDefault(_isString);
var _checksum = require("33a74c0d29c4b07b");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var versionBytes = {
    ed25519PublicKey: 48,
    ed25519SecretSeed: 144,
    med25519PublicKey: 96,
    preAuthTx: 152,
    sha256Hash: 184,
    signedPayload: 120 // P
};
var strkeyTypes = {
    G: "ed25519PublicKey",
    S: "ed25519SecretSeed",
    M: "med25519PublicKey",
    T: "preAuthTx",
    X: "sha256Hash",
    P: "signedPayload"
};
/**
 * StrKey is a helper class that allows encoding and decoding Stellar keys
 * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and
 * string (i.e. "GABCD...", etc.) representations.
 */ var StrKey = exports.StrKey = function() {
    function StrKey() {
        _classCallCheck(this, StrKey);
    }
    _createClass(StrKey, null, [
        {
            key: "encodeEd25519PublicKey",
            /**
     * Encodes `data` to strkey ed25519 public key.
     *
     * @param   {Buffer} data   raw data to encode
     * @returns {string}        "G..." representation of the key
     */ value: function encodeEd25519PublicKey(data) {
                return encodeCheck("ed25519PublicKey", data);
            }
        },
        {
            key: "decodeEd25519PublicKey",
            value: function decodeEd25519PublicKey(data) {
                return decodeCheck("ed25519PublicKey", data);
            }
        },
        {
            key: "isValidEd25519PublicKey",
            value: function isValidEd25519PublicKey(publicKey) {
                return isValid("ed25519PublicKey", publicKey);
            }
        },
        {
            key: "encodeEd25519SecretSeed",
            value: function encodeEd25519SecretSeed(data) {
                return encodeCheck("ed25519SecretSeed", data);
            }
        },
        {
            key: "decodeEd25519SecretSeed",
            value: function decodeEd25519SecretSeed(address) {
                return decodeCheck("ed25519SecretSeed", address);
            }
        },
        {
            key: "isValidEd25519SecretSeed",
            value: function isValidEd25519SecretSeed(seed) {
                return isValid("ed25519SecretSeed", seed);
            }
        },
        {
            key: "encodeMed25519PublicKey",
            value: function encodeMed25519PublicKey(data) {
                return encodeCheck("med25519PublicKey", data);
            }
        },
        {
            key: "decodeMed25519PublicKey",
            value: function decodeMed25519PublicKey(address) {
                return decodeCheck("med25519PublicKey", address);
            }
        },
        {
            key: "isValidMed25519PublicKey",
            value: function isValidMed25519PublicKey(publicKey) {
                return isValid("med25519PublicKey", publicKey);
            }
        },
        {
            key: "encodePreAuthTx",
            value: function encodePreAuthTx(data) {
                return encodeCheck("preAuthTx", data);
            }
        },
        {
            key: "decodePreAuthTx",
            value: function decodePreAuthTx(address) {
                return decodeCheck("preAuthTx", address);
            }
        },
        {
            key: "encodeSha256Hash",
            value: function encodeSha256Hash(data) {
                return encodeCheck("sha256Hash", data);
            }
        },
        {
            key: "decodeSha256Hash",
            value: function decodeSha256Hash(address) {
                return decodeCheck("sha256Hash", address);
            }
        },
        {
            key: "encodeSignedPayload",
            value: function encodeSignedPayload(data) {
                return encodeCheck("signedPayload", data);
            }
        },
        {
            key: "decodeSignedPayload",
            value: function decodeSignedPayload(address) {
                return decodeCheck("signedPayload", address);
            }
        },
        {
            key: "isValidSignedPayload",
            value: function isValidSignedPayload(address) {
                return isValid("signedPayload", address);
            }
        },
        {
            key: "getVersionByteForPrefix",
            value: function getVersionByteForPrefix(address) {
                return strkeyTypes[address[0]];
            }
        }
    ]);
    return StrKey;
}();
/**
 * Sanity-checks whether or not a strkey *appears* valid.
 *
 * @param  {string}  versionByteName the type of strkey to expect in `encoded`
 * @param  {string}  encoded         the strkey to validate
 *
 * @return {Boolean} whether or not the `encoded` strkey appears valid for the
 *     `versionByteName` strkey type (see `versionBytes`, above).
 *
 * @note This isn't a *definitive* check of validity, but rather a best-effort
 *     check based on (a) input length, (b) whether or not it can be decoded,
 *     and (c) output length.
 */ function isValid(versionByteName, encoded) {
    if (!(0, _isString2.default)(encoded)) return false;
    // basic length checks on the strkey lengths
    switch(versionByteName){
        case "ed25519PublicKey":
        case "ed25519SecretSeed":
        case "preAuthTx":
        case "sha256Hash":
            if (encoded.length !== 56) return false;
            break;
        case "med25519PublicKey":
            if (encoded.length !== 69) return false;
            break;
        case "signedPayload":
            if (encoded.length < 56 || encoded.length > 165) return false;
            break;
        default:
            return false;
    }
    var decoded = "";
    try {
        decoded = decodeCheck(versionByteName, encoded);
    } catch (err) {
        return false;
    }
    // basic length checks on the resulting buffer sizes
    switch(versionByteName){
        case "ed25519PublicKey":
        case "ed25519SecretSeed":
        case "preAuthTx":
        case "sha256Hash":
            return decoded.length === 32;
        case "med25519PublicKey":
            return decoded.length === 40; // +8 bytes for the ID
        case "signedPayload":
            return(// 32 for the signer, +4 for the payload size, then either +4 for the
            // min or +64 for the max payload
            decoded.length >= 40 && decoded.length <= 100);
        default:
            return false;
    }
}
function decodeCheck(versionByteName, encoded) {
    if (!(0, _isString2.default)(encoded)) throw new TypeError("encoded argument must be of type String");
    var decoded = _base2.default.decode(encoded);
    var versionByte = decoded[0];
    var payload = decoded.slice(0, -2);
    var data = payload.slice(1);
    var checksum = decoded.slice(-2);
    if (encoded !== _base2.default.encode(decoded)) throw new Error("invalid encoded string");
    var expectedVersion = versionBytes[versionByteName];
    if ((0, _isUndefined2.default)(expectedVersion)) throw new Error(versionByteName + " is not a valid version byte name. " + ("Expected one of " + Object.keys(versionBytes).join(", ")));
    if (versionByte !== expectedVersion) throw new Error("invalid version byte. expected " + expectedVersion + ", got " + versionByte);
    var expectedChecksum = calculateChecksum(payload);
    if (!(0, _checksum.verifyChecksum)(expectedChecksum, checksum)) throw new Error("invalid checksum");
    return Buffer.from(data);
}
function encodeCheck(versionByteName, data) {
    if ((0, _isNull2.default)(data) || (0, _isUndefined2.default)(data)) throw new Error("cannot encode null data");
    var versionByte = versionBytes[versionByteName];
    if ((0, _isUndefined2.default)(versionByte)) throw new Error(versionByteName + " is not a valid version byte name. " + ("Expected one of " + Object.keys(versionBytes).join(", ")));
    data = Buffer.from(data);
    var versionBuffer = Buffer.from([
        versionByte
    ]);
    var payload = Buffer.concat([
        versionBuffer,
        data
    ]);
    var checksum = calculateChecksum(payload);
    var unencoded = Buffer.concat([
        payload,
        checksum
    ]);
    return _base2.default.encode(unencoded);
}
// Computes the CRC16-XModem checksum of `payload` in little-endian order
function calculateChecksum(payload) {
    var checksum = Buffer.alloc(2);
    checksum.writeUInt16LE(_crc2.default.crc16xmodem(payload), 0);
    return checksum;
}

},{"6dd62dcafd9f038e":"fCgem","19e13da4999a4f13":"4IBqo","48617113cf4bf4a6":"7rzem","e1af3b7408e6fdb8":"aaheT","f9978332f2ad6d7c":"fJpci","3c388dcedc48a037":"iAF7t","33a74c0d29c4b07b":"fJ37S"}],"4IBqo":[function(require,module,exports) {
"use strict";
/**
 * Generate a character map.
 * @param {string} alphabet e.g. "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
 * @param {object} mappings map overrides from key to value
 * @method
 */ var charmap = function(alphabet, mappings) {
    mappings || (mappings = {});
    alphabet.split("").forEach(function(c, i) {
        if (!(c in mappings)) mappings[c] = i;
    });
    return mappings;
};
/**
 * The RFC 4648 base 32 alphabet and character map.
 * @see {@link https://tools.ietf.org/html/rfc4648}
 */ var rfc4648 = {
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    charmap: {
        0: 14,
        1: 8
    }
};
rfc4648.charmap = charmap(rfc4648.alphabet, rfc4648.charmap);
/**
 * The Crockford base 32 alphabet and character map.
 * @see {@link http://www.crockford.com/wrmg/base32.html}
 */ var crockford = {
    alphabet: "0123456789ABCDEFGHJKMNPQRSTVWXYZ",
    charmap: {
        O: 0,
        I: 1,
        L: 1
    }
};
crockford.charmap = charmap(crockford.alphabet, crockford.charmap);
/**
 * base32hex
 * @see {@link https://en.wikipedia.org/wiki/Base32#base32hex}
 */ var base32hex = {
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    charmap: {}
};
base32hex.charmap = charmap(base32hex.alphabet, base32hex.charmap);
/**
 * Create a new `Decoder` with the given options.
 *
 * @param {object} [options]
 *   @param {string} [type] Supported Base-32 variants are "rfc4648" and
 *     "crockford".
 *   @param {object} [charmap] Override the character map used in decoding.
 * @constructor
 */ function Decoder(options) {
    this.buf = [];
    this.shift = 8;
    this.carry = 0;
    if (options) {
        switch(options.type){
            case "rfc4648":
                this.charmap = exports.rfc4648.charmap;
                break;
            case "crockford":
                this.charmap = exports.crockford.charmap;
                break;
            case "base32hex":
                this.charmap = exports.base32hex.charmap;
                break;
            default:
                throw new Error("invalid type");
        }
        if (options.charmap) this.charmap = options.charmap;
    }
}
/**
 * The default character map coresponds to RFC4648.
 */ Decoder.prototype.charmap = rfc4648.charmap;
/**
 * Decode a string, continuing from the previous state.
 *
 * @param {string} str
 * @return {Decoder} this
 */ Decoder.prototype.write = function(str) {
    var charmap = this.charmap;
    var buf = this.buf;
    var shift = this.shift;
    var carry = this.carry;
    // decode string
    str.toUpperCase().split("").forEach(function(char) {
        // ignore padding
        if (char == "=") return;
        // lookup symbol
        var symbol = charmap[char] & 0xff;
        // 1: 00000 000
        // 2:          00 00000 0
        // 3:                    0000 0000
        // 4:                             0 00000 00
        // 5:                                       000 00000
        // 6:                                                00000 000
        // 7:                                                         00 00000 0
        shift -= 5;
        if (shift > 0) carry |= symbol << shift;
        else if (shift < 0) {
            buf.push(carry | symbol >> -shift);
            shift += 8;
            carry = symbol << shift & 0xff;
        } else {
            buf.push(carry | symbol);
            shift = 8;
            carry = 0;
        }
    });
    // save state
    this.shift = shift;
    this.carry = carry;
    // for chaining
    return this;
};
/**
 * Finish decoding.
 *
 * @param {string} [str] The final string to decode.
 * @return {Array} Decoded byte array.
 */ Decoder.prototype.finalize = function(str) {
    if (str) this.write(str);
    if (this.shift !== 8 && this.carry !== 0) {
        this.buf.push(this.carry);
        this.shift = 8;
        this.carry = 0;
    }
    return this.buf;
};
/**
 * Create a new `Encoder` with the given options.
 *
 * @param {object} [options]
 *   @param {string} [type] Supported Base-32 variants are "rfc4648" and
 *     "crockford".
 *   @param {object} [alphabet] Override the alphabet used in encoding.
 * @constructor
 */ function Encoder(options) {
    this.buf = "";
    this.shift = 3;
    this.carry = 0;
    if (options) {
        switch(options.type){
            case "rfc4648":
                this.alphabet = exports.rfc4648.alphabet;
                break;
            case "crockford":
                this.alphabet = exports.crockford.alphabet;
                break;
            case "base32hex":
                this.alphabet = exports.base32hex.alphabet;
                break;
            default:
                throw new Error("invalid type");
        }
        if (options.alphabet) this.alphabet = options.alphabet;
        else if (options.lc) this.alphabet = this.alphabet.toLowerCase();
    }
}
/**
 * The default alphabet coresponds to RFC4648.
 */ Encoder.prototype.alphabet = rfc4648.alphabet;
/**
 * Encode a byte array, continuing from the previous state.
 *
 * @param {byte[]} buf The byte array to encode.
 * @return {Encoder} this
 */ Encoder.prototype.write = function(buf) {
    var shift = this.shift;
    var carry = this.carry;
    var symbol;
    var byte;
    var i;
    // encode each byte in buf
    for(i = 0; i < buf.length; i++){
        byte = buf[i];
        // 1: 00000 000
        // 2:          00 00000 0
        // 3:                    0000 0000
        // 4:                             0 00000 00
        // 5:                                       000 00000
        // 6:                                                00000 000
        // 7:                                                         00 00000 0
        symbol = carry | byte >> shift;
        this.buf += this.alphabet[symbol & 0x1f];
        if (shift > 5) {
            shift -= 5;
            symbol = byte >> shift;
            this.buf += this.alphabet[symbol & 0x1f];
        }
        shift = 5 - shift;
        carry = byte << shift;
        shift = 8 - shift;
    }
    // save state
    this.shift = shift;
    this.carry = carry;
    // for chaining
    return this;
};
/**
 * Finish encoding.
 *
 * @param {byte[]} [buf] The final byte array to encode.
 * @return {string} The encoded byte array.
 */ Encoder.prototype.finalize = function(buf) {
    if (buf) this.write(buf);
    if (this.shift !== 3) {
        this.buf += this.alphabet[this.carry & 0x1f];
        this.shift = 3;
        this.carry = 0;
    }
    return this.buf;
};
/**
 * Convenience encoder.
 *
 * @param {byte[]} buf The byte array to encode.
 * @param {object} [options] Options to pass to the encoder.
 * @return {string} The encoded string.
 */ exports.encode = function(buf, options) {
    return new Encoder(options).finalize(buf);
};
/**
 * Convenience decoder.
 *
 * @param {string} str The string to decode.
 * @param {object} [options] Options to pass to the decoder.
 * @return {byte[]} The decoded byte array.
 */ exports.decode = function(str, options) {
    return new Decoder(options).finalize(str);
};
// Exports.
exports.Decoder = Decoder;
exports.Encoder = Encoder;
exports.charmap = charmap;
exports.crockford = crockford;
exports.rfc4648 = rfc4648;
exports.base32hex = base32hex;

},{}],"7rzem":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "crc1", ()=>(0, _crc1Default.default));
parcelHelpers.export(exports, "crc8", ()=>(0, _crc8Default.default));
parcelHelpers.export(exports, "crc81wire", ()=>(0, _crc81WireDefault.default));
parcelHelpers.export(exports, "crc16", ()=>(0, _crc16Default.default));
parcelHelpers.export(exports, "crc16ccitt", ()=>(0, _crc16CcittDefault.default));
parcelHelpers.export(exports, "crc16modbus", ()=>(0, _crc16ModbusDefault.default));
parcelHelpers.export(exports, "crc16xmodem", ()=>(0, _crc16XmodemDefault.default));
parcelHelpers.export(exports, "crc16kermit", ()=>(0, _crc16KermitDefault.default));
parcelHelpers.export(exports, "crc24", ()=>(0, _crc24Default.default));
parcelHelpers.export(exports, "crc32", ()=>(0, _crc32Default.default));
parcelHelpers.export(exports, "crcjam", ()=>(0, _crcjamDefault.default));
var _crc1 = require("./crc1");
var _crc1Default = parcelHelpers.interopDefault(_crc1);
var _crc8 = require("./crc8");
var _crc8Default = parcelHelpers.interopDefault(_crc8);
var _crc81Wire = require("./crc81wire");
var _crc81WireDefault = parcelHelpers.interopDefault(_crc81Wire);
var _crc16 = require("./crc16");
var _crc16Default = parcelHelpers.interopDefault(_crc16);
var _crc16Ccitt = require("./crc16ccitt");
var _crc16CcittDefault = parcelHelpers.interopDefault(_crc16Ccitt);
var _crc16Modbus = require("./crc16modbus");
var _crc16ModbusDefault = parcelHelpers.interopDefault(_crc16Modbus);
var _crc16Xmodem = require("./crc16xmodem");
var _crc16XmodemDefault = parcelHelpers.interopDefault(_crc16Xmodem);
var _crc16Kermit = require("./crc16kermit");
var _crc16KermitDefault = parcelHelpers.interopDefault(_crc16Kermit);
var _crc24 = require("./crc24");
var _crc24Default = parcelHelpers.interopDefault(_crc24);
var _crc32 = require("./crc32");
var _crc32Default = parcelHelpers.interopDefault(_crc32);
var _crcjam = require("./crcjam");
var _crcjamDefault = parcelHelpers.interopDefault(_crcjam);
exports.default = {
    crc1: (0, _crc1Default.default),
    crc8: (0, _crc8Default.default),
    crc81wire: (0, _crc81WireDefault.default),
    crc16: (0, _crc16Default.default),
    crc16ccitt: (0, _crc16CcittDefault.default),
    crc16modbus: (0, _crc16ModbusDefault.default),
    crc16xmodem: (0, _crc16XmodemDefault.default),
    crc16kermit: (0, _crc16KermitDefault.default),
    crc24: (0, _crc24Default.default),
    crc32: (0, _crc32Default.default),
    crcjam: (0, _crcjamDefault.default)
};

},{"./crc1":"7F3HJ","./crc8":"gj3Du","./crc81wire":"8VdhJ","./crc16":"ez2Qp","./crc16ccitt":"99J2n","./crc16modbus":"lFstG","./crc16xmodem":"kTmJb","./crc16kermit":"57QmV","./crc24":"ibqqY","./crc32":"6nfiL","./crcjam":"hxBAZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7F3HJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
const crc1 = (0, _defineCrcDefault.default)("crc1", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = ~~previous;
    let accum = 0;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        accum += byte;
    }
    crc += accum % 256;
    return crc % 256;
});
exports.default = crc1;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kUnL5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
const createBuffer = (0, _buffer.Buffer).from && (0, _buffer.Buffer).alloc && (0, _buffer.Buffer).allocUnsafe && (0, _buffer.Buffer).allocUnsafeSlow ? (0, _buffer.Buffer).from : (val)=>new (0, _buffer.Buffer)(val);
exports.default = createBuffer;

},{"buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ife5e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = function(model, calc) {
    const fn = (buf, previous)=>calc(buf, previous) >>> 0;
    fn.signed = calc;
    fn.unsigned = fn;
    fn.model = model;
    return fn;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gj3Du":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-8 --generate=c`
// prettier-ignore
let TABLE = [
    0x00,
    0x07,
    0x0e,
    0x09,
    0x1c,
    0x1b,
    0x12,
    0x15,
    0x38,
    0x3f,
    0x36,
    0x31,
    0x24,
    0x23,
    0x2a,
    0x2d,
    0x70,
    0x77,
    0x7e,
    0x79,
    0x6c,
    0x6b,
    0x62,
    0x65,
    0x48,
    0x4f,
    0x46,
    0x41,
    0x54,
    0x53,
    0x5a,
    0x5d,
    0xe0,
    0xe7,
    0xee,
    0xe9,
    0xfc,
    0xfb,
    0xf2,
    0xf5,
    0xd8,
    0xdf,
    0xd6,
    0xd1,
    0xc4,
    0xc3,
    0xca,
    0xcd,
    0x90,
    0x97,
    0x9e,
    0x99,
    0x8c,
    0x8b,
    0x82,
    0x85,
    0xa8,
    0xaf,
    0xa6,
    0xa1,
    0xb4,
    0xb3,
    0xba,
    0xbd,
    0xc7,
    0xc0,
    0xc9,
    0xce,
    0xdb,
    0xdc,
    0xd5,
    0xd2,
    0xff,
    0xf8,
    0xf1,
    0xf6,
    0xe3,
    0xe4,
    0xed,
    0xea,
    0xb7,
    0xb0,
    0xb9,
    0xbe,
    0xab,
    0xac,
    0xa5,
    0xa2,
    0x8f,
    0x88,
    0x81,
    0x86,
    0x93,
    0x94,
    0x9d,
    0x9a,
    0x27,
    0x20,
    0x29,
    0x2e,
    0x3b,
    0x3c,
    0x35,
    0x32,
    0x1f,
    0x18,
    0x11,
    0x16,
    0x03,
    0x04,
    0x0d,
    0x0a,
    0x57,
    0x50,
    0x59,
    0x5e,
    0x4b,
    0x4c,
    0x45,
    0x42,
    0x6f,
    0x68,
    0x61,
    0x66,
    0x73,
    0x74,
    0x7d,
    0x7a,
    0x89,
    0x8e,
    0x87,
    0x80,
    0x95,
    0x92,
    0x9b,
    0x9c,
    0xb1,
    0xb6,
    0xbf,
    0xb8,
    0xad,
    0xaa,
    0xa3,
    0xa4,
    0xf9,
    0xfe,
    0xf7,
    0xf0,
    0xe5,
    0xe2,
    0xeb,
    0xec,
    0xc1,
    0xc6,
    0xcf,
    0xc8,
    0xdd,
    0xda,
    0xd3,
    0xd4,
    0x69,
    0x6e,
    0x67,
    0x60,
    0x75,
    0x72,
    0x7b,
    0x7c,
    0x51,
    0x56,
    0x5f,
    0x58,
    0x4d,
    0x4a,
    0x43,
    0x44,
    0x19,
    0x1e,
    0x17,
    0x10,
    0x05,
    0x02,
    0x0b,
    0x0c,
    0x21,
    0x26,
    0x2f,
    0x28,
    0x3d,
    0x3a,
    0x33,
    0x34,
    0x4e,
    0x49,
    0x40,
    0x47,
    0x52,
    0x55,
    0x5c,
    0x5b,
    0x76,
    0x71,
    0x78,
    0x7f,
    0x6a,
    0x6d,
    0x64,
    0x63,
    0x3e,
    0x39,
    0x30,
    0x37,
    0x22,
    0x25,
    0x2c,
    0x2b,
    0x06,
    0x01,
    0x08,
    0x0f,
    0x1a,
    0x1d,
    0x14,
    0x13,
    0xae,
    0xa9,
    0xa0,
    0xa7,
    0xb2,
    0xb5,
    0xbc,
    0xbb,
    0x96,
    0x91,
    0x98,
    0x9f,
    0x8a,
    0x8d,
    0x84,
    0x83,
    0xde,
    0xd9,
    0xd0,
    0xd7,
    0xc2,
    0xc5,
    0xcc,
    0xcb,
    0xe6,
    0xe1,
    0xe8,
    0xef,
    0xfa,
    0xfd,
    0xf4,
    0xf3
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc8 = (0, _defineCrcDefault.default)("crc-8", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = ~~previous;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = TABLE[(crc ^ byte) & 0xff] & 0xff;
    }
    return crc;
});
exports.default = crc8;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8VdhJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=dallas-1-wire --generate=c`
// prettier-ignore
let TABLE = [
    0x00,
    0x5e,
    0xbc,
    0xe2,
    0x61,
    0x3f,
    0xdd,
    0x83,
    0xc2,
    0x9c,
    0x7e,
    0x20,
    0xa3,
    0xfd,
    0x1f,
    0x41,
    0x9d,
    0xc3,
    0x21,
    0x7f,
    0xfc,
    0xa2,
    0x40,
    0x1e,
    0x5f,
    0x01,
    0xe3,
    0xbd,
    0x3e,
    0x60,
    0x82,
    0xdc,
    0x23,
    0x7d,
    0x9f,
    0xc1,
    0x42,
    0x1c,
    0xfe,
    0xa0,
    0xe1,
    0xbf,
    0x5d,
    0x03,
    0x80,
    0xde,
    0x3c,
    0x62,
    0xbe,
    0xe0,
    0x02,
    0x5c,
    0xdf,
    0x81,
    0x63,
    0x3d,
    0x7c,
    0x22,
    0xc0,
    0x9e,
    0x1d,
    0x43,
    0xa1,
    0xff,
    0x46,
    0x18,
    0xfa,
    0xa4,
    0x27,
    0x79,
    0x9b,
    0xc5,
    0x84,
    0xda,
    0x38,
    0x66,
    0xe5,
    0xbb,
    0x59,
    0x07,
    0xdb,
    0x85,
    0x67,
    0x39,
    0xba,
    0xe4,
    0x06,
    0x58,
    0x19,
    0x47,
    0xa5,
    0xfb,
    0x78,
    0x26,
    0xc4,
    0x9a,
    0x65,
    0x3b,
    0xd9,
    0x87,
    0x04,
    0x5a,
    0xb8,
    0xe6,
    0xa7,
    0xf9,
    0x1b,
    0x45,
    0xc6,
    0x98,
    0x7a,
    0x24,
    0xf8,
    0xa6,
    0x44,
    0x1a,
    0x99,
    0xc7,
    0x25,
    0x7b,
    0x3a,
    0x64,
    0x86,
    0xd8,
    0x5b,
    0x05,
    0xe7,
    0xb9,
    0x8c,
    0xd2,
    0x30,
    0x6e,
    0xed,
    0xb3,
    0x51,
    0x0f,
    0x4e,
    0x10,
    0xf2,
    0xac,
    0x2f,
    0x71,
    0x93,
    0xcd,
    0x11,
    0x4f,
    0xad,
    0xf3,
    0x70,
    0x2e,
    0xcc,
    0x92,
    0xd3,
    0x8d,
    0x6f,
    0x31,
    0xb2,
    0xec,
    0x0e,
    0x50,
    0xaf,
    0xf1,
    0x13,
    0x4d,
    0xce,
    0x90,
    0x72,
    0x2c,
    0x6d,
    0x33,
    0xd1,
    0x8f,
    0x0c,
    0x52,
    0xb0,
    0xee,
    0x32,
    0x6c,
    0x8e,
    0xd0,
    0x53,
    0x0d,
    0xef,
    0xb1,
    0xf0,
    0xae,
    0x4c,
    0x12,
    0x91,
    0xcf,
    0x2d,
    0x73,
    0xca,
    0x94,
    0x76,
    0x28,
    0xab,
    0xf5,
    0x17,
    0x49,
    0x08,
    0x56,
    0xb4,
    0xea,
    0x69,
    0x37,
    0xd5,
    0x8b,
    0x57,
    0x09,
    0xeb,
    0xb5,
    0x36,
    0x68,
    0x8a,
    0xd4,
    0x95,
    0xcb,
    0x29,
    0x77,
    0xf4,
    0xaa,
    0x48,
    0x16,
    0xe9,
    0xb7,
    0x55,
    0x0b,
    0x88,
    0xd6,
    0x34,
    0x6a,
    0x2b,
    0x75,
    0x97,
    0xc9,
    0x4a,
    0x14,
    0xf6,
    0xa8,
    0x74,
    0x2a,
    0xc8,
    0x96,
    0x15,
    0x4b,
    0xa9,
    0xf7,
    0xb6,
    0xe8,
    0x0a,
    0x54,
    0xd7,
    0x89,
    0x6b,
    0x35
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc81wire = (0, _defineCrcDefault.default)("dallas-1-wire", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = ~~previous;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = TABLE[(crc ^ byte) & 0xff] & 0xff;
    }
    return crc;
});
exports.default = crc81wire;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ez2Qp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16 --generate=c`
// prettier-ignore
let TABLE = [
    0x0000,
    0xc0c1,
    0xc181,
    0x0140,
    0xc301,
    0x03c0,
    0x0280,
    0xc241,
    0xc601,
    0x06c0,
    0x0780,
    0xc741,
    0x0500,
    0xc5c1,
    0xc481,
    0x0440,
    0xcc01,
    0x0cc0,
    0x0d80,
    0xcd41,
    0x0f00,
    0xcfc1,
    0xce81,
    0x0e40,
    0x0a00,
    0xcac1,
    0xcb81,
    0x0b40,
    0xc901,
    0x09c0,
    0x0880,
    0xc841,
    0xd801,
    0x18c0,
    0x1980,
    0xd941,
    0x1b00,
    0xdbc1,
    0xda81,
    0x1a40,
    0x1e00,
    0xdec1,
    0xdf81,
    0x1f40,
    0xdd01,
    0x1dc0,
    0x1c80,
    0xdc41,
    0x1400,
    0xd4c1,
    0xd581,
    0x1540,
    0xd701,
    0x17c0,
    0x1680,
    0xd641,
    0xd201,
    0x12c0,
    0x1380,
    0xd341,
    0x1100,
    0xd1c1,
    0xd081,
    0x1040,
    0xf001,
    0x30c0,
    0x3180,
    0xf141,
    0x3300,
    0xf3c1,
    0xf281,
    0x3240,
    0x3600,
    0xf6c1,
    0xf781,
    0x3740,
    0xf501,
    0x35c0,
    0x3480,
    0xf441,
    0x3c00,
    0xfcc1,
    0xfd81,
    0x3d40,
    0xff01,
    0x3fc0,
    0x3e80,
    0xfe41,
    0xfa01,
    0x3ac0,
    0x3b80,
    0xfb41,
    0x3900,
    0xf9c1,
    0xf881,
    0x3840,
    0x2800,
    0xe8c1,
    0xe981,
    0x2940,
    0xeb01,
    0x2bc0,
    0x2a80,
    0xea41,
    0xee01,
    0x2ec0,
    0x2f80,
    0xef41,
    0x2d00,
    0xedc1,
    0xec81,
    0x2c40,
    0xe401,
    0x24c0,
    0x2580,
    0xe541,
    0x2700,
    0xe7c1,
    0xe681,
    0x2640,
    0x2200,
    0xe2c1,
    0xe381,
    0x2340,
    0xe101,
    0x21c0,
    0x2080,
    0xe041,
    0xa001,
    0x60c0,
    0x6180,
    0xa141,
    0x6300,
    0xa3c1,
    0xa281,
    0x6240,
    0x6600,
    0xa6c1,
    0xa781,
    0x6740,
    0xa501,
    0x65c0,
    0x6480,
    0xa441,
    0x6c00,
    0xacc1,
    0xad81,
    0x6d40,
    0xaf01,
    0x6fc0,
    0x6e80,
    0xae41,
    0xaa01,
    0x6ac0,
    0x6b80,
    0xab41,
    0x6900,
    0xa9c1,
    0xa881,
    0x6840,
    0x7800,
    0xb8c1,
    0xb981,
    0x7940,
    0xbb01,
    0x7bc0,
    0x7a80,
    0xba41,
    0xbe01,
    0x7ec0,
    0x7f80,
    0xbf41,
    0x7d00,
    0xbdc1,
    0xbc81,
    0x7c40,
    0xb401,
    0x74c0,
    0x7580,
    0xb541,
    0x7700,
    0xb7c1,
    0xb681,
    0x7640,
    0x7200,
    0xb2c1,
    0xb381,
    0x7340,
    0xb101,
    0x71c0,
    0x7080,
    0xb041,
    0x5000,
    0x90c1,
    0x9181,
    0x5140,
    0x9301,
    0x53c0,
    0x5280,
    0x9241,
    0x9601,
    0x56c0,
    0x5780,
    0x9741,
    0x5500,
    0x95c1,
    0x9481,
    0x5440,
    0x9c01,
    0x5cc0,
    0x5d80,
    0x9d41,
    0x5f00,
    0x9fc1,
    0x9e81,
    0x5e40,
    0x5a00,
    0x9ac1,
    0x9b81,
    0x5b40,
    0x9901,
    0x59c0,
    0x5880,
    0x9841,
    0x8801,
    0x48c0,
    0x4980,
    0x8941,
    0x4b00,
    0x8bc1,
    0x8a81,
    0x4a40,
    0x4e00,
    0x8ec1,
    0x8f81,
    0x4f40,
    0x8d01,
    0x4dc0,
    0x4c80,
    0x8c41,
    0x4400,
    0x84c1,
    0x8581,
    0x4540,
    0x8701,
    0x47c0,
    0x4680,
    0x8641,
    0x8201,
    0x42c0,
    0x4380,
    0x8341,
    0x4100,
    0x81c1,
    0x8081,
    0x4040
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc16 = (0, _defineCrcDefault.default)("crc-16", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = ~~previous;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
    }
    return crc;
});
exports.default = crc16;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99J2n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=ccitt --generate=c`
// prettier-ignore
let TABLE = [
    0x0000,
    0x1021,
    0x2042,
    0x3063,
    0x4084,
    0x50a5,
    0x60c6,
    0x70e7,
    0x8108,
    0x9129,
    0xa14a,
    0xb16b,
    0xc18c,
    0xd1ad,
    0xe1ce,
    0xf1ef,
    0x1231,
    0x0210,
    0x3273,
    0x2252,
    0x52b5,
    0x4294,
    0x72f7,
    0x62d6,
    0x9339,
    0x8318,
    0xb37b,
    0xa35a,
    0xd3bd,
    0xc39c,
    0xf3ff,
    0xe3de,
    0x2462,
    0x3443,
    0x0420,
    0x1401,
    0x64e6,
    0x74c7,
    0x44a4,
    0x5485,
    0xa56a,
    0xb54b,
    0x8528,
    0x9509,
    0xe5ee,
    0xf5cf,
    0xc5ac,
    0xd58d,
    0x3653,
    0x2672,
    0x1611,
    0x0630,
    0x76d7,
    0x66f6,
    0x5695,
    0x46b4,
    0xb75b,
    0xa77a,
    0x9719,
    0x8738,
    0xf7df,
    0xe7fe,
    0xd79d,
    0xc7bc,
    0x48c4,
    0x58e5,
    0x6886,
    0x78a7,
    0x0840,
    0x1861,
    0x2802,
    0x3823,
    0xc9cc,
    0xd9ed,
    0xe98e,
    0xf9af,
    0x8948,
    0x9969,
    0xa90a,
    0xb92b,
    0x5af5,
    0x4ad4,
    0x7ab7,
    0x6a96,
    0x1a71,
    0x0a50,
    0x3a33,
    0x2a12,
    0xdbfd,
    0xcbdc,
    0xfbbf,
    0xeb9e,
    0x9b79,
    0x8b58,
    0xbb3b,
    0xab1a,
    0x6ca6,
    0x7c87,
    0x4ce4,
    0x5cc5,
    0x2c22,
    0x3c03,
    0x0c60,
    0x1c41,
    0xedae,
    0xfd8f,
    0xcdec,
    0xddcd,
    0xad2a,
    0xbd0b,
    0x8d68,
    0x9d49,
    0x7e97,
    0x6eb6,
    0x5ed5,
    0x4ef4,
    0x3e13,
    0x2e32,
    0x1e51,
    0x0e70,
    0xff9f,
    0xefbe,
    0xdfdd,
    0xcffc,
    0xbf1b,
    0xaf3a,
    0x9f59,
    0x8f78,
    0x9188,
    0x81a9,
    0xb1ca,
    0xa1eb,
    0xd10c,
    0xc12d,
    0xf14e,
    0xe16f,
    0x1080,
    0x00a1,
    0x30c2,
    0x20e3,
    0x5004,
    0x4025,
    0x7046,
    0x6067,
    0x83b9,
    0x9398,
    0xa3fb,
    0xb3da,
    0xc33d,
    0xd31c,
    0xe37f,
    0xf35e,
    0x02b1,
    0x1290,
    0x22f3,
    0x32d2,
    0x4235,
    0x5214,
    0x6277,
    0x7256,
    0xb5ea,
    0xa5cb,
    0x95a8,
    0x8589,
    0xf56e,
    0xe54f,
    0xd52c,
    0xc50d,
    0x34e2,
    0x24c3,
    0x14a0,
    0x0481,
    0x7466,
    0x6447,
    0x5424,
    0x4405,
    0xa7db,
    0xb7fa,
    0x8799,
    0x97b8,
    0xe75f,
    0xf77e,
    0xc71d,
    0xd73c,
    0x26d3,
    0x36f2,
    0x0691,
    0x16b0,
    0x6657,
    0x7676,
    0x4615,
    0x5634,
    0xd94c,
    0xc96d,
    0xf90e,
    0xe92f,
    0x99c8,
    0x89e9,
    0xb98a,
    0xa9ab,
    0x5844,
    0x4865,
    0x7806,
    0x6827,
    0x18c0,
    0x08e1,
    0x3882,
    0x28a3,
    0xcb7d,
    0xdb5c,
    0xeb3f,
    0xfb1e,
    0x8bf9,
    0x9bd8,
    0xabbb,
    0xbb9a,
    0x4a75,
    0x5a54,
    0x6a37,
    0x7a16,
    0x0af1,
    0x1ad0,
    0x2ab3,
    0x3a92,
    0xfd2e,
    0xed0f,
    0xdd6c,
    0xcd4d,
    0xbdaa,
    0xad8b,
    0x9de8,
    0x8dc9,
    0x7c26,
    0x6c07,
    0x5c64,
    0x4c45,
    0x3ca2,
    0x2c83,
    0x1ce0,
    0x0cc1,
    0xef1f,
    0xff3e,
    0xcf5d,
    0xdf7c,
    0xaf9b,
    0xbfba,
    0x8fd9,
    0x9ff8,
    0x6e17,
    0x7e36,
    0x4e55,
    0x5e74,
    0x2e93,
    0x3eb2,
    0x0ed1,
    0x1ef0
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc16ccitt = (0, _defineCrcDefault.default)("ccitt", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = typeof previous !== "undefined" ? ~~previous : 0xffff;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = (TABLE[(crc >> 8 ^ byte) & 0xff] ^ crc << 8) & 0xffff;
    }
    return crc;
});
exports.default = crc16ccitt;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFstG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16-modbus --generate=c`
// prettier-ignore
let TABLE = [
    0x0000,
    0xc0c1,
    0xc181,
    0x0140,
    0xc301,
    0x03c0,
    0x0280,
    0xc241,
    0xc601,
    0x06c0,
    0x0780,
    0xc741,
    0x0500,
    0xc5c1,
    0xc481,
    0x0440,
    0xcc01,
    0x0cc0,
    0x0d80,
    0xcd41,
    0x0f00,
    0xcfc1,
    0xce81,
    0x0e40,
    0x0a00,
    0xcac1,
    0xcb81,
    0x0b40,
    0xc901,
    0x09c0,
    0x0880,
    0xc841,
    0xd801,
    0x18c0,
    0x1980,
    0xd941,
    0x1b00,
    0xdbc1,
    0xda81,
    0x1a40,
    0x1e00,
    0xdec1,
    0xdf81,
    0x1f40,
    0xdd01,
    0x1dc0,
    0x1c80,
    0xdc41,
    0x1400,
    0xd4c1,
    0xd581,
    0x1540,
    0xd701,
    0x17c0,
    0x1680,
    0xd641,
    0xd201,
    0x12c0,
    0x1380,
    0xd341,
    0x1100,
    0xd1c1,
    0xd081,
    0x1040,
    0xf001,
    0x30c0,
    0x3180,
    0xf141,
    0x3300,
    0xf3c1,
    0xf281,
    0x3240,
    0x3600,
    0xf6c1,
    0xf781,
    0x3740,
    0xf501,
    0x35c0,
    0x3480,
    0xf441,
    0x3c00,
    0xfcc1,
    0xfd81,
    0x3d40,
    0xff01,
    0x3fc0,
    0x3e80,
    0xfe41,
    0xfa01,
    0x3ac0,
    0x3b80,
    0xfb41,
    0x3900,
    0xf9c1,
    0xf881,
    0x3840,
    0x2800,
    0xe8c1,
    0xe981,
    0x2940,
    0xeb01,
    0x2bc0,
    0x2a80,
    0xea41,
    0xee01,
    0x2ec0,
    0x2f80,
    0xef41,
    0x2d00,
    0xedc1,
    0xec81,
    0x2c40,
    0xe401,
    0x24c0,
    0x2580,
    0xe541,
    0x2700,
    0xe7c1,
    0xe681,
    0x2640,
    0x2200,
    0xe2c1,
    0xe381,
    0x2340,
    0xe101,
    0x21c0,
    0x2080,
    0xe041,
    0xa001,
    0x60c0,
    0x6180,
    0xa141,
    0x6300,
    0xa3c1,
    0xa281,
    0x6240,
    0x6600,
    0xa6c1,
    0xa781,
    0x6740,
    0xa501,
    0x65c0,
    0x6480,
    0xa441,
    0x6c00,
    0xacc1,
    0xad81,
    0x6d40,
    0xaf01,
    0x6fc0,
    0x6e80,
    0xae41,
    0xaa01,
    0x6ac0,
    0x6b80,
    0xab41,
    0x6900,
    0xa9c1,
    0xa881,
    0x6840,
    0x7800,
    0xb8c1,
    0xb981,
    0x7940,
    0xbb01,
    0x7bc0,
    0x7a80,
    0xba41,
    0xbe01,
    0x7ec0,
    0x7f80,
    0xbf41,
    0x7d00,
    0xbdc1,
    0xbc81,
    0x7c40,
    0xb401,
    0x74c0,
    0x7580,
    0xb541,
    0x7700,
    0xb7c1,
    0xb681,
    0x7640,
    0x7200,
    0xb2c1,
    0xb381,
    0x7340,
    0xb101,
    0x71c0,
    0x7080,
    0xb041,
    0x5000,
    0x90c1,
    0x9181,
    0x5140,
    0x9301,
    0x53c0,
    0x5280,
    0x9241,
    0x9601,
    0x56c0,
    0x5780,
    0x9741,
    0x5500,
    0x95c1,
    0x9481,
    0x5440,
    0x9c01,
    0x5cc0,
    0x5d80,
    0x9d41,
    0x5f00,
    0x9fc1,
    0x9e81,
    0x5e40,
    0x5a00,
    0x9ac1,
    0x9b81,
    0x5b40,
    0x9901,
    0x59c0,
    0x5880,
    0x9841,
    0x8801,
    0x48c0,
    0x4980,
    0x8941,
    0x4b00,
    0x8bc1,
    0x8a81,
    0x4a40,
    0x4e00,
    0x8ec1,
    0x8f81,
    0x4f40,
    0x8d01,
    0x4dc0,
    0x4c80,
    0x8c41,
    0x4400,
    0x84c1,
    0x8581,
    0x4540,
    0x8701,
    0x47c0,
    0x4680,
    0x8641,
    0x8201,
    0x42c0,
    0x4380,
    0x8341,
    0x4100,
    0x81c1,
    0x8081,
    0x4040
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc16modbus = (0, _defineCrcDefault.default)("crc-16-modbus", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = typeof previous !== "undefined" ? ~~previous : 0xffff;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
    }
    return crc;
});
exports.default = crc16modbus;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kTmJb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
const crc16xmodem = (0, _defineCrcDefault.default)("xmodem", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = typeof previous !== "undefined" ? ~~previous : 0x0;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        let code = crc >>> 8 & 0xff;
        code ^= byte & 0xff;
        code ^= code >>> 4;
        crc = crc << 8 & 0xffff;
        crc ^= code;
        code = code << 5 & 0xffff;
        crc ^= code;
        code = code << 7 & 0xffff;
        crc ^= code;
    }
    return crc;
});
exports.default = crc16xmodem;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"57QmV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=kermit --generate=c`
// prettier-ignore
let TABLE = [
    0x0000,
    0x1189,
    0x2312,
    0x329b,
    0x4624,
    0x57ad,
    0x6536,
    0x74bf,
    0x8c48,
    0x9dc1,
    0xaf5a,
    0xbed3,
    0xca6c,
    0xdbe5,
    0xe97e,
    0xf8f7,
    0x1081,
    0x0108,
    0x3393,
    0x221a,
    0x56a5,
    0x472c,
    0x75b7,
    0x643e,
    0x9cc9,
    0x8d40,
    0xbfdb,
    0xae52,
    0xdaed,
    0xcb64,
    0xf9ff,
    0xe876,
    0x2102,
    0x308b,
    0x0210,
    0x1399,
    0x6726,
    0x76af,
    0x4434,
    0x55bd,
    0xad4a,
    0xbcc3,
    0x8e58,
    0x9fd1,
    0xeb6e,
    0xfae7,
    0xc87c,
    0xd9f5,
    0x3183,
    0x200a,
    0x1291,
    0x0318,
    0x77a7,
    0x662e,
    0x54b5,
    0x453c,
    0xbdcb,
    0xac42,
    0x9ed9,
    0x8f50,
    0xfbef,
    0xea66,
    0xd8fd,
    0xc974,
    0x4204,
    0x538d,
    0x6116,
    0x709f,
    0x0420,
    0x15a9,
    0x2732,
    0x36bb,
    0xce4c,
    0xdfc5,
    0xed5e,
    0xfcd7,
    0x8868,
    0x99e1,
    0xab7a,
    0xbaf3,
    0x5285,
    0x430c,
    0x7197,
    0x601e,
    0x14a1,
    0x0528,
    0x37b3,
    0x263a,
    0xdecd,
    0xcf44,
    0xfddf,
    0xec56,
    0x98e9,
    0x8960,
    0xbbfb,
    0xaa72,
    0x6306,
    0x728f,
    0x4014,
    0x519d,
    0x2522,
    0x34ab,
    0x0630,
    0x17b9,
    0xef4e,
    0xfec7,
    0xcc5c,
    0xddd5,
    0xa96a,
    0xb8e3,
    0x8a78,
    0x9bf1,
    0x7387,
    0x620e,
    0x5095,
    0x411c,
    0x35a3,
    0x242a,
    0x16b1,
    0x0738,
    0xffcf,
    0xee46,
    0xdcdd,
    0xcd54,
    0xb9eb,
    0xa862,
    0x9af9,
    0x8b70,
    0x8408,
    0x9581,
    0xa71a,
    0xb693,
    0xc22c,
    0xd3a5,
    0xe13e,
    0xf0b7,
    0x0840,
    0x19c9,
    0x2b52,
    0x3adb,
    0x4e64,
    0x5fed,
    0x6d76,
    0x7cff,
    0x9489,
    0x8500,
    0xb79b,
    0xa612,
    0xd2ad,
    0xc324,
    0xf1bf,
    0xe036,
    0x18c1,
    0x0948,
    0x3bd3,
    0x2a5a,
    0x5ee5,
    0x4f6c,
    0x7df7,
    0x6c7e,
    0xa50a,
    0xb483,
    0x8618,
    0x9791,
    0xe32e,
    0xf2a7,
    0xc03c,
    0xd1b5,
    0x2942,
    0x38cb,
    0x0a50,
    0x1bd9,
    0x6f66,
    0x7eef,
    0x4c74,
    0x5dfd,
    0xb58b,
    0xa402,
    0x9699,
    0x8710,
    0xf3af,
    0xe226,
    0xd0bd,
    0xc134,
    0x39c3,
    0x284a,
    0x1ad1,
    0x0b58,
    0x7fe7,
    0x6e6e,
    0x5cf5,
    0x4d7c,
    0xc60c,
    0xd785,
    0xe51e,
    0xf497,
    0x8028,
    0x91a1,
    0xa33a,
    0xb2b3,
    0x4a44,
    0x5bcd,
    0x6956,
    0x78df,
    0x0c60,
    0x1de9,
    0x2f72,
    0x3efb,
    0xd68d,
    0xc704,
    0xf59f,
    0xe416,
    0x90a9,
    0x8120,
    0xb3bb,
    0xa232,
    0x5ac5,
    0x4b4c,
    0x79d7,
    0x685e,
    0x1ce1,
    0x0d68,
    0x3ff3,
    0x2e7a,
    0xe70e,
    0xf687,
    0xc41c,
    0xd595,
    0xa12a,
    0xb0a3,
    0x8238,
    0x93b1,
    0x6b46,
    0x7acf,
    0x4854,
    0x59dd,
    0x2d62,
    0x3ceb,
    0x0e70,
    0x1ff9,
    0xf78f,
    0xe606,
    0xd49d,
    0xc514,
    0xb1ab,
    0xa022,
    0x92b9,
    0x8330,
    0x7bc7,
    0x6a4e,
    0x58d5,
    0x495c,
    0x3de3,
    0x2c6a,
    0x1ef1,
    0x0f78
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc16kermit = (0, _defineCrcDefault.default)("kermit", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = typeof previous !== "undefined" ? ~~previous : 0x0000;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;
    }
    return crc;
});
exports.default = crc16kermit;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ibqqY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-drive --model=crc-24 --generate=c`
// prettier-ignore
let TABLE = [
    0x000000,
    0x864cfb,
    0x8ad50d,
    0x0c99f6,
    0x93e6e1,
    0x15aa1a,
    0x1933ec,
    0x9f7f17,
    0xa18139,
    0x27cdc2,
    0x2b5434,
    0xad18cf,
    0x3267d8,
    0xb42b23,
    0xb8b2d5,
    0x3efe2e,
    0xc54e89,
    0x430272,
    0x4f9b84,
    0xc9d77f,
    0x56a868,
    0xd0e493,
    0xdc7d65,
    0x5a319e,
    0x64cfb0,
    0xe2834b,
    0xee1abd,
    0x685646,
    0xf72951,
    0x7165aa,
    0x7dfc5c,
    0xfbb0a7,
    0x0cd1e9,
    0x8a9d12,
    0x8604e4,
    0x00481f,
    0x9f3708,
    0x197bf3,
    0x15e205,
    0x93aefe,
    0xad50d0,
    0x2b1c2b,
    0x2785dd,
    0xa1c926,
    0x3eb631,
    0xb8faca,
    0xb4633c,
    0x322fc7,
    0xc99f60,
    0x4fd39b,
    0x434a6d,
    0xc50696,
    0x5a7981,
    0xdc357a,
    0xd0ac8c,
    0x56e077,
    0x681e59,
    0xee52a2,
    0xe2cb54,
    0x6487af,
    0xfbf8b8,
    0x7db443,
    0x712db5,
    0xf7614e,
    0x19a3d2,
    0x9fef29,
    0x9376df,
    0x153a24,
    0x8a4533,
    0x0c09c8,
    0x00903e,
    0x86dcc5,
    0xb822eb,
    0x3e6e10,
    0x32f7e6,
    0xb4bb1d,
    0x2bc40a,
    0xad88f1,
    0xa11107,
    0x275dfc,
    0xdced5b,
    0x5aa1a0,
    0x563856,
    0xd074ad,
    0x4f0bba,
    0xc94741,
    0xc5deb7,
    0x43924c,
    0x7d6c62,
    0xfb2099,
    0xf7b96f,
    0x71f594,
    0xee8a83,
    0x68c678,
    0x645f8e,
    0xe21375,
    0x15723b,
    0x933ec0,
    0x9fa736,
    0x19ebcd,
    0x8694da,
    0x00d821,
    0x0c41d7,
    0x8a0d2c,
    0xb4f302,
    0x32bff9,
    0x3e260f,
    0xb86af4,
    0x2715e3,
    0xa15918,
    0xadc0ee,
    0x2b8c15,
    0xd03cb2,
    0x567049,
    0x5ae9bf,
    0xdca544,
    0x43da53,
    0xc596a8,
    0xc90f5e,
    0x4f43a5,
    0x71bd8b,
    0xf7f170,
    0xfb6886,
    0x7d247d,
    0xe25b6a,
    0x641791,
    0x688e67,
    0xeec29c,
    0x3347a4,
    0xb50b5f,
    0xb992a9,
    0x3fde52,
    0xa0a145,
    0x26edbe,
    0x2a7448,
    0xac38b3,
    0x92c69d,
    0x148a66,
    0x181390,
    0x9e5f6b,
    0x01207c,
    0x876c87,
    0x8bf571,
    0x0db98a,
    0xf6092d,
    0x7045d6,
    0x7cdc20,
    0xfa90db,
    0x65efcc,
    0xe3a337,
    0xef3ac1,
    0x69763a,
    0x578814,
    0xd1c4ef,
    0xdd5d19,
    0x5b11e2,
    0xc46ef5,
    0x42220e,
    0x4ebbf8,
    0xc8f703,
    0x3f964d,
    0xb9dab6,
    0xb54340,
    0x330fbb,
    0xac70ac,
    0x2a3c57,
    0x26a5a1,
    0xa0e95a,
    0x9e1774,
    0x185b8f,
    0x14c279,
    0x928e82,
    0x0df195,
    0x8bbd6e,
    0x872498,
    0x016863,
    0xfad8c4,
    0x7c943f,
    0x700dc9,
    0xf64132,
    0x693e25,
    0xef72de,
    0xe3eb28,
    0x65a7d3,
    0x5b59fd,
    0xdd1506,
    0xd18cf0,
    0x57c00b,
    0xc8bf1c,
    0x4ef3e7,
    0x426a11,
    0xc426ea,
    0x2ae476,
    0xaca88d,
    0xa0317b,
    0x267d80,
    0xb90297,
    0x3f4e6c,
    0x33d79a,
    0xb59b61,
    0x8b654f,
    0x0d29b4,
    0x01b042,
    0x87fcb9,
    0x1883ae,
    0x9ecf55,
    0x9256a3,
    0x141a58,
    0xefaaff,
    0x69e604,
    0x657ff2,
    0xe33309,
    0x7c4c1e,
    0xfa00e5,
    0xf69913,
    0x70d5e8,
    0x4e2bc6,
    0xc8673d,
    0xc4fecb,
    0x42b230,
    0xddcd27,
    0x5b81dc,
    0x57182a,
    0xd154d1,
    0x26359f,
    0xa07964,
    0xace092,
    0x2aac69,
    0xb5d37e,
    0x339f85,
    0x3f0673,
    0xb94a88,
    0x87b4a6,
    0x01f85d,
    0x0d61ab,
    0x8b2d50,
    0x145247,
    0x921ebc,
    0x9e874a,
    0x18cbb1,
    0xe37b16,
    0x6537ed,
    0x69ae1b,
    0xefe2e0,
    0x709df7,
    0xf6d10c,
    0xfa48fa,
    0x7c0401,
    0x42fa2f,
    0xc4b6d4,
    0xc82f22,
    0x4e63d9,
    0xd11cce,
    0x575035,
    0x5bc9c3,
    0xdd8538
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc24 = (0, _defineCrcDefault.default)("crc-24", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = typeof previous !== "undefined" ? ~~previous : 0xb704ce;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = (TABLE[(crc >> 16 ^ byte) & 0xff] ^ crc << 8) & 0xffffff;
    }
    return crc;
});
exports.default = crc24;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6nfiL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`
// prettier-ignore
let TABLE = [
    0x00000000,
    0x77073096,
    0xee0e612c,
    0x990951ba,
    0x076dc419,
    0x706af48f,
    0xe963a535,
    0x9e6495a3,
    0x0edb8832,
    0x79dcb8a4,
    0xe0d5e91e,
    0x97d2d988,
    0x09b64c2b,
    0x7eb17cbd,
    0xe7b82d07,
    0x90bf1d91,
    0x1db71064,
    0x6ab020f2,
    0xf3b97148,
    0x84be41de,
    0x1adad47d,
    0x6ddde4eb,
    0xf4d4b551,
    0x83d385c7,
    0x136c9856,
    0x646ba8c0,
    0xfd62f97a,
    0x8a65c9ec,
    0x14015c4f,
    0x63066cd9,
    0xfa0f3d63,
    0x8d080df5,
    0x3b6e20c8,
    0x4c69105e,
    0xd56041e4,
    0xa2677172,
    0x3c03e4d1,
    0x4b04d447,
    0xd20d85fd,
    0xa50ab56b,
    0x35b5a8fa,
    0x42b2986c,
    0xdbbbc9d6,
    0xacbcf940,
    0x32d86ce3,
    0x45df5c75,
    0xdcd60dcf,
    0xabd13d59,
    0x26d930ac,
    0x51de003a,
    0xc8d75180,
    0xbfd06116,
    0x21b4f4b5,
    0x56b3c423,
    0xcfba9599,
    0xb8bda50f,
    0x2802b89e,
    0x5f058808,
    0xc60cd9b2,
    0xb10be924,
    0x2f6f7c87,
    0x58684c11,
    0xc1611dab,
    0xb6662d3d,
    0x76dc4190,
    0x01db7106,
    0x98d220bc,
    0xefd5102a,
    0x71b18589,
    0x06b6b51f,
    0x9fbfe4a5,
    0xe8b8d433,
    0x7807c9a2,
    0x0f00f934,
    0x9609a88e,
    0xe10e9818,
    0x7f6a0dbb,
    0x086d3d2d,
    0x91646c97,
    0xe6635c01,
    0x6b6b51f4,
    0x1c6c6162,
    0x856530d8,
    0xf262004e,
    0x6c0695ed,
    0x1b01a57b,
    0x8208f4c1,
    0xf50fc457,
    0x65b0d9c6,
    0x12b7e950,
    0x8bbeb8ea,
    0xfcb9887c,
    0x62dd1ddf,
    0x15da2d49,
    0x8cd37cf3,
    0xfbd44c65,
    0x4db26158,
    0x3ab551ce,
    0xa3bc0074,
    0xd4bb30e2,
    0x4adfa541,
    0x3dd895d7,
    0xa4d1c46d,
    0xd3d6f4fb,
    0x4369e96a,
    0x346ed9fc,
    0xad678846,
    0xda60b8d0,
    0x44042d73,
    0x33031de5,
    0xaa0a4c5f,
    0xdd0d7cc9,
    0x5005713c,
    0x270241aa,
    0xbe0b1010,
    0xc90c2086,
    0x5768b525,
    0x206f85b3,
    0xb966d409,
    0xce61e49f,
    0x5edef90e,
    0x29d9c998,
    0xb0d09822,
    0xc7d7a8b4,
    0x59b33d17,
    0x2eb40d81,
    0xb7bd5c3b,
    0xc0ba6cad,
    0xedb88320,
    0x9abfb3b6,
    0x03b6e20c,
    0x74b1d29a,
    0xead54739,
    0x9dd277af,
    0x04db2615,
    0x73dc1683,
    0xe3630b12,
    0x94643b84,
    0x0d6d6a3e,
    0x7a6a5aa8,
    0xe40ecf0b,
    0x9309ff9d,
    0x0a00ae27,
    0x7d079eb1,
    0xf00f9344,
    0x8708a3d2,
    0x1e01f268,
    0x6906c2fe,
    0xf762575d,
    0x806567cb,
    0x196c3671,
    0x6e6b06e7,
    0xfed41b76,
    0x89d32be0,
    0x10da7a5a,
    0x67dd4acc,
    0xf9b9df6f,
    0x8ebeeff9,
    0x17b7be43,
    0x60b08ed5,
    0xd6d6a3e8,
    0xa1d1937e,
    0x38d8c2c4,
    0x4fdff252,
    0xd1bb67f1,
    0xa6bc5767,
    0x3fb506dd,
    0x48b2364b,
    0xd80d2bda,
    0xaf0a1b4c,
    0x36034af6,
    0x41047a60,
    0xdf60efc3,
    0xa867df55,
    0x316e8eef,
    0x4669be79,
    0xcb61b38c,
    0xbc66831a,
    0x256fd2a0,
    0x5268e236,
    0xcc0c7795,
    0xbb0b4703,
    0x220216b9,
    0x5505262f,
    0xc5ba3bbe,
    0xb2bd0b28,
    0x2bb45a92,
    0x5cb36a04,
    0xc2d7ffa7,
    0xb5d0cf31,
    0x2cd99e8b,
    0x5bdeae1d,
    0x9b64c2b0,
    0xec63f226,
    0x756aa39c,
    0x026d930a,
    0x9c0906a9,
    0xeb0e363f,
    0x72076785,
    0x05005713,
    0x95bf4a82,
    0xe2b87a14,
    0x7bb12bae,
    0x0cb61b38,
    0x92d28e9b,
    0xe5d5be0d,
    0x7cdcefb7,
    0x0bdbdf21,
    0x86d3d2d4,
    0xf1d4e242,
    0x68ddb3f8,
    0x1fda836e,
    0x81be16cd,
    0xf6b9265b,
    0x6fb077e1,
    0x18b74777,
    0x88085ae6,
    0xff0f6a70,
    0x66063bca,
    0x11010b5c,
    0x8f659eff,
    0xf862ae69,
    0x616bffd3,
    0x166ccf45,
    0xa00ae278,
    0xd70dd2ee,
    0x4e048354,
    0x3903b3c2,
    0xa7672661,
    0xd06016f7,
    0x4969474d,
    0x3e6e77db,
    0xaed16a4a,
    0xd9d65adc,
    0x40df0b66,
    0x37d83bf0,
    0xa9bcae53,
    0xdebb9ec5,
    0x47b2cf7f,
    0x30b5ffe9,
    0xbdbdf21c,
    0xcabac28a,
    0x53b39330,
    0x24b4a3a6,
    0xbad03605,
    0xcdd70693,
    0x54de5729,
    0x23d967bf,
    0xb3667a2e,
    0xc4614ab8,
    0x5d681b02,
    0x2a6f2b94,
    0xb40bbe37,
    0xc30c8ea1,
    0x5a05df1b,
    0x2d02ef8d
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crc32 = (0, _defineCrcDefault.default)("crc-32", function(buf, previous) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = previous === 0 ? 0 : ~~previous ^ -1;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = TABLE[(crc ^ byte) & 0xff] ^ crc >>> 8;
    }
    return crc ^ -1;
});
exports.default = crc32;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxBAZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _buffer = require("buffer");
var _createBuffer = require("./create_buffer");
var _createBufferDefault = parcelHelpers.interopDefault(_createBuffer);
var _defineCrc = require("./define_crc");
var _defineCrcDefault = parcelHelpers.interopDefault(_defineCrc);
// Generated by `./pycrc.py --algorithm=table-driven --model=jam --generate=c`
// prettier-ignore
let TABLE = [
    0x00000000,
    0x77073096,
    0xee0e612c,
    0x990951ba,
    0x076dc419,
    0x706af48f,
    0xe963a535,
    0x9e6495a3,
    0x0edb8832,
    0x79dcb8a4,
    0xe0d5e91e,
    0x97d2d988,
    0x09b64c2b,
    0x7eb17cbd,
    0xe7b82d07,
    0x90bf1d91,
    0x1db71064,
    0x6ab020f2,
    0xf3b97148,
    0x84be41de,
    0x1adad47d,
    0x6ddde4eb,
    0xf4d4b551,
    0x83d385c7,
    0x136c9856,
    0x646ba8c0,
    0xfd62f97a,
    0x8a65c9ec,
    0x14015c4f,
    0x63066cd9,
    0xfa0f3d63,
    0x8d080df5,
    0x3b6e20c8,
    0x4c69105e,
    0xd56041e4,
    0xa2677172,
    0x3c03e4d1,
    0x4b04d447,
    0xd20d85fd,
    0xa50ab56b,
    0x35b5a8fa,
    0x42b2986c,
    0xdbbbc9d6,
    0xacbcf940,
    0x32d86ce3,
    0x45df5c75,
    0xdcd60dcf,
    0xabd13d59,
    0x26d930ac,
    0x51de003a,
    0xc8d75180,
    0xbfd06116,
    0x21b4f4b5,
    0x56b3c423,
    0xcfba9599,
    0xb8bda50f,
    0x2802b89e,
    0x5f058808,
    0xc60cd9b2,
    0xb10be924,
    0x2f6f7c87,
    0x58684c11,
    0xc1611dab,
    0xb6662d3d,
    0x76dc4190,
    0x01db7106,
    0x98d220bc,
    0xefd5102a,
    0x71b18589,
    0x06b6b51f,
    0x9fbfe4a5,
    0xe8b8d433,
    0x7807c9a2,
    0x0f00f934,
    0x9609a88e,
    0xe10e9818,
    0x7f6a0dbb,
    0x086d3d2d,
    0x91646c97,
    0xe6635c01,
    0x6b6b51f4,
    0x1c6c6162,
    0x856530d8,
    0xf262004e,
    0x6c0695ed,
    0x1b01a57b,
    0x8208f4c1,
    0xf50fc457,
    0x65b0d9c6,
    0x12b7e950,
    0x8bbeb8ea,
    0xfcb9887c,
    0x62dd1ddf,
    0x15da2d49,
    0x8cd37cf3,
    0xfbd44c65,
    0x4db26158,
    0x3ab551ce,
    0xa3bc0074,
    0xd4bb30e2,
    0x4adfa541,
    0x3dd895d7,
    0xa4d1c46d,
    0xd3d6f4fb,
    0x4369e96a,
    0x346ed9fc,
    0xad678846,
    0xda60b8d0,
    0x44042d73,
    0x33031de5,
    0xaa0a4c5f,
    0xdd0d7cc9,
    0x5005713c,
    0x270241aa,
    0xbe0b1010,
    0xc90c2086,
    0x5768b525,
    0x206f85b3,
    0xb966d409,
    0xce61e49f,
    0x5edef90e,
    0x29d9c998,
    0xb0d09822,
    0xc7d7a8b4,
    0x59b33d17,
    0x2eb40d81,
    0xb7bd5c3b,
    0xc0ba6cad,
    0xedb88320,
    0x9abfb3b6,
    0x03b6e20c,
    0x74b1d29a,
    0xead54739,
    0x9dd277af,
    0x04db2615,
    0x73dc1683,
    0xe3630b12,
    0x94643b84,
    0x0d6d6a3e,
    0x7a6a5aa8,
    0xe40ecf0b,
    0x9309ff9d,
    0x0a00ae27,
    0x7d079eb1,
    0xf00f9344,
    0x8708a3d2,
    0x1e01f268,
    0x6906c2fe,
    0xf762575d,
    0x806567cb,
    0x196c3671,
    0x6e6b06e7,
    0xfed41b76,
    0x89d32be0,
    0x10da7a5a,
    0x67dd4acc,
    0xf9b9df6f,
    0x8ebeeff9,
    0x17b7be43,
    0x60b08ed5,
    0xd6d6a3e8,
    0xa1d1937e,
    0x38d8c2c4,
    0x4fdff252,
    0xd1bb67f1,
    0xa6bc5767,
    0x3fb506dd,
    0x48b2364b,
    0xd80d2bda,
    0xaf0a1b4c,
    0x36034af6,
    0x41047a60,
    0xdf60efc3,
    0xa867df55,
    0x316e8eef,
    0x4669be79,
    0xcb61b38c,
    0xbc66831a,
    0x256fd2a0,
    0x5268e236,
    0xcc0c7795,
    0xbb0b4703,
    0x220216b9,
    0x5505262f,
    0xc5ba3bbe,
    0xb2bd0b28,
    0x2bb45a92,
    0x5cb36a04,
    0xc2d7ffa7,
    0xb5d0cf31,
    0x2cd99e8b,
    0x5bdeae1d,
    0x9b64c2b0,
    0xec63f226,
    0x756aa39c,
    0x026d930a,
    0x9c0906a9,
    0xeb0e363f,
    0x72076785,
    0x05005713,
    0x95bf4a82,
    0xe2b87a14,
    0x7bb12bae,
    0x0cb61b38,
    0x92d28e9b,
    0xe5d5be0d,
    0x7cdcefb7,
    0x0bdbdf21,
    0x86d3d2d4,
    0xf1d4e242,
    0x68ddb3f8,
    0x1fda836e,
    0x81be16cd,
    0xf6b9265b,
    0x6fb077e1,
    0x18b74777,
    0x88085ae6,
    0xff0f6a70,
    0x66063bca,
    0x11010b5c,
    0x8f659eff,
    0xf862ae69,
    0x616bffd3,
    0x166ccf45,
    0xa00ae278,
    0xd70dd2ee,
    0x4e048354,
    0x3903b3c2,
    0xa7672661,
    0xd06016f7,
    0x4969474d,
    0x3e6e77db,
    0xaed16a4a,
    0xd9d65adc,
    0x40df0b66,
    0x37d83bf0,
    0xa9bcae53,
    0xdebb9ec5,
    0x47b2cf7f,
    0x30b5ffe9,
    0xbdbdf21c,
    0xcabac28a,
    0x53b39330,
    0x24b4a3a6,
    0xbad03605,
    0xcdd70693,
    0x54de5729,
    0x23d967bf,
    0xb3667a2e,
    0xc4614ab8,
    0x5d681b02,
    0x2a6f2b94,
    0xb40bbe37,
    0xc30c8ea1,
    0x5a05df1b,
    0x2d02ef8d
];
if (typeof Int32Array !== "undefined") TABLE = new Int32Array(TABLE);
const crcjam = (0, _defineCrcDefault.default)("jam", function(buf, previous = -1) {
    if (!(0, _buffer.Buffer).isBuffer(buf)) buf = (0, _createBufferDefault.default)(buf);
    let crc = previous === 0 ? 0 : ~~previous;
    for(let index = 0; index < buf.length; index++){
        const byte = buf[index];
        crc = TABLE[(crc ^ byte) & 0xff] ^ crc >>> 8;
    }
    return crc;
});
exports.default = crcjam;

},{"buffer":"fCgem","./create_buffer":"kUnL5","./define_crc":"ife5e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fJ37S":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.verifyChecksum = verifyChecksum;
function verifyChecksum(expected, actual) {
    if (expected.length !== actual.length) return false;
    if (expected.length === 0) return true;
    for(var i = 0; i < expected.length; i += 1){
        if (expected[i] !== actual[i]) return false;
    }
    return true;
}

},{}],"6Ntw2":[function(require,module,exports) {
var Buffer = require("64ab37a1a3ec3125").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransactionBase = undefined;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _xdr = require("76d7caf160fa9a7");
var _xdr2 = _interopRequireDefault(_xdr);
var _hashing = require("fa7c491d3b291801");
var _keypair = require("750a634d27004674");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * @ignore
 */ var TransactionBase = exports.TransactionBase = function() {
    function TransactionBase(tx, signatures, fee, networkPassphrase) {
        _classCallCheck(this, TransactionBase);
        if (typeof networkPassphrase !== "string") throw new Error("Invalid passphrase provided to Transaction: expected a string but got a " + (typeof networkPassphrase === "undefined" ? "undefined" : _typeof(networkPassphrase)));
        this._networkPassphrase = networkPassphrase;
        this._tx = tx;
        this._signatures = signatures;
        this._fee = fee;
    }
    /**
   * @type {Array.<xdr.DecoratedSignature>}
   * @readonly
   */ _createClass(TransactionBase, [
        {
            key: "sign",
            /**
     * Signs the transaction with the given {@link Keypair}.
     * @param {...Keypair} keypairs Keypairs of signers
     * @returns {void}
     */ value: function sign() {
                var _this = this;
                var txHash = this.hash();
                for(var _len = arguments.length, keypairs = Array(_len), _key = 0; _key < _len; _key++)keypairs[_key] = arguments[_key];
                keypairs.forEach(function(kp) {
                    var sig = kp.signDecorated(txHash);
                    _this.signatures.push(sig);
                });
            }
        },
        {
            key: "getKeypairSignature",
            value: function getKeypairSignature(keypair) {
                return keypair.sign(this.hash()).toString("base64");
            }
        },
        {
            key: "addSignature",
            value: function addSignature() {
                var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                if (!signature || typeof signature !== "string") throw new Error("Invalid signature");
                if (!publicKey || typeof publicKey !== "string") throw new Error("Invalid publicKey");
                var keypair = void 0;
                var hint = void 0;
                var signatureBuffer = Buffer.from(signature, "base64");
                try {
                    keypair = _keypair.Keypair.fromPublicKey(publicKey);
                    hint = keypair.signatureHint();
                } catch (e) {
                    throw new Error("Invalid publicKey");
                }
                if (!keypair.verify(this.hash(), signatureBuffer)) throw new Error("Invalid signature");
                this.signatures.push(new _xdr2.default.DecoratedSignature({
                    hint: hint,
                    signature: signatureBuffer
                }));
            }
        },
        {
            key: "addDecoratedSignature",
            value: function addDecoratedSignature(signature) {
                this.signatures.push(signature);
            }
        },
        {
            key: "signHashX",
            value: function signHashX(preimage) {
                if (typeof preimage === "string") preimage = Buffer.from(preimage, "hex");
                if (preimage.length > 64) throw new Error("preimage cannnot be longer than 64 bytes");
                var signature = preimage;
                var hashX = (0, _hashing.hash)(preimage);
                var hint = hashX.slice(hashX.length - 4);
                this.signatures.push(new _xdr2.default.DecoratedSignature({
                    hint: hint,
                    signature: signature
                }));
            }
        },
        {
            key: "hash",
            value: function hash() {
                return (0, _hashing.hash)(this.signatureBase());
            }
        },
        {
            key: "signatureBase",
            value: function signatureBase() {
                throw new Error("Implement in subclass");
            }
        },
        {
            key: "toEnvelope",
            value: function toEnvelope() {
                throw new Error("Implement in subclass");
            }
        },
        {
            key: "toXDR",
            value: function toXDR() {
                return this.toEnvelope().toXDR().toString("base64");
            }
        },
        {
            key: "signatures",
            get: function get() {
                return this._signatures;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "tx",
            get: function get() {
                return this._tx;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "fee",
            get: function get() {
                return this._fee;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "networkPassphrase",
            get: function get() {
                return this._networkPassphrase;
            },
            set: function set(networkPassphrase) {
                this._networkPassphrase = networkPassphrase;
            }
        }
    ]);
    return TransactionBase;
}();

},{"64ab37a1a3ec3125":"fCgem","76d7caf160fa9a7":"gxpVH","fa7c491d3b291801":"efCju","750a634d27004674":"kfbNf"}],"eHX3S":[function(require,module,exports) {
var Buffer = require("12a47b12bce8ed4").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Transaction = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _map = require("7e8c1b7f551d4c0c");
var _map2 = _interopRequireDefault(_map);
var _xdr = require("bc4b5de0c96033fe");
var _xdr2 = _interopRequireDefault(_xdr);
var _hashing = require("c900ebfb55f64462");
var _strkey = require("665af7f91cd3103f");
var _operation = require("17494cce3fe4238");
var _memo = require("774786fca3a0f162");
var _transaction_base = require("ef4abc1fa675711d");
var _decode_encode_muxed_account = require("8167fbf2f2672be1");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
/**
 * Use {@link TransactionBuilder} to build a transaction object. If you have an
 * object or base64-encoded string of the transaction envelope XDR, use {@link
 * TransactionBuilder.fromXDR}.
 *
 * Once a Transaction has been created, its attributes and operations should not
 * be changed. You should only add signatures (using {@link Transaction#sign})
 * to a Transaction object before submitting to the network or forwarding on to
 * additional signers.
 *
 * @constructor
 *
 * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope
 *     object or base64 encoded string
 * @param {string}  [networkPassphrase] - passphrase of the target stellar
 *     network (e.g. "Public Global Stellar Network ; September 2015")
 *
 * @extends TransactionBase
 */ var Transaction = exports.Transaction = function(_TransactionBase) {
    _inherits(Transaction, _TransactionBase);
    function Transaction(envelope, networkPassphrase) {
        _classCallCheck(this, Transaction);
        if (typeof envelope === "string") {
            var buffer = Buffer.from(envelope, "base64");
            envelope = _xdr2.default.TransactionEnvelope.fromXDR(buffer);
        }
        var envelopeType = envelope.switch();
        if (!(envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTxV0() || envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTx())) throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an " + envelopeType.name + ".");
        var txEnvelope = envelope.value();
        var tx = txEnvelope.tx();
        var fee = tx.fee().toString();
        var signatures = (txEnvelope.signatures() || []).slice();
        var _this = _possibleConstructorReturn(this, (Transaction.__proto__ || Object.getPrototypeOf(Transaction)).call(this, tx, signatures, fee, networkPassphrase));
        _this._envelopeType = envelopeType;
        _this._memo = tx.memo();
        _this._sequence = tx.seqNum().toString();
        switch(_this._envelopeType){
            case _xdr2.default.EnvelopeType.envelopeTypeTxV0():
                _this._source = _strkey.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());
                break;
            default:
                _this._source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());
                break;
        }
        var cond = null;
        var timeBounds = null;
        switch(_this._envelopeType){
            case _xdr2.default.EnvelopeType.envelopeTypeTxV0():
                timeBounds = tx.timeBounds();
                break;
            case _xdr2.default.EnvelopeType.envelopeTypeTx():
                switch(tx.cond().switch()){
                    case _xdr2.default.PreconditionType.precondTime():
                        timeBounds = tx.cond().timeBounds();
                        break;
                    case _xdr2.default.PreconditionType.precondV2():
                        cond = tx.cond().v2();
                        timeBounds = cond.timeBounds();
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }
        if (timeBounds) _this._timeBounds = {
            minTime: timeBounds.minTime().toString(),
            maxTime: timeBounds.maxTime().toString()
        };
        if (cond) {
            var ledgerBounds = cond.ledgerBounds();
            if (ledgerBounds) _this._ledgerBounds = {
                minLedger: ledgerBounds.minLedger(),
                maxLedger: ledgerBounds.maxLedger()
            };
            var minSeq = cond.minSeqNum();
            if (minSeq) _this._minAccountSequence = minSeq.toString();
            _this._minAccountSequenceAge = cond.minSeqAge();
            _this._minAccountSequenceLedgerGap = cond.minSeqLedgerGap();
            _this._extraSigners = cond.extraSigners();
        }
        var operations = tx.operations() || [];
        _this._operations = (0, _map2.default)(operations, function(op) {
            return _operation.Operation.fromXDRObject(op);
        });
        return _this;
    }
    /**
   * @type {object}
   * @property {string} 64 bit unix timestamp
   * @property {string} 64 bit unix timestamp
   * @readonly
   */ _createClass(Transaction, [
        {
            key: "signatureBase",
            /**
     * Returns the "signature base" of this transaction, which is the value
     * that, when hashed, should be signed to create a signature that
     * validators on the Stellar Network will accept.
     *
     * It is composed of a 4 prefix bytes followed by the xdr-encoded form
     * of this transaction.
     * @returns {Buffer}
     */ value: function signatureBase() {
                var tx = this.tx;
                // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0
                // we need a Transaction to generate the signature base
                if (this._envelopeType === _xdr2.default.EnvelopeType.envelopeTypeTxV0()) tx = _xdr2.default.Transaction.fromXDR(Buffer.concat([
                    // TransactionV0 is a transaction with the AccountID discriminant
                    // stripped off, we need to put it back to build a valid transaction
                    // which we can use to build a TransactionSignaturePayloadTaggedTransaction
                    _xdr2.default.PublicKeyType.publicKeyTypeEd25519().toXDR(),
                    tx.toXDR()
                ]));
                var taggedTransaction = new _xdr2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx);
                var txSignature = new _xdr2.default.TransactionSignaturePayload({
                    networkId: _xdr2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),
                    taggedTransaction: taggedTransaction
                });
                return txSignature.toXDR();
            }
        },
        {
            key: "toEnvelope",
            value: function toEnvelope() {
                var rawTx = this.tx.toXDR();
                var signatures = this.signatures.slice(); // make a copy of the signatures
                var envelope = void 0;
                switch(this._envelopeType){
                    case _xdr2.default.EnvelopeType.envelopeTypeTxV0():
                        envelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTxV0(new _xdr2.default.TransactionV0Envelope({
                            tx: _xdr2.default.TransactionV0.fromXDR(rawTx),
                            signatures: signatures
                        }));
                        break;
                    case _xdr2.default.EnvelopeType.envelopeTypeTx():
                        envelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTx(new _xdr2.default.TransactionV1Envelope({
                            tx: _xdr2.default.Transaction.fromXDR(rawTx),
                            signatures: signatures
                        }));
                        break;
                    default:
                        throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an " + this._envelopeType.name + ".");
                }
                return envelope;
            }
        },
        {
            key: "getClaimableBalanceId",
            value: function getClaimableBalanceId(opIndex) {
                // Validate and then extract the operation from the transaction.
                if (!Number.isInteger(opIndex) || opIndex < 0 || opIndex >= this.operations.length) throw new RangeError("invalid operation index");
                var op = this.operations[opIndex];
                try {
                    op = _operation.Operation.createClaimableBalance(op);
                } catch (err) {
                    throw new TypeError("expected createClaimableBalance, got " + op.type + ": " + err);
                }
                // Always use the transaction's *unmuxed* source.
                var account = _strkey.StrKey.decodeEd25519PublicKey((0, _decode_encode_muxed_account.extractBaseAddress)(this.source));
                var operationId = _xdr2.default.HashIdPreimage.envelopeTypeOpId(new _xdr2.default.HashIdPreimageOperationId({
                    sourceAccount: _xdr2.default.AccountId.publicKeyTypeEd25519(account),
                    seqNum: _xdr2.default.SequenceNumber.fromString(this.sequence),
                    opNum: opIndex
                }));
                var opIdHash = (0, _hashing.hash)(operationId.toXDR("raw"));
                var balanceId = _xdr2.default.ClaimableBalanceId.claimableBalanceIdTypeV0(opIdHash);
                return balanceId.toXDR("hex");
            }
        },
        {
            key: "timeBounds",
            get: function get() {
                return this._timeBounds;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "ledgerBounds",
            get: function get() {
                return this._ledgerBounds;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "minAccountSequence",
            get: function get() {
                return this._minAccountSequence;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "minAccountSequenceAge",
            get: function get() {
                return this._minAccountSequenceAge;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "minAccountSequenceLedgerGap",
            get: function get() {
                return this._minAccountSequenceLedgerGap;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "extraSigners",
            get: function get() {
                return this._extraSigners;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "sequence",
            get: function get() {
                return this._sequence;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "source",
            get: function get() {
                return this._source;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "operations",
            get: function get() {
                return this._operations;
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        },
        {
            key: "memo",
            get: function get() {
                return _memo.Memo.fromXDRObject(this._memo);
            },
            set: function set(value) {
                throw new Error("Transaction is immutable");
            }
        }
    ]);
    return Transaction;
}(_transaction_base.TransactionBase);

},{"12a47b12bce8ed4":"fCgem","7e8c1b7f551d4c0c":"94CDd","bc4b5de0c96033fe":"gxpVH","c900ebfb55f64462":"efCju","665af7f91cd3103f":"gjDua","17494cce3fe4238":"douR6","774786fca3a0f162":"hYmMJ","ef4abc1fa675711d":"6Ntw2","8167fbf2f2672be1":"5F4St"}],"douR6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Operation = exports.AuthClawbackEnabledFlag = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}(); /* eslint-disable no-bitwise */ 
var _jsXdr = require("d37a2983252aa4d4");
var _bignumber = require("40cd16d227d6e85f");
var _bignumber2 = _interopRequireDefault(_bignumber);
var _trimEnd = require("9bf760a75299f42f");
var _trimEnd2 = _interopRequireDefault(_trimEnd);
var _isUndefined = require("625da1f37aa899e8");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _isString = require("83d2f458389e34fb");
var _isString2 = _interopRequireDefault(_isString);
var _isNumber = require("94ee8f5c823e04bc");
var _isNumber2 = _interopRequireDefault(_isNumber);
var _isFinite = require("fec1589b1fb1ee35");
var _isFinite2 = _interopRequireDefault(_isFinite);
var _continued_fraction = require("c02e889b0b905a10");
var _asset = require("73a346d185675d93");
var _liquidity_pool_asset = require("cbc2148cbbb30abc");
var _claimant = require("1b0887ce4fc959e5");
var _strkey = require("858832117921a356");
var _liquidity_pool_id = require("36fd03c8a71edca9");
var _xdr = require("5bb06f5e58ea9bbf");
var _xdr2 = _interopRequireDefault(_xdr);
var _index = require("50ab45a22e6e1565");
var ops = _interopRequireWildcard(_index);
var _decode_encode_muxed_account = require("86b4ce6f0b59b65d");
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) return obj;
    else {
        var newObj = {};
        if (obj != null) {
            for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
        newObj.default = obj;
        return newObj;
    }
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var ONE = 10000000;
var MAX_INT64 = "9223372036854775807";
/**
 * When set using `{@link Operation.setOptions}` option, requires the issuing
 * account to give other accounts permission before they can hold the issuing
 * account’s credit.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */ var AuthRequiredFlag = exports.AuthRequiredFlag = 1;
/**
 * When set using `{@link Operation.setOptions}` option, allows the issuing
 * account to revoke its credit held by other accounts.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */ var AuthRevocableFlag = exports.AuthRevocableFlag = 2;
/**
 * When set using `{@link Operation.setOptions}` option, then none of the
 * authorization flags can be set and the account can never be deleted.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */ var AuthImmutableFlag = exports.AuthImmutableFlag = 4;
/**
 * When set using `{@link Operation.setOptions}` option, then any trustlines
 * created by this account can have a ClawbackOp operation submitted for the
 * corresponding asset.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */ var AuthClawbackEnabledFlag = exports.AuthClawbackEnabledFlag = 8;
/**
 * `Operation` class represents [operations](https://developers.stellar.org/docs/glossary/operations/) in Stellar network.
 * Use one of static methods to create operations:
 * * `{@link Operation.createAccount}`
 * * `{@link Operation.payment}`
 * * `{@link Operation.pathPaymentStrictReceive}`
 * * `{@link Operation.pathPaymentStrictSend}`
 * * `{@link Operation.manageSellOffer}`
 * * `{@link Operation.manageBuyOffer}`
 * * `{@link Operation.createPassiveSellOffer}`
 * * `{@link Operation.setOptions}`
 * * `{@link Operation.changeTrust}`
 * * `{@link Operation.allowTrust}`
 * * `{@link Operation.accountMerge}`
 * * `{@link Operation.inflation}`
 * * `{@link Operation.manageData}`
 * * `{@link Operation.bumpSequence}`
 * * `{@link Operation.createClaimableBalance}`
 * * `{@link Operation.claimClaimableBalance}`
 * * `{@link Operation.beginSponsoringFutureReserves}`
 * * `{@link Operation.endSponsoringFutureReserves}`
 * * `{@link Operation.revokeAccountSponsorship}`
 * * `{@link Operation.revokeTrustlineSponsorship}`
 * * `{@link Operation.revokeOfferSponsorship}`
 * * `{@link Operation.revokeDataSponsorship}`
 * * `{@link Operation.revokeClaimableBalanceSponsorship}`
 * * `{@link Operation.revokeLiquidityPoolSponsorship}`
 * * `{@link Operation.revokeSignerSponsorship}`
 * * `{@link Operation.clawback}`
 * * `{@link Operation.clawbackClaimableBalance}`
 * * `{@link Operation.setTrustLineFlags}`
 * * `{@link Operation.liquidityPoolDeposit}`
 * * `{@link Operation.liquidityPoolWithdraw}`
 *
 * @class Operation
 */ var Operation = exports.Operation = function() {
    function Operation() {
        _classCallCheck(this, Operation);
    }
    _createClass(Operation, null, [
        {
            key: "setSourceAccount",
            value: function setSourceAccount(opAttributes, opts) {
                if (opts.source) try {
                    opAttributes.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.source);
                } catch (e) {
                    throw new Error("Source address is invalid");
                }
            }
        },
        {
            key: "fromXDRObject",
            value: function fromXDRObject(operation) {
                var result = {};
                if (operation.sourceAccount()) result.source = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(operation.sourceAccount());
                var attrs = operation.body().value();
                var operationName = operation.body().switch().name;
                switch(operationName){
                    case "createAccount":
                        result.type = "createAccount";
                        result.destination = accountIdtoAddress(attrs.destination());
                        result.startingBalance = this._fromXDRAmount(attrs.startingBalance());
                        break;
                    case "payment":
                        result.type = "payment";
                        result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());
                        result.asset = _asset.Asset.fromOperation(attrs.asset());
                        result.amount = this._fromXDRAmount(attrs.amount());
                        break;
                    case "pathPaymentStrictReceive":
                        result.type = "pathPaymentStrictReceive";
                        result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());
                        result.sendMax = this._fromXDRAmount(attrs.sendMax());
                        result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());
                        result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());
                        result.destAmount = this._fromXDRAmount(attrs.destAmount());
                        result.path = [];
                        var path = attrs.path();
                        // note that Object.values isn't supported by node 6!
                        Object.keys(path).forEach(function(pathKey) {
                            result.path.push(_asset.Asset.fromOperation(path[pathKey]));
                        });
                        break;
                    case "pathPaymentStrictSend":
                        result.type = "pathPaymentStrictSend";
                        result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());
                        result.sendAmount = this._fromXDRAmount(attrs.sendAmount());
                        result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.destination());
                        result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());
                        result.destMin = this._fromXDRAmount(attrs.destMin());
                        result.path = [];
                        var _path = attrs.path();
                        // note that Object.values isn't supported by node 6!
                        Object.keys(_path).forEach(function(pathKey) {
                            result.path.push(_asset.Asset.fromOperation(_path[pathKey]));
                        });
                        break;
                    case "changeTrust":
                        result.type = "changeTrust";
                        switch(attrs.line().switch()){
                            case _xdr2.default.AssetType.assetTypePoolShare():
                                result.line = _liquidity_pool_asset.LiquidityPoolAsset.fromOperation(attrs.line());
                                break;
                            default:
                                result.line = _asset.Asset.fromOperation(attrs.line());
                                break;
                        }
                        result.limit = this._fromXDRAmount(attrs.limit());
                        break;
                    case "allowTrust":
                        result.type = "allowTrust";
                        result.trustor = accountIdtoAddress(attrs.trustor());
                        result.assetCode = attrs.asset().value().toString();
                        result.assetCode = (0, _trimEnd2.default)(result.assetCode, "\0");
                        result.authorize = attrs.authorize();
                        break;
                    case "setOptions":
                        result.type = "setOptions";
                        if (attrs.inflationDest()) result.inflationDest = accountIdtoAddress(attrs.inflationDest());
                        result.clearFlags = attrs.clearFlags();
                        result.setFlags = attrs.setFlags();
                        result.masterWeight = attrs.masterWeight();
                        result.lowThreshold = attrs.lowThreshold();
                        result.medThreshold = attrs.medThreshold();
                        result.highThreshold = attrs.highThreshold();
                        // home_domain is checked by iscntrl in stellar-core
                        result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString("ascii") : undefined;
                        if (attrs.signer()) {
                            var signer = {};
                            var arm = attrs.signer().key().arm();
                            if (arm === "ed25519") signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());
                            else if (arm === "preAuthTx") signer.preAuthTx = attrs.signer().key().preAuthTx();
                            else if (arm === "hashX") signer.sha256Hash = attrs.signer().key().hashX();
                            else if (arm === "ed25519SignedPayload") {
                                var signedPayload = attrs.signer().key().ed25519SignedPayload();
                                signer.ed25519SignedPayload = _strkey.StrKey.encodeSignedPayload(signedPayload.toXDR());
                            }
                            signer.weight = attrs.signer().weight();
                            result.signer = signer;
                        }
                        break;
                    // the next case intentionally falls through!
                    case "manageOffer":
                    case "manageSellOffer":
                        result.type = "manageSellOffer";
                        result.selling = _asset.Asset.fromOperation(attrs.selling());
                        result.buying = _asset.Asset.fromOperation(attrs.buying());
                        result.amount = this._fromXDRAmount(attrs.amount());
                        result.price = this._fromXDRPrice(attrs.price());
                        result.offerId = attrs.offerId().toString();
                        break;
                    case "manageBuyOffer":
                        result.type = "manageBuyOffer";
                        result.selling = _asset.Asset.fromOperation(attrs.selling());
                        result.buying = _asset.Asset.fromOperation(attrs.buying());
                        result.buyAmount = this._fromXDRAmount(attrs.buyAmount());
                        result.price = this._fromXDRPrice(attrs.price());
                        result.offerId = attrs.offerId().toString();
                        break;
                    // the next case intentionally falls through!
                    case "createPassiveOffer":
                    case "createPassiveSellOffer":
                        result.type = "createPassiveSellOffer";
                        result.selling = _asset.Asset.fromOperation(attrs.selling());
                        result.buying = _asset.Asset.fromOperation(attrs.buying());
                        result.amount = this._fromXDRAmount(attrs.amount());
                        result.price = this._fromXDRPrice(attrs.price());
                        break;
                    case "accountMerge":
                        result.type = "accountMerge";
                        result.destination = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs);
                        break;
                    case "manageData":
                        result.type = "manageData";
                        // manage_data.name is checked by iscntrl in stellar-core
                        result.name = attrs.dataName().toString("ascii");
                        result.value = attrs.dataValue();
                        break;
                    case "inflation":
                        result.type = "inflation";
                        break;
                    case "bumpSequence":
                        result.type = "bumpSequence";
                        result.bumpTo = attrs.bumpTo().toString();
                        break;
                    case "createClaimableBalance":
                        result.type = "createClaimableBalance";
                        result.asset = _asset.Asset.fromOperation(attrs.asset());
                        result.amount = this._fromXDRAmount(attrs.amount());
                        result.claimants = [];
                        attrs.claimants().forEach(function(claimant) {
                            result.claimants.push(_claimant.Claimant.fromXDR(claimant));
                        });
                        break;
                    case "claimClaimableBalance":
                        result.type = "claimClaimableBalance";
                        result.balanceId = attrs.toXDR("hex");
                        break;
                    case "beginSponsoringFutureReserves":
                        result.type = "beginSponsoringFutureReserves";
                        result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());
                        break;
                    case "endSponsoringFutureReserves":
                        result.type = "endSponsoringFutureReserves";
                        break;
                    case "revokeSponsorship":
                        extractRevokeSponshipDetails(attrs, result);
                        break;
                    case "clawback":
                        result.type = "clawback";
                        result.amount = this._fromXDRAmount(attrs.amount());
                        result.from = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(attrs.from());
                        result.asset = _asset.Asset.fromOperation(attrs.asset());
                        break;
                    case "clawbackClaimableBalance":
                        result.type = "clawbackClaimableBalance";
                        result.balanceId = attrs.toXDR("hex");
                        break;
                    case "setTrustLineFlags":
                        result.type = "setTrustLineFlags";
                        result.asset = _asset.Asset.fromOperation(attrs.asset());
                        result.trustor = accountIdtoAddress(attrs.trustor());
                        // Convert from the integer-bitwised flag into a sensible object that
                        // indicates true/false for each flag that's on/off.
                        var clears = attrs.clearFlags();
                        var sets = attrs.setFlags();
                        var mapping = {
                            authorized: _xdr2.default.TrustLineFlags.authorizedFlag(),
                            authorizedToMaintainLiabilities: _xdr2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),
                            clawbackEnabled: _xdr2.default.TrustLineFlags.trustlineClawbackEnabledFlag()
                        };
                        var getFlagValue = function getFlagValue(key) {
                            var bit = mapping[key].value;
                            if (sets & bit) return true;
                            if (clears & bit) return false;
                            return undefined;
                        };
                        result.flags = {};
                        Object.keys(mapping).forEach(function(flagName) {
                            result.flags[flagName] = getFlagValue(flagName);
                        });
                        break;
                    case "liquidityPoolDeposit":
                        result.type = "liquidityPoolDeposit";
                        result.liquidityPoolId = attrs.liquidityPoolId().toString("hex");
                        result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());
                        result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());
                        result.minPrice = this._fromXDRPrice(attrs.minPrice());
                        result.maxPrice = this._fromXDRPrice(attrs.maxPrice());
                        break;
                    case "liquidityPoolWithdraw":
                        result.type = "liquidityPoolWithdraw";
                        result.liquidityPoolId = attrs.liquidityPoolId().toString("hex");
                        result.amount = this._fromXDRAmount(attrs.amount());
                        result.minAmountA = this._fromXDRAmount(attrs.minAmountA());
                        result.minAmountB = this._fromXDRAmount(attrs.minAmountB());
                        break;
                    default:
                        throw new Error("Unknown operation: " + operationName);
                }
                return result;
            }
        },
        {
            key: "isValidAmount",
            value: function isValidAmount(value) {
                var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                if (!(0, _isString2.default)(value)) return false;
                var amount = void 0;
                try {
                    amount = new _bignumber2.default(value);
                } catch (e) {
                    return false;
                }
                if (// == 0
                !allowZero && amount.isZero() || // < 0
                amount.isNegative() || // > Max value
                amount.times(ONE).greaterThan(new _bignumber2.default(MAX_INT64).toString()) || // Decimal places (max 7)
                amount.decimalPlaces() > 7 || // NaN or Infinity
                amount.isNaN() || !amount.isFinite()) return false;
                return true;
            }
        },
        {
            key: "constructAmountRequirementsError",
            value: function constructAmountRequirementsError(arg) {
                return arg + " argument must be of type String, represent a positive number and have at most 7 digits after the decimal";
            }
        },
        {
            key: "_checkUnsignedIntValue",
            value: function _checkUnsignedIntValue(name, value) {
                var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                if ((0, _isUndefined2.default)(value)) return undefined;
                if ((0, _isString2.default)(value)) value = parseFloat(value);
                switch(true){
                    case !(0, _isNumber2.default)(value) || !(0, _isFinite2.default)(value) || value % 1 !== 0:
                        throw new Error(name + " value is invalid");
                    case value < 0:
                        throw new Error(name + " value must be unsigned");
                    case !isValidFunction || isValidFunction && isValidFunction(value, name):
                        return value;
                    default:
                        throw new Error(name + " value is invalid");
                }
            }
        },
        {
            key: "_toXDRAmount",
            value: function _toXDRAmount(value) {
                var amount = new _bignumber2.default(value).mul(ONE);
                return _jsXdr.Hyper.fromString(amount.toString());
            }
        },
        {
            key: "_fromXDRAmount",
            value: function _fromXDRAmount(value) {
                return new _bignumber2.default(value).div(ONE).toFixed(7);
            }
        },
        {
            key: "_fromXDRPrice",
            value: function _fromXDRPrice(price) {
                var n = new _bignumber2.default(price.n());
                return n.div(new _bignumber2.default(price.d())).toString();
            }
        },
        {
            key: "_toXDRPrice",
            value: function _toXDRPrice(price) {
                var xdrObject = void 0;
                if (price.n && price.d) xdrObject = new _xdr2.default.Price(price);
                else {
                    price = new _bignumber2.default(price);
                    var approx = (0, _continued_fraction.best_r)(price);
                    xdrObject = new _xdr2.default.Price({
                        n: parseInt(approx[0], 10),
                        d: parseInt(approx[1], 10)
                    });
                }
                if (xdrObject.n() < 0 || xdrObject.d() < 0) throw new Error("price must be positive");
                return xdrObject;
            }
        }
    ]);
    return Operation;
}();
function extractRevokeSponshipDetails(attrs, result) {
    switch(attrs.switch().name){
        case "revokeSponsorshipLedgerEntry":
            var ledgerKey = attrs.ledgerKey();
            switch(ledgerKey.switch().name){
                case _xdr2.default.LedgerEntryType.account().name:
                    result.type = "revokeAccountSponsorship";
                    result.account = accountIdtoAddress(ledgerKey.account().accountId());
                    break;
                case _xdr2.default.LedgerEntryType.trustline().name:
                    result.type = "revokeTrustlineSponsorship";
                    result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());
                    var xdrAsset = ledgerKey.trustLine().asset();
                    switch(xdrAsset.switch()){
                        case _xdr2.default.AssetType.assetTypePoolShare():
                            result.asset = _liquidity_pool_id.LiquidityPoolId.fromOperation(xdrAsset);
                            break;
                        default:
                            result.asset = _asset.Asset.fromOperation(xdrAsset);
                            break;
                    }
                    break;
                case _xdr2.default.LedgerEntryType.offer().name:
                    result.type = "revokeOfferSponsorship";
                    result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());
                    result.offerId = ledgerKey.offer().offerId().toString();
                    break;
                case _xdr2.default.LedgerEntryType.data().name:
                    result.type = "revokeDataSponsorship";
                    result.account = accountIdtoAddress(ledgerKey.data().accountId());
                    result.name = ledgerKey.data().dataName().toString("ascii");
                    break;
                case _xdr2.default.LedgerEntryType.claimableBalance().name:
                    result.type = "revokeClaimableBalanceSponsorship";
                    result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR("hex");
                    break;
                case _xdr2.default.LedgerEntryType.liquidityPool().name:
                    result.type = "revokeLiquidityPoolSponsorship";
                    result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString("hex");
                    break;
                default:
                    throw new Error("Unknown ledgerKey: " + attrs.switch().name);
            }
            break;
        case "revokeSponsorshipSigner":
            result.type = "revokeSignerSponsorship";
            result.account = accountIdtoAddress(attrs.signer().accountId());
            result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());
            break;
        default:
            throw new Error("Unknown revokeSponsorship: " + attrs.switch().name);
    }
}
function convertXDRSignerKeyToObject(signerKey) {
    var attrs = {};
    switch(signerKey.switch().name){
        case _xdr2.default.SignerKeyType.signerKeyTypeEd25519().name:
            attrs.ed25519PublicKey = _strkey.StrKey.encodeEd25519PublicKey(signerKey.ed25519());
            break;
        case _xdr2.default.SignerKeyType.signerKeyTypePreAuthTx().name:
            attrs.preAuthTx = signerKey.preAuthTx().toString("hex");
            break;
        case _xdr2.default.SignerKeyType.signerKeyTypeHashX().name:
            attrs.sha256Hash = signerKey.hashX().toString("hex");
            break;
        default:
            throw new Error("Unknown signerKey: " + signerKey.switch().name);
    }
    return attrs;
}
function accountIdtoAddress(accountId) {
    return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());
}
// Attach all imported operations as static methods on the Operation class
Operation.accountMerge = ops.accountMerge;
Operation.allowTrust = ops.allowTrust;
Operation.bumpSequence = ops.bumpSequence;
Operation.changeTrust = ops.changeTrust;
Operation.createAccount = ops.createAccount;
Operation.createClaimableBalance = ops.createClaimableBalance;
Operation.claimClaimableBalance = ops.claimClaimableBalance;
Operation.clawbackClaimableBalance = ops.clawbackClaimableBalance;
Operation.createPassiveSellOffer = ops.createPassiveSellOffer;
Operation.inflation = ops.inflation;
Operation.manageData = ops.manageData;
Operation.manageSellOffer = ops.manageSellOffer;
Operation.manageBuyOffer = ops.manageBuyOffer;
Operation.pathPaymentStrictReceive = ops.pathPaymentStrictReceive;
Operation.pathPaymentStrictSend = ops.pathPaymentStrictSend;
Operation.payment = ops.payment;
Operation.setOptions = ops.setOptions;
Operation.beginSponsoringFutureReserves = ops.beginSponsoringFutureReserves;
Operation.endSponsoringFutureReserves = ops.endSponsoringFutureReserves;
Operation.revokeAccountSponsorship = ops.revokeAccountSponsorship;
Operation.revokeTrustlineSponsorship = ops.revokeTrustlineSponsorship;
Operation.revokeOfferSponsorship = ops.revokeOfferSponsorship;
Operation.revokeDataSponsorship = ops.revokeDataSponsorship;
Operation.revokeClaimableBalanceSponsorship = ops.revokeClaimableBalanceSponsorship;
Operation.revokeLiquidityPoolSponsorship = ops.revokeLiquidityPoolSponsorship;
Operation.revokeSignerSponsorship = ops.revokeSignerSponsorship;
Operation.clawback = ops.clawback;
Operation.setTrustLineFlags = ops.setTrustLineFlags;
Operation.liquidityPoolDeposit = ops.liquidityPoolDeposit;
Operation.liquidityPoolWithdraw = ops.liquidityPoolWithdraw;

},{"d37a2983252aa4d4":"inVSw","40cd16d227d6e85f":"57qkX","9bf760a75299f42f":"29TDm","625da1f37aa899e8":"aaheT","83d2f458389e34fb":"iAF7t","94ee8f5c823e04bc":"crELm","fec1589b1fb1ee35":"5H7T5","c02e889b0b905a10":"6O238","73a346d185675d93":"hLdvN","cbc2148cbbb30abc":"9teTo","1b0887ce4fc959e5":"hToNo","858832117921a356":"gjDua","36fd03c8a71edca9":"74ahN","5bb06f5e58ea9bbf":"gxpVH","50ab45a22e6e1565":"jXowZ","86b4ce6f0b59b65d":"5F4St"}],"57qkX":[function(require,module,exports) {
(function(globalObj) {
    "use strict";
    /*
      bignumber.js v4.1.0
      A JavaScript library for arbitrary-precision arithmetic.
      https://github.com/MikeMcl/bignumber.js
      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */ var BigNumber, isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, notBool = " not a boolean or binary digit", roundingMode = "rounding mode", tooManyDigits = "number type has more than 15 significant digits", ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 0x1fffffffffffff, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1,
        10,
        100,
        1e3,
        1e4,
        1e5,
        1e6,
        1e7,
        1e8,
        1e9,
        1e10,
        1e11,
        1e12,
        1e13
    ], SQRT_BASE = 1e7, /*
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
         * exception is thrown (if ERRORS is true).
         */ MAX = 1E9; // 0 to MAX_INT32
    /*
     * Create and return a BigNumber constructor.
     */ function constructorFactory(config) {
        var div, parseNumeric, // id tracks the caller function, so its name can be included in error messages.
        id = 0, P = BigNumber.prototype, ONE = new BigNumber(1), /********************************* EDITABLE DEFAULTS **********************************/ /*
             * The default values below must be integers within the inclusive ranges stated.
             * The values can also be changed at run-time using BigNumber.config.
             */ // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, /*
             * The rounding mode used when rounding to the above decimal places, and when using
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
             * UP         0 Away from zero.
             * DOWN       1 Towards zero.
             * CEIL       2 Towards +Infinity.
             * FLOOR      3 Towards -Infinity.
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
             */ ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -10000000, // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7, // Whether BigNumber Errors are ever thrown.
        ERRORS = true, // Change to intValidatorNoErrors if ERRORS is false.
        isValidInt = intValidatorWithErrors, // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, /*
             * The modulo mode used when calculating the modulus: a mod n.
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
             * The remainder (r) is calculated as: r = a - n * q.
             *
             * UP        0 The remainder is positive if the dividend is negative, else is negative.
             * DOWN      1 The remainder has the same sign as the dividend.
             *             This modulo mode is commonly known as 'truncated division' and is
             *             equivalent to (a % n) in JavaScript.
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
             *             The remainder is always positive.
             *
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
             * modes are commonly used for the modulus operation.
             * Although the other rounding modes can also be used, they may not give useful results.
             */ MODULO_MODE = 1, // The maximum number of significant digits of the result of the toPower operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 0, // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            decimalSeparator: ".",
            groupSeparator: ",",
            groupSize: 3,
            secondaryGroupSize: 0,
            fractionGroupSeparator: "\xa0",
            fractionGroupSize: 0
        };
        /******************************************************************************************/ // CONSTRUCTOR
        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
         */ function BigNumber(n, b) {
            var c, e, i, num, len, str, x = this;
            // Enable constructor usage without new.
            if (!(x instanceof BigNumber)) {
                // 'BigNumber() constructor call without new: {n}'
                if (ERRORS) raise(26, "constructor call without new", n);
                return new BigNumber(n, b);
            }
            // 'new BigNumber() base not an integer: {b}'
            // 'new BigNumber() base out of range: {b}'
            if (b == null || !isValidInt(b, 2, 64, id, "base")) {
                // Duplicate.
                if (n instanceof BigNumber) {
                    x.s = n.s;
                    x.e = n.e;
                    x.c = (n = n.c) ? n.slice() : n;
                    id = 0;
                    return;
                }
                if ((num = typeof n == "number") && n * 0 == 0) {
                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;
                    // Fast path for integers.
                    if (n === ~~n) {
                        for(e = 0, i = n; i >= 10; i /= 10, e++);
                        x.e = e;
                        x.c = [
                            n
                        ];
                        id = 0;
                        return;
                    }
                    str = n + "";
                } else {
                    if (!isNumeric.test(str = n + "")) return parseNumeric(x, str, num);
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }
            } else {
                b = b | 0;
                str = n + "";
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                // Allow exponential notation to be used with base 10 argument.
                if (b == 10) {
                    x = new BigNumber(n instanceof BigNumber ? n : str);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                // Any number in exponential form will fail due to the [Ee][+-].
                if ((num = typeof n == "number") && n * 0 != 0 || !new RegExp("^-?" + (c = "[" + ALPHABET.slice(0, b) + "]+") + "(?:\\." + c + ")?$", b < 37 ? "i" : "").test(str)) return parseNumeric(x, str, num, b);
                if (num) {
                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;
                    if (ERRORS && str.replace(/^0\.0*|\./, "").length > 15) // 'new BigNumber() number type has more than 15 significant digits: {n}'
                    raise(id, tooManyDigits, n);
                    // Prevent later check for length on converted number.
                    num = false;
                } else x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                str = convertBase(str, 10, b, x.s);
            }
            // Decimal point?
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {
                // Determine exponent.
                if (e < 0) e = i;
                e += +str.slice(i + 1);
                str = str.substring(0, i);
            } else if (e < 0) // Integer.
            e = str.length;
            // Determine leading zeros.
            for(i = 0; str.charCodeAt(i) === 48; i++);
            // Determine trailing zeros.
            for(len = str.length; str.charCodeAt(--len) === 48;);
            str = str.slice(i, len + 1);
            if (str) {
                len = str.length;
                // Disallow numbers with over 15 significant digits if number type.
                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) raise(id, tooManyDigits, x.s * n);
                e = e - i - 1;
                // Overflow?
                if (e > MAX_EXP) // Infinity.
                x.c = x.e = null;
                else if (e < MIN_EXP) // Zero.
                x.c = [
                    x.e = 0
                ];
                else {
                    x.e = e;
                    x.c = [];
                    // Transform base
                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE;
                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));
                        for(len -= LOG_BASE; i < len;)x.c.push(+str.slice(i, i += LOG_BASE));
                        str = str.slice(i);
                        i = LOG_BASE - str.length;
                    } else i -= len;
                    for(; i--; str += "0");
                    x.c.push(+str);
                }
            } else // Zero.
            x.c = [
                x.e = 0
            ];
            id = 0;
        }
        // CONSTRUCTOR PROPERTIES
        BigNumber.another = constructorFactory;
        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;
        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object or an argument list, with one or many of the following properties or
         * parameters respectively:
         *
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
         *   ERRORS          {boolean|number}   true, false, 1 or 0
         *   CRYPTO          {boolean|number}   true, false, 1 or 0
         *   MODULO_MODE     {number}           0 to 9 inclusive
         *   POW_PRECISION   {number}           0 to MAX inclusive
         *   FORMAT          {object}           See BigNumber.prototype.toFormat
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config(20, 4) is equivalent to
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined.
         * Return an object with the properties current values.
         */ BigNumber.config = BigNumber.set = function() {
            var v, p, i = 0, r = {}, a = arguments, o = a[0], has = o && typeof o == "object" ? function() {
                if (o.hasOwnProperty(p)) return (v = o[p]) != null;
            } : function() {
                if (a.length > i) return (v = a[i++]) != null;
            };
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
            // 'config() DECIMAL_PLACES not an integer: {v}'
            // 'config() DECIMAL_PLACES out of range: {v}'
            if (has(p = "DECIMAL_PLACES") && isValidInt(v, 0, MAX, 2, p)) DECIMAL_PLACES = v | 0;
            r[p] = DECIMAL_PLACES;
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
            // 'config() ROUNDING_MODE not an integer: {v}'
            // 'config() ROUNDING_MODE out of range: {v}'
            if (has(p = "ROUNDING_MODE") && isValidInt(v, 0, 8, 2, p)) ROUNDING_MODE = v | 0;
            r[p] = ROUNDING_MODE;
            // EXPONENTIAL_AT {number|number[]}
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
            // 'config() EXPONENTIAL_AT not an integer: {v}'
            // 'config() EXPONENTIAL_AT out of range: {v}'
            if (has(p = "EXPONENTIAL_AT")) {
                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                        TO_EXP_NEG = v[0] | 0;
                        TO_EXP_POS = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
            }
            r[p] = [
                TO_EXP_NEG,
                TO_EXP_POS
            ];
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
            // 'config() RANGE not an integer: {v}'
            // 'config() RANGE cannot be zero: {v}'
            // 'config() RANGE out of range: {v}'
            if (has(p = "RANGE")) {
                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                        MIN_EXP = v[0] | 0;
                        MAX_EXP = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);
                    else if (ERRORS) raise(2, p + " cannot be zero", v);
                }
            }
            r[p] = [
                MIN_EXP,
                MAX_EXP
            ];
            // ERRORS {boolean|number} true, false, 1 or 0.
            // 'config() ERRORS not a boolean or binary digit: {v}'
            if (has(p = "ERRORS")) {
                if (v === !!v || v === 1 || v === 0) {
                    id = 0;
                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
                } else if (ERRORS) raise(2, p + notBool, v);
            }
            r[p] = ERRORS;
            // CRYPTO {boolean|number} true, false, 1 or 0.
            // 'config() CRYPTO not a boolean or binary digit: {v}'
            // 'config() crypto unavailable: {crypto}'
            if (has(p = "CRYPTO")) {
                if (v === true || v === false || v === 1 || v === 0) {
                    if (v) {
                        v = typeof crypto == "undefined";
                        if (!v && crypto && (crypto.getRandomValues || crypto.randomBytes)) CRYPTO = true;
                        else if (ERRORS) raise(2, "crypto unavailable", v ? void 0 : crypto);
                        else CRYPTO = false;
                    } else CRYPTO = false;
                } else if (ERRORS) raise(2, p + notBool, v);
            }
            r[p] = CRYPTO;
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
            // 'config() MODULO_MODE not an integer: {v}'
            // 'config() MODULO_MODE out of range: {v}'
            if (has(p = "MODULO_MODE") && isValidInt(v, 0, 9, 2, p)) MODULO_MODE = v | 0;
            r[p] = MODULO_MODE;
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
            // 'config() POW_PRECISION not an integer: {v}'
            // 'config() POW_PRECISION out of range: {v}'
            if (has(p = "POW_PRECISION") && isValidInt(v, 0, MAX, 2, p)) POW_PRECISION = v | 0;
            r[p] = POW_PRECISION;
            // FORMAT {object}
            // 'config() FORMAT not an object: {v}'
            if (has(p = "FORMAT")) {
                if (typeof v == "object") FORMAT = v;
                else if (ERRORS) raise(2, p + " not an object", v);
            }
            r[p] = FORMAT;
            return r;
        };
        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */ BigNumber.max = function() {
            return maxOrMin(arguments, P.lt);
        };
        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */ BigNumber.min = function() {
            return maxOrMin(arguments, P.gt);
        };
        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * 'random() decimal places not an integer: {dp}'
         * 'random() decimal places out of range: {dp}'
         * 'random() crypto unavailable: {crypto}'
         */ BigNumber.random = function() {
            var pow2_53 = 0x20000000000000;
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function() {
                return mathfloor(Math.random() * pow2_53);
            } : function() {
                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
            };
            return function(dp) {
                var a, b, e, k, v, i = 0, c = [], rand = new BigNumber(ONE);
                dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;
                k = mathceil(dp / LOG_BASE);
                if (CRYPTO) {
                    // Browsers supporting crypto.getRandomValues.
                    if (crypto.getRandomValues) {
                        a = crypto.getRandomValues(new Uint32Array(k *= 2));
                        for(; i < k;){
                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);
                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9e15) {
                                b = crypto.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {
                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 2;
                            }
                        }
                        i = k / 2;
                    // Node.js supporting crypto.randomBytes.
                    } else if (crypto.randomBytes) {
                        // buffer
                        a = crypto.randomBytes(k *= 7);
                        for(; i < k;){
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                            if (v >= 9e15) crypto.randomBytes(7).copy(a, i);
                            else {
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else {
                        CRYPTO = false;
                        if (ERRORS) raise(14, "crypto unavailable", crypto);
                    }
                }
                // Use Math.random.
                if (!CRYPTO) for(; i < k;){
                    v = random53bitInt();
                    if (v < 9e15) c[i++] = v % 1e14;
                }
                k = c[--i];
                dp %= LOG_BASE;
                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }
                // Remove trailing elements which are zero.
                for(; c[i] === 0; c.pop(), i--);
                // Zero?
                if (i < 0) c = [
                    e = 0
                ];
                else {
                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for(e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);
                    // Count the digits of the first element of c to determine leading zeros, and...
                    for(i = 1, v = c[0]; v >= 10; v /= 10, i++);
                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }
                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();
        // PRIVATE FUNCTIONS
        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase(str, baseOut, baseIn, sign) {
            var d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (baseIn < 37) str = str.toLowerCase();
            // Non-integer.
            if (i >= 0) {
                k = POW_PRECISION;
                // Unlimited precision.
                POW_PRECISION = 0;
                str = str.replace(".", "");
                y = new BigNumber(baseIn);
                x = y.pow(str.length - i);
                POW_PRECISION = k;
                // Convert str as if an integer, then restore the fraction part by dividing the
                // result by its base raised to a power.
                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);
                y.e = y.c.length;
            }
            // Convert the number as integer.
            xc = toBaseOut(str, baseIn, baseOut);
            e = k = xc.length;
            // Remove trailing zeros.
            for(; xc[--k] == 0; xc.pop());
            if (!xc[0]) return "0";
            if (i < 0) --e;
            else {
                x.c = xc;
                x.e = e;
                // sign is needed for correct rounding.
                x.s = sign;
                x = div(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e = x.e;
            }
            d = e + dp + 1;
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) // 1^-dp or 0.
            str = r ? toFixedPoint("1", -dp) : "0";
            else {
                xc.length = d;
                if (r) // Rounding up may mean the previous digit has to be rounded up and so on.
                for(--baseOut; ++xc[--d] > baseOut;){
                    xc[d] = 0;
                    if (!d) {
                        ++e;
                        xc = [
                            1
                        ].concat(xc);
                    }
                }
                // Determine trailing zeros.
                for(k = xc.length; !xc[--k];);
                // E.g. [4, 11, 15] becomes 4bf.
                for(i = 0, str = ""; i <= k; str += ALPHABET.charAt(xc[i++]));
                str = toFixedPoint(str, e);
            }
            // The caller will add the sign.
            return str;
        }
        // Perform division in the specified base. Called by div and convertBase.
        div = function() {
            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
                for(x = x.slice(); i--;){
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }
                if (carry) x = [
                    carry
                ].concat(x);
                return x;
            }
            function compare(a, b, aL, bL) {
                var i, cmp;
                if (aL != bL) cmp = aL > bL ? 1 : -1;
                else {
                    for(i = cmp = 0; i < aL; i++)if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                    }
                }
                return cmp;
            }
            function subtract(a, b, aL, base) {
                var i = 0;
                // Subtract b from a.
                for(; aL--;){
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }
                // Remove leading zeros.
                for(; !a[0] && a.length > 1; a.splice(0, 1));
            }
            // x: dividend, y: divisor.
            return function(x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) return new BigNumber(// Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;
                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }
                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for(i = 0; yc[i] == (xc[i] || 0); i++);
                if (yc[i] > (xc[i] || 0)) e--;
                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.
                    n = mathfloor(base / (yc[0] + 1));
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }
                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz = [
                        0
                    ].concat(yz);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;
                    do {
                        n = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, n.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);
                            //  Algorithm:
                            //  1. product = divisor * trial digit (n)
                            //  2. if product > remainder: product -= divisor, n--
                            //  3. remainder -= product
                            //  4. if product was < remainder at 2:
                            //    5. compare new remainder and divisor
                            //    6. If remainder > divisor: remainder -= divisor, n++
                            if (n > 1) {
                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;
                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                // If product > remainder.
                                // Trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while(compare(prod, rem, prodL, remL) == 1){
                                    n--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {
                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) // divisor < remainder, so n must be at least 1.
                                cmp = n = 1;
                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }
                            if (prodL < remL) prod = [
                                0
                            ].concat(prod);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;
                            // If product was < remainder.
                            if (cmp == -1) // Compare divisor and new remainder.
                            // If divisor < new remainder, subtract divisor from remainder.
                            // Trial digit n too low.
                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                            while(compare(yc, rem, yL, remL) < 1){
                                n++;
                                // Subtract divisor from remainder.
                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                remL = rem.length;
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [
                                0
                            ];
                        } // else cmp === 1 and n will be 0
                        // Add the next digit, n, to the result array.
                        qc[i++] = n;
                        // Update the remainder.
                        if (rem[0]) rem[remL++] = xc[xi] || 0;
                        else {
                            rem = [
                                xc[xi]
                            ];
                            remL = 1;
                        }
                    }while ((xi++ < xL || rem[0] != null) && s--);
                    more = rem[0] != null;
                    // Leading zero?
                    if (!qc[0]) qc.splice(0, 1);
                }
                if (base == BASE) {
                    // To calculate q.e, first get the number of digits of qc[0].
                    for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }
                return q;
            };
        }();
        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n is a BigNumber.
         * i is the index of the last digit required (i.e. the digit that may be rounded up).
         * rm is the rounding mode.
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
         */ function format(n, i, rm, caller) {
            var c0, e, ne, len, str;
            rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;
            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
                str = coeffToString(n.c);
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);
            } else {
                n = round(new BigNumber(n), i, rm);
                // n.e may have changed if the value was rounded up.
                e = n.e;
                str = coeffToString(n.c);
                len = str.length;
                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.
                // Exponential notation.
                if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {
                    // Append zeros?
                    for(; len < i; str += "0", len++);
                    str = toExponential(str, e);
                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e);
                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for(str += "."; i--; str += "0");
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += ".";
                            for(; i--; str += "0");
                        }
                    }
                }
            }
            return n.s < 0 && c0 ? "-" + str : str;
        }
        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var m, n, i = 0;
            if (isArray(args[0])) args = args[0];
            m = new BigNumber(args[0]);
            for(; ++i < args.length;){
                n = new BigNumber(args[i]);
                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) m = n;
            }
            return m;
        }
        /*
         * Return true if n is an integer in range, otherwise throw.
         * Use for argument validation when ERRORS is true.
         */ function intValidatorWithErrors(n, min, max, caller, name) {
            if (n < min || n > max || n != truncate(n)) raise(caller, (name || "decimal places") + (n < min || n > max ? " out of range" : " not an integer"), n);
            return true;
        }
        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */ function normalise(n, c, e) {
            var i = 1, j = c.length;
            // Remove trailing zeros.
            for(; !c[--j]; c.pop());
            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for(j = c[0]; j >= 10; j /= 10, i++);
            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) // Infinity.
            n.c = n.e = null;
            else if (e < MIN_EXP) // Zero.
            n.c = [
                n.e = 0
            ];
            else {
                n.e = e;
                n.c = c;
            }
            return n;
        }
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, num, b) {
                var base, s = num ? str : str.replace(whitespaceOrPlus, "");
                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                else {
                    if (!num) {
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function(m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });
                        if (b) {
                            base = b;
                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                        }
                        if (str != s) return new BigNumber(s, base);
                    }
                    // 'new BigNumber() not a number: {n}'
                    // 'new BigNumber() not a base {b} number: {n}'
                    if (ERRORS) raise(id, "not a" + (b ? " base " + b : "") + " number", str);
                    x.s = null;
                }
                x.c = x.e = null;
                id = 0;
            };
        }();
        // Throw a BigNumber Error.
        function raise(caller, msg, val) {
            var error = new Error([
                "new BigNumber",
                "cmp",
                "config",
                "div",
                "divToInt",
                "eq",
                "gt",
                "gte",
                "lt",
                "lte",
                "minus",
                "mod",
                "plus",
                "precision",
                "random",
                "round",
                "shift",
                "times",
                "toDigits",
                "toExponential",
                "toFixed",
                "toFormat",
                "toFraction",
                "pow",
                "toPrecision",
                "toString",
                "BigNumber" // 26
            ][caller] + "() " + msg + ": " + val);
            error.name = "BigNumber Error";
            id = 0;
            throw error;
        }
        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */ function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            // if x is not Infinity or NaN...
            if (xc) {
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {
                    // Get the number of digits of the first element of xc.
                    for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;
                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];
                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);
                        if (ni >= xc.length) {
                            if (r) {
                                // Needed by sqrt.
                                for(; xc.length <= ni; xc.push(0));
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else break out;
                        } else {
                            n = k = xc[ni];
                            // Get the number of digits of n.
                            for(d = 1; k >= 10; k /= 10, d++);
                            // Get the index of rd within n.
                            i %= LOG_BASE;
                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;
                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }
                    r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;
                        if (r) {
                            // Convert sd to decimal places.
                            sd -= x.e + 1;
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else // Zero.
                        xc[0] = x.e = 0;
                        return x;
                    }
                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }
                    // Round up?
                    if (r) {
                        for(;;)// If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {
                            // i will be the length of xc[0] before k is added.
                            for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                            j = xc[0] += k;
                            for(k = 1; j >= 10; j /= 10, k++);
                            // if i != k the length has increased.
                            if (i != k) {
                                x.e++;
                                if (xc[0] == BASE) xc[0] = 1;
                            }
                            break;
                        } else {
                            xc[ni] += k;
                            if (xc[ni] != BASE) break;
                            xc[ni--] = 0;
                            k = 1;
                        }
                    }
                    // Remove trailing zeros.
                    for(i = xc.length; xc[--i] === 0; xc.pop());
                }
                // Overflow? Infinity.
                if (x.e > MAX_EXP) x.c = x.e = null;
                else if (x.e < MIN_EXP) x.c = [
                    x.e = 0
                ];
            }
            return x;
        }
        // PROTOTYPE/INSTANCE METHODS
        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */ P.absoluteValue = P.abs = function() {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of Infinity.
         */ P.ceil = function() {
            return round(new BigNumber(this), this.e + 1, 2);
        };
        /*
         * Return
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         * 0 if they have the same value,
         * or null if the value of either is NaN.
         */ P.comparedTo = P.cmp = function(y, b) {
            id = 1;
            return compare(this, new BigNumber(y, b));
        };
        /*
         * Return the number of decimal places of the value of this BigNumber, or null if the value
         * of this BigNumber is ±Infinity or NaN.
         */ P.decimalPlaces = P.dp = function() {
            var n, v, c = this.c;
            if (!c) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;
            return n;
        };
        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */ P.dividedBy = P.div = function(y, b) {
            id = 3;
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */ P.dividedToIntegerBy = P.divToInt = function(y, b) {
            id = 4;
            return div(this, new BigNumber(y, b), 0, 1);
        };
        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise returns false.
         */ P.equals = P.eq = function(y, b) {
            id = 5;
            return compare(this, new BigNumber(y, b)) === 0;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of -Infinity.
         */ P.floor = function() {
            return round(new BigNumber(this), this.e + 1, 3);
        };
        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise returns false.
         */ P.greaterThan = P.gt = function(y, b) {
            id = 6;
            return compare(this, new BigNumber(y, b)) > 0;
        };
        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */ P.greaterThanOrEqualTo = P.gte = function(y, b) {
            id = 7;
            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
        };
        /*
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
         */ P.isFinite = function() {
            return !!this.c;
        };
        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */ P.isInteger = P.isInt = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        /*
         * Return true if the value of this BigNumber is NaN, otherwise returns false.
         */ P.isNaN = function() {
            return !this.s;
        };
        /*
         * Return true if the value of this BigNumber is negative, otherwise returns false.
         */ P.isNegative = P.isNeg = function() {
            return this.s < 0;
        };
        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
         */ P.isZero = function() {
            return !!this.c && this.c[0] == 0;
        };
        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise returns false.
         */ P.lessThan = P.lt = function(y, b) {
            id = 8;
            return compare(this, new BigNumber(y, b)) < 0;
        };
        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */ P.lessThanOrEqualTo = P.lte = function(y, b) {
            id = 9;
            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };
        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */ P.minus = P.sub = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            id = 10;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);
                // Either zero?
                if (!xc[0] || !yc[0]) // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Determine which is the bigger number.
            if (a = xe - ye) {
                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }
                t.reverse();
                // Prepend zeros to equalise exponents.
                for(b = a; b--; t.push(0));
                t.reverse();
            } else {
                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
                for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
            b = (j = yc.length) - (i = xc.length);
            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for(; b--; xc[i++] = 0);
            b = BASE - 1;
            // Subtract yc from xc.
            for(; j > a;){
                if (xc[--j] < yc[j]) {
                    for(i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                }
                xc[j] -= yc[j];
            }
            // Remove leading zeros and adjust exponent accordingly.
            for(; xc[0] == 0; xc.splice(0, 1), --ye);
            // Zero?
            if (!xc[0]) {
                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [
                    y.e = 0
                ];
                return y;
            }
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };
        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */ P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            id = 11;
            y = new BigNumber(y, b);
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) return new BigNumber(NaN);
            else if (!y.c || x.c && !x.c[0]) return new BigNumber(x);
            if (MODULO_MODE == 9) {
                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else q = div(x, y, 0, MODULO_MODE);
            return x.minus(q.times(y));
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */ P.negated = P.neg = function() {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };
        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */ P.plus = P.add = function(y, b) {
            var t, x = this, a = x.s;
            id = 12;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);
                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }
                t.reverse();
                for(; a--; t.push(0));
                t.reverse();
            }
            a = xc.length;
            b = yc.length;
            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for(a = 0; b;){
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }
            if (a) {
                xc = [
                    a
                ].concat(xc);
                ++ye;
            }
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };
        /*
         * Return the number of significant digits of the value of this BigNumber.
         *
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
         */ P.precision = P.sd = function(z) {
            var n, v, x = this, c = x.c;
            // 'precision() argument not a boolean or binary digit: {z}'
            if (z != null && z !== !!z && z !== 1 && z !== 0) {
                if (ERRORS) raise(13, "argument" + notBool, z);
                if (z != !!z) z = null;
            }
            if (!c) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
                // Subtract the number of trailing zeros of the last element.
                for(; v % 10 == 0; v /= 10, n--);
                // Add the number of digits of the first element.
                for(v = c[0]; v >= 10; v /= 10, n++);
            }
            if (z && x.e + 1 > n) n = x.e + 1;
            return n;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
         * omitted.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'round() decimal places out of range: {dp}'
         * 'round() decimal places not an integer: {dp}'
         * 'round() rounding mode not an integer: {rm}'
         * 'round() rounding mode out of range: {rm}'
         */ P.round = function(dp, rm) {
            var n = new BigNumber(this);
            if (dp == null || isValidInt(dp, 0, MAX, 15)) round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
            return n;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
         * otherwise.
         *
         * 'shift() argument not an integer: {k}'
         * 'shift() argument out of range: {k}'
         */ P.shift = function(k) {
            var n = this;
            return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, "argument") ? n.times("1e" + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);
        };
        /*
         *  sqrt(-n) =  N
         *  sqrt( N) =  N
         *  sqrt(-I) =  N
         *  sqrt( I) =  I
         *  sqrt( 0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */ P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber("0.5");
            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            // Initial estimate.
            s = Math.sqrt(+x);
            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += "0";
                s = Math.sqrt(n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
                if (s == 1 / 0) n = "1e" + e;
                else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf("e") + 1) + e;
                }
                r = new BigNumber(n);
            } else r = new BigNumber(s + "");
            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;
                // Newton-Raphson iteration.
                for(;;){
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));
                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == "9999" || !rep && n == "4999") {
                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);
                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }
                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }
                            break;
                        }
                    }
                }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber times the value of
         * BigNumber(y, b).
         */ P.times = P.mul = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (id = 17, y = new BigNumber(y, b)).c;
            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) y.c = y.e = y.s = null;
                else {
                    y.s *= x.s;
                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) y.c = y.e = null;
                    else {
                        y.c = [
                            0
                        ];
                        y.e = 0;
                    }
                }
                return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;
            // Initialise the result array with zeros.
            for(i = xcL + ycL, zc = []; i--; zc.push(0));
            base = BASE;
            sqrtBase = SQRT_BASE;
            for(i = ycL; --i >= 0;){
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;
                for(k = xcL, j = i + k; j > i;){
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }
                zc[j] = c;
            }
            if (c) ++e;
            else zc.splice(0, 1);
            return normalise(y, zc, e);
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toDigits() precision out of range: {sd}'
         * 'toDigits() precision not an integer: {sd}'
         * 'toDigits() rounding mode not an integer: {rm}'
         * 'toDigits() rounding mode out of range: {rm}'
         */ P.toDigits = function(sd, rm) {
            var n = new BigNumber(this);
            sd = sd == null || !isValidInt(sd, 1, MAX, 18, "precision") ? null : sd | 0;
            rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;
            return sd ? round(n, sd, rm) : n;
        };
        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toExponential() decimal places not an integer: {dp}'
         * 'toExponential() decimal places out of range: {dp}'
         * 'toExponential() rounding mode not an integer: {rm}'
         * 'toExponential() rounding mode out of range: {rm}'
         */ P.toExponential = function(dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
        };
        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFixed() decimal places not an integer: {dp}'
         * 'toFixed() decimal places out of range: {dp}'
         * 'toFixed() rounding mode not an integer: {rm}'
         * 'toFixed() rounding mode out of range: {rm}'
         */ P.toFixed = function(dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);
        };
        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.config).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFormat() decimal places not an integer: {dp}'
         * 'toFormat() decimal places out of range: {dp}'
         * 'toFormat() rounding mode not an integer: {rm}'
         * 'toFormat() rounding mode out of range: {rm}'
         */ P.toFormat = function(dp, rm) {
            var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);
            if (this.c) {
                var i, arr = str.split("."), g1 = +FORMAT.groupSize, g2 = +FORMAT.secondaryGroupSize, groupSeparator = FORMAT.groupSeparator, intPart = arr[0], fractionPart = arr[1], isNeg = this.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;
                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = "-" + intPart;
                }
                str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp("\\d{" + g2 + "}\\B", "g"), "$&" + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;
            }
            return str;
        };
        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
         *
         * 'toFraction() max denominator not an integer: {md}'
         * 'toFraction() max denominator out of range: {md}'
         */ P.toFraction = function(md) {
            var arr, d0, d2, e, exp, n, n0, q, s, k = ERRORS, x = this, xc = x.c, d = new BigNumber(ONE), n1 = d0 = new BigNumber(ONE), d1 = n0 = new BigNumber(ONE);
            if (md != null) {
                ERRORS = false;
                n = new BigNumber(md);
                ERRORS = k;
                if (!(k = n.isInt()) || n.lt(ONE)) {
                    if (ERRORS) raise(22, "max denominator " + (k ? "out of range" : "not an integer"), md);
                    // ERRORS is false:
                    // If md is a finite non-integer >= 1, round it to an integer and use it.
                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
                }
            }
            if (!xc) return x.toString();
            s = coeffToString(xc);
            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);
            // n0 = d1 = 0
            n0.c[0] = 0;
            for(;;){
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.cmp(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e *= 2;
            // Determine which fraction is closer to x, n0/d0 or n1/d1
            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [
                n1.toString(),
                d1.toString()
            ] : [
                n0.toString(),
                d0.toString()
            ];
            MAX_EXP = exp;
            return arr;
        };
        /*
         * Return the value of this BigNumber converted to a number primitive.
         */ P.toNumber = function() {
            return +this;
        };
        /*
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using
         * ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are positive integers,
         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).
         *
         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         * [m] {number|string|BigNumber} The modulus.
         *
         * 'pow() exponent not an integer: {n}'
         * 'pow() exponent out of range: {n}'
         *
         * Performs 54 loop iterations for n of 9007199254740991.
         */ P.toPower = P.pow = function(n, m) {
            var k, y, z, i = mathfloor(n < 0 ? -n : +n), x = this;
            if (m != null) {
                id = 23;
                m = new BigNumber(m);
            }
            // Pass ±Infinity to Math.pow if exponent is out of range.
            if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, "exponent") && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && (n = NaN, true)) || n == 0) {
                k = Math.pow(+x, n);
                return new BigNumber(m ? k % m : k);
            }
            if (m) {
                if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) x = x.mod(m);
                else {
                    z = m;
                    // Nullify m so only a single mod operation is performed at the end.
                    m = null;
                }
            } else if (POW_PRECISION) // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            // (Using + 1.5 would give [9, 21] guard digits.)
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
            y = new BigNumber(ONE);
            for(;;){
                if (i % 2) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (m) y = y.mod(m);
                }
                i = mathfloor(i / 2);
                if (!i) break;
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (m) x = x.mod(m);
            }
            if (m) return y;
            if (n < 0) y = ONE.div(y);
            return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
        };
        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toPrecision() precision not an integer: {sd}'
         * 'toPrecision() precision out of range: {sd}'
         * 'toPrecision() rounding mode not an integer: {rm}'
         * 'toPrecision() rounding mode out of range: {rm}'
         */ P.toPrecision = function(sd, rm) {
            return format(this, sd != null && isValidInt(sd, 1, MAX, 24, "precision") ? sd | 0 : null, rm, 24);
        };
        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to 64 inclusive.
         *
         * 'toString() base not an integer: {b}'
         * 'toString() base out of range: {b}'
         */ P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            // Infinity or NaN?
            if (e === null) {
                if (s) {
                    str = "Infinity";
                    if (s < 0) str = "-" + str;
                } else str = "NaN";
            } else {
                str = coeffToString(n.c);
                if (b == null || !isValidInt(b, 2, 64, 25, "base")) str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
                else str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
                if (s < 0 && n.c[0]) str = "-" + str;
            }
            return str;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
         * number.
         */ P.truncated = P.trunc = function() {
            return round(new BigNumber(this), this.e + 1, 1);
        };
        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */ P.valueOf = P.toJSON = function() {
            var str, n = this, e = n.e;
            if (e === null) return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
            return n.s < 0 ? "-" + str : str;
        };
        P.isBigNumber = true;
        if (config != null) BigNumber.config(config);
        return BigNumber;
    }
    // PRIVATE HELPER FUNCTIONS
    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }
    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for(; i < j;){
            s = a[i++] + "";
            z = LOG_BASE - s.length;
            for(; z--; s = "0" + s);
            r += s;
        }
        // Determine trailing zeros.
        for(j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
    }
    // Compare the value of BigNumbers x and y.
    function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        // Either NaN?
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
        // Signs differ?
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        // Compare digit by digit.
        for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    /*
     * Return true if n is a valid number in range, otherwise false.
     * Use for argument validation when ERRORS is false.
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
     */ function intValidatorNoErrors(n, min, max) {
        return (n = truncate(n)) >= min && n <= max;
    }
    function isArray(obj) {
        return Object.prototype.toString.call(obj) == "[object Array]";
    }
    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. convertBase('255', 10, 16) returns [15, 15].
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
     */ function toBaseOut(str, baseIn, baseOut) {
        var j, arr = [
            0
        ], arrL, i = 0, len = str.length;
        for(; i < len;){
            for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);
            arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));
            for(; j < arr.length; j++)if (arr[j] > baseOut - 1) {
                if (arr[j + 1] == null) arr[j + 1] = 0;
                arr[j + 1] += arr[j] / baseOut | 0;
                arr[j] %= baseOut;
            }
        }
        return arr.reverse();
    }
    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
    }
    function toFixedPoint(str, e) {
        var len, z;
        // Negative exponent?
        if (e < 0) {
            // Prepend zeros.
            for(z = "0."; ++e; z += "0");
            str = z + str;
        // Positive exponent
        } else {
            len = str.length;
            // Append zeros.
            if (++e > len) {
                for(z = "0", e -= len; --e; z += "0");
                str += z;
            } else if (e < len) str = str.slice(0, e) + "." + str.slice(e);
        }
        return str;
    }
    function truncate(n) {
        n = parseFloat(n);
        return n < 0 ? mathceil(n) : mathfloor(n);
    }
    // EXPORT
    BigNumber = constructorFactory();
    BigNumber["default"] = BigNumber.BigNumber = BigNumber;
    // AMD.
    if (typeof define == "function" && define.amd) define(function() {
        return BigNumber;
    });
    else if (0, module.exports) module.exports = BigNumber;
    else {
        if (!globalObj) globalObj = typeof self != "undefined" ? self : Function("return this")();
        globalObj.BigNumber = BigNumber;
    }
})(this);

},{}],"5H7T5":[function(require,module,exports) {
var root = require("3dc058c066a52c91");
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsFinite = root.isFinite;
/**
 * Checks if `value` is a finite primitive number.
 *
 * **Note:** This method is based on
 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
 * @example
 *
 * _.isFinite(3);
 * // => true
 *
 * _.isFinite(Number.MIN_VALUE);
 * // => true
 *
 * _.isFinite(Infinity);
 * // => false
 *
 * _.isFinite('3');
 * // => false
 */ function isFinite(value) {
    return typeof value == "number" && nativeIsFinite(value);
}
module.exports = isFinite;

},{"3dc058c066a52c91":"dSYUs"}],"6O238":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _slicedToArray = function() {
    function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally{
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    return function(arr, i) {
        if (Array.isArray(arr)) return arr;
        else if (Symbol.iterator in Object(arr)) return sliceIterator(arr, i);
        else throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
}();
exports.best_r = best_r;
var _bignumber = require("f6a60be001495f05");
var _bignumber2 = _interopRequireDefault(_bignumber);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// eslint-disable-next-line no-bitwise
var MAX_INT = 2147483647;
/**
 * Calculates and returns the best rational approximation of the given real number.
 * @private
 * @param {string|number|BigNumber} rawNumber Real number
 * @throws Error Throws `Error` when the best rational approximation cannot be found.
 * @returns {array} first element is n (numerator), second element is d (denominator)
 */ function best_r(rawNumber) {
    var number = new _bignumber2.default(rawNumber);
    var a = void 0;
    var f = void 0;
    var fractions = [
        [
            new _bignumber2.default(0),
            new _bignumber2.default(1)
        ],
        [
            new _bignumber2.default(1),
            new _bignumber2.default(0)
        ]
    ];
    var i = 2;
    // eslint-disable-next-line no-constant-condition
    while(true){
        if (number.gt(MAX_INT)) break;
        a = number.floor();
        f = number.sub(a);
        var h = a.mul(fractions[i - 1][0]).add(fractions[i - 2][0]);
        var k = a.mul(fractions[i - 1][1]).add(fractions[i - 2][1]);
        if (h.gt(MAX_INT) || k.gt(MAX_INT)) break;
        fractions.push([
            h,
            k
        ]);
        if (f.eq(0)) break;
        number = new _bignumber2.default(1).div(f);
        i += 1;
    }
    var _fractions = _slicedToArray(fractions[fractions.length - 1], 2), n = _fractions[0], d = _fractions[1];
    if (n.isZero() || d.isZero()) throw new Error("Couldn't find approximation");
    return [
        n.toNumber(),
        d.toNumber()
    ];
}

},{"f6a60be001495f05":"57qkX"}],"9teTo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LiquidityPoolAsset = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _clone = require("b4a6ef128b44cf47");
var _clone2 = _interopRequireDefault(_clone);
var _xdr = require("f4c7376d271fbced");
var _xdr2 = _interopRequireDefault(_xdr);
var _asset = require("7807e7f4b1ddf21d");
var _get_liquidity_pool_id = require("3a200f83e69d652a");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * LiquidityPoolAsset class represents a liquidity pool trustline change.
 *
 * @constructor
 * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.
 * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.
 * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.
 */ var LiquidityPoolAsset = exports.LiquidityPoolAsset = function() {
    function LiquidityPoolAsset(assetA, assetB, fee) {
        _classCallCheck(this, LiquidityPoolAsset);
        if (!assetA || !(assetA instanceof _asset.Asset)) throw new Error("assetA is invalid");
        if (!assetB || !(assetB instanceof _asset.Asset)) throw new Error("assetB is invalid");
        if (_asset.Asset.compare(assetA, assetB) !== -1) throw new Error("Assets are not in lexicographic order");
        if (!fee || fee !== _get_liquidity_pool_id.LiquidityPoolFeeV18) throw new Error("fee is invalid");
        this.assetA = assetA;
        this.assetB = assetB;
        this.fee = fee;
    }
    /**
   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object
   * representation.
   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.
   * @returns {LiquidityPoolAsset}
   */ _createClass(LiquidityPoolAsset, [
        {
            key: "toXDRObject",
            /**
     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.
     *
     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`
     * please refer to the
     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.
     *
     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.
     */ value: function toXDRObject() {
                var lpConstantProductParamsXdr = new _xdr2.default.LiquidityPoolConstantProductParameters({
                    assetA: this.assetA.toXDRObject(),
                    assetB: this.assetB.toXDRObject(),
                    fee: this.fee
                });
                var lpParamsXdr = new _xdr2.default.LiquidityPoolParameters("liquidityPoolConstantProduct", lpConstantProductParamsXdr);
                return new _xdr2.default.ChangeTrustAsset("assetTypePoolShare", lpParamsXdr);
            }
        },
        {
            key: "getLiquidityPoolParameters",
            value: function getLiquidityPoolParameters() {
                return (0, _clone2.default)({
                    assetA: this.assetA,
                    assetB: this.assetB,
                    fee: this.fee
                });
            }
        },
        {
            key: "getAssetType",
            value: function getAssetType() {
                return "liquidity_pool_shares";
            }
        },
        {
            key: "equals",
            value: function equals(other) {
                return this.assetA.equals(other.assetA) && this.assetB.equals(other.assetB) && this.fee === other.fee;
            }
        },
        {
            key: "toString",
            value: function toString() {
                var poolId = (0, _get_liquidity_pool_id.getLiquidityPoolId)("constant_product", this.getLiquidityPoolParameters()).toString("hex");
                return "liquidity_pool:" + poolId;
            }
        }
    ], [
        {
            key: "fromOperation",
            value: function fromOperation(ctAssetXdr) {
                var assetType = ctAssetXdr.switch();
                if (assetType === _xdr2.default.AssetType.assetTypePoolShare()) {
                    var liquidityPoolParameters = ctAssetXdr.liquidityPool().constantProduct();
                    return new this(_asset.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());
                }
                throw new Error("Invalid asset type: " + assetType.name);
            }
        }
    ]);
    return LiquidityPoolAsset;
}();

},{"b4a6ef128b44cf47":"edHVe","f4c7376d271fbced":"gxpVH","7807e7f4b1ddf21d":"hLdvN","3a200f83e69d652a":"lMZqW"}],"hToNo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Claimant = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _xdr = require("a2b0a2766e9543cc");
var _xdr2 = _interopRequireDefault(_xdr);
var _keypair = require("3169354b51184b9f");
var _strkey = require("d94ae6a944fab886");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * Claimant class represents an xdr.Claimant
 *
 * The claim predicate is optional, it defaults to unconditional if none is specified.
 *
 * @constructor
 * @param {string} destination - The destination account ID.
 * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.
 */ var Claimant = exports.Claimant = function() {
    function Claimant(destination, predicate) {
        _classCallCheck(this, Claimant);
        if (destination && !_strkey.StrKey.isValidEd25519PublicKey(destination)) throw new Error("Destination is invalid");
        this._destination = destination;
        if (!predicate) this._predicate = _xdr2.default.ClaimPredicate.claimPredicateUnconditional();
        else if (predicate instanceof _xdr2.default.ClaimPredicate) this._predicate = predicate;
        else throw new Error("Predicate should be an xdr.ClaimPredicate");
    }
    /**
   * Returns an unconditional claim predicate
   * @Return {xdr.ClaimPredicate}
   */ _createClass(Claimant, [
        {
            key: "toXDRObject",
            /**
     * Returns the xdr object for this claimant.
     * @returns {xdr.Claimant} XDR Claimant object
     */ value: function toXDRObject() {
                var claimant = new _xdr2.default.ClaimantV0({
                    destination: _keypair.Keypair.fromPublicKey(this._destination).xdrAccountId(),
                    predicate: this._predicate
                });
                return _xdr2.default.Claimant.claimantTypeV0(claimant);
            }
        },
        {
            key: "destination",
            get: function get() {
                return this._destination;
            },
            set: function set(value) {
                throw new Error("Claimant is immutable");
            }
        },
        {
            key: "predicate",
            get: function get() {
                return this._predicate;
            },
            set: function set(value) {
                throw new Error("Claimant is immutable");
            }
        }
    ], [
        {
            key: "predicateUnconditional",
            value: function predicateUnconditional() {
                return _xdr2.default.ClaimPredicate.claimPredicateUnconditional();
            }
        },
        {
            key: "predicateAnd",
            value: function predicateAnd(left, right) {
                if (!(left instanceof _xdr2.default.ClaimPredicate)) throw new Error("left Predicate should be an xdr.ClaimPredicate");
                if (!(right instanceof _xdr2.default.ClaimPredicate)) throw new Error("right Predicate should be an xdr.ClaimPredicate");
                return _xdr2.default.ClaimPredicate.claimPredicateAnd([
                    left,
                    right
                ]);
            }
        },
        {
            key: "predicateOr",
            value: function predicateOr(left, right) {
                if (!(left instanceof _xdr2.default.ClaimPredicate)) throw new Error("left Predicate should be an xdr.ClaimPredicate");
                if (!(right instanceof _xdr2.default.ClaimPredicate)) throw new Error("right Predicate should be an xdr.ClaimPredicate");
                return _xdr2.default.ClaimPredicate.claimPredicateOr([
                    left,
                    right
                ]);
            }
        },
        {
            key: "predicateNot",
            value: function predicateNot(predicate) {
                if (!(predicate instanceof _xdr2.default.ClaimPredicate)) throw new Error("right Predicate should be an xdr.ClaimPredicate");
                return _xdr2.default.ClaimPredicate.claimPredicateNot(predicate);
            }
        },
        {
            key: "predicateBeforeAbsoluteTime",
            value: function predicateBeforeAbsoluteTime(absBefore) {
                return _xdr2.default.ClaimPredicate.claimPredicateBeforeAbsoluteTime(_xdr2.default.Int64.fromString(absBefore));
            }
        },
        {
            key: "predicateBeforeRelativeTime",
            value: function predicateBeforeRelativeTime(seconds) {
                return _xdr2.default.ClaimPredicate.claimPredicateBeforeRelativeTime(_xdr2.default.Int64.fromString(seconds));
            }
        },
        {
            key: "fromXDR",
            value: function fromXDR(claimantXdr) {
                var value = void 0;
                switch(claimantXdr.switch()){
                    case _xdr2.default.ClaimantType.claimantTypeV0():
                        value = claimantXdr.v0();
                        return new this(_strkey.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());
                    default:
                        throw new Error("Invalid claimant type: " + claimantXdr.switch().name);
                }
            }
        }
    ]);
    return Claimant;
}();

},{"a2b0a2766e9543cc":"gxpVH","3169354b51184b9f":"kfbNf","d94ae6a944fab886":"gjDua"}],"74ahN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LiquidityPoolId = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _clone = require("4658fd6b163ba90e");
var _clone2 = _interopRequireDefault(_clone);
var _xdr = require("dcabe48eee2d5b37");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * LiquidityPoolId class represents the asset referenced by a trustline to a
 * liquidity pool.
 *
 * @constructor
 * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.
 */ var LiquidityPoolId = exports.LiquidityPoolId = function() {
    function LiquidityPoolId(liquidityPoolId) {
        _classCallCheck(this, LiquidityPoolId);
        if (!liquidityPoolId) throw new Error("liquidityPoolId cannot be empty");
        if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) throw new Error("Liquidity pool ID is not a valid hash");
        this.liquidityPoolId = liquidityPoolId;
    }
    /**
   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.
   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.
   * @returns {LiquidityPoolId}
   */ _createClass(LiquidityPoolId, [
        {
            key: "toXDRObject",
            /**
     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.
     *
     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please
     * refer to the
     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.
     *
     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object
     */ value: function toXDRObject() {
                var xdrPoolId = _xdr2.default.PoolId.fromXDR(this.liquidityPoolId, "hex");
                return new _xdr2.default.TrustLineAsset("assetTypePoolShare", xdrPoolId);
            }
        },
        {
            key: "getLiquidityPoolId",
            value: function getLiquidityPoolId() {
                return (0, _clone2.default)(this.liquidityPoolId);
            }
        },
        {
            key: "getAssetType",
            value: function getAssetType() {
                return "liquidity_pool_shares";
            }
        },
        {
            key: "equals",
            value: function equals(asset) {
                return this.liquidityPoolId === asset.getLiquidityPoolId();
            }
        },
        {
            key: "toString",
            value: function toString() {
                return "liquidity_pool:" + this.liquidityPoolId;
            }
        }
    ], [
        {
            key: "fromOperation",
            value: function fromOperation(tlAssetXdr) {
                var assetType = tlAssetXdr.switch();
                if (assetType === _xdr2.default.AssetType.assetTypePoolShare()) {
                    var liquidityPoolId = tlAssetXdr.liquidityPoolId().toString("hex");
                    return new this(liquidityPoolId);
                }
                throw new Error("Invalid asset type: " + assetType.name);
            }
        }
    ]);
    return LiquidityPoolId;
}();

},{"4658fd6b163ba90e":"edHVe","dcabe48eee2d5b37":"gxpVH"}],"jXowZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _manage_sell_offer = require("a5f0d70697c68c20");
Object.defineProperty(exports, "manageSellOffer", {
    enumerable: true,
    get: function get() {
        return _manage_sell_offer.manageSellOffer;
    }
});
var _create_passive_sell_offer = require("67b7cd539074ec2a");
Object.defineProperty(exports, "createPassiveSellOffer", {
    enumerable: true,
    get: function get() {
        return _create_passive_sell_offer.createPassiveSellOffer;
    }
});
var _account_merge = require("4e520f07d5f61f58");
Object.defineProperty(exports, "accountMerge", {
    enumerable: true,
    get: function get() {
        return _account_merge.accountMerge;
    }
});
var _allow_trust = require("79ef82c3d3959d5b");
Object.defineProperty(exports, "allowTrust", {
    enumerable: true,
    get: function get() {
        return _allow_trust.allowTrust;
    }
});
var _bump_sequence = require("d2c34185d2f92285");
Object.defineProperty(exports, "bumpSequence", {
    enumerable: true,
    get: function get() {
        return _bump_sequence.bumpSequence;
    }
});
var _change_trust = require("ab5d945b007ec93c");
Object.defineProperty(exports, "changeTrust", {
    enumerable: true,
    get: function get() {
        return _change_trust.changeTrust;
    }
});
var _create_account = require("47fe004749816ac7");
Object.defineProperty(exports, "createAccount", {
    enumerable: true,
    get: function get() {
        return _create_account.createAccount;
    }
});
var _create_claimable_balance = require("6971b1ce94ea77b0");
Object.defineProperty(exports, "createClaimableBalance", {
    enumerable: true,
    get: function get() {
        return _create_claimable_balance.createClaimableBalance;
    }
});
var _claim_claimable_balance = require("80850f0fba4e2a9d");
Object.defineProperty(exports, "claimClaimableBalance", {
    enumerable: true,
    get: function get() {
        return _claim_claimable_balance.claimClaimableBalance;
    }
});
var _clawback_claimable_balance = require("7af2473ba4370a8");
Object.defineProperty(exports, "clawbackClaimableBalance", {
    enumerable: true,
    get: function get() {
        return _clawback_claimable_balance.clawbackClaimableBalance;
    }
});
var _inflation = require("cfced9b6d80b1f12");
Object.defineProperty(exports, "inflation", {
    enumerable: true,
    get: function get() {
        return _inflation.inflation;
    }
});
var _manage_data = require("816f978031f8c59e");
Object.defineProperty(exports, "manageData", {
    enumerable: true,
    get: function get() {
        return _manage_data.manageData;
    }
});
var _manage_buy_offer = require("a2b95496f0809a11");
Object.defineProperty(exports, "manageBuyOffer", {
    enumerable: true,
    get: function get() {
        return _manage_buy_offer.manageBuyOffer;
    }
});
var _path_payment_strict_receive = require("5d22a55d6b132572");
Object.defineProperty(exports, "pathPaymentStrictReceive", {
    enumerable: true,
    get: function get() {
        return _path_payment_strict_receive.pathPaymentStrictReceive;
    }
});
var _path_payment_strict_send = require("826dc06b5b829414");
Object.defineProperty(exports, "pathPaymentStrictSend", {
    enumerable: true,
    get: function get() {
        return _path_payment_strict_send.pathPaymentStrictSend;
    }
});
var _payment = require("95385b56d60723dc");
Object.defineProperty(exports, "payment", {
    enumerable: true,
    get: function get() {
        return _payment.payment;
    }
});
var _set_options = require("b1454d6a177874d6");
Object.defineProperty(exports, "setOptions", {
    enumerable: true,
    get: function get() {
        return _set_options.setOptions;
    }
});
var _begin_sponsoring_future_reserves = require("24a21b0cca766261");
Object.defineProperty(exports, "beginSponsoringFutureReserves", {
    enumerable: true,
    get: function get() {
        return _begin_sponsoring_future_reserves.beginSponsoringFutureReserves;
    }
});
var _end_sponsoring_future_reserves = require("76717e5a2b86ee20");
Object.defineProperty(exports, "endSponsoringFutureReserves", {
    enumerable: true,
    get: function get() {
        return _end_sponsoring_future_reserves.endSponsoringFutureReserves;
    }
});
var _revoke_sponsorship = require("502381274fcbb535");
Object.defineProperty(exports, "revokeAccountSponsorship", {
    enumerable: true,
    get: function get() {
        return _revoke_sponsorship.revokeAccountSponsorship;
    }
});
Object.defineProperty(exports, "revokeTrustlineSponsorship", {
    enumerable: true,
    get: function get() {
        return _revoke_sponsorship.revokeTrustlineSponsorship;
    }
});
Object.defineProperty(exports, "revokeOfferSponsorship", {
    enumerable: true,
    get: function get() {
        return _revoke_sponsorship.revokeOfferSponsorship;
    }
});
Object.defineProperty(exports, "revokeDataSponsorship", {
    enumerable: true,
    get: function get() {
        return _revoke_sponsorship.revokeDataSponsorship;
    }
});
Object.defineProperty(exports, "revokeClaimableBalanceSponsorship", {
    enumerable: true,
    get: function get() {
        return _revoke_sponsorship.revokeClaimableBalanceSponsorship;
    }
});
Object.defineProperty(exports, "revokeLiquidityPoolSponsorship", {
    enumerable: true,
    get: function get() {
        return _revoke_sponsorship.revokeLiquidityPoolSponsorship;
    }
});
Object.defineProperty(exports, "revokeSignerSponsorship", {
    enumerable: true,
    get: function get() {
        return _revoke_sponsorship.revokeSignerSponsorship;
    }
});
var _clawback = require("f2b6dd3c0fad2047");
Object.defineProperty(exports, "clawback", {
    enumerable: true,
    get: function get() {
        return _clawback.clawback;
    }
});
var _set_trustline_flags = require("f651dfadeb466960");
Object.defineProperty(exports, "setTrustLineFlags", {
    enumerable: true,
    get: function get() {
        return _set_trustline_flags.setTrustLineFlags;
    }
});
var _liquidity_pool_deposit = require("63df8dc5e820cf19");
Object.defineProperty(exports, "liquidityPoolDeposit", {
    enumerable: true,
    get: function get() {
        return _liquidity_pool_deposit.liquidityPoolDeposit;
    }
});
var _liquidity_pool_withdraw = require("359e8ef999d813ea");
Object.defineProperty(exports, "liquidityPoolWithdraw", {
    enumerable: true,
    get: function get() {
        return _liquidity_pool_withdraw.liquidityPoolWithdraw;
    }
});

},{"a5f0d70697c68c20":"we61j","67b7cd539074ec2a":"jHX8Y","4e520f07d5f61f58":"cYIlL","79ef82c3d3959d5b":"b589k","d2c34185d2f92285":"8qS5b","ab5d945b007ec93c":"5QwGJ","47fe004749816ac7":"4c2za","6971b1ce94ea77b0":"5kzuc","80850f0fba4e2a9d":"hUGxe","7af2473ba4370a8":"cWMgh","cfced9b6d80b1f12":"59oOz","816f978031f8c59e":"9QkzO","a2b95496f0809a11":"7ytJE","5d22a55d6b132572":"ihLay","826dc06b5b829414":"bPmPG","95385b56d60723dc":"CMhse","b1454d6a177874d6":"h6aNA","24a21b0cca766261":"1SxpY","76717e5a2b86ee20":"lNDpB","502381274fcbb535":"cjc2Y","f2b6dd3c0fad2047":"ghsgs","f651dfadeb466960":"3clu3","63df8dc5e820cf19":"jUlMm","359e8ef999d813ea":"issek"}],"we61j":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.manageSellOffer = manageSellOffer;
var _isUndefined = require("285cc560a0985e8b");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _jsXdr = require("b84c673ec05c4c10");
var _xdr = require("a793fbbd968debb9");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Returns a XDR ManageSellOfferOp. A "manage sell offer" operation creates, updates, or
 * deletes an offer.
 * @function
 * @alias Operation.manageSellOffer
 * @param {object} opts Options object
 * @param {Asset} opts.selling - What you're selling.
 * @param {Asset} opts.buying - What you're buying.
 * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.
 * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.
 * @param {number} opts.price.n - If `opts.price` is an object: the price numerator
 * @param {number} opts.price.d - If `opts.price` is an object: the price denominator
 * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.
 * @returns {xdr.ManageSellOfferOp} Manage Sell Offer operation
 */ function manageSellOffer(opts) {
    var attributes = {};
    attributes.selling = opts.selling.toXDRObject();
    attributes.buying = opts.buying.toXDRObject();
    if (!this.isValidAmount(opts.amount, true)) throw new TypeError(this.constructAmountRequirementsError("amount"));
    attributes.amount = this._toXDRAmount(opts.amount);
    if ((0, _isUndefined2.default)(opts.price)) throw new TypeError("price argument is required");
    attributes.price = this._toXDRPrice(opts.price);
    if (!(0, _isUndefined2.default)(opts.offerId)) opts.offerId = opts.offerId.toString();
    else opts.offerId = "0";
    attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);
    var manageSellOfferOp = new _xdr2.default.ManageSellOfferOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.manageSellOffer(manageSellOfferOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"285cc560a0985e8b":"aaheT","b84c673ec05c4c10":"inVSw","a793fbbd968debb9":"gxpVH"}],"jHX8Y":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createPassiveSellOffer = createPassiveSellOffer;
var _isUndefined = require("2b54833e43b84b01");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _xdr = require("ae6e7106ccdb242d");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Returns a XDR CreatePasiveSellOfferOp. A "create passive offer" operation creates an
 * offer that won't consume a counter offer that exactly matches this offer. This is
 * useful for offers just used as 1:1 exchanges for path payments. Use manage offer
 * to manage this offer after using this operation to create it.
 * @function
 * @alias Operation.createPassiveSellOffer
 * @param {object} opts Options object
 * @param {Asset} opts.selling - What you're selling.
 * @param {Asset} opts.buying - What you're buying.
 * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.
 * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.
 * @param {number} opts.price.n - If `opts.price` is an object: the price numerator
 * @param {number} opts.price.d - If `opts.price` is an object: the price denominator
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.
 * @returns {xdr.CreatePassiveSellOfferOp} Create Passive Sell Offer operation
 */ function createPassiveSellOffer(opts) {
    var attributes = {};
    attributes.selling = opts.selling.toXDRObject();
    attributes.buying = opts.buying.toXDRObject();
    if (!this.isValidAmount(opts.amount)) throw new TypeError(this.constructAmountRequirementsError("amount"));
    attributes.amount = this._toXDRAmount(opts.amount);
    if ((0, _isUndefined2.default)(opts.price)) throw new TypeError("price argument is required");
    attributes.price = this._toXDRPrice(opts.price);
    var createPassiveSellOfferOp = new _xdr2.default.CreatePassiveSellOfferOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.createPassiveSellOffer(createPassiveSellOfferOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"2b54833e43b84b01":"aaheT","ae6e7106ccdb242d":"gxpVH"}],"cYIlL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.accountMerge = accountMerge;
var _xdr = require("2c33cfa6e3da665c");
var _xdr2 = _interopRequireDefault(_xdr);
var _decode_encode_muxed_account = require("809b3d8e6b20449c");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Transfers native balance to destination account.
 *
 * @function
 * @alias Operation.accountMerge
 *
 * @param {object} opts - options object
 * @param {string} opts.destination - destination to merge the source account into
 * @param {string} [opts.source]    - operation source account (defaults to
 *     transaction source)
 *
 * @returns {xdr.Operation} an Account Merge operation (xdr.AccountMergeOp)
 */ function accountMerge(opts) {
    var opAttributes = {};
    try {
        opAttributes.body = _xdr2.default.OperationBody.accountMerge((0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination));
    } catch (e) {
        throw new Error("destination is invalid");
    }
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"2c33cfa6e3da665c":"gxpVH","809b3d8e6b20449c":"5F4St"}],"5F4St":[function(require,module,exports) {
var Buffer = require("3447acaf13df9a48").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.decodeAddressToMuxedAccount = decodeAddressToMuxedAccount;
exports.encodeMuxedAccountToAddress = encodeMuxedAccountToAddress;
exports.encodeMuxedAccount = encodeMuxedAccount;
exports.extractBaseAddress = extractBaseAddress;
var _isString = require("2ac2d27529a3d359");
var _isString2 = _interopRequireDefault(_isString);
var _xdr = require("2638ec422a671e9c");
var _xdr2 = _interopRequireDefault(_xdr);
var _strkey = require("da74e696c74acd78");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Converts a Stellar address (in G... or M... form) to an `xdr.MuxedAccount`
 * structure, using the ed25519 representation when possible.
 *
 * This supports full muxed accounts, where an `M...` address will resolve to
 * both its underlying `G...` address and an integer ID.
 *
 * @param   {string}  address   G... or M... address to encode into XDR
 * @returns {xdr.MuxedAccount}  a muxed account object for this address string
 */ function decodeAddressToMuxedAccount(address) {
    if (_strkey.StrKey.isValidMed25519PublicKey(address)) return _decodeAddressFullyToMuxedAccount(address);
    return _xdr2.default.MuxedAccount.keyTypeEd25519(_strkey.StrKey.decodeEd25519PublicKey(address));
}
/**
 * Converts an xdr.MuxedAccount to its StrKey representation.
 *
 * This returns its "M..." string representation if there is a muxing ID within
 * the object and returns the "G..." representation otherwise.
 *
 * @param   {xdr.MuxedAccount} muxedAccount   Raw account to stringify
 * @returns {string} Stringified G... (corresponding to the underlying pubkey)
 *     or M... address (corresponding to both the key and the muxed ID)
 *
 * @see https://stellar.org/protocol/sep-23
 */ function encodeMuxedAccountToAddress(muxedAccount) {
    if (muxedAccount.switch().value === _xdr2.default.CryptoKeyType.keyTypeMuxedEd25519().value) return _encodeMuxedAccountFullyToAddress(muxedAccount);
    return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.ed25519());
}
/**
 * Transform a Stellar address (G...) and an ID into its XDR representation.
 *
 * @param  {string} address   - a Stellar G... address
 * @param  {string} id        - a Uint64 ID represented as a string
 *
 * @return {xdr.MuxedAccount} - XDR representation of the above muxed account
 */ function encodeMuxedAccount(address, id) {
    if (!_strkey.StrKey.isValidEd25519PublicKey(address)) throw new Error("address should be a Stellar account ID (G...)");
    if (!(0, _isString2.default)(id)) throw new Error("id should be a string representing a number (uint64)");
    return _xdr2.default.MuxedAccount.keyTypeMuxedEd25519(new _xdr2.default.MuxedAccountMed25519({
        id: _xdr2.default.Uint64.fromString(id),
        ed25519: _strkey.StrKey.decodeEd25519PublicKey(address)
    }));
}
/**
 * Extracts the underlying base (G...) address from an M-address.
 * @param  {string} address   an account address (either M... or G...)
 * @return {string} a Stellar public key address (G...)
 */ function extractBaseAddress(address) {
    if (_strkey.StrKey.isValidEd25519PublicKey(address)) return address;
    if (!_strkey.StrKey.isValidMed25519PublicKey(address)) throw new TypeError("expected muxed account (M...), got " + address);
    var muxedAccount = decodeAddressToMuxedAccount(address);
    return _strkey.StrKey.encodeEd25519PublicKey(muxedAccount.med25519().ed25519());
}
// Decodes an "M..." account ID into its MuxedAccount object representation.
function _decodeAddressFullyToMuxedAccount(address) {
    var rawBytes = _strkey.StrKey.decodeMed25519PublicKey(address);
    // Decoding M... addresses cannot be done through a simple
    // MuxedAccountMed25519.fromXDR() call, because the definition is:
    //
    //    constructor(attributes: { id: Uint64; ed25519: Buffer });
    //
    // Note the ID is the first attribute. However, the ID comes *last* in the
    // stringified (base32-encoded) address itself (it's the last 8-byte suffix).
    // The `fromXDR()` method interprets bytes in order, so we need to parse out
    // the raw binary into its requisite parts, i.e. use the MuxedAccountMed25519
    // constructor directly.
    //
    // Refer to https://github.com/stellar/go/blob/master/xdr/muxed_account.go#L26
    // for the Golang implementation of the M... parsing.
    return _xdr2.default.MuxedAccount.keyTypeMuxedEd25519(new _xdr2.default.MuxedAccountMed25519({
        id: _xdr2.default.Uint64.fromXDR(rawBytes.slice(-8)),
        ed25519: rawBytes.slice(0, -8)
    }));
}
// Converts an xdr.MuxedAccount into its *true* "M..." string representation.
function _encodeMuxedAccountFullyToAddress(muxedAccount) {
    if (muxedAccount.switch() === _xdr2.default.CryptoKeyType.keyTypeEd25519()) return encodeMuxedAccountToAddress(muxedAccount);
    var muxed = muxedAccount.med25519();
    return _strkey.StrKey.encodeMed25519PublicKey(Buffer.concat([
        muxed.ed25519(),
        muxed.id().toXDR("raw")
    ]));
}

},{"3447acaf13df9a48":"fCgem","2ac2d27529a3d359":"iAF7t","2638ec422a671e9c":"gxpVH","da74e696c74acd78":"gjDua"}],"b589k":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.allowTrust = allowTrust;
var _padEnd = require("ec4fa201487fe52");
var _padEnd2 = _interopRequireDefault(_padEnd);
var _xdr = require("2e239afd96c9f65b");
var _xdr2 = _interopRequireDefault(_xdr);
var _keypair = require("e300bb50cac0ff80");
var _strkey = require("4df384b24b18e5b");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * @deprecated since v5.0
 *
 * Returns an XDR AllowTrustOp. An "allow trust" operation authorizes another
 * account to hold your account's credit for a given asset.
 *
 * @function
 * @alias Operation.allowTrust
 *
 * @param {object} opts Options object
 * @param {string} opts.trustor - The trusting account (the one being authorized)
 * @param {string} opts.assetCode - The asset code being authorized.
 * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 *
 * @returns {xdr.AllowTrustOp} Allow Trust operation
 */ function allowTrust(opts) {
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.trustor)) throw new Error("trustor is invalid");
    var attributes = {};
    attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();
    if (opts.assetCode.length <= 4) {
        var code = (0, _padEnd2.default)(opts.assetCode, 4, "\0");
        attributes.asset = _xdr2.default.AssetCode.assetTypeCreditAlphanum4(code);
    } else if (opts.assetCode.length <= 12) {
        var _code = (0, _padEnd2.default)(opts.assetCode, 12, "\0");
        attributes.asset = _xdr2.default.AssetCode.assetTypeCreditAlphanum12(_code);
    } else throw new Error("Asset code must be 12 characters at max.");
    if (typeof opts.authorize === "boolean") {
        if (opts.authorize) attributes.authorize = _xdr2.default.TrustLineFlags.authorizedFlag().value;
        else attributes.authorize = 0;
    } else attributes.authorize = opts.authorize;
    var allowTrustOp = new _xdr2.default.AllowTrustOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.allowTrust(allowTrustOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"ec4fa201487fe52":"eVEhv","2e239afd96c9f65b":"gxpVH","e300bb50cac0ff80":"kfbNf","4df384b24b18e5b":"gjDua"}],"8qS5b":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.bumpSequence = bumpSequence;
var _jsXdr = require("9f0e1ece898ffe7b");
var _bignumber = require("cb25f0d61f5e5f4f");
var _bignumber2 = _interopRequireDefault(_bignumber);
var _isString = require("303ba660c575c2c5");
var _isString2 = _interopRequireDefault(_isString);
var _xdr = require("1878d4129b2bdcd8");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * This operation bumps sequence number.
 * @function
 * @alias Operation.bumpSequence
 * @param {object} opts Options object
 * @param {string} opts.bumpTo - Sequence number to bump to.
 * @param {string} [opts.source] - The optional source account.
 * @returns {xdr.BumpSequenceOp} Operation
 */ function bumpSequence(opts) {
    var attributes = {};
    if (!(0, _isString2.default)(opts.bumpTo)) throw new Error("bumpTo must be a string");
    try {
        // eslint-disable-next-line no-new
        new _bignumber2.default(opts.bumpTo);
    } catch (e) {
        throw new Error("bumpTo must be a stringified number");
    }
    attributes.bumpTo = _jsXdr.Hyper.fromString(opts.bumpTo);
    var bumpSequenceOp = new _xdr2.default.BumpSequenceOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.bumpSequence(bumpSequenceOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"9f0e1ece898ffe7b":"inVSw","cb25f0d61f5e5f4f":"57qkX","303ba660c575c2c5":"iAF7t","1878d4129b2bdcd8":"gxpVH"}],"5QwGJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.changeTrust = changeTrust;
var _isUndefined = require("70980743822c74e9");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _jsXdr = require("2cacc32f63e3fb88");
var _bignumber = require("a7051a294805f284");
var _bignumber2 = _interopRequireDefault(_bignumber);
var _xdr = require("72af44590435eae7");
var _xdr2 = _interopRequireDefault(_xdr);
var _asset = require("70081dc10cd78fd5");
var _liquidity_pool_asset = require("7d5ecf3f2c41d5c0");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var MAX_INT64 = "9223372036854775807";
/**
 * Returns an XDR ChangeTrustOp. A "change trust" operation adds, removes, or updates a
 * trust line for a given asset from the source account to another.
 * @function
 * @alias Operation.changeTrust
 * @param {object} opts Options object
 * @param {Asset | LiquidityPoolAsset} opts.asset - The asset for the trust line.
 * @param {string} [opts.limit] - The limit for the asset, defaults to max int64.
 *                                If the limit is set to "0" it deletes the trustline.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @returns {xdr.ChangeTrustOp} Change Trust operation
 */ function changeTrust(opts) {
    var attributes = {};
    if (opts.asset instanceof _asset.Asset) attributes.line = opts.asset.toChangeTrustXDRObject();
    else if (opts.asset instanceof _liquidity_pool_asset.LiquidityPoolAsset) attributes.line = opts.asset.toXDRObject();
    else throw new TypeError("asset must be Asset or LiquidityPoolAsset");
    if (!(0, _isUndefined2.default)(opts.limit) && !this.isValidAmount(opts.limit, true)) throw new TypeError(this.constructAmountRequirementsError("limit"));
    if (opts.limit) attributes.limit = this._toXDRAmount(opts.limit);
    else attributes.limit = _jsXdr.Hyper.fromString(new _bignumber2.default(MAX_INT64).toString());
    if (opts.source) attributes.source = opts.source.masterKeypair;
    var changeTrustOP = new _xdr2.default.ChangeTrustOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.changeTrust(changeTrustOP);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"70980743822c74e9":"aaheT","2cacc32f63e3fb88":"inVSw","a7051a294805f284":"57qkX","72af44590435eae7":"gxpVH","70081dc10cd78fd5":"hLdvN","7d5ecf3f2c41d5c0":"9teTo"}],"4c2za":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createAccount = createAccount;
var _xdr = require("d30938b27588b3f0");
var _xdr2 = _interopRequireDefault(_xdr);
var _keypair = require("d750d0f070aae380");
var _strkey = require("e62f1a3442f6933f");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Create and fund a non existent account.
 * @function
 * @alias Operation.createAccount
 * @param {object} opts Options object
 * @param {string} opts.destination - Destination account ID to create an account for.
 * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater
 *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).
 * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.
 * @returns {xdr.CreateAccountOp} Create account operation
 */ function createAccount(opts) {
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) throw new Error("destination is invalid");
    if (!this.isValidAmount(opts.startingBalance, true)) throw new TypeError("startingBalance must be of type String, represent a non-negative number and have at most 7 digits after the decimal");
    var attributes = {};
    attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();
    attributes.startingBalance = this._toXDRAmount(opts.startingBalance);
    var createAccountOp = new _xdr2.default.CreateAccountOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.createAccount(createAccountOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"d30938b27588b3f0":"gxpVH","d750d0f070aae380":"kfbNf","e62f1a3442f6933f":"gjDua"}],"5kzuc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createClaimableBalance = createClaimableBalance;
var _xdr = require("5c5153cc9e54cf0c");
var _xdr2 = _interopRequireDefault(_xdr);
var _asset = require("7dd86213344a24f5");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Create a new claimable balance operation.
 *
 * @function
 * @alias Operation.createClaimableBalance
 *
 * @param {object} opts Options object
 * @param {Asset} opts.asset - The asset for the claimable balance.
 * @param {string} opts.amount - Amount.
 * @param {Claimant[]} opts.claimants - An array of Claimants
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation} Create claimable balance operation
 *
 * @example
 * const asset = new Asset(
 *   'USD',
 *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'
 * );
 * const amount = '100.0000000';
 * const claimants = [
 *   new Claimant(
 *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',
 *      Claimant.predicateBeforeAbsoluteTime("4102444800000")
 *   )
 * ];
 *
 * const op = Operation.createClaimableBalance({
 *   asset,
 *   amount,
 *   claimants
 * });
 *
 */ function createClaimableBalance(opts) {
    if (!(opts.asset instanceof _asset.Asset)) throw new Error("must provide an asset for create claimable balance operation");
    if (!this.isValidAmount(opts.amount)) throw new TypeError(this.constructAmountRequirementsError("amount"));
    if (!Array.isArray(opts.claimants) || opts.claimants.length === 0) throw new Error("must provide at least one claimant");
    var attributes = {};
    attributes.asset = opts.asset.toXDRObject();
    attributes.amount = this._toXDRAmount(opts.amount);
    attributes.claimants = opts.claimants.map(function(c) {
        return c.toXDRObject();
    });
    var createClaimableBalanceOp = new _xdr2.default.CreateClaimableBalanceOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.createClaimableBalance(createClaimableBalanceOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"5c5153cc9e54cf0c":"gxpVH","7dd86213344a24f5":"hLdvN"}],"hUGxe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.claimClaimableBalance = claimClaimableBalance;
exports.validateClaimableBalanceId = validateClaimableBalanceId;
var _xdr = require("829b4331f82ab017");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Create a new claim claimable balance operation.
 * @function
 * @alias Operation.claimClaimableBalance
 * @param {object} opts Options object
 * @param {string} opts.balanceId - The claimable balance id to be claimed.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} Claim claimable balance operation
 *
 * @example
 * const op = Operation.claimClaimableBalance({
 *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',
 * });
 *
 */ function claimClaimableBalance() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    validateClaimableBalanceId(opts.balanceId);
    var attributes = {};
    attributes.balanceId = _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, "hex");
    var claimClaimableBalanceOp = new _xdr2.default.ClaimClaimableBalanceOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.claimClaimableBalance(claimClaimableBalanceOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}
function validateClaimableBalanceId(balanceId) {
    if (typeof balanceId !== "string" || balanceId.length !== 72 /* 8b discriminant + 64b string */ ) throw new Error("must provide a valid claimable balance id");
}

},{"829b4331f82ab017":"gxpVH"}],"cWMgh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.clawbackClaimableBalance = clawbackClaimableBalance;
var _xdr = require("bf21b708491749dc");
var _xdr2 = _interopRequireDefault(_xdr);
var _claim_claimable_balance = require("d4d9956d0e913f69");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Creates a clawback operation for a claimable balance.
 *
 * @function
 * @alias Operation.clawbackClaimableBalance
 * @param {object} opts - Options object
 * @param {string} opts.balanceId - The claimable balance ID to be clawed back.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @return {xdr.ClawbackClaimableBalanceOp}
 *
 * @example
 * const op = Operation.clawbackClaimableBalance({
 *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',
 * });
 *
 * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-claimable-balance-operation
 */ function clawbackClaimableBalance() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _claim_claimable_balance.validateClaimableBalanceId)(opts.balanceId);
    var attributes = {
        balanceId: _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, "hex")
    };
    var opAttributes = {
        body: _xdr2.default.OperationBody.clawbackClaimableBalance(new _xdr2.default.ClawbackClaimableBalanceOp(attributes))
    };
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"bf21b708491749dc":"gxpVH","d4d9956d0e913f69":"hUGxe"}],"59oOz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.inflation = inflation;
var _xdr = require("fc87f7fd1a7447ad");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * This operation generates the inflation.
 * @function
 * @alias Operation.inflation
 * @param {object} [opts] Options object
 * @param {string} [opts.source] - The optional source account.
 * @returns {xdr.InflationOp} Inflation operation
 */ function inflation() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.inflation();
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"fc87f7fd1a7447ad":"gxpVH"}],"9QkzO":[function(require,module,exports) {
var Buffer = require("425491383be2f5ec").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.manageData = manageData;
var _isString = require("9a8a24e0bd6fa7b6");
var _isString2 = _interopRequireDefault(_isString);
var _xdr = require("e3ef1c8abb2ed638");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * This operation adds data entry to the ledger.
 * @function
 * @alias Operation.manageData
 * @param {object} opts Options object
 * @param {string} opts.name - The name of the data entry.
 * @param {string|Buffer} opts.value - The value of the data entry.
 * @param {string} [opts.source] - The optional source account.
 * @returns {xdr.ManageDataOp} Manage Data operation
 */ function manageData(opts) {
    var attributes = {};
    if (!((0, _isString2.default)(opts.name) && opts.name.length <= 64)) throw new Error("name must be a string, up to 64 characters");
    attributes.dataName = opts.name;
    if (!(0, _isString2.default)(opts.value) && !Buffer.isBuffer(opts.value) && opts.value !== null) throw new Error("value must be a string, Buffer or null");
    if ((0, _isString2.default)(opts.value)) attributes.dataValue = Buffer.from(opts.value);
    else attributes.dataValue = opts.value;
    if (attributes.dataValue !== null && attributes.dataValue.length > 64) throw new Error("value cannot be longer that 64 bytes");
    var manageDataOp = new _xdr2.default.ManageDataOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.manageData(manageDataOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"425491383be2f5ec":"fCgem","9a8a24e0bd6fa7b6":"iAF7t","e3ef1c8abb2ed638":"gxpVH"}],"7ytJE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.manageBuyOffer = manageBuyOffer;
var _isUndefined = require("ce17e2a2e28bd1cc");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _jsXdr = require("6eb16475287dfb23");
var _xdr = require("6899530839381f0e");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Returns a XDR ManageBuyOfferOp. A "manage buy offer" operation creates, updates, or
 * deletes a buy offer.
 * @function
 * @alias Operation.manageBuyOffer
 * @param {object} opts Options object
 * @param {Asset} opts.selling - What you're selling.
 * @param {Asset} opts.buying - What you're buying.
 * @param {string} opts.buyAmount - The total amount you're buying. If 0, deletes the offer.
 * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `buying` in terms of `selling`.
 * @param {number} opts.price.n - If `opts.price` is an object: the price numerator
 * @param {number} opts.price.d - If `opts.price` is an object: the price denominator
 * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.
 * @returns {xdr.ManageBuyOfferOp} Manage Buy Offer operation
 */ function manageBuyOffer(opts) {
    var attributes = {};
    attributes.selling = opts.selling.toXDRObject();
    attributes.buying = opts.buying.toXDRObject();
    if (!this.isValidAmount(opts.buyAmount, true)) throw new TypeError(this.constructAmountRequirementsError("buyAmount"));
    attributes.buyAmount = this._toXDRAmount(opts.buyAmount);
    if ((0, _isUndefined2.default)(opts.price)) throw new TypeError("price argument is required");
    attributes.price = this._toXDRPrice(opts.price);
    if (!(0, _isUndefined2.default)(opts.offerId)) opts.offerId = opts.offerId.toString();
    else opts.offerId = "0";
    attributes.offerId = _jsXdr.Hyper.fromString(opts.offerId);
    var manageBuyOfferOp = new _xdr2.default.ManageBuyOfferOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.manageBuyOffer(manageBuyOfferOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"ce17e2a2e28bd1cc":"aaheT","6eb16475287dfb23":"inVSw","6899530839381f0e":"gxpVH"}],"ihLay":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.pathPaymentStrictReceive = pathPaymentStrictReceive;
var _xdr = require("2077c6c5f9dd62a1");
var _xdr2 = _interopRequireDefault(_xdr);
var _decode_encode_muxed_account = require("1438256a18a88f33");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Creates a PathPaymentStrictReceive operation.
 *
 * A `PathPaymentStrictReceive` operation sends the specified amount to the
 * destination account. It credits the destination with `destAmount` of
 * `destAsset`, while debiting at most `sendMax` of `sendAsset` from the source.
 * The transfer optionally occurs through a path. XLM payments create the
 * destination account if it does not exist.
 *
 * @function
 * @alias Operation.pathPaymentStrictReceive
 * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-receive
 *
 * @param {object}  opts - Options object
 * @param {Asset}   opts.sendAsset    - asset to pay with
 * @param {string}  opts.sendMax      - maximum amount of sendAsset to send
 * @param {string}  opts.destination  - destination account to send to
 * @param {Asset}   opts.destAsset    - asset the destination will receive
 * @param {string}  opts.destAmount   - amount the destination receives
 * @param {Asset[]} opts.path         - array of Asset objects to use as the path
 *
 * @param {string}  [opts.source]     - The source account for the payment.
 *     Defaults to the transaction's source account.
 *
 * @returns {xdr.PathPaymentStrictReceiveOp} the resulting path payment op
 */ function pathPaymentStrictReceive(opts) {
    switch(true){
        case !opts.sendAsset:
            throw new Error("Must specify a send asset");
        case !this.isValidAmount(opts.sendMax):
            throw new TypeError(this.constructAmountRequirementsError("sendMax"));
        case !opts.destAsset:
            throw new Error("Must provide a destAsset for a payment operation");
        case !this.isValidAmount(opts.destAmount):
            throw new TypeError(this.constructAmountRequirementsError("destAmount"));
        default:
            break;
    }
    var attributes = {};
    attributes.sendAsset = opts.sendAsset.toXDRObject();
    attributes.sendMax = this._toXDRAmount(opts.sendMax);
    try {
        attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);
    } catch (e) {
        throw new Error("destination is invalid");
    }
    attributes.destAsset = opts.destAsset.toXDRObject();
    attributes.destAmount = this._toXDRAmount(opts.destAmount);
    var path = opts.path ? opts.path : [];
    attributes.path = path.map(function(x) {
        return x.toXDRObject();
    });
    var payment = new _xdr2.default.PathPaymentStrictReceiveOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.pathPaymentStrictReceive(payment);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"2077c6c5f9dd62a1":"gxpVH","1438256a18a88f33":"5F4St"}],"bPmPG":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.pathPaymentStrictSend = pathPaymentStrictSend;
var _xdr = require("cd05eaf8cb0165cf");
var _xdr2 = _interopRequireDefault(_xdr);
var _decode_encode_muxed_account = require("9dd52cab4a01e0cc");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Creates a PathPaymentStrictSend operation.
 *
 * A `PathPaymentStrictSend` operation sends the specified amount to the
 * destination account crediting at least `destMin` of `destAsset`, optionally
 * through a path. XLM payments create the destination account if it does not
 * exist.
 *
 * @function
 * @alias Operation.pathPaymentStrictSend
 * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-send
 *
 * @param {object}  opts - Options object
 * @param {Asset}   opts.sendAsset    - asset to pay with
 * @param {string}  opts.sendAmount   - amount of sendAsset to send (excluding fees)
 * @param {string}  opts.destination  - destination account to send to
 * @param {Asset}   opts.destAsset    - asset the destination will receive
 * @param {string}  opts.destMin      - minimum amount of destAsset to be receive
 * @param {Asset[]} opts.path         - array of Asset objects to use as the path
 *
 * @param {string}  [opts.source]     - The source account for the payment.
 *     Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation}   the resulting path payment operation
 *     (xdr.PathPaymentStrictSendOp)
 */ function pathPaymentStrictSend(opts) {
    switch(true){
        case !opts.sendAsset:
            throw new Error("Must specify a send asset");
        case !this.isValidAmount(opts.sendAmount):
            throw new TypeError(this.constructAmountRequirementsError("sendAmount"));
        case !opts.destAsset:
            throw new Error("Must provide a destAsset for a payment operation");
        case !this.isValidAmount(opts.destMin):
            throw new TypeError(this.constructAmountRequirementsError("destMin"));
        default:
            break;
    }
    var attributes = {};
    attributes.sendAsset = opts.sendAsset.toXDRObject();
    attributes.sendAmount = this._toXDRAmount(opts.sendAmount);
    try {
        attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);
    } catch (e) {
        throw new Error("destination is invalid");
    }
    attributes.destAsset = opts.destAsset.toXDRObject();
    attributes.destMin = this._toXDRAmount(opts.destMin);
    var path = opts.path ? opts.path : [];
    attributes.path = path.map(function(x) {
        return x.toXDRObject();
    });
    var payment = new _xdr2.default.PathPaymentStrictSendOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.pathPaymentStrictSend(payment);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"cd05eaf8cb0165cf":"gxpVH","9dd52cab4a01e0cc":"5F4St"}],"CMhse":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.payment = payment;
var _xdr = require("2b31e8df810a0e38");
var _xdr2 = _interopRequireDefault(_xdr);
var _decode_encode_muxed_account = require("7894518535761a48");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Create a payment operation.
 *
 * @function
 * @alias Operation.payment
 * @see https://developers.stellar.org/docs/start/list-of-operations/#payment
 *
 * @param {object}  opts - Options object
 * @param {string}  opts.destination  - destination account ID
 * @param {Asset}   opts.asset        - asset to send
 * @param {string}  opts.amount       - amount to send
 *
 * @param {string}  [opts.source]     - The source account for the payment.
 *     Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)
 */ function payment(opts) {
    if (!opts.asset) throw new Error("Must provide an asset for a payment operation");
    if (!this.isValidAmount(opts.amount)) throw new TypeError(this.constructAmountRequirementsError("amount"));
    var attributes = {};
    try {
        attributes.destination = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.destination);
    } catch (e) {
        throw new Error("destination is invalid");
    }
    attributes.asset = opts.asset.toXDRObject();
    attributes.amount = this._toXDRAmount(opts.amount);
    var paymentOp = new _xdr2.default.PaymentOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.payment(paymentOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"2b31e8df810a0e38":"gxpVH","7894518535761a48":"5F4St"}],"h6aNA":[function(require,module,exports) {
var Buffer = require("75f06fb9073221cf").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.setOptions = setOptions;
var _isUndefined = require("d1220e4358326014");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _isString = require("959265a1fb82d3a5");
var _isString2 = _interopRequireDefault(_isString);
var _xdr = require("5e4d8326347ac6df");
var _xdr2 = _interopRequireDefault(_xdr);
var _keypair = require("5bd10c834936b46c");
var _strkey = require("2bbc407492b756cf");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function weightCheckFunction(value, name) {
    if (value >= 0 && value <= 255) return true;
    throw new Error(name + " value must be between 0 and 255");
}
/**
 * Returns an XDR SetOptionsOp. A "set options" operations set or clear account flags,
 * set the account's inflation destination, and/or add new signers to the account.
 * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:
 *   - `{@link AuthRequiredFlag}`
 *   - `{@link AuthRevocableFlag}`
 *   - `{@link AuthImmutableFlag}`
 *   - `{@link AuthClawbackEnabledFlag}`
 *
 * It's possible to set/clear multiple flags at once using logical or.
 *
 * @function
 * @alias Operation.setOptions
 *
 * @param {object} opts Options object
 * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.
 * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.
 * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.
 * @param {number|string} [opts.masterWeight] - The master key weight.
 * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.
 * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.
 * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.
 * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is
 *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.
 * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.
 * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.
 * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.
 * @param {string} [opts.signer.ed25519SignedPayload] - Signed payload signer (ed25519 public key + raw payload) for atomic transaction signature disclosure.
 * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)
 * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 *
 * @returns {xdr.SetOptionsOp}  XDR operation
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */ /* eslint-disable no-param-reassign */ function setOptions(opts) {
    var attributes = {};
    if (opts.inflationDest) {
        if (!_strkey.StrKey.isValidEd25519PublicKey(opts.inflationDest)) throw new Error("inflationDest is invalid");
        attributes.inflationDest = _keypair.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();
    }
    attributes.clearFlags = this._checkUnsignedIntValue("clearFlags", opts.clearFlags);
    attributes.setFlags = this._checkUnsignedIntValue("setFlags", opts.setFlags);
    attributes.masterWeight = this._checkUnsignedIntValue("masterWeight", opts.masterWeight, weightCheckFunction);
    attributes.lowThreshold = this._checkUnsignedIntValue("lowThreshold", opts.lowThreshold, weightCheckFunction);
    attributes.medThreshold = this._checkUnsignedIntValue("medThreshold", opts.medThreshold, weightCheckFunction);
    attributes.highThreshold = this._checkUnsignedIntValue("highThreshold", opts.highThreshold, weightCheckFunction);
    if (!(0, _isUndefined2.default)(opts.homeDomain) && !(0, _isString2.default)(opts.homeDomain)) throw new TypeError("homeDomain argument must be of type String");
    attributes.homeDomain = opts.homeDomain;
    if (opts.signer) {
        var weight = this._checkUnsignedIntValue("signer.weight", opts.signer.weight, weightCheckFunction);
        var key = void 0;
        var setValues = 0;
        if (opts.signer.ed25519PublicKey) {
            if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) throw new Error("signer.ed25519PublicKey is invalid.");
            var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);
            // eslint-disable-next-line new-cap
            key = new _xdr2.default.SignerKey.signerKeyTypeEd25519(rawKey);
            setValues += 1;
        }
        if (opts.signer.preAuthTx) {
            if ((0, _isString2.default)(opts.signer.preAuthTx)) opts.signer.preAuthTx = Buffer.from(opts.signer.preAuthTx, "hex");
            if (!(Buffer.isBuffer(opts.signer.preAuthTx) && opts.signer.preAuthTx.length === 32)) throw new Error("signer.preAuthTx must be 32 bytes Buffer.");
            // eslint-disable-next-line new-cap
            key = new _xdr2.default.SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);
            setValues += 1;
        }
        if (opts.signer.sha256Hash) {
            if ((0, _isString2.default)(opts.signer.sha256Hash)) opts.signer.sha256Hash = Buffer.from(opts.signer.sha256Hash, "hex");
            if (!(Buffer.isBuffer(opts.signer.sha256Hash) && opts.signer.sha256Hash.length === 32)) throw new Error("signer.sha256Hash must be 32 bytes Buffer.");
            // eslint-disable-next-line new-cap
            key = new _xdr2.default.SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);
            setValues += 1;
        }
        if (opts.signer.ed25519SignedPayload) {
            if (!_strkey.StrKey.isValidSignedPayload(opts.signer.ed25519SignedPayload)) throw new Error("signer.ed25519SignedPayload is invalid.");
            var _rawKey = _strkey.StrKey.decodeSignedPayload(opts.signer.ed25519SignedPayload);
            var signedPayloadXdr = _xdr2.default.SignerKeyEd25519SignedPayload.fromXDR(_rawKey);
            // eslint-disable-next-line new-cap
            key = _xdr2.default.SignerKey.signerKeyTypeEd25519SignedPayload(signedPayloadXdr);
            setValues += 1;
        }
        if (setValues !== 1) throw new Error("Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.");
        attributes.signer = new _xdr2.default.Signer({
            key: key,
            weight: weight
        });
    }
    var setOptionsOp = new _xdr2.default.SetOptionsOp(attributes);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.setOptions(setOptionsOp);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"75f06fb9073221cf":"fCgem","d1220e4358326014":"aaheT","959265a1fb82d3a5":"iAF7t","5e4d8326347ac6df":"gxpVH","5bd10c834936b46c":"kfbNf","2bbc407492b756cf":"gjDua"}],"1SxpY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.beginSponsoringFutureReserves = beginSponsoringFutureReserves;
var _xdr = require("d2ab961b86e6fdba");
var _xdr2 = _interopRequireDefault(_xdr);
var _strkey = require("a19b0e5d8ca9eb1b");
var _keypair = require("e95fae67d4bab113");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Create a "begin sponsoring future reserves" operation.
 * @function
 * @alias Operation.beginSponsoringFutureReserves
 * @param {object} opts Options object
 * @param {string} opts.sponsoredId - The sponsored account id.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.beginSponsoringFutureReserves({
 *   sponsoredId: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'
 * });
 *
 */ function beginSponsoringFutureReserves() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.sponsoredId)) throw new Error("sponsoredId is invalid");
    var op = new _xdr2.default.BeginSponsoringFutureReservesOp({
        sponsoredId: _keypair.Keypair.fromPublicKey(opts.sponsoredId).xdrAccountId()
    });
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.beginSponsoringFutureReserves(op);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"d2ab961b86e6fdba":"gxpVH","a19b0e5d8ca9eb1b":"gjDua","e95fae67d4bab113":"kfbNf"}],"lNDpB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.endSponsoringFutureReserves = endSponsoringFutureReserves;
var _xdr = require("ecfd2658a01d866");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Create an "end sponsoring future reserves" operation.
 * @function
 * @alias Operation.endSponsoringFutureReserves
 * @param {object} opts Options object
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.endSponsoringFutureReserves();
 *
 */ function endSponsoringFutureReserves() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.endSponsoringFutureReserves();
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"ecfd2658a01d866":"gxpVH"}],"cjc2Y":[function(require,module,exports) {
var Buffer = require("418a6c9bca2b6e38").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.revokeAccountSponsorship = revokeAccountSponsorship;
exports.revokeTrustlineSponsorship = revokeTrustlineSponsorship;
exports.revokeOfferSponsorship = revokeOfferSponsorship;
exports.revokeDataSponsorship = revokeDataSponsorship;
exports.revokeClaimableBalanceSponsorship = revokeClaimableBalanceSponsorship;
exports.revokeLiquidityPoolSponsorship = revokeLiquidityPoolSponsorship;
exports.revokeSignerSponsorship = revokeSignerSponsorship;
var _isString = require("b90e12dafa0a3bfa");
var _isString2 = _interopRequireDefault(_isString);
var _xdr = require("59ea64f64b7c19f0");
var _xdr2 = _interopRequireDefault(_xdr);
var _strkey = require("3bfdc58610d10aab");
var _keypair = require("acc496cba629c8a2");
var _asset = require("1e12505f1c912c1d");
var _liquidity_pool_id = require("d3ae8a803a7e2ca9");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Create a "revoke sponsorship" operation for an account.
 *
 * @function
 * @alias Operation.revokeAccountSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The sponsored account ID.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeAccountSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 * });
 *
 */ function revokeAccountSponsorship() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) throw new Error("account is invalid");
    var ledgerKey = _xdr2.default.LedgerKey.account(new _xdr2.default.LedgerKeyAccount({
        accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId()
    }));
    var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}
/**
 * Create a "revoke sponsorship" operation for a trustline.
 *
 * @function
 * @alias Operation.revokeTrustlineSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The account ID which owns the trustline.
 * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeTrustlineSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   asset: new StellarBase.LiquidityPoolId(
 *     'USDUSD',
 *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'
 *   )
 * });
 *
 */ function revokeTrustlineSponsorship() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) throw new Error("account is invalid");
    var asset = void 0;
    if (opts.asset instanceof _asset.Asset) asset = opts.asset.toTrustLineXDRObject();
    else if (opts.asset instanceof _liquidity_pool_id.LiquidityPoolId) asset = opts.asset.toXDRObject();
    else throw new TypeError("asset must be an Asset or LiquidityPoolId");
    var ledgerKey = _xdr2.default.LedgerKey.trustline(new _xdr2.default.LedgerKeyTrustLine({
        accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),
        asset: asset
    }));
    var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}
/**
 * Create a "revoke sponsorship" operation for an offer.
 *
 * @function
 * @alias Operation.revokeOfferSponsorship
 * @param {object} opts Options object
 * @param {string} opts.seller - The account ID which created the offer.
 * @param {string} opts.offerId - The offer ID.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeOfferSponsorship({
 *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   offerId: '1234'
 * });
 *
 */ function revokeOfferSponsorship() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.seller)) throw new Error("seller is invalid");
    if (!(0, _isString2.default)(opts.offerId)) throw new Error("offerId is invalid");
    var ledgerKey = _xdr2.default.LedgerKey.offer(new _xdr2.default.LedgerKeyOffer({
        sellerId: _keypair.Keypair.fromPublicKey(opts.seller).xdrAccountId(),
        offerId: _xdr2.default.Int64.fromString(opts.offerId)
    }));
    var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}
/**
 * Create a "revoke sponsorship" operation for a data entry.
 *
 * @function
 * @alias Operation.revokeDataSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The account ID which owns the data entry.
 * @param {string} opts.name - The name of the data entry
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeDataSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   name: 'foo'
 * });
 *
 */ function revokeDataSponsorship() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) throw new Error("account is invalid");
    if (!(0, _isString2.default)(opts.name) || opts.name.length > 64) throw new Error("name must be a string, up to 64 characters");
    var ledgerKey = _xdr2.default.LedgerKey.data(new _xdr2.default.LedgerKeyData({
        accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),
        dataName: opts.name
    }));
    var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}
/**
 * Create a "revoke sponsorship" operation for a claimable balance.
 *
 * @function
 * @alias Operation.revokeClaimableBalanceSponsorship
 * @param {object} opts Options object
 * @param {string} opts.balanceId - The sponsored claimable balance ID.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeClaimableBalanceSponsorship({
 *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',
 * });
 *
 */ function revokeClaimableBalanceSponsorship() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!(0, _isString2.default)(opts.balanceId)) throw new Error("balanceId is invalid");
    var ledgerKey = _xdr2.default.LedgerKey.claimableBalance(new _xdr2.default.LedgerKeyClaimableBalance({
        balanceId: _xdr2.default.ClaimableBalanceId.fromXDR(opts.balanceId, "hex")
    }));
    var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}
/**
 * Creates a "revoke sponsorship" operation for a liquidity pool.
 *
 * @function
 * @alias Operation.revokeLiquidityPoolSponsorship
 * @param {object} opts – Options object.
 * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr Operation.
 *
 * @example
 * const op = Operation.revokeLiquidityPoolSponsorship({
 *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',
 * });
 *
 */ function revokeLiquidityPoolSponsorship() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!(0, _isString2.default)(opts.liquidityPoolId)) throw new Error("liquidityPoolId is invalid");
    var ledgerKey = _xdr2.default.LedgerKey.liquidityPool(new _xdr2.default.LedgerKeyLiquidityPool({
        liquidityPoolId: _xdr2.default.PoolId.fromXDR(opts.liquidityPoolId, "hex")
    }));
    var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey);
    var opAttributes = {
        body: _xdr2.default.OperationBody.revokeSponsorship(op)
    };
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}
/**
 * Create a "revoke sponsorship" operation for a signer.
 *
 * @function
 * @alias Operation.revokeSignerSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.
 * @param {object} opts.signer - The signer whose sponsorship is being removed.
 * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.
 * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).
 * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeSignerSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   signer: {
 *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'
 *   }
 * })
 *
 */ function revokeSignerSponsorship() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (!_strkey.StrKey.isValidEd25519PublicKey(opts.account)) throw new Error("account is invalid");
    var key = void 0;
    if (opts.signer.ed25519PublicKey) {
        if (!_strkey.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) throw new Error("signer.ed25519PublicKey is invalid.");
        var rawKey = _strkey.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey);
        key = new _xdr2.default.SignerKey.signerKeyTypeEd25519(rawKey);
    } else if (opts.signer.preAuthTx) {
        var buffer = void 0;
        if ((0, _isString2.default)(opts.signer.preAuthTx)) buffer = Buffer.from(opts.signer.preAuthTx, "hex");
        else buffer = opts.signer.preAuthTx;
        if (!(Buffer.isBuffer(buffer) && buffer.length === 32)) throw new Error("signer.preAuthTx must be 32 bytes Buffer.");
        key = new _xdr2.default.SignerKey.signerKeyTypePreAuthTx(buffer);
    } else if (opts.signer.sha256Hash) {
        var _buffer = void 0;
        if ((0, _isString2.default)(opts.signer.sha256Hash)) _buffer = Buffer.from(opts.signer.sha256Hash, "hex");
        else _buffer = opts.signer.sha256Hash;
        if (!(Buffer.isBuffer(_buffer) && _buffer.length === 32)) throw new Error("signer.sha256Hash must be 32 bytes Buffer.");
        key = new _xdr2.default.SignerKey.signerKeyTypeHashX(_buffer);
    } else throw new Error("signer is invalid");
    var signer = new _xdr2.default.RevokeSponsorshipOpSigner({
        accountId: _keypair.Keypair.fromPublicKey(opts.account).xdrAccountId(),
        signerKey: key
    });
    var op = _xdr2.default.RevokeSponsorshipOp.revokeSponsorshipSigner(signer);
    var opAttributes = {};
    opAttributes.body = _xdr2.default.OperationBody.revokeSponsorship(op);
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"418a6c9bca2b6e38":"fCgem","b90e12dafa0a3bfa":"iAF7t","59ea64f64b7c19f0":"gxpVH","3bfdc58610d10aab":"gjDua","acc496cba629c8a2":"kfbNf","1e12505f1c912c1d":"hLdvN","d3ae8a803a7e2ca9":"74ahN"}],"ghsgs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.clawback = clawback;
var _xdr = require("ed22cd230d2f4ae2");
var _xdr2 = _interopRequireDefault(_xdr);
var _decode_encode_muxed_account = require("2606c2bdbf40b001");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Creates a clawback operation.
 *
 * @function
 * @alias Operation.clawback
 *
 * @param {object} opts - Options object
 * @param {Asset}  opts.asset   - The asset being clawed back.
 * @param {string} opts.amount  - The amount of the asset to claw back.
 * @param {string} opts.from    - The public key of the (optionally-muxed)
 *     account to claw back from.
 *
 * @param {string} [opts.source] - The source account for the operation.
 *     Defaults to the transaction's source account.
 *
 * @return {xdr.ClawbackOp}
 *
 * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation
 */ function clawback(opts) {
    var attributes = {};
    if (!this.isValidAmount(opts.amount)) throw new TypeError(this.constructAmountRequirementsError("amount"));
    attributes.amount = this._toXDRAmount(opts.amount);
    attributes.asset = opts.asset.toXDRObject();
    try {
        attributes.from = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(opts.from);
    } catch (e) {
        throw new Error("from address is invalid");
    }
    var opAttributes = {
        body: _xdr2.default.OperationBody.clawback(new _xdr2.default.ClawbackOp(attributes))
    };
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"ed22cd230d2f4ae2":"gxpVH","2606c2bdbf40b001":"5F4St"}],"3clu3":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
exports.setTrustLineFlags = setTrustLineFlags;
var _xdr = require("22a6cb90cfb55b38");
var _xdr2 = _interopRequireDefault(_xdr);
var _keypair = require("7ccf07b0ac604150");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Creates a trustline flag configuring operation.
 *
 * For the flags, set them to true to enable them and false to disable them. Any
 * unmodified operations will be marked `undefined` in the result.
 *
 * Note that you can only **clear** the clawbackEnabled flag set; it must be set
 * account-wide via operations.SetOptions (setting
 * xdr.AccountFlags.clawbackEnabled).
 *
 * @function
 * @alias Operation.setTrustLineFlags
 *
 * @param {object} opts - Options object
 * @param {string} opts.trustor     - the account whose trustline this is
 * @param {Asset}  opts.asset       - the asset on the trustline
 * @param {object} opts.flags       - the set of flags to modify
 *
 * @param {bool}   [opts.flags.authorized]  - authorize account to perform
 *     transactions with its credit
 * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize
 *     account to maintain and reduce liabilities for its credit
 * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on
 *     this trustlines from having clawbacks enabled (this flag can only be set
 *     to false!)
 * @param {string} [opts.source] - The source account for the operation.
 *                                 Defaults to the transaction's source account.
 *
 * @note You must include at least one flag.
 *
 * @return {xdr.SetTrustLineFlagsOp}
 *
 * @link xdr.AccountFlags
 * @link xdr.TrustLineFlags
 * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation
 * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options
 */ function setTrustLineFlags() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var attributes = {};
    if (_typeof(opts.flags) !== "object" || Object.keys(opts.flags).length === 0) throw new Error("opts.flags must be a map of boolean flags to modify");
    var mapping = {
        authorized: _xdr2.default.TrustLineFlags.authorizedFlag(),
        authorizedToMaintainLiabilities: _xdr2.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),
        clawbackEnabled: _xdr2.default.TrustLineFlags.trustlineClawbackEnabledFlag()
    };
    /* eslint no-bitwise: "off" */ var clearFlag = 0;
    var setFlag = 0;
    Object.keys(opts.flags).forEach(function(flagName) {
        if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) throw new Error("unsupported flag name specified: " + flagName);
        var flagValue = opts.flags[flagName];
        var bit = mapping[flagName].value;
        if (flagValue === true) setFlag |= bit;
        else if (flagValue === false) clearFlag |= bit;
    });
    attributes.trustor = _keypair.Keypair.fromPublicKey(opts.trustor).xdrAccountId();
    attributes.asset = opts.asset.toXDRObject();
    attributes.clearFlags = clearFlag;
    attributes.setFlags = setFlag;
    var opAttributes = {
        body: _xdr2.default.OperationBody.setTrustLineFlags(new _xdr2.default.SetTrustLineFlagsOp(attributes))
    };
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"22a6cb90cfb55b38":"gxpVH","7ccf07b0ac604150":"kfbNf"}],"jUlMm":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.liquidityPoolDeposit = liquidityPoolDeposit;
var _isUndefined = require("60baf964a5132ac1");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _xdr = require("e42c5a7a1b1b24eb");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Creates a liquidity pool deposit operation.
 *
 * @function
 * @alias Operation.liquidityPoolDeposit
 * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-deposit
 *
 * @param {object} opts - Options object
 * @param {string} opts.liquidityPoolId - The liquidity pool ID.
 * @param {string} opts.maxAmountA - Maximum amount of first asset to deposit.
 * @param {string} opts.maxAmountB - Maximum amount of second asset to deposit.
 * @param {number|string|BigNumber|Object} opts.minPrice -  Minimum depositA/depositB price.
 * @param {number} opts.minPrice.n - If `opts.minPrice` is an object: the price numerator
 * @param {number} opts.minPrice.d - If `opts.minPrice` is an object: the price denominator
 * @param {number|string|BigNumber|Object} opts.maxPrice -  Maximum depositA/depositB price.
 * @param {number} opts.maxPrice.n - If `opts.maxPrice` is an object: the price numerator
 * @param {number} opts.maxPrice.d - If `opts.maxPrice` is an object: the price denominator
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation} The resulting operation (xdr.LiquidityPoolDepositOp).
 */ function liquidityPoolDeposit() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var liquidityPoolId = opts.liquidityPoolId, maxAmountA = opts.maxAmountA, maxAmountB = opts.maxAmountB, minPrice = opts.minPrice, maxPrice = opts.maxPrice;
    var attributes = {};
    if (!liquidityPoolId) throw new TypeError("liquidityPoolId argument is required");
    attributes.liquidityPoolId = _xdr2.default.PoolId.fromXDR(liquidityPoolId, "hex");
    if (!this.isValidAmount(maxAmountA, true)) throw new TypeError("maxAmountA argument is required");
    attributes.maxAmountA = this._toXDRAmount(maxAmountA);
    if (!this.isValidAmount(maxAmountB, true)) throw new TypeError("maxAmountB argument is required");
    attributes.maxAmountB = this._toXDRAmount(maxAmountB);
    if ((0, _isUndefined2.default)(minPrice)) throw new TypeError("minPrice argument is required");
    attributes.minPrice = this._toXDRPrice(minPrice);
    if ((0, _isUndefined2.default)(maxPrice)) throw new TypeError("maxPrice argument is required");
    attributes.maxPrice = this._toXDRPrice(maxPrice);
    var liquidityPoolDepositOp = new _xdr2.default.LiquidityPoolDepositOp(attributes);
    var opAttributes = {
        body: _xdr2.default.OperationBody.liquidityPoolDeposit(liquidityPoolDepositOp)
    };
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"60baf964a5132ac1":"aaheT","e42c5a7a1b1b24eb":"gxpVH"}],"issek":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.liquidityPoolWithdraw = liquidityPoolWithdraw;
var _xdr = require("48b9780b950cd31");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Creates a liquidity pool withdraw operation.
 *
 * @function
 * @alias Operation.liquidityPoolWithdraw
 * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw
 *
 * @param {object} opts - Options object
 * @param {string} opts.liquidityPoolId - The liquidity pool ID.
 * @param {string} opts.amount - Amount of pool shares to withdraw.
 * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.
 * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).
 */ function liquidityPoolWithdraw() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var attributes = {};
    if (!opts.liquidityPoolId) throw new TypeError("liquidityPoolId argument is required");
    attributes.liquidityPoolId = _xdr2.default.PoolId.fromXDR(opts.liquidityPoolId, "hex");
    if (!this.isValidAmount(opts.amount)) throw new TypeError("amount argument is required");
    attributes.amount = this._toXDRAmount(opts.amount);
    if (!this.isValidAmount(opts.minAmountA, true)) throw new TypeError("minAmountA argument is required");
    attributes.minAmountA = this._toXDRAmount(opts.minAmountA);
    if (!this.isValidAmount(opts.minAmountB, true)) throw new TypeError("minAmountB argument is required");
    attributes.minAmountB = this._toXDRAmount(opts.minAmountB);
    var liquidityPoolWithdrawOp = new _xdr2.default.LiquidityPoolWithdrawOp(attributes);
    var opAttributes = {
        body: _xdr2.default.OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)
    };
    this.setSourceAccount(opAttributes, opts);
    return new _xdr2.default.Operation(opAttributes);
}

},{"48b9780b950cd31":"gxpVH"}],"hYmMJ":[function(require,module,exports) {
var Buffer = require("765d59fbdfcd529b").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Memo = exports.MemoReturn = exports.MemoHash = exports.MemoText = exports.MemoID = exports.MemoNone = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _isUndefined = require("3f2b29727144b4af");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _isString = require("ddeae0a4e1b3eafe");
var _isString2 = _interopRequireDefault(_isString);
var _clone = require("8fc76e017181a53e");
var _clone2 = _interopRequireDefault(_clone);
var _jsXdr = require("c19acded75eab382");
var _bignumber = require("d8512a8c79d4ebb3");
var _bignumber2 = _interopRequireDefault(_bignumber);
var _xdr = require("2981efdd5d3a8c26");
var _xdr2 = _interopRequireDefault(_xdr);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * Type of {@link Memo}.
 */ var MemoNone = exports.MemoNone = "none";
/**
 * Type of {@link Memo}.
 */ var MemoID = exports.MemoID = "id";
/**
 * Type of {@link Memo}.
 */ var MemoText = exports.MemoText = "text";
/**
 * Type of {@link Memo}.
 */ var MemoHash = exports.MemoHash = "hash";
/**
 * Type of {@link Memo}.
 */ var MemoReturn = exports.MemoReturn = "return";
/**
 * `Memo` represents memos attached to transactions.
 *
 * @param {string} type - `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`
 * @param {*} value - `string` for `MemoID`, `MemoText`, buffer of hex string for `MemoHash` or `MemoReturn`
 * @see [Transactions concept](https://developers.stellar.org/docs/glossary/transactions/)
 * @class Memo
 */ var Memo = function() {
    function Memo(type) {
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        _classCallCheck(this, Memo);
        this._type = type;
        this._value = value;
        switch(this._type){
            case MemoNone:
                break;
            case MemoID:
                Memo._validateIdValue(value);
                break;
            case MemoText:
                Memo._validateTextValue(value);
                break;
            case MemoHash:
            case MemoReturn:
                Memo._validateHashValue(value);
                // We want MemoHash and MemoReturn to have Buffer as a value
                if ((0, _isString2.default)(value)) this._value = Buffer.from(value, "hex");
                break;
            default:
                throw new Error("Invalid memo type");
        }
    }
    /**
   * Contains memo type: `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`
   */ _createClass(Memo, [
        {
            key: "toXDRObject",
            /**
     * Returns XDR memo object.
     * @returns {xdr.Memo}
     */ value: function toXDRObject() {
                switch(this._type){
                    case MemoNone:
                        return _xdr2.default.Memo.memoNone();
                    case MemoID:
                        return _xdr2.default.Memo.memoId(_jsXdr.UnsignedHyper.fromString(this._value));
                    case MemoText:
                        return _xdr2.default.Memo.memoText(this._value);
                    case MemoHash:
                        return _xdr2.default.Memo.memoHash(this._value);
                    case MemoReturn:
                        return _xdr2.default.Memo.memoReturn(this._value);
                    default:
                        return null;
                }
            }
        },
        {
            key: "type",
            get: function get() {
                return (0, _clone2.default)(this._type);
            },
            set: function set(type) {
                throw new Error("Memo is immutable");
            }
        },
        {
            key: "value",
            get: function get() {
                switch(this._type){
                    case MemoNone:
                        return null;
                    case MemoID:
                    case MemoText:
                        return (0, _clone2.default)(this._value);
                    case MemoHash:
                    case MemoReturn:
                        return Buffer.from(this._value);
                    default:
                        throw new Error("Invalid memo type");
                }
            },
            set: function set(value) {
                throw new Error("Memo is immutable");
            }
        }
    ], [
        {
            key: "_validateIdValue",
            value: function _validateIdValue(value) {
                var error = new Error("Expects a int64 as a string. Got " + value);
                if (!(0, _isString2.default)(value)) throw error;
                var number = void 0;
                try {
                    number = new _bignumber2.default(value);
                } catch (e) {
                    throw error;
                }
                // Infinity
                if (!number.isFinite()) throw error;
                // NaN
                if (number.isNaN()) throw error;
            }
        },
        {
            key: "_validateTextValue",
            value: function _validateTextValue(value) {
                if (!_xdr2.default.Memo.armTypeForArm("text").isValid(value)) throw new Error("Expects string, array or buffer, max 28 bytes");
            }
        },
        {
            key: "_validateHashValue",
            value: function _validateHashValue(value) {
                var error = new Error("Expects a 32 byte hash value or hex encoded string. Got " + value);
                if (value === null || (0, _isUndefined2.default)(value)) throw error;
                var valueBuffer = void 0;
                if ((0, _isString2.default)(value)) {
                    if (!/^[0-9A-Fa-f]{64}$/g.test(value)) throw error;
                    valueBuffer = Buffer.from(value, "hex");
                } else if (Buffer.isBuffer(value)) valueBuffer = Buffer.from(value);
                else throw error;
                if (!valueBuffer.length || valueBuffer.length !== 32) throw error;
            }
        },
        {
            key: "none",
            value: function none() {
                return new Memo(MemoNone);
            }
        },
        {
            key: "text",
            value: function text(_text) {
                return new Memo(MemoText, _text);
            }
        },
        {
            key: "id",
            value: function id(_id) {
                return new Memo(MemoID, _id);
            }
        },
        {
            key: "hash",
            value: function hash(_hash) {
                return new Memo(MemoHash, _hash);
            }
        },
        {
            key: "return",
            value: function _return(hash) {
                return new Memo(MemoReturn, hash);
            }
        },
        {
            key: "fromXDRObject",
            value: function fromXDRObject(object) {
                switch(object.arm()){
                    case "id":
                        return Memo.id(object.value().toString());
                    case "text":
                        return Memo.text(object.value());
                    case "hash":
                        return Memo.hash(object.value());
                    case "retHash":
                        return Memo.return(object.value());
                    default:
                        break;
                }
                if (typeof object.value() === "undefined") return Memo.none();
                throw new Error("Unknown type");
            }
        }
    ]);
    return Memo;
}();
exports.Memo = Memo;

},{"765d59fbdfcd529b":"fCgem","3f2b29727144b4af":"aaheT","ddeae0a4e1b3eafe":"iAF7t","8fc76e017181a53e":"edHVe","c19acded75eab382":"inVSw","d8512a8c79d4ebb3":"57qkX","2981efdd5d3a8c26":"gxpVH"}],"b5UHu":[function(require,module,exports) {
var Buffer = require("a2d166c02c86e626").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FeeBumpTransaction = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _xdr = require("44f52f40e6ee2fb6");
var _xdr2 = _interopRequireDefault(_xdr);
var _hashing = require("89d3f8b0825e75cf");
var _transaction = require("45b974d4cff5ea12");
var _transaction_base = require("9b0459adfa783107");
var _decode_encode_muxed_account = require("3146a5910ea310c4");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
/**
 * Use {@link TransactionBuilder.buildFeeBumpTransaction} to build a
 * FeeBumpTransaction object. If you have an object or base64-encoded string of
 * the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.
 *
 * Once a {@link FeeBumpTransaction} has been created, its attributes and operations
 * should not be changed. You should only add signatures (using {@link FeeBumpTransaction#sign}) before
 * submitting to the network or forwarding on to additional signers.
 *
 * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope
 *     object or base64 encoded string.
 * @param {string} networkPassphrase - passphrase of the target Stellar network
 *     (e.g. "Public Global Stellar Network ; September 2015").
 *
 * @extends TransactionBase
 */ var FeeBumpTransaction = exports.FeeBumpTransaction = function(_TransactionBase) {
    _inherits(FeeBumpTransaction, _TransactionBase);
    function FeeBumpTransaction(envelope, networkPassphrase) {
        _classCallCheck(this, FeeBumpTransaction);
        if (typeof envelope === "string") {
            var buffer = Buffer.from(envelope, "base64");
            envelope = _xdr2.default.TransactionEnvelope.fromXDR(buffer);
        }
        var envelopeType = envelope.switch();
        if (envelopeType !== _xdr2.default.EnvelopeType.envelopeTypeTxFeeBump()) throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an " + envelopeType.name + ".");
        var txEnvelope = envelope.value();
        var tx = txEnvelope.tx();
        var fee = tx.fee().toString();
        // clone signatures
        var signatures = (txEnvelope.signatures() || []).slice();
        var _this = _possibleConstructorReturn(this, (FeeBumpTransaction.__proto__ || Object.getPrototypeOf(FeeBumpTransaction)).call(this, tx, signatures, fee, networkPassphrase));
        var innerTxEnvelope = _xdr2.default.TransactionEnvelope.envelopeTypeTx(tx.innerTx().v1());
        _this._feeSource = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(_this.tx.feeSource());
        _this._innerTransaction = new _transaction.Transaction(innerTxEnvelope, networkPassphrase);
        return _this;
    }
    /**
   * @type {Transaction}
   * @readonly
   */ _createClass(FeeBumpTransaction, [
        {
            key: "signatureBase",
            /**
     * Returns the "signature base" of this transaction, which is the value
     * that, when hashed, should be signed to create a signature that
     * validators on the Stellar Network will accept.
     *
     * It is composed of a 4 prefix bytes followed by the xdr-encoded form
     * of this transaction.
     * @returns {Buffer}
     */ value: function signatureBase() {
                var taggedTransaction = new _xdr2.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx);
                var txSignature = new _xdr2.default.TransactionSignaturePayload({
                    networkId: _xdr2.default.Hash.fromXDR((0, _hashing.hash)(this.networkPassphrase)),
                    taggedTransaction: taggedTransaction
                });
                return txSignature.toXDR();
            }
        },
        {
            key: "toEnvelope",
            value: function toEnvelope() {
                var envelope = new _xdr2.default.FeeBumpTransactionEnvelope({
                    tx: _xdr2.default.FeeBumpTransaction.fromXDR(this.tx.toXDR()),
                    signatures: this.signatures.slice() // make a copy of the signatures
                });
                return new _xdr2.default.TransactionEnvelope.envelopeTypeTxFeeBump(envelope);
            }
        },
        {
            key: "innerTransaction",
            get: function get() {
                return this._innerTransaction;
            }
        },
        {
            key: "feeSource",
            get: function get() {
                return this._feeSource;
            }
        }
    ]);
    return FeeBumpTransaction;
}(_transaction_base.TransactionBase);

},{"a2d166c02c86e626":"fCgem","44f52f40e6ee2fb6":"gxpVH","89d3f8b0825e75cf":"efCju","45b974d4cff5ea12":"eHX3S","9b0459adfa783107":"6Ntw2","3146a5910ea310c4":"5F4St"}],"5a4TD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransactionBuilder = exports.TimeoutInfinite = exports.BASE_FEE = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
exports.isValidDate = isValidDate;
var _jsXdr = require("3acd1c4cbfe0d2b5");
var _bignumber = require("de8e9c7a1490f52a");
var _bignumber2 = _interopRequireDefault(_bignumber);
var _clone = require("5bc9bfd916f4f26a");
var _clone2 = _interopRequireDefault(_clone);
var _isUndefined = require("dedededf90a4bcd5");
var _isUndefined2 = _interopRequireDefault(_isUndefined);
var _isString = require("b2a6d13079666d69");
var _isString2 = _interopRequireDefault(_isString);
var _isArray = require("fd43c0e4fe4fbe26");
var _isArray2 = _interopRequireDefault(_isArray);
var _xdr = require("5062e14a8c7ef7db");
var _xdr2 = _interopRequireDefault(_xdr);
var _transaction = require("c53af6dedc0a1415");
var _fee_bump_transaction = require("e00a4810c901c939");
var _signerkey = require("98ddbdd1aa6fd763");
var _memo = require("3ab85542a7fa1e39");
var _decode_encode_muxed_account = require("f458e04c22cb490e");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * Minimum base fee for transactions. If this fee is below the network
 * minimum, the transaction will fail. The more operations in the
 * transaction, the greater the required fee. Use {@link
 * Server#fetchBaseFee} to get an accurate value of minimum transaction
 * fee on the network.
 *
 * @constant
 * @see [Fees](https://developers.stellar.org/docs/glossary/fees/)
 */ var BASE_FEE = exports.BASE_FEE = "100"; // Stroops
/**
 * @constant
 * @see {@link TransactionBuilder#setTimeout}
 * @see [Timeout](https://developers.stellar.org/api/resources/transactions/post/)
 */ var TimeoutInfinite = exports.TimeoutInfinite = 0;
/**
 * <p>Transaction builder helps constructs a new `{@link Transaction}` using the
 * given {@link Account} as the transaction's "source account". The transaction
 * will use the current sequence number of the given account as its sequence
 * number and increment the given account's sequence number by one. The given
 * source account must include a private key for signing the transaction or an
 * error will be thrown.</p>
 *
 * <p>Operations can be added to the transaction via their corresponding builder
 * methods, and each returns the TransactionBuilder object so they can be
 * chained together. After adding the desired operations, call the `build()`
 * method on the `TransactionBuilder` to return a fully constructed `{@link
 * Transaction}` that can be signed. The returned transaction will contain the
 * sequence number of the source account and include the signature from the
 * source account.</p>
 *
 * <p><strong>Be careful about unsubmitted transactions!</strong> When you build
 * a transaction, stellar-sdk automatically increments the source account's
 * sequence number. If you end up not submitting this transaction and submitting
 * another one instead, it'll fail due to the sequence number being wrong. So if
 * you decide not to use a built transaction, make sure to update the source
 * account's sequence number with
 * [Server.loadAccount](https://stellar.github.io/js-stellar-sdk/Server.html#loadAccount)
 * before creating another transaction.</p>
 *
 * <p>The following code example creates a new transaction with {@link
 * Operation.createAccount} and {@link Operation.payment} operations. The
 * Transaction's source account first funds `destinationA`, then sends a payment
 * to `destinationB`. The built transaction is then signed by
 * `sourceKeypair`.</p>
 *
 * ```
 * var transaction = new TransactionBuilder(source, { fee, networkPassphrase: Networks.TESTNET })
 * .addOperation(Operation.createAccount({
 *     destination: destinationA,
 *     startingBalance: "20"
 * })) // <- funds and creates destinationA
 * .addOperation(Operation.payment({
 *     destination: destinationB,
 *     amount: "100",
 *     asset: Asset.native()
 * })) // <- sends 100 XLM to destinationB
 * .setTimeout(30)
 * .build();
 *
 * transaction.sign(sourceKeypair);
 * ```
 *
 * @constructor
 *
 * @param {Account} sourceAccount - source account for this transaction
 * @param {object}  opts          - Options object
 * @param {string}  opts.fee      - max fee you're willing to pay per
 *     operation in this transaction (**in stroops**)
 *
 * @param {object}              [opts.timebounds] - timebounds for the
 *     validity of this transaction
 * @param {number|string|Date}  [opts.timebounds.minTime] - 64-bit UNIX
 *     timestamp or Date object
 * @param {number|string|Date}  [opts.timebounds.maxTime] - 64-bit UNIX
 *     timestamp or Date object
 * @param {object}              [opts.ledgerbounds] - ledger bounds for the
 *     validity of this transaction
 * @param {number}              [opts.ledgerbounds.minLedger] - number of the minimum
 *     ledger sequence
 * @param {number}              [opts.ledgerbounds.maxLedger] - number of the maximum
 *     ledger sequence
 * @param {string}              [opts.minAccountSequence] - number for
 *     the minimum account sequence
 * @param {number}              [opts.minAccountSequenceAge] - number of
 *     seconds for the minimum account sequence age
 * @param {number}              [opts.minAccountSequenceLedgerGap] - number of
 *     ledgers for the minimum account sequence ledger gap
 * @param {string[]}            [opts.extraSigners] - list of the extra signers
 *     required for this transaction
 * @param {Memo}                [opts.memo] - memo for the transaction
 * @param {string}              [opts.networkPassphrase] passphrase of the
 *     target Stellar network (e.g. "Public Global Stellar Network ; September
 *     2015" for the pubnet)
 */ var TransactionBuilder = exports.TransactionBuilder = function() {
    function TransactionBuilder(sourceAccount) {
        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        _classCallCheck(this, TransactionBuilder);
        if (!sourceAccount) throw new Error("must specify source account for the transaction");
        if ((0, _isUndefined2.default)(opts.fee)) throw new Error("must specify fee for the transaction (in stroops)");
        this.source = sourceAccount;
        this.operations = [];
        this.baseFee = opts.fee;
        this.timebounds = (0, _clone2.default)(opts.timebounds) || null;
        this.ledgerbounds = (0, _clone2.default)(opts.ledgerbounds) || null;
        this.minAccountSequence = opts.minAccountSequence || null;
        this.minAccountSequenceAge = opts.minAccountSequenceAge || null;
        this.minAccountSequenceLedgerGap = opts.minAccountSequenceLedgerGap || null;
        this.extraSigners = (0, _clone2.default)(opts.extraSigners) || null;
        this.memo = opts.memo || _memo.Memo.none();
        this.networkPassphrase = opts.networkPassphrase || null;
    }
    /**
   * Adds an operation to the transaction.
   *
   * @param {xdr.Operation} operation   The xdr operation object, use {@link
   *     Operation} static methods.
   *
   * @returns {TransactionBuilder}
   */ _createClass(TransactionBuilder, [
        {
            key: "addOperation",
            value: function addOperation(operation) {
                this.operations.push(operation);
                return this;
            }
        },
        {
            key: "addMemo",
            value: function addMemo(memo) {
                this.memo = memo;
                return this;
            }
        },
        {
            key: "setTimeout",
            value: function setTimeout(timeoutSeconds) {
                if (this.timebounds !== null && this.timebounds.maxTime > 0) throw new Error("TimeBounds.max_time has been already set - setting timeout would overwrite it.");
                if (timeoutSeconds < 0) throw new Error("timeout cannot be negative");
                if (timeoutSeconds > 0) {
                    var timeoutTimestamp = Math.floor(Date.now() / 1000) + timeoutSeconds;
                    if (this.timebounds === null) this.timebounds = {
                        minTime: 0,
                        maxTime: timeoutTimestamp
                    };
                    else this.timebounds = {
                        minTime: this.timebounds.minTime,
                        maxTime: timeoutTimestamp
                    };
                } else this.timebounds = {
                    minTime: 0,
                    maxTime: 0
                };
                return this;
            }
        },
        {
            key: "setTimebounds",
            value: function setTimebounds(minEpochOrDate, maxEpochOrDate) {
                // Force it to a date type
                if (typeof minEpochOrDate === "number") minEpochOrDate = new Date(minEpochOrDate * 1000);
                if (typeof maxEpochOrDate === "number") maxEpochOrDate = new Date(maxEpochOrDate * 1000);
                if (this.timebounds !== null) throw new Error("TimeBounds has been already set - setting timebounds would overwrite it.");
                // Convert that date to the epoch seconds
                var minTime = Math.floor(minEpochOrDate.valueOf() / 1000);
                var maxTime = Math.floor(maxEpochOrDate.valueOf() / 1000);
                if (minTime < 0) throw new Error("min_time cannot be negative");
                if (maxTime < 0) throw new Error("max_time cannot be negative");
                if (maxTime > 0 && minTime > maxTime) throw new Error("min_time cannot be greater than max_time");
                this.timebounds = {
                    minTime: minTime,
                    maxTime: maxTime
                };
                return this;
            }
        },
        {
            key: "setLedgerbounds",
            value: function setLedgerbounds(minLedger, maxLedger) {
                if (this.ledgerbounds !== null) throw new Error("LedgerBounds has been already set - setting ledgerbounds would overwrite it.");
                if (minLedger < 0) throw new Error("min_ledger cannot be negative");
                if (maxLedger < 0) throw new Error("max_ledger cannot be negative");
                if (maxLedger > 0 && minLedger > maxLedger) throw new Error("min_ledger cannot be greater than max_ledger");
                this.ledgerbounds = {
                    minLedger: minLedger,
                    maxLedger: maxLedger
                };
                return this;
            }
        },
        {
            key: "setMinAccountSequence",
            value: function setMinAccountSequence(minAccountSequence) {
                if (this.minAccountSequence !== null) throw new Error("min_account_sequence has been already set - setting min_account_sequence would overwrite it.");
                this.minAccountSequence = minAccountSequence;
                return this;
            }
        },
        {
            key: "setMinAccountSequenceAge",
            value: function setMinAccountSequenceAge(durationInSeconds) {
                if (typeof durationInSeconds !== "number") throw new Error("min_account_sequence_age must be a number");
                if (this.minAccountSequenceAge !== null) throw new Error("min_account_sequence_age has been already set - setting min_account_sequence_age would overwrite it.");
                if (durationInSeconds < 0) throw new Error("min_account_sequence_age cannot be negative");
                this.minAccountSequenceAge = durationInSeconds;
                return this;
            }
        },
        {
            key: "setMinAccountSequenceLedgerGap",
            value: function setMinAccountSequenceLedgerGap(gap) {
                if (this.minAccountSequenceLedgerGap !== null) throw new Error("min_account_sequence_ledger_gap has been already set - setting min_account_sequence_ledger_gap would overwrite it.");
                if (gap < 0) throw new Error("min_account_sequence_ledger_gap cannot be negative");
                this.minAccountSequenceLedgerGap = gap;
                return this;
            }
        },
        {
            key: "setExtraSigners",
            value: function setExtraSigners(extraSigners) {
                if (!(0, _isArray2.default)(extraSigners)) throw new Error("extra_signers must be an array of strings.");
                if (this.extraSigners !== null) throw new Error("extra_signers has been already set - setting extra_signers would overwrite it.");
                if (extraSigners.length > 2) throw new Error("extra_signers cannot be longer than 2 elements.");
                this.extraSigners = (0, _clone2.default)(extraSigners);
                return this;
            }
        },
        {
            key: "setNetworkPassphrase",
            value: function setNetworkPassphrase(networkPassphrase) {
                this.networkPassphrase = networkPassphrase;
                return this;
            }
        },
        {
            key: "build",
            value: function build() {
                var sequenceNumber = new _bignumber2.default(this.source.sequenceNumber()).add(1);
                var fee = new _bignumber2.default(this.baseFee).mul(this.operations.length).toNumber();
                var attrs = {
                    fee: fee,
                    seqNum: _xdr2.default.SequenceNumber.fromString(sequenceNumber.toString()),
                    memo: this.memo ? this.memo.toXDRObject() : null
                };
                if (this.timebounds === null || typeof this.timebounds.minTime === "undefined" || typeof this.timebounds.maxTime === "undefined") throw new Error("TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).");
                if (isValidDate(this.timebounds.minTime)) this.timebounds.minTime = this.timebounds.minTime.getTime() / 1000;
                if (isValidDate(this.timebounds.maxTime)) this.timebounds.maxTime = this.timebounds.maxTime.getTime() / 1000;
                this.timebounds.minTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.minTime.toString());
                this.timebounds.maxTime = _jsXdr.UnsignedHyper.fromString(this.timebounds.maxTime.toString());
                var timeBounds = new _xdr2.default.TimeBounds(this.timebounds);
                if (this.hasV2Preconditions()) {
                    var ledgerBounds = null;
                    if (this.ledgerbounds !== null) ledgerBounds = new _xdr2.default.LedgerBounds(this.ledgerbounds);
                    var minSeqNum = this.minAccountSequence || "0";
                    minSeqNum = _xdr2.default.SequenceNumber.fromString(minSeqNum);
                    var minSeqAge = _jsXdr.UnsignedHyper.fromString(this.minAccountSequenceAge !== null ? this.minAccountSequenceAge.toString() : "0");
                    var minSeqLedgerGap = this.minAccountSequenceLedgerGap || 0;
                    var extraSigners = this.extraSigners !== null ? this.extraSigners.map(_signerkey.SignerKey.decodeAddress) : [];
                    attrs.cond = _xdr2.default.Preconditions.precondV2(new _xdr2.default.PreconditionsV2({
                        timeBounds: timeBounds,
                        ledgerBounds: ledgerBounds,
                        minSeqNum: minSeqNum,
                        minSeqAge: minSeqAge,
                        minSeqLedgerGap: minSeqLedgerGap,
                        extraSigners: extraSigners
                    }));
                } else attrs.cond = _xdr2.default.Preconditions.precondTime(timeBounds);
                attrs.sourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(this.source.accountId());
                attrs.ext = new _xdr2.default.TransactionExt(0);
                var xtx = new _xdr2.default.Transaction(attrs);
                xtx.operations(this.operations);
                var txEnvelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTx(new _xdr2.default.TransactionV1Envelope({
                    tx: xtx
                }));
                var tx = new _transaction.Transaction(txEnvelope, this.networkPassphrase);
                this.source.incrementSequenceNumber();
                return tx;
            }
        },
        {
            key: "hasV2Preconditions",
            value: function hasV2Preconditions() {
                return this.ledgerbounds !== null || this.minAccountSequence !== null || this.minAccountSequenceAge !== null || this.minAccountSequenceLedgerGap !== null || this.extraSigners !== null && this.extraSigners.length > 0;
            }
        }
    ], [
        {
            key: "buildFeeBumpTransaction",
            value: function buildFeeBumpTransaction(feeSource, baseFee, innerTx, networkPassphrase) {
                var innerOps = innerTx.operations.length;
                var innerBaseFeeRate = new _bignumber2.default(innerTx.fee).div(innerOps);
                var base = new _bignumber2.default(baseFee);
                // The fee rate for fee bump is at least the fee rate of the inner transaction
                if (base.lessThan(innerBaseFeeRate)) throw new Error("Invalid baseFee, it should be at least " + innerBaseFeeRate + " stroops.");
                var minBaseFee = new _bignumber2.default(BASE_FEE);
                // The fee rate is at least the minimum fee
                if (base.lessThan(minBaseFee)) throw new Error("Invalid baseFee, it should be at least " + minBaseFee + " stroops.");
                var innerTxEnvelope = innerTx.toEnvelope();
                if (innerTxEnvelope.switch() === _xdr2.default.EnvelopeType.envelopeTypeTxV0()) {
                    var v0Tx = innerTxEnvelope.v0().tx();
                    var v1Tx = new _xdr2.default.Transaction({
                        sourceAccount: new _xdr2.default.MuxedAccount.keyTypeEd25519(v0Tx.sourceAccountEd25519()),
                        fee: v0Tx.fee(),
                        seqNum: v0Tx.seqNum(),
                        cond: _xdr2.default.Preconditions.precondTime(v0Tx.timeBounds()),
                        memo: v0Tx.memo(),
                        operations: v0Tx.operations(),
                        ext: new _xdr2.default.TransactionExt(0)
                    });
                    innerTxEnvelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTx(new _xdr2.default.TransactionV1Envelope({
                        tx: v1Tx,
                        signatures: innerTxEnvelope.v0().signatures()
                    }));
                }
                var feeSourceAccount = void 0;
                if ((0, _isString2.default)(feeSource)) feeSourceAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(feeSource);
                else feeSourceAccount = feeSource.xdrMuxedAccount();
                var tx = new _xdr2.default.FeeBumpTransaction({
                    feeSource: feeSourceAccount,
                    fee: _xdr2.default.Int64.fromString(base.mul(innerOps + 1).toString()),
                    innerTx: _xdr2.default.FeeBumpTransactionInnerTx.envelopeTypeTx(innerTxEnvelope.v1()),
                    ext: new _xdr2.default.FeeBumpTransactionExt(0)
                });
                var feeBumpTxEnvelope = new _xdr2.default.FeeBumpTransactionEnvelope({
                    tx: tx,
                    signatures: []
                });
                var envelope = new _xdr2.default.TransactionEnvelope.envelopeTypeTxFeeBump(feeBumpTxEnvelope);
                return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);
            }
        },
        {
            key: "fromXDR",
            value: function fromXDR(envelope, networkPassphrase) {
                if (typeof envelope === "string") envelope = _xdr2.default.TransactionEnvelope.fromXDR(envelope, "base64");
                if (envelope.switch() === _xdr2.default.EnvelopeType.envelopeTypeTxFeeBump()) return new _fee_bump_transaction.FeeBumpTransaction(envelope, networkPassphrase);
                return new _transaction.Transaction(envelope, networkPassphrase);
            }
        }
    ]);
    return TransactionBuilder;
}();
/**
 * Checks whether a provided object is a valid Date.
 * @argument {Date} d date object
 * @returns {boolean}
 */ function isValidDate(d) {
    // isnan is okay here because it correctly checks for invalid date objects
    // eslint-disable-next-line no-restricted-globals
    return d instanceof Date && !isNaN(d);
}

},{"3acd1c4cbfe0d2b5":"inVSw","de8e9c7a1490f52a":"57qkX","5bc9bfd916f4f26a":"edHVe","dedededf90a4bcd5":"aaheT","b2a6d13079666d69":"iAF7t","fd43c0e4fe4fbe26":"dZaTH","5062e14a8c7ef7db":"gxpVH","c53af6dedc0a1415":"eHX3S","e00a4810c901c939":"b5UHu","98ddbdd1aa6fd763":"b6vrA","3ab85542a7fa1e39":"hYmMJ","f458e04c22cb490e":"5F4St"}],"b6vrA":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignerKey = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _xdr = require("c58bfb594473c690");
var _xdr2 = _interopRequireDefault(_xdr);
var _strkey = require("9d4a09f10ae82a3d");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * A container class with helpers to convert between signer keys
 * (`xdr.SignerKey`) and {@link StrKey}s.
 *
 * It's primarly used for manipulating the `extraSigners` precondition on a
 * {@link Transaction}.
 *
 * @see {@link TransactionBuilder.setExtraSigners}
 */ var SignerKey = exports.SignerKey = function() {
    function SignerKey() {
        _classCallCheck(this, SignerKey);
    }
    _createClass(SignerKey, null, [
        {
            key: "decodeAddress",
            /**
     * Decodes a StrKey address into an xdr.SignerKey instance.
     *
     * Only ED25519 public keys (G...), pre-auth transactions (T...), hashes
     * (H...), and signed payloads (P...) can be signer keys.
     *
     * @param   {string} address  a StrKey-encoded signer address
     * @returns {xdr.SignerKey}
     */ value: function decodeAddress(address) {
                var signerKeyMap = {
                    ed25519PublicKey: _xdr2.default.SignerKey.signerKeyTypeEd25519,
                    preAuthTx: _xdr2.default.SignerKey.signerKeyTypePreAuthTx,
                    sha256Hash: _xdr2.default.SignerKey.signerKeyTypeHashX,
                    signedPayload: _xdr2.default.SignerKey.signerKeyTypeEd25519SignedPayload
                };
                var vb = _strkey.StrKey.getVersionByteForPrefix(address);
                var encoder = signerKeyMap[vb];
                if (!encoder) throw new Error("invalid signer key type (" + vb + ")");
                var raw = (0, _strkey.decodeCheck)(vb, address);
                switch(vb){
                    case "signedPayload":
                        return encoder(new _xdr2.default.SignerKeyEd25519SignedPayload({
                            ed25519: raw.slice(0, 32),
                            payload: raw.slice(36)
                        }));
                    case "ed25519PublicKey":
                    case "preAuthTx":
                    case "sha256Hash":
                    default:
                        return encoder(raw);
                }
            }
        },
        {
            key: "encodeSignerKey",
            value: function encodeSignerKey(signerKey) {
                var strkeyType = void 0;
                var raw = void 0;
                switch(signerKey.switch()){
                    case _xdr2.default.SignerKeyType.signerKeyTypeEd25519():
                        strkeyType = "ed25519PublicKey";
                        raw = signerKey.value();
                        break;
                    case _xdr2.default.SignerKeyType.signerKeyTypePreAuthTx():
                        strkeyType = "preAuthTx";
                        raw = signerKey.value();
                        break;
                    case _xdr2.default.SignerKeyType.signerKeyTypeHashX():
                        strkeyType = "sha256Hash";
                        raw = signerKey.value();
                        break;
                    case _xdr2.default.SignerKeyType.signerKeyTypeEd25519SignedPayload():
                        strkeyType = "signedPayload";
                        raw = signerKey.ed25519SignedPayload().toXDR("raw");
                        break;
                    default:
                        throw new Error("invalid SignerKey (type: " + signerKey.switch() + ")");
                }
                return (0, _strkey.encodeCheck)(strkeyType, raw);
            }
        }
    ]);
    return SignerKey;
}();

},{"c58bfb594473c690":"gxpVH","9d4a09f10ae82a3d":"gjDua"}],"juKGU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Account = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _isString = require("7a1e8251e8ef6d2f");
var _isString2 = _interopRequireDefault(_isString);
var _bignumber = require("c4ad0fe42adadbcb");
var _bignumber2 = _interopRequireDefault(_bignumber);
var _strkey = require("39933cc56c1bf006");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * Create a new Account object.
 *
 * `Account` represents a single account in the Stellar network and its sequence
 * number. Account tracks the sequence number as it is used by {@link
 * TransactionBuilder}. See
 * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for
 * more information about how accounts work in Stellar.
 *
 * @constructor
 *
 * @param {string} accountId - ID of the account (ex.
 *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you
 *     provide a muxed account address, this will throw; use {@link
 *     MuxedAccount} instead.
 * @param {string} sequence  - current sequence number of the account
 */ var Account = exports.Account = function() {
    function Account(accountId, sequence) {
        _classCallCheck(this, Account);
        if (_strkey.StrKey.isValidMed25519PublicKey(accountId)) throw new Error("accountId is an M-address; use MuxedAccount instead");
        if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) throw new Error("accountId is invalid");
        if (!(0, _isString2.default)(sequence)) throw new Error("sequence must be of type string");
        this._accountId = accountId;
        this.sequence = new _bignumber2.default(sequence);
    }
    /**
   * Returns Stellar account ID, ex.
   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.
   * @returns {string}
   */ _createClass(Account, [
        {
            key: "accountId",
            value: function accountId() {
                return this._accountId;
            }
        },
        {
            key: "sequenceNumber",
            value: function sequenceNumber() {
                return this.sequence.toString();
            }
        },
        {
            key: "incrementSequenceNumber",
            value: function incrementSequenceNumber() {
                this.sequence = this.sequence.add(1);
            }
        }
    ]);
    return Account;
}();

},{"7a1e8251e8ef6d2f":"iAF7t","c4ad0fe42adadbcb":"57qkX","39933cc56c1bf006":"gjDua"}],"kLOod":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MuxedAccount = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _isString = require("ed089b84f7e945ed");
var _isString2 = _interopRequireDefault(_isString);
var _xdr = require("b0d17a562d485661");
var _xdr2 = _interopRequireDefault(_xdr);
var _account = require("56da37348b242251");
var _strkey = require("d8745180131800c4");
var _decode_encode_muxed_account = require("204b310abfb63ed");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
/**
 * Represents a muxed account for transactions and operations.
 *
 * A muxed (or *multiplexed*) account (defined rigorously in
 * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in
 * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single
 * Stellar `G...`` account to many different underlying IDs.
 *
 * For example, you may have a single Stellar address for accounting purposes:
 *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ
 *
 * Yet would like to use it for 4 different family members:
 *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ
 *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ
 *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ
 *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ
 *
 * This object makes it easy to create muxed accounts from regular accounts,
 * duplicate them, get/set the underlying IDs, etc. without mucking around with
 * the raw XDR.
 *
 * Because muxed accounts are purely an off-chain convention, they all share the
 * sequence number tied to their underlying G... account. Thus, this object
 * *requires* an {@link Account} instance to be passed in, so that muxed
 * instances of an account can collectively modify the sequence number whenever
 * a muxed account is used as the source of a @{link Transaction} with {@link
 * TransactionBuilder}.
 *
 * @constructor
 *
 * @param {Account}   account - the @{link Account} instance representing the
 *                              underlying G... address
 * @param {string}    id      - a stringified uint64 value that represents the
 *                              ID of the muxed account
 *
 * @link https://developers.stellar.org/docs/glossary/muxed-accounts/
 */ var MuxedAccount = exports.MuxedAccount = function() {
    function MuxedAccount(baseAccount, id) {
        _classCallCheck(this, MuxedAccount);
        var accountId = baseAccount.accountId();
        if (!_strkey.StrKey.isValidEd25519PublicKey(accountId)) throw new Error("accountId is invalid");
        this.account = baseAccount;
        this._muxedXdr = (0, _decode_encode_muxed_account.encodeMuxedAccount)(accountId, id);
        this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);
        this._id = id;
    }
    /**
   * Parses an M-address into a MuxedAccount object.
   *
   * @param  {string} mAddress    - an M-address to transform
   * @param  {string} sequenceNum - the sequence number of the underlying {@link
   *     Account}, to use for the underlying base account (@link
   *     MuxedAccount.baseAccount). If you're using the SDK, you can use
   *     `server.loadAccount` to fetch this if you don't know it.
   *
   * @return {MuxedAccount}
   */ _createClass(MuxedAccount, [
        {
            key: "baseAccount",
            /**
     * @return {Account} the underlying account object shared among all muxed
     *     accounts with this Stellar address
     */ value: function baseAccount() {
                return this.account;
            }
        },
        {
            key: "accountId",
            value: function accountId() {
                return this._mAddress;
            }
        },
        {
            key: "id",
            value: function id() {
                return this._id;
            }
        },
        {
            key: "setId",
            value: function setId(id) {
                if (!(0, _isString2.default)(id)) throw new Error("id should be a string representing a number (uint64)");
                this._muxedXdr.med25519().id(_xdr2.default.Uint64.fromString(id));
                this._mAddress = (0, _decode_encode_muxed_account.encodeMuxedAccountToAddress)(this._muxedXdr);
                this._id = id;
                return this;
            }
        },
        {
            key: "sequenceNumber",
            value: function sequenceNumber() {
                return this.account.sequenceNumber();
            }
        },
        {
            key: "incrementSequenceNumber",
            value: function incrementSequenceNumber() {
                return this.account.incrementSequenceNumber();
            }
        },
        {
            key: "toXDRObject",
            value: function toXDRObject() {
                return this._muxedXdr;
            }
        },
        {
            key: "equals",
            value: function equals(otherMuxedAccount) {
                return this.accountId() === otherMuxedAccount.accountId();
            }
        }
    ], [
        {
            key: "fromAddress",
            value: function fromAddress(mAddress, sequenceNum) {
                var muxedAccount = (0, _decode_encode_muxed_account.decodeAddressToMuxedAccount)(mAddress);
                var gAddress = (0, _decode_encode_muxed_account.extractBaseAddress)(mAddress);
                var id = muxedAccount.med25519().id().toString();
                return new MuxedAccount(new _account.Account(gAddress, sequenceNum), id);
            }
        }
    ]);
    return MuxedAccount;
}();

},{"ed089b84f7e945ed":"iAF7t","b0d17a562d485661":"gxpVH","56da37348b242251":"juKGU","d8745180131800c4":"gjDua","204b310abfb63ed":"5F4St"}],"cytwd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Contains passphrases for common networks:
 * * `Networks.PUBLIC`: `Public Global Stellar Network ; September 2015`
 * * `Networks.TESTNET`: `Test SDF Network ; September 2015`
 * @type {{PUBLIC: string, TESTNET: string}}
 */ var Networks = exports.Networks = {
    PUBLIC: "Public Global Stellar Network ; September 2015",
    TESTNET: "Test SDF Network ; September 2015"
};

},{}],"j3jT2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountRequiresMemoError = exports.InvalidSep10ChallengeError = exports.BadResponseError = exports.BadRequestError = exports.NotFoundError = exports.NetworkError = void 0;
var tslib_1 = require("37f389f3510cb89");
var NetworkError = function(_super) {
    tslib_1.__extends(NetworkError, _super);
    function NetworkError(message, response) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, message) || this;
        _this.__proto__ = trueProto;
        _this.constructor = NetworkError;
        _this.response = response;
        return _this;
    }
    NetworkError.prototype.getResponse = function() {
        return this.response;
    };
    return NetworkError;
}(Error);
exports.NetworkError = NetworkError;
var NotFoundError = function(_super) {
    tslib_1.__extends(NotFoundError, _super);
    function NotFoundError(message, response) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, message, response) || this;
        _this.__proto__ = trueProto;
        _this.constructor = NotFoundError;
        _this.name = "NotFoundError";
        return _this;
    }
    return NotFoundError;
}(NetworkError);
exports.NotFoundError = NotFoundError;
var BadRequestError = function(_super) {
    tslib_1.__extends(BadRequestError, _super);
    function BadRequestError(message, response) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, message, response) || this;
        _this.__proto__ = trueProto;
        _this.constructor = BadRequestError;
        _this.name = "BadRequestError";
        return _this;
    }
    return BadRequestError;
}(NetworkError);
exports.BadRequestError = BadRequestError;
var BadResponseError = function(_super) {
    tslib_1.__extends(BadResponseError, _super);
    function BadResponseError(message, response) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, message, response) || this;
        _this.__proto__ = trueProto;
        _this.constructor = BadResponseError;
        _this.name = "BadResponseError";
        return _this;
    }
    return BadResponseError;
}(NetworkError);
exports.BadResponseError = BadResponseError;
var InvalidSep10ChallengeError = function(_super) {
    tslib_1.__extends(InvalidSep10ChallengeError, _super);
    function InvalidSep10ChallengeError(message) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, message) || this;
        _this.__proto__ = trueProto;
        _this.constructor = InvalidSep10ChallengeError;
        _this.name = "InvalidSep10ChallengeError";
        return _this;
    }
    return InvalidSep10ChallengeError;
}(Error);
exports.InvalidSep10ChallengeError = InvalidSep10ChallengeError;
var AccountRequiresMemoError = function(_super) {
    tslib_1.__extends(AccountRequiresMemoError, _super);
    function AccountRequiresMemoError(message, accountId, operationIndex) {
        var _newTarget = this.constructor;
        var _this = this;
        var trueProto = _newTarget.prototype;
        _this = _super.call(this, message) || this;
        _this.__proto__ = trueProto;
        _this.constructor = AccountRequiresMemoError;
        _this.name = "AccountRequiresMemoError";
        _this.accountId = accountId;
        _this.operationIndex = operationIndex;
        return _this;
    }
    return AccountRequiresMemoError;
}(Error);
exports.AccountRequiresMemoError = AccountRequiresMemoError;

},{"37f389f3510cb89":"lRdW5"}],"bdmoV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Config = void 0;
var tslib_1 = require("1f7a5ff225fa3a0a");
var clone_1 = tslib_1.__importDefault(require("33702240068defa4"));
var defaultConfig = {
    allowHttp: false,
    timeout: 0
};
var config = clone_1.default(defaultConfig);
var Config = function() {
    function Config() {}
    Config.setAllowHttp = function(value) {
        config.allowHttp = value;
    };
    Config.setTimeout = function(value) {
        config.timeout = value;
    };
    Config.isAllowHttp = function() {
        return config.allowHttp;
    };
    Config.getTimeout = function() {
        return config.timeout;
    };
    Config.setDefault = function() {
        config = Object.assign({}, defaultConfig);
    };
    return Config;
}();
exports.Config = Config;

},{"1f7a5ff225fa3a0a":"lRdW5","33702240068defa4":"edHVe"}],"5Ljxk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Server = exports.SUBMIT_TRANSACTION_TIMEOUT = void 0;
var tslib_1 = require("45af9e452b47b199");
var bignumber_js_1 = tslib_1.__importDefault(require("2217f58d3109b00"));
var isEmpty_1 = tslib_1.__importDefault(require("1113960cf7b66475"));
var merge_1 = tslib_1.__importDefault(require("cbffac4518dd4686"));
var stellar_base_1 = require("9b2a2bed9469dc9a");
var urijs_1 = tslib_1.__importDefault(require("38cb0da497f6126c"));
var call_builder_1 = require("fa753dce180ce195");
var config_1 = require("a13f3207f5debc0c");
var errors_1 = require("e9f7155e06d63c9d");
var account_call_builder_1 = require("63f0118a0c5b62e3");
var account_response_1 = require("173a7b1d12ab2556");
var assets_call_builder_1 = require("da4745f337be3c51");
var claimable_balances_call_builder_1 = require("f2e4dd38ae8eb9c3");
var effect_call_builder_1 = require("ffb1c28878936376");
var friendbot_builder_1 = require("e4e6c1f62622f5f5");
var ledger_call_builder_1 = require("451f00a19b89575f");
var liquidity_pool_call_builder_1 = require("ab7139060bc2ffa6");
var offer_call_builder_1 = require("cffe8a609d6a83df");
var operation_call_builder_1 = require("eb579e3f26bc8a05");
var orderbook_call_builder_1 = require("3934049855f5c357");
var payment_call_builder_1 = require("9b1c739bb53f3192");
var strict_receive_path_call_builder_1 = require("fbcfd3e9f4e123b4");
var strict_send_path_call_builder_1 = require("355ca64fa4745757");
var trade_aggregation_call_builder_1 = require("8e23c1bf8ba5cc2c");
var trades_call_builder_1 = require("8bffeade7d44ca88");
var transaction_call_builder_1 = require("23b6e0dbf62bf364");
var horizon_axios_client_1 = tslib_1.__importStar(require("b3e126a1ba4f1d38"));
exports.SUBMIT_TRANSACTION_TIMEOUT = 60000;
var STROOPS_IN_LUMEN = 10000000;
var ACCOUNT_REQUIRES_MEMO = "MQ==";
function _getAmountInLumens(amt) {
    return new bignumber_js_1.default(amt).div(STROOPS_IN_LUMEN).toString();
}
var Server = function() {
    function Server(serverURL, opts) {
        if (opts === void 0) opts = {};
        this.serverURL = urijs_1.default(serverURL);
        var allowHttp = typeof opts.allowHttp === "undefined" ? config_1.Config.isAllowHttp() : opts.allowHttp;
        var customHeaders = {};
        if (opts.appName) customHeaders["X-App-Name"] = opts.appName;
        if (opts.appVersion) customHeaders["X-App-Version"] = opts.appVersion;
        if (opts.authToken) customHeaders["X-Auth-Token"] = opts.authToken;
        if (!isEmpty_1.default(customHeaders)) horizon_axios_client_1.default.interceptors.request.use(function(config) {
            config.headers = merge_1.default(customHeaders, config.headers);
            return config;
        });
        if (this.serverURL.protocol() !== "https" && !allowHttp) throw new Error("Cannot connect to insecure horizon server");
    }
    Server.prototype.fetchTimebounds = function(seconds, _isRetry) {
        if (_isRetry === void 0) _isRetry = false;
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var currentTime;
            return tslib_1.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        currentTime = horizon_axios_client_1.getCurrentServerTime(this.serverURL.hostname());
                        if (currentTime) return [
                            2,
                            {
                                minTime: 0,
                                maxTime: currentTime + seconds
                            }
                        ];
                        if (_isRetry) return [
                            2,
                            {
                                minTime: 0,
                                maxTime: Math.floor(new Date().getTime() / 1000) + seconds
                            }
                        ];
                        return [
                            4,
                            horizon_axios_client_1.default.get(urijs_1.default(this.serverURL).toString())
                        ];
                    case 1:
                        _a.sent();
                        return [
                            4,
                            this.fetchTimebounds(seconds, true)
                        ];
                    case 2:
                        return [
                            2,
                            _a.sent()
                        ];
                }
            });
        });
    };
    Server.prototype.fetchBaseFee = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var response;
            return tslib_1.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4,
                            this.feeStats()
                        ];
                    case 1:
                        response = _a.sent();
                        return [
                            2,
                            parseInt(response.last_ledger_base_fee, 10) || 100
                        ];
                }
            });
        });
    };
    Server.prototype.feeStats = function() {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var cb;
            return tslib_1.__generator(this, function(_a) {
                cb = new call_builder_1.CallBuilder(urijs_1.default(this.serverURL));
                cb.filter.push([
                    "fee_stats"
                ]);
                return [
                    2,
                    cb.call()
                ];
            });
        });
    };
    Server.prototype.submitTransaction = function(transaction, opts) {
        if (opts === void 0) opts = {
            skipMemoRequiredCheck: false
        };
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var tx;
            return tslib_1.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!!opts.skipMemoRequiredCheck) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            this.checkMemoRequired(transaction)
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        tx = encodeURIComponent(transaction.toEnvelope().toXDR().toString("base64"));
                        return [
                            2,
                            horizon_axios_client_1.default.post(urijs_1.default(this.serverURL).segment("transactions").toString(), "tx=" + tx, {
                                timeout: exports.SUBMIT_TRANSACTION_TIMEOUT
                            }).then(function(response) {
                                if (!response.data.result_xdr) return response.data;
                                var responseXDR = stellar_base_1.xdr.TransactionResult.fromXDR(response.data.result_xdr, "base64");
                                var results = responseXDR.result().value();
                                var offerResults;
                                var hasManageOffer;
                                if (results.length) offerResults = results.map(function(result, i) {
                                    if (result.value().switch().name !== "manageBuyOffer" && result.value().switch().name !== "manageSellOffer") return null;
                                    hasManageOffer = true;
                                    var amountBought = new bignumber_js_1.default(0);
                                    var amountSold = new bignumber_js_1.default(0);
                                    var offerSuccess = result.value().value().success();
                                    var offersClaimed = offerSuccess.offersClaimed().map(function(offerClaimedAtom) {
                                        var offerClaimed = offerClaimedAtom.value();
                                        var sellerId = "";
                                        switch(offerClaimedAtom.switch()){
                                            case stellar_base_1.xdr.ClaimAtomType.claimAtomTypeV0():
                                                sellerId = stellar_base_1.StrKey.encodeEd25519PublicKey(offerClaimed.sellerEd25519());
                                                break;
                                            case stellar_base_1.xdr.ClaimAtomType.claimAtomTypeOrderBook():
                                                sellerId = stellar_base_1.StrKey.encodeEd25519PublicKey(offerClaimed.sellerId().ed25519());
                                                break;
                                            default:
                                                throw new Error("Invalid offer result type: " + offerClaimedAtom.switch());
                                        }
                                        var claimedOfferAmountBought = new bignumber_js_1.default(offerClaimed.amountBought().toString());
                                        var claimedOfferAmountSold = new bignumber_js_1.default(offerClaimed.amountSold().toString());
                                        amountBought = amountBought.add(claimedOfferAmountSold);
                                        amountSold = amountSold.add(claimedOfferAmountBought);
                                        var sold = stellar_base_1.Asset.fromOperation(offerClaimed.assetSold());
                                        var bought = stellar_base_1.Asset.fromOperation(offerClaimed.assetBought());
                                        var assetSold = {
                                            type: sold.getAssetType(),
                                            assetCode: sold.getCode(),
                                            issuer: sold.getIssuer()
                                        };
                                        var assetBought = {
                                            type: bought.getAssetType(),
                                            assetCode: bought.getCode(),
                                            issuer: bought.getIssuer()
                                        };
                                        return {
                                            sellerId: sellerId,
                                            offerId: offerClaimed.offerId().toString(),
                                            assetSold: assetSold,
                                            amountSold: _getAmountInLumens(claimedOfferAmountSold),
                                            assetBought: assetBought,
                                            amountBought: _getAmountInLumens(claimedOfferAmountBought)
                                        };
                                    });
                                    var effect = offerSuccess.offer().switch().name;
                                    var currentOffer;
                                    if (typeof offerSuccess.offer().value === "function" && offerSuccess.offer().value()) {
                                        var offerXDR = offerSuccess.offer().value();
                                        currentOffer = {
                                            offerId: offerXDR.offerId().toString(),
                                            selling: {},
                                            buying: {},
                                            amount: _getAmountInLumens(offerXDR.amount().toString()),
                                            price: {
                                                n: offerXDR.price().n(),
                                                d: offerXDR.price().d()
                                            }
                                        };
                                        var selling = stellar_base_1.Asset.fromOperation(offerXDR.selling());
                                        currentOffer.selling = {
                                            type: selling.getAssetType(),
                                            assetCode: selling.getCode(),
                                            issuer: selling.getIssuer()
                                        };
                                        var buying = stellar_base_1.Asset.fromOperation(offerXDR.buying());
                                        currentOffer.buying = {
                                            type: buying.getAssetType(),
                                            assetCode: buying.getCode(),
                                            issuer: buying.getIssuer()
                                        };
                                    }
                                    return {
                                        offersClaimed: offersClaimed,
                                        effect: effect,
                                        operationIndex: i,
                                        currentOffer: currentOffer,
                                        amountBought: _getAmountInLumens(amountBought),
                                        amountSold: _getAmountInLumens(amountSold),
                                        isFullyOpen: !offersClaimed.length && effect !== "manageOfferDeleted",
                                        wasPartiallyFilled: !!offersClaimed.length && effect !== "manageOfferDeleted",
                                        wasImmediatelyFilled: !!offersClaimed.length && effect === "manageOfferDeleted",
                                        wasImmediatelyDeleted: !offersClaimed.length && effect === "manageOfferDeleted"
                                    };
                                }).filter(function(result) {
                                    return !!result;
                                });
                                return Object.assign({}, response.data, {
                                    offerResults: hasManageOffer ? offerResults : undefined
                                });
                            }).catch(function(response) {
                                if (response instanceof Error) return Promise.reject(response);
                                return Promise.reject(new errors_1.BadResponseError("Transaction submission failed. Server responded: " + response.status + " " + response.statusText, response.data));
                            })
                        ];
                }
            });
        });
    };
    Server.prototype.accounts = function() {
        return new account_call_builder_1.AccountCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.claimableBalances = function() {
        return new claimable_balances_call_builder_1.ClaimableBalanceCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.ledgers = function() {
        return new ledger_call_builder_1.LedgerCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.transactions = function() {
        return new transaction_call_builder_1.TransactionCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.offers = function() {
        return new offer_call_builder_1.OfferCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.orderbook = function(selling, buying) {
        return new orderbook_call_builder_1.OrderbookCallBuilder(urijs_1.default(this.serverURL), selling, buying);
    };
    Server.prototype.trades = function() {
        return new trades_call_builder_1.TradesCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.operations = function() {
        return new operation_call_builder_1.OperationCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.liquidityPools = function() {
        return new liquidity_pool_call_builder_1.LiquidityPoolCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.strictReceivePaths = function(source, destinationAsset, destinationAmount) {
        return new strict_receive_path_call_builder_1.StrictReceivePathCallBuilder(urijs_1.default(this.serverURL), source, destinationAsset, destinationAmount);
    };
    Server.prototype.strictSendPaths = function(sourceAsset, sourceAmount, destination) {
        return new strict_send_path_call_builder_1.StrictSendPathCallBuilder(urijs_1.default(this.serverURL), sourceAsset, sourceAmount, destination);
    };
    Server.prototype.payments = function() {
        return new payment_call_builder_1.PaymentCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.effects = function() {
        return new effect_call_builder_1.EffectCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.friendbot = function(address) {
        return new friendbot_builder_1.FriendbotBuilder(urijs_1.default(this.serverURL), address);
    };
    Server.prototype.assets = function() {
        return new assets_call_builder_1.AssetsCallBuilder(urijs_1.default(this.serverURL));
    };
    Server.prototype.loadAccount = function(accountId) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var res;
            return tslib_1.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4,
                            this.accounts().accountId(accountId).call()
                        ];
                    case 1:
                        res = _a.sent();
                        return [
                            2,
                            new account_response_1.AccountResponse(res)
                        ];
                }
            });
        });
    };
    Server.prototype.tradeAggregation = function(base, counter, start_time, end_time, resolution, offset) {
        return new trade_aggregation_call_builder_1.TradeAggregationCallBuilder(urijs_1.default(this.serverURL), base, counter, start_time, end_time, resolution, offset);
    };
    Server.prototype.checkMemoRequired = function(transaction) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var destinations, i, operation, destination, account, e_1;
            return tslib_1.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (transaction instanceof stellar_base_1.FeeBumpTransaction) transaction = transaction.innerTransaction;
                        if (transaction.memo.type !== "none") return [
                            2
                        ];
                        destinations = new Set();
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < transaction.operations.length)) return [
                            3,
                            6
                        ];
                        operation = transaction.operations[i];
                        switch(operation.type){
                            case "payment":
                            case "pathPaymentStrictReceive":
                            case "pathPaymentStrictSend":
                            case "accountMerge":
                                break;
                            default:
                                return [
                                    3,
                                    5
                                ];
                        }
                        destination = operation.destination;
                        if (destinations.has(destination)) return [
                            3,
                            5
                        ];
                        destinations.add(destination);
                        if (destination.startsWith("M")) return [
                            3,
                            5
                        ];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4,
                            this.loadAccount(destination)
                        ];
                    case 3:
                        account = _a.sent();
                        if (account.data_attr["config.memo_required"] === ACCOUNT_REQUIRES_MEMO) throw new errors_1.AccountRequiresMemoError("account requires memo", destination, i);
                        return [
                            3,
                            5
                        ];
                    case 4:
                        e_1 = _a.sent();
                        if (e_1 instanceof errors_1.AccountRequiresMemoError) throw e_1;
                        if (!(e_1 instanceof errors_1.NotFoundError)) throw e_1;
                        return [
                            3,
                            5
                        ];
                    case 5:
                        i++;
                        return [
                            3,
                            1
                        ];
                    case 6:
                        return [
                            2
                        ];
                }
            });
        });
    };
    return Server;
}();
exports.Server = Server;

},{"45af9e452b47b199":"lRdW5","2217f58d3109b00":"57qkX","1113960cf7b66475":"lpItB","cbffac4518dd4686":"2WcC0","9b2a2bed9469dc9a":"aicMq","38cb0da497f6126c":"lm4he","fa753dce180ce195":"9pf4Q","a13f3207f5debc0c":"bdmoV","e9f7155e06d63c9d":"j3jT2","63f0118a0c5b62e3":"9JBxK","173a7b1d12ab2556":"e7Wb7","da4745f337be3c51":"htuDk","f2e4dd38ae8eb9c3":"cS2h4","ffb1c28878936376":"lgce1","e4e6c1f62622f5f5":"gvsmQ","451f00a19b89575f":"5PA2M","ab7139060bc2ffa6":"lF1w6","cffe8a609d6a83df":"i6ylp","eb579e3f26bc8a05":"9WTre","3934049855f5c357":"eS2cz","9b1c739bb53f3192":"1PSGS","fbcfd3e9f4e123b4":"lTWAW","355ca64fa4745757":"iGXk7","8e23c1bf8ba5cc2c":"hxBtO","8bffeade7d44ca88":"l7CoE","23b6e0dbf62bf364":"gNrlo","b3e126a1ba4f1d38":"1qCA8"}],"lpItB":[function(require,module,exports) {
var baseKeys = require("4149e85cd767b153"), getTag = require("deda6d0ad9a9881d"), isArguments = require("51621b26a53b270e"), isArray = require("6fd4acbc3f573628"), isArrayLike = require("eb771667a29b9fc0"), isBuffer = require("5d6a87d55a93c74c"), isPrototype = require("2f6a2d27924a0592"), isTypedArray = require("8b85d46e1afc75a1");
/** `Object#toString` result references. */ var mapTag = "[object Map]", setTag = "[object Set]";
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */ function isEmpty(value) {
    if (value == null) return true;
    if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) return !value.size;
    if (isPrototype(value)) return !baseKeys(value).length;
    for(var key in value){
        if (hasOwnProperty.call(value, key)) return false;
    }
    return true;
}
module.exports = isEmpty;

},{"4149e85cd767b153":"c0eiI","deda6d0ad9a9881d":"cRPhM","51621b26a53b270e":"8ReNj","6fd4acbc3f573628":"dZaTH","eb771667a29b9fc0":"gMCbp","5d6a87d55a93c74c":"cn85h","2f6a2d27924a0592":"iG4eR","8b85d46e1afc75a1":"6SVKk"}],"2WcC0":[function(require,module,exports) {
var baseMerge = require("1e7a6104546d0e23"), createAssigner = require("6d4dda3fe0479d2c");
/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */ var merge = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
});
module.exports = merge;

},{"1e7a6104546d0e23":"lMODl","6d4dda3fe0479d2c":"7RrvA"}],"lMODl":[function(require,module,exports) {
var Stack = require("c77fc5df28dd5a8a"), assignMergeValue = require("3fe4130c3d4a6574"), baseFor = require("efaa58b982088ea0"), baseMergeDeep = require("de98692ef650a8cd"), isObject = require("2ff05c0934eebf40"), keysIn = require("1c69a199cbfff138"), safeGet = require("6f95c94568371a1b");
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) return;
    baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
            if (newValue === undefined) newValue = srcValue;
            assignMergeValue(object, key, newValue);
        }
    }, keysIn);
}
module.exports = baseMerge;

},{"c77fc5df28dd5a8a":"atP87","3fe4130c3d4a6574":"c7MYR","efaa58b982088ea0":"k0bbR","de98692ef650a8cd":"9JvYT","2ff05c0934eebf40":"cGhqJ","1c69a199cbfff138":"c9sMs","6f95c94568371a1b":"bXTnf"}],"c7MYR":[function(require,module,exports) {
var baseAssignValue = require("770558b9b2803a09"), eq = require("3bae2cc0dbd54733");
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignMergeValue;

},{"770558b9b2803a09":"fprBU","3bae2cc0dbd54733":"aVz5f"}],"9JvYT":[function(require,module,exports) {
var assignMergeValue = require("e1b77cbd5443f0a9"), cloneBuffer = require("d210ea7436958eea"), cloneTypedArray = require("340771d4f51ba813"), copyArray = require("7067f77f979548eb"), initCloneObject = require("4b574b6a55935b45"), isArguments = require("a77197fe6db13475"), isArray = require("858e3da7d6e449b6"), isArrayLikeObject = require("f05a75e174005d8f"), isBuffer = require("6b75b964c034d07"), isFunction = require("ffefc9dec1018bf1"), isObject = require("37da3fa03f634104"), isPlainObject = require("3e7de65ed1551fd"), isTypedArray = require("8767115a86d7ccfc"), safeGet = require("cb4946da3c3b3a58"), toPlainObject = require("bda4d49838e26775");
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) newValue = objValue;
            else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
            else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
            } else newValue = [];
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) newValue = toPlainObject(objValue);
            else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
        } else isCommon = false;
    }
    if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
    }
    assignMergeValue(object, key, newValue);
}
module.exports = baseMergeDeep;

},{"e1b77cbd5443f0a9":"c7MYR","d210ea7436958eea":"6zXd4","340771d4f51ba813":"7eG7Y","7067f77f979548eb":"jJ8fu","4b574b6a55935b45":"dG1H0","a77197fe6db13475":"8ReNj","858e3da7d6e449b6":"dZaTH","f05a75e174005d8f":"RyRVf","6b75b964c034d07":"cn85h","ffefc9dec1018bf1":"cfti6","37da3fa03f634104":"cGhqJ","3e7de65ed1551fd":"cvSNF","8767115a86d7ccfc":"6SVKk","cb4946da3c3b3a58":"bXTnf","bda4d49838e26775":"9QCta"}],"RyRVf":[function(require,module,exports) {
var isArrayLike = require("21c6711b78314b4b"), isObjectLike = require("9a651dfe04fe5204");
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
module.exports = isArrayLikeObject;

},{"21c6711b78314b4b":"gMCbp","9a651dfe04fe5204":"3BLi4"}],"cvSNF":[function(require,module,exports) {
var baseGetTag = require("c2e08b84278eea94"), getPrototype = require("9431427ba530797e"), isObjectLike = require("ad5699ba1c6c911e");
/** `Object#toString` result references. */ var objectTag = "[object Object]";
/** Used for built-in method references. */ var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
    var proto = getPrototype(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
module.exports = isPlainObject;

},{"c2e08b84278eea94":"lOnbo","9431427ba530797e":"8ASKT","ad5699ba1c6c911e":"3BLi4"}],"bXTnf":[function(require,module,exports) {
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") return;
    if (key == "__proto__") return;
    return object[key];
}
module.exports = safeGet;

},{}],"9QCta":[function(require,module,exports) {
var copyObject = require("cbb42cba6dfe0e22"), keysIn = require("a2da4738a6ffb64f");
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */ function toPlainObject(value) {
    return copyObject(value, keysIn(value));
}
module.exports = toPlainObject;

},{"cbb42cba6dfe0e22":"gfA7W","a2da4738a6ffb64f":"c9sMs"}],"lm4he":[function(require,module,exports) {
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */ (function(root, factory) {
    "use strict";
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (0, module.exports) // Node
    module.exports = factory(require("47ae05174c043d43"), require("285b5b192ee1abaf"), require("2c2eb9d3efde3647"));
    else if (typeof define === "function" && define.amd) // AMD. Register as an anonymous module.
    define([
        "./punycode",
        "./IPv6",
        "./SecondLevelDomains"
    ], factory);
    else // Browser globals (root is window)
    root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
})(this, function(punycode, IPv6, SLD, root) {
    "use strict";
    /*global location, escape, unescape */ // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
    /*jshint camelcase: false */ // save current URI variable, if any
    var _URI = root && root.URI;
    function URI(url, base) {
        var _urlSupplied = arguments.length >= 1;
        var _baseSupplied = arguments.length >= 2;
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof URI)) {
            if (_urlSupplied) {
                if (_baseSupplied) return new URI(url, base);
                return new URI(url);
            }
            return new URI();
        }
        if (url === undefined) {
            if (_urlSupplied) throw new TypeError("undefined is not a valid argument for URI");
            if (typeof location !== "undefined") url = location.href + "";
            else url = "";
        }
        if (url === null) {
            if (_urlSupplied) throw new TypeError("null is not a valid argument for URI");
        }
        this.href(url);
        // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
        if (base !== undefined) return this.absoluteTo(base);
        return this;
    }
    function isInteger(value) {
        return /^[0-9]+$/.test(value);
    }
    URI.version = "1.19.11";
    var p = URI.prototype;
    var hasOwn = Object.prototype.hasOwnProperty;
    function escapeRegEx(string) {
        // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
        return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
    }
    function getType(value) {
        // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
        if (value === undefined) return "Undefined";
        return String(Object.prototype.toString.call(value)).slice(8, -1);
    }
    function isArray(obj) {
        return getType(obj) === "Array";
    }
    function filterArrayValues(data, value) {
        var lookup = {};
        var i, length;
        if (getType(value) === "RegExp") lookup = null;
        else if (isArray(value)) for(i = 0, length = value.length; i < length; i++)lookup[value[i]] = true;
        else lookup[value] = true;
        for(i = 0, length = data.length; i < length; i++){
            /*jshint laxbreak: true */ var _match = lookup && lookup[data[i]] !== undefined || !lookup && value.test(data[i]);
            /*jshint laxbreak: false */ if (_match) {
                data.splice(i, 1);
                length--;
                i--;
            }
        }
        return data;
    }
    function arrayContains(list, value) {
        var i, length;
        // value may be string, number, array, regexp
        if (isArray(value)) {
            // Note: this can be optimized to O(n) (instead of current O(m * n))
            for(i = 0, length = value.length; i < length; i++){
                if (!arrayContains(list, value[i])) return false;
            }
            return true;
        }
        var _type = getType(value);
        for(i = 0, length = list.length; i < length; i++){
            if (_type === "RegExp") {
                if (typeof list[i] === "string" && list[i].match(value)) return true;
            } else if (list[i] === value) return true;
        }
        return false;
    }
    function arraysEqual(one, two) {
        if (!isArray(one) || !isArray(two)) return false;
        // arrays can't be equal if they have different amount of content
        if (one.length !== two.length) return false;
        one.sort();
        two.sort();
        for(var i = 0, l = one.length; i < l; i++){
            if (one[i] !== two[i]) return false;
        }
        return true;
    }
    function trimSlashes(text) {
        var trim_expression = /^\/+|\/+$/g;
        return text.replace(trim_expression, "");
    }
    URI._parts = function() {
        return {
            protocol: null,
            username: null,
            password: null,
            hostname: null,
            urn: null,
            port: null,
            path: null,
            query: null,
            fragment: null,
            // state
            preventInvalidHostname: URI.preventInvalidHostname,
            duplicateQueryParameters: URI.duplicateQueryParameters,
            escapeQuerySpace: URI.escapeQuerySpace
        };
    };
    // state: throw on invalid hostname
    // see https://github.com/medialize/URI.js/pull/345
    // and https://github.com/medialize/URI.js/issues/354
    URI.preventInvalidHostname = false;
    // state: allow duplicate query parameters (a=1&a=1)
    URI.duplicateQueryParameters = false;
    // state: replaces + with %20 (space in query strings)
    URI.escapeQuerySpace = true;
    // static properties
    URI.protocol_expression = /^[a-z][a-z0-9.+-]*$/i;
    URI.idn_expression = /[^a-z0-9\._-]/i;
    URI.punycode_expression = /(xn--)/i;
    // well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
    URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    // credits to Rich Brown
    // source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
    // specification: http://www.ietf.org/rfc/rfc4291.txt
    URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
    // expression used is "gruber revised" (@gruber v2) determined to be the
    // best solution in a regex-golf we did a couple of ages ago at
    // * http://mathiasbynens.be/demo/url-regex
    // * http://rodneyrehm.de/t/url-regex.html
    URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
    URI.findUri = {
        // valid "scheme://" or "www."
        start: /\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,
        // everything up to the next whitespace
        end: /[\s\r\n]|$/,
        // trim trailing punctuation captured by end RegExp
        trim: /[`!()\[\]{};:'".,<>?«»“”„‘’]+$/,
        // balanced parens inclusion (), [], {}, <>
        parens: /(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g
    };
    URI.leading_whitespace_expression = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/;
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    URI.ascii_tab_whitespace = /[\u0009\u000A\u000D]+/g;
    // http://www.iana.org/assignments/uri-schemes.html
    // http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
    URI.defaultPorts = {
        http: "80",
        https: "443",
        ftp: "21",
        gopher: "70",
        ws: "80",
        wss: "443"
    };
    // list of protocols which always require a hostname
    URI.hostProtocols = [
        "http",
        "https"
    ];
    // allowed hostname characters according to RFC 3986
    // ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
    // I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . - _
    URI.invalid_hostname_characters = /[^a-zA-Z0-9\.\-:_]/;
    // map DOM Elements to their URI attribute
    URI.domAttributes = {
        "a": "href",
        "blockquote": "cite",
        "link": "href",
        "base": "href",
        "script": "src",
        "form": "action",
        "img": "src",
        "area": "href",
        "iframe": "src",
        "embed": "src",
        "source": "src",
        "track": "src",
        "input": "src",
        "audio": "src",
        "video": "src"
    };
    URI.getDomAttribute = function(node) {
        if (!node || !node.nodeName) return undefined;
        var nodeName = node.nodeName.toLowerCase();
        // <input> should only expose src for type="image"
        if (nodeName === "input" && node.type !== "image") return undefined;
        return URI.domAttributes[nodeName];
    };
    function escapeForDumbFirefox36(value) {
        // https://github.com/medialize/URI.js/issues/91
        return escape(value);
    }
    // encoding / decoding according to RFC3986
    function strictEncodeURIComponent(string) {
        // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
        return encodeURIComponent(string).replace(/[!'()*]/g, escapeForDumbFirefox36).replace(/\*/g, "%2A");
    }
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
    URI.iso8859 = function() {
        URI.encode = escape;
        URI.decode = unescape;
    };
    URI.unicode = function() {
        URI.encode = strictEncodeURIComponent;
        URI.decode = decodeURIComponent;
    };
    URI.characters = {
        pathname: {
            encode: {
                // RFC3986 2.1: For consistency, URI producers and normalizers should
                // use uppercase hexadecimal digits for all percent-encodings.
                expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
                map: {
                    // -._~!'()*
                    "%24": "$",
                    "%26": "&",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "=",
                    "%3A": ":",
                    "%40": "@"
                }
            },
            decode: {
                expression: /[\/\?#]/g,
                map: {
                    "/": "%2F",
                    "?": "%3F",
                    "#": "%23"
                }
            }
        },
        reserved: {
            encode: {
                // RFC3986 2.1: For consistency, URI producers and normalizers should
                // use uppercase hexadecimal digits for all percent-encodings.
                expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
                map: {
                    // gen-delims
                    "%3A": ":",
                    "%2F": "/",
                    "%3F": "?",
                    "%23": "#",
                    "%5B": "[",
                    "%5D": "]",
                    "%40": "@",
                    // sub-delims
                    "%21": "!",
                    "%24": "$",
                    "%26": "&",
                    "%27": "'",
                    "%28": "(",
                    "%29": ")",
                    "%2A": "*",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "="
                }
            }
        },
        urnpath: {
            // The characters under `encode` are the characters called out by RFC 2141 as being acceptable
            // for usage in a URN. RFC2141 also calls out "-", ".", and "_" as acceptable characters, but
            // these aren't encoded by encodeURIComponent, so we don't have to call them out here. Also
            // note that the colon character is not featured in the encoding map; this is because URI.js
            // gives the colons in URNs semantic meaning as the delimiters of path segements, and so it
            // should not appear unencoded in a segment itself.
            // See also the note above about RFC3986 and capitalalized hex digits.
            encode: {
                expression: /%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/ig,
                map: {
                    "%21": "!",
                    "%24": "$",
                    "%27": "'",
                    "%28": "(",
                    "%29": ")",
                    "%2A": "*",
                    "%2B": "+",
                    "%2C": ",",
                    "%3B": ";",
                    "%3D": "=",
                    "%40": "@"
                }
            },
            // These characters are the characters called out by RFC2141 as "reserved" characters that
            // should never appear in a URN, plus the colon character (see note above).
            decode: {
                expression: /[\/\?#:]/g,
                map: {
                    "/": "%2F",
                    "?": "%3F",
                    "#": "%23",
                    ":": "%3A"
                }
            }
        }
    };
    URI.encodeQuery = function(string, escapeQuerySpace) {
        var escaped = URI.encode(string + "");
        if (escapeQuerySpace === undefined) escapeQuerySpace = URI.escapeQuerySpace;
        return escapeQuerySpace ? escaped.replace(/%20/g, "+") : escaped;
    };
    URI.decodeQuery = function(string, escapeQuerySpace) {
        string += "";
        if (escapeQuerySpace === undefined) escapeQuerySpace = URI.escapeQuerySpace;
        try {
            return URI.decode(escapeQuerySpace ? string.replace(/\+/g, "%20") : string);
        } catch (e) {
            // we're not going to mess with weird encodings,
            // give up and return the undecoded original string
            // see https://github.com/medialize/URI.js/issues/87
            // see https://github.com/medialize/URI.js/issues/92
            return string;
        }
    };
    // generate encode/decode path functions
    var _parts = {
        "encode": "encode",
        "decode": "decode"
    };
    var _part;
    var generateAccessor = function(_group, _part) {
        return function(string) {
            try {
                return URI[_part](string + "").replace(URI.characters[_group][_part].expression, function(c) {
                    return URI.characters[_group][_part].map[c];
                });
            } catch (e) {
                // we're not going to mess with weird encodings,
                // give up and return the undecoded original string
                // see https://github.com/medialize/URI.js/issues/87
                // see https://github.com/medialize/URI.js/issues/92
                return string;
            }
        };
    };
    for(_part in _parts){
        URI[_part + "PathSegment"] = generateAccessor("pathname", _parts[_part]);
        URI[_part + "UrnPathSegment"] = generateAccessor("urnpath", _parts[_part]);
    }
    var generateSegmentedPathFunction = function(_sep, _codingFuncName, _innerCodingFuncName) {
        return function(string) {
            // Why pass in names of functions, rather than the function objects themselves? The
            // definitions of some functions (but in particular, URI.decode) will occasionally change due
            // to URI.js having ISO8859 and Unicode modes. Passing in the name and getting it will ensure
            // that the functions we use here are "fresh".
            var actualCodingFunc;
            if (!_innerCodingFuncName) actualCodingFunc = URI[_codingFuncName];
            else actualCodingFunc = function(string) {
                return URI[_codingFuncName](URI[_innerCodingFuncName](string));
            };
            var segments = (string + "").split(_sep);
            for(var i = 0, length = segments.length; i < length; i++)segments[i] = actualCodingFunc(segments[i]);
            return segments.join(_sep);
        };
    };
    // This takes place outside the above loop because we don't want, e.g., encodeUrnPath functions.
    URI.decodePath = generateSegmentedPathFunction("/", "decodePathSegment");
    URI.decodeUrnPath = generateSegmentedPathFunction(":", "decodeUrnPathSegment");
    URI.recodePath = generateSegmentedPathFunction("/", "encodePathSegment", "decode");
    URI.recodeUrnPath = generateSegmentedPathFunction(":", "encodeUrnPathSegment", "decode");
    URI.encodeReserved = generateAccessor("reserved", "encode");
    URI.parse = function(string, parts) {
        var pos;
        if (!parts) parts = {
            preventInvalidHostname: URI.preventInvalidHostname
        };
        string = string.replace(URI.leading_whitespace_expression, "");
        // https://infra.spec.whatwg.org/#ascii-tab-or-newline
        string = string.replace(URI.ascii_tab_whitespace, "");
        // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]
        // extract fragment
        pos = string.indexOf("#");
        if (pos > -1) {
            // escaping?
            parts.fragment = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
        // extract query
        pos = string.indexOf("?");
        if (pos > -1) {
            // escaping?
            parts.query = string.substring(pos + 1) || null;
            string = string.substring(0, pos);
        }
        // slashes and backslashes have lost all meaning for the web protocols (https, http, wss, ws)
        string = string.replace(/^(https?|ftp|wss?)?:+[/\\]*/i, "$1://");
        // slashes and backslashes have lost all meaning for scheme relative URLs
        string = string.replace(/^[/\\]{2,}/i, "//");
        // extract protocol
        if (string.substring(0, 2) === "//") {
            // relative-scheme
            parts.protocol = null;
            string = string.substring(2);
            // extract "user:pass@host:port"
            string = URI.parseAuthority(string, parts);
        } else {
            pos = string.indexOf(":");
            if (pos > -1) {
                parts.protocol = string.substring(0, pos) || null;
                if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) // : may be within the path
                parts.protocol = undefined;
                else if (string.substring(pos + 1, pos + 3).replace(/\\/g, "/") === "//") {
                    string = string.substring(pos + 3);
                    // extract "user:pass@host:port"
                    string = URI.parseAuthority(string, parts);
                } else {
                    string = string.substring(pos + 1);
                    parts.urn = true;
                }
            }
        }
        // what's left must be the path
        parts.path = string;
        // and we're done
        return parts;
    };
    URI.parseHost = function(string, parts) {
        if (!string) string = "";
        // Copy chrome, IE, opera backslash-handling behavior.
        // Back slashes before the query string get converted to forward slashes
        // See: https://github.com/joyent/node/blob/386fd24f49b0e9d1a8a076592a404168faeecc34/lib/url.js#L115-L124
        // See: https://code.google.com/p/chromium/issues/detail?id=25916
        // https://github.com/medialize/URI.js/pull/233
        string = string.replace(/\\/g, "/");
        // extract host:port
        var pos = string.indexOf("/");
        var bracketPos;
        var t;
        if (pos === -1) pos = string.length;
        if (string.charAt(0) === "[") {
            // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
            // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
            // IPv6+port in the format [2001:db8::1]:80 (for the time being)
            bracketPos = string.indexOf("]");
            parts.hostname = string.substring(1, bracketPos) || null;
            parts.port = string.substring(bracketPos + 2, pos) || null;
            if (parts.port === "/") parts.port = null;
        } else {
            var firstColon = string.indexOf(":");
            var firstSlash = string.indexOf("/");
            var nextColon = string.indexOf(":", firstColon + 1);
            if (nextColon !== -1 && (firstSlash === -1 || nextColon < firstSlash)) {
                // IPv6 host contains multiple colons - but no port
                // this notation is actually not allowed by RFC 3986, but we're a liberal parser
                parts.hostname = string.substring(0, pos) || null;
                parts.port = null;
            } else {
                t = string.substring(0, pos).split(":");
                parts.hostname = t[0] || null;
                parts.port = t[1] || null;
            }
        }
        if (parts.hostname && string.substring(pos).charAt(0) !== "/") {
            pos++;
            string = "/" + string;
        }
        if (parts.preventInvalidHostname) URI.ensureValidHostname(parts.hostname, parts.protocol);
        if (parts.port) URI.ensureValidPort(parts.port);
        return string.substring(pos) || "/";
    };
    URI.parseAuthority = function(string, parts) {
        string = URI.parseUserinfo(string, parts);
        return URI.parseHost(string, parts);
    };
    URI.parseUserinfo = function(string, parts) {
        // extract username:password
        var _string = string;
        var firstBackSlash = string.indexOf("\\");
        if (firstBackSlash !== -1) string = string.replace(/\\/g, "/");
        var firstSlash = string.indexOf("/");
        var pos = string.lastIndexOf("@", firstSlash > -1 ? firstSlash : string.length - 1);
        var t;
        // authority@ must come before /path or \path
        if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
            t = string.substring(0, pos).split(":");
            parts.username = t[0] ? URI.decode(t[0]) : null;
            t.shift();
            parts.password = t[0] ? URI.decode(t.join(":")) : null;
            string = _string.substring(pos + 1);
        } else {
            parts.username = null;
            parts.password = null;
        }
        return string;
    };
    URI.parseQuery = function(string, escapeQuerySpace) {
        if (!string) return {};
        // throw out the funky business - "?"[name"="value"&"]+
        string = string.replace(/&+/g, "&").replace(/^\?*&*|&+$/g, "");
        if (!string) return {};
        var items = {};
        var splits = string.split("&");
        var length = splits.length;
        var v, name, value;
        for(var i = 0; i < length; i++){
            v = splits[i].split("=");
            name = URI.decodeQuery(v.shift(), escapeQuerySpace);
            // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
            value = v.length ? URI.decodeQuery(v.join("="), escapeQuerySpace) : null;
            if (name === "__proto__") continue;
            else if (hasOwn.call(items, name)) {
                if (typeof items[name] === "string" || items[name] === null) items[name] = [
                    items[name]
                ];
                items[name].push(value);
            } else items[name] = value;
        }
        return items;
    };
    URI.build = function(parts) {
        var t = "";
        var requireAbsolutePath = false;
        if (parts.protocol) t += parts.protocol + ":";
        if (!parts.urn && (t || parts.hostname)) {
            t += "//";
            requireAbsolutePath = true;
        }
        t += URI.buildAuthority(parts) || "";
        if (typeof parts.path === "string") {
            if (parts.path.charAt(0) !== "/" && requireAbsolutePath) t += "/";
            t += parts.path;
        }
        if (typeof parts.query === "string" && parts.query) t += "?" + parts.query;
        if (typeof parts.fragment === "string" && parts.fragment) t += "#" + parts.fragment;
        return t;
    };
    URI.buildHost = function(parts) {
        var t = "";
        if (!parts.hostname) return "";
        else if (URI.ip6_expression.test(parts.hostname)) t += "[" + parts.hostname + "]";
        else t += parts.hostname;
        if (parts.port) t += ":" + parts.port;
        return t;
    };
    URI.buildAuthority = function(parts) {
        return URI.buildUserinfo(parts) + URI.buildHost(parts);
    };
    URI.buildUserinfo = function(parts) {
        var t = "";
        if (parts.username) t += URI.encode(parts.username);
        if (parts.password) t += ":" + URI.encode(parts.password);
        if (t) t += "@";
        return t;
    };
    URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
        // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
        // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
        // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
        // URI.js treats the query string as being application/x-www-form-urlencoded
        // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type
        var t = "";
        var unique, key, i, length;
        for(key in data){
            if (key === "__proto__") continue;
            else if (hasOwn.call(data, key)) {
                if (isArray(data[key])) {
                    unique = {};
                    for(i = 0, length = data[key].length; i < length; i++)if (data[key][i] !== undefined && unique[data[key][i] + ""] === undefined) {
                        t += "&" + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
                        if (duplicateQueryParameters !== true) unique[data[key][i] + ""] = true;
                    }
                } else if (data[key] !== undefined) t += "&" + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
            }
        }
        return t.substring(1);
    };
    URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
        // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
        // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
        return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? "=" + URI.encodeQuery(value, escapeQuerySpace) : "");
    };
    URI.addQuery = function(data, name, value) {
        if (typeof name === "object") {
            for(var key in name)if (hasOwn.call(name, key)) URI.addQuery(data, key, name[key]);
        } else if (typeof name === "string") {
            if (data[name] === undefined) {
                data[name] = value;
                return;
            } else if (typeof data[name] === "string") data[name] = [
                data[name]
            ];
            if (!isArray(value)) value = [
                value
            ];
            data[name] = (data[name] || []).concat(value);
        } else throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
    };
    URI.setQuery = function(data, name, value) {
        if (typeof name === "object") {
            for(var key in name)if (hasOwn.call(name, key)) URI.setQuery(data, key, name[key]);
        } else if (typeof name === "string") data[name] = value === undefined ? null : value;
        else throw new TypeError("URI.setQuery() accepts an object, string as the name parameter");
    };
    URI.removeQuery = function(data, name, value) {
        var i, length, key;
        if (isArray(name)) for(i = 0, length = name.length; i < length; i++)data[name[i]] = undefined;
        else if (getType(name) === "RegExp") {
            for(key in data)if (name.test(key)) data[key] = undefined;
        } else if (typeof name === "object") {
            for(key in name)if (hasOwn.call(name, key)) URI.removeQuery(data, key, name[key]);
        } else if (typeof name === "string") {
            if (value !== undefined) {
                if (getType(value) === "RegExp") {
                    if (!isArray(data[name]) && value.test(data[name])) data[name] = undefined;
                    else data[name] = filterArrayValues(data[name], value);
                } else if (data[name] === String(value) && (!isArray(value) || value.length === 1)) data[name] = undefined;
                else if (isArray(data[name])) data[name] = filterArrayValues(data[name], value);
            } else data[name] = undefined;
        } else throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");
    };
    URI.hasQuery = function(data, name, value, withinArray) {
        switch(getType(name)){
            case "String":
                break;
            case "RegExp":
                for(var key in data)if (hasOwn.call(data, key)) {
                    if (name.test(key) && (value === undefined || URI.hasQuery(data, key, value))) return true;
                }
                return false;
            case "Object":
                for(var _key in name)if (hasOwn.call(name, _key)) {
                    if (!URI.hasQuery(data, _key, name[_key])) return false;
                }
                return true;
            default:
                throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter");
        }
        switch(getType(value)){
            case "Undefined":
                // true if exists (but may be empty)
                return name in data; // data[name] !== undefined;
            case "Boolean":
                // true if exists and non-empty
                var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
                return value === _booly;
            case "Function":
                // allow complex comparison
                return !!value(data[name], name, data);
            case "Array":
                if (!isArray(data[name])) return false;
                var op = withinArray ? arrayContains : arraysEqual;
                return op(data[name], value);
            case "RegExp":
                if (!isArray(data[name])) return Boolean(data[name] && data[name].match(value));
                if (!withinArray) return false;
                return arrayContains(data[name], value);
            case "Number":
                value = String(value);
            /* falls through */ case "String":
                if (!isArray(data[name])) return data[name] === value;
                if (!withinArray) return false;
                return arrayContains(data[name], value);
            default:
                throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter");
        }
    };
    URI.joinPaths = function() {
        var input = [];
        var segments = [];
        var nonEmptySegments = 0;
        for(var i = 0; i < arguments.length; i++){
            var url = new URI(arguments[i]);
            input.push(url);
            var _segments = url.segment();
            for(var s = 0; s < _segments.length; s++){
                if (typeof _segments[s] === "string") segments.push(_segments[s]);
                if (_segments[s]) nonEmptySegments++;
            }
        }
        if (!segments.length || !nonEmptySegments) return new URI("");
        var uri = new URI("").segment(segments);
        if (input[0].path() === "" || input[0].path().slice(0, 1) === "/") uri.path("/" + uri.path());
        return uri.normalize();
    };
    URI.commonPath = function(one, two) {
        var length = Math.min(one.length, two.length);
        var pos;
        // find first non-matching character
        for(pos = 0; pos < length; pos++)if (one.charAt(pos) !== two.charAt(pos)) {
            pos--;
            break;
        }
        if (pos < 1) return one.charAt(0) === two.charAt(0) && one.charAt(0) === "/" ? "/" : "";
        // revert to last /
        if (one.charAt(pos) !== "/" || two.charAt(pos) !== "/") pos = one.substring(0, pos).lastIndexOf("/");
        return one.substring(0, pos + 1);
    };
    URI.withinString = function(string, callback, options) {
        options || (options = {});
        var _start = options.start || URI.findUri.start;
        var _end = options.end || URI.findUri.end;
        var _trim = options.trim || URI.findUri.trim;
        var _parens = options.parens || URI.findUri.parens;
        var _attributeOpen = /[a-z0-9-]=["']?$/i;
        _start.lastIndex = 0;
        while(true){
            var match = _start.exec(string);
            if (!match) break;
            var start = match.index;
            if (options.ignoreHtml) {
                // attribut(e=["']?$)
                var attributeOpen = string.slice(Math.max(start - 3, 0), start);
                if (attributeOpen && _attributeOpen.test(attributeOpen)) continue;
            }
            var end = start + string.slice(start).search(_end);
            var slice = string.slice(start, end);
            // make sure we include well balanced parens
            var parensEnd = -1;
            while(true){
                var parensMatch = _parens.exec(slice);
                if (!parensMatch) break;
                var parensMatchEnd = parensMatch.index + parensMatch[0].length;
                parensEnd = Math.max(parensEnd, parensMatchEnd);
            }
            if (parensEnd > -1) slice = slice.slice(0, parensEnd) + slice.slice(parensEnd).replace(_trim, "");
            else slice = slice.replace(_trim, "");
            if (slice.length <= match[0].length) continue;
            if (options.ignore && options.ignore.test(slice)) continue;
            end = start + slice.length;
            var result = callback(slice, start, end, string);
            if (result === undefined) {
                _start.lastIndex = end;
                continue;
            }
            result = String(result);
            string = string.slice(0, start) + result + string.slice(end);
            _start.lastIndex = start + result.length;
        }
        _start.lastIndex = 0;
        return string;
    };
    URI.ensureValidHostname = function(v, protocol) {
        // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
        // they are not part of DNS and therefore ignored by URI.js
        var hasHostname = !!v; // not null and not an empty string
        var hasProtocol = !!protocol;
        var rejectEmptyHostname = false;
        if (hasProtocol) rejectEmptyHostname = arrayContains(URI.hostProtocols, protocol);
        if (rejectEmptyHostname && !hasHostname) throw new TypeError("Hostname cannot be empty, if protocol is " + protocol);
        else if (v && v.match(URI.invalid_hostname_characters)) {
            // test punycode
            if (!punycode) throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');
            if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-:_]');
        }
    };
    URI.ensureValidPort = function(v) {
        if (!v) return;
        var port = Number(v);
        if (isInteger(port) && port > 0 && port < 65536) return;
        throw new TypeError('Port "' + v + '" is not a valid port');
    };
    // noConflict
    URI.noConflict = function(removeAll) {
        if (removeAll) {
            var unconflicted = {
                URI: this.noConflict()
            };
            if (root.URITemplate && typeof root.URITemplate.noConflict === "function") unconflicted.URITemplate = root.URITemplate.noConflict();
            if (root.IPv6 && typeof root.IPv6.noConflict === "function") unconflicted.IPv6 = root.IPv6.noConflict();
            if (root.SecondLevelDomains && typeof root.SecondLevelDomains.noConflict === "function") unconflicted.SecondLevelDomains = root.SecondLevelDomains.noConflict();
            return unconflicted;
        } else if (root.URI === this) root.URI = _URI;
        return this;
    };
    p.build = function(deferBuild) {
        if (deferBuild === true) this._deferred_build = true;
        else if (deferBuild === undefined || this._deferred_build) {
            this._string = URI.build(this._parts);
            this._deferred_build = false;
        }
        return this;
    };
    p.clone = function() {
        return new URI(this);
    };
    p.valueOf = p.toString = function() {
        return this.build(false)._string;
    };
    function generateSimpleAccessor(_part) {
        return function(v, build) {
            if (v === undefined) return this._parts[_part] || "";
            else {
                this._parts[_part] = v || null;
                this.build(!build);
                return this;
            }
        };
    }
    function generatePrefixAccessor(_part, _key) {
        return function(v, build) {
            if (v === undefined) return this._parts[_part] || "";
            else {
                if (v !== null) {
                    v = v + "";
                    if (v.charAt(0) === _key) v = v.substring(1);
                }
                this._parts[_part] = v;
                this.build(!build);
                return this;
            }
        };
    }
    p.protocol = generateSimpleAccessor("protocol");
    p.username = generateSimpleAccessor("username");
    p.password = generateSimpleAccessor("password");
    p.hostname = generateSimpleAccessor("hostname");
    p.port = generateSimpleAccessor("port");
    p.query = generatePrefixAccessor("query", "?");
    p.fragment = generatePrefixAccessor("fragment", "#");
    p.search = function(v, build) {
        var t = this.query(v, build);
        return typeof t === "string" && t.length ? "?" + t : t;
    };
    p.hash = function(v, build) {
        var t = this.fragment(v, build);
        return typeof t === "string" && t.length ? "#" + t : t;
    };
    p.pathname = function(v, build) {
        if (v === undefined || v === true) {
            var res = this._parts.path || (this._parts.hostname ? "/" : "");
            return v ? (this._parts.urn ? URI.decodeUrnPath : URI.decodePath)(res) : res;
        } else {
            if (this._parts.urn) this._parts.path = v ? URI.recodeUrnPath(v) : "";
            else this._parts.path = v ? URI.recodePath(v) : "/";
            this.build(!build);
            return this;
        }
    };
    p.path = p.pathname;
    p.href = function(href, build) {
        var key;
        if (href === undefined) return this.toString();
        this._string = "";
        this._parts = URI._parts();
        var _URI = href instanceof URI;
        var _object = typeof href === "object" && (href.hostname || href.path || href.pathname);
        if (href.nodeName) {
            var attribute = URI.getDomAttribute(href);
            href = href[attribute] || "";
            _object = false;
        }
        // window.location is reported to be an object, but it's not the sort
        // of object we're looking for:
        // * location.protocol ends with a colon
        // * location.query != object.search
        // * location.hash != object.fragment
        // simply serializing the unknown object should do the trick
        // (for location, not for everything...)
        if (!_URI && _object && href.pathname !== undefined) href = href.toString();
        if (typeof href === "string" || href instanceof String) this._parts = URI.parse(String(href), this._parts);
        else if (_URI || _object) {
            var src = _URI ? href._parts : href;
            for(key in src){
                if (key === "query") continue;
                if (hasOwn.call(this._parts, key)) this._parts[key] = src[key];
            }
            if (src.query) this.query(src.query, false);
        } else throw new TypeError("invalid input");
        this.build(!build);
        return this;
    };
    // identification accessors
    p.is = function(what) {
        var ip = false;
        var ip4 = false;
        var ip6 = false;
        var name = false;
        var sld = false;
        var idn = false;
        var punycode = false;
        var relative = !this._parts.urn;
        if (this._parts.hostname) {
            relative = false;
            ip4 = URI.ip4_expression.test(this._parts.hostname);
            ip6 = URI.ip6_expression.test(this._parts.hostname);
            ip = ip4 || ip6;
            name = !ip;
            sld = name && SLD && SLD.has(this._parts.hostname);
            idn = name && URI.idn_expression.test(this._parts.hostname);
            punycode = name && URI.punycode_expression.test(this._parts.hostname);
        }
        switch(what.toLowerCase()){
            case "relative":
                return relative;
            case "absolute":
                return !relative;
            // hostname identification
            case "domain":
            case "name":
                return name;
            case "sld":
                return sld;
            case "ip":
                return ip;
            case "ip4":
            case "ipv4":
            case "inet4":
                return ip4;
            case "ip6":
            case "ipv6":
            case "inet6":
                return ip6;
            case "idn":
                return idn;
            case "url":
                return !this._parts.urn;
            case "urn":
                return !!this._parts.urn;
            case "punycode":
                return punycode;
        }
        return null;
    };
    // component specific input validation
    var _protocol = p.protocol;
    var _port = p.port;
    var _hostname = p.hostname;
    p.protocol = function(v, build) {
        if (v) {
            // accept trailing ://
            v = v.replace(/:(\/\/)?$/, "");
            if (!v.match(URI.protocol_expression)) throw new TypeError('Protocol "' + v + "\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]");
        }
        return _protocol.call(this, v, build);
    };
    p.scheme = p.protocol;
    p.port = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v !== undefined) {
            if (v === 0) v = null;
            if (v) {
                v += "";
                if (v.charAt(0) === ":") v = v.substring(1);
                URI.ensureValidPort(v);
            }
        }
        return _port.call(this, v, build);
    };
    p.hostname = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v !== undefined) {
            var x = {
                preventInvalidHostname: this._parts.preventInvalidHostname
            };
            var res = URI.parseHost(v, x);
            if (res !== "/") throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            v = x.hostname;
            if (this._parts.preventInvalidHostname) URI.ensureValidHostname(v, this._parts.protocol);
        }
        return _hostname.call(this, v, build);
    };
    // compound accessors
    p.origin = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v === undefined) {
            var protocol = this.protocol();
            var authority = this.authority();
            if (!authority) return "";
            return (protocol ? protocol + "://" : "") + this.authority();
        } else {
            var origin = URI(v);
            this.protocol(origin.protocol()).authority(origin.authority()).build(!build);
            return this;
        }
    };
    p.host = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v === undefined) return this._parts.hostname ? URI.buildHost(this._parts) : "";
        else {
            var res = URI.parseHost(v, this._parts);
            if (res !== "/") throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            this.build(!build);
            return this;
        }
    };
    p.authority = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v === undefined) return this._parts.hostname ? URI.buildAuthority(this._parts) : "";
        else {
            var res = URI.parseAuthority(v, this._parts);
            if (res !== "/") throw new TypeError('Hostname "' + v + '" contains characters other than [A-Z0-9.-]');
            this.build(!build);
            return this;
        }
    };
    p.userinfo = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v === undefined) {
            var t = URI.buildUserinfo(this._parts);
            return t ? t.substring(0, t.length - 1) : t;
        } else {
            if (v[v.length - 1] !== "@") v += "@";
            URI.parseUserinfo(v, this._parts);
            this.build(!build);
            return this;
        }
    };
    p.resource = function(v, build) {
        var parts;
        if (v === undefined) return this.path() + this.search() + this.hash();
        parts = URI.parse(v);
        this._parts.path = parts.path;
        this._parts.query = parts.query;
        this._parts.fragment = parts.fragment;
        this.build(!build);
        return this;
    };
    // fraction accessors
    p.subdomain = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        // convenience, return "www" from "www.example.org"
        if (v === undefined) {
            if (!this._parts.hostname || this.is("IP")) return "";
            // grab domain and add another segment
            var end = this._parts.hostname.length - this.domain().length - 1;
            return this._parts.hostname.substring(0, end) || "";
        } else {
            var e = this._parts.hostname.length - this.domain().length;
            var sub = this._parts.hostname.substring(0, e);
            var replace = new RegExp("^" + escapeRegEx(sub));
            if (v && v.charAt(v.length - 1) !== ".") v += ".";
            if (v.indexOf(":") !== -1) throw new TypeError("Domains cannot contain colons");
            if (v) URI.ensureValidHostname(v, this._parts.protocol);
            this._parts.hostname = this._parts.hostname.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.domain = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (typeof v === "boolean") {
            build = v;
            v = undefined;
        }
        // convenience, return "example.org" from "www.example.org"
        if (v === undefined) {
            if (!this._parts.hostname || this.is("IP")) return "";
            // if hostname consists of 1 or 2 segments, it must be the domain
            var t = this._parts.hostname.match(/\./g);
            if (t && t.length < 2) return this._parts.hostname;
            // grab tld and add another segment
            var end = this._parts.hostname.length - this.tld(build).length - 1;
            end = this._parts.hostname.lastIndexOf(".", end - 1) + 1;
            return this._parts.hostname.substring(end) || "";
        } else {
            if (!v) throw new TypeError("cannot set domain empty");
            if (v.indexOf(":") !== -1) throw new TypeError("Domains cannot contain colons");
            URI.ensureValidHostname(v, this._parts.protocol);
            if (!this._parts.hostname || this.is("IP")) this._parts.hostname = v;
            else {
                var replace = new RegExp(escapeRegEx(this.domain()) + "$");
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.tld = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (typeof v === "boolean") {
            build = v;
            v = undefined;
        }
        // return "org" from "www.example.org"
        if (v === undefined) {
            if (!this._parts.hostname || this.is("IP")) return "";
            var pos = this._parts.hostname.lastIndexOf(".");
            var tld = this._parts.hostname.substring(pos + 1);
            if (build !== true && SLD && SLD.list[tld.toLowerCase()]) return SLD.get(this._parts.hostname) || tld;
            return tld;
        } else {
            var replace;
            if (!v) throw new TypeError("cannot set TLD empty");
            else if (v.match(/[^a-zA-Z0-9-]/)) {
                if (SLD && SLD.is(v)) {
                    replace = new RegExp(escapeRegEx(this.tld()) + "$");
                    this._parts.hostname = this._parts.hostname.replace(replace, v);
                } else throw new TypeError('TLD "' + v + '" contains characters other than [A-Z0-9]');
            } else if (!this._parts.hostname || this.is("IP")) throw new ReferenceError("cannot set TLD on non-domain host");
            else {
                replace = new RegExp(escapeRegEx(this.tld()) + "$");
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.directory = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v === undefined || v === true) {
            if (!this._parts.path && !this._parts.hostname) return "";
            if (this._parts.path === "/") return "/";
            var end = this._parts.path.length - this.filename().length - 1;
            var res = this._parts.path.substring(0, end) || (this._parts.hostname ? "/" : "");
            return v ? URI.decodePath(res) : res;
        } else {
            var e = this._parts.path.length - this.filename().length;
            var directory = this._parts.path.substring(0, e);
            var replace = new RegExp("^" + escapeRegEx(directory));
            // fully qualifier directories begin with a slash
            if (!this.is("relative")) {
                if (!v) v = "/";
                if (v.charAt(0) !== "/") v = "/" + v;
            }
            // directories always end with a slash
            if (v && v.charAt(v.length - 1) !== "/") v += "/";
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
            this.build(!build);
            return this;
        }
    };
    p.filename = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (typeof v !== "string") {
            if (!this._parts.path || this._parts.path === "/") return "";
            var pos = this._parts.path.lastIndexOf("/");
            var res = this._parts.path.substring(pos + 1);
            return v ? URI.decodePathSegment(res) : res;
        } else {
            var mutatedDirectory = false;
            if (v.charAt(0) === "/") v = v.substring(1);
            if (v.match(/\.?\//)) mutatedDirectory = true;
            var replace = new RegExp(escapeRegEx(this.filename()) + "$");
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
            if (mutatedDirectory) this.normalizePath(build);
            else this.build(!build);
            return this;
        }
    };
    p.suffix = function(v, build) {
        if (this._parts.urn) return v === undefined ? "" : this;
        if (v === undefined || v === true) {
            if (!this._parts.path || this._parts.path === "/") return "";
            var filename = this.filename();
            var pos = filename.lastIndexOf(".");
            var s, res;
            if (pos === -1) return "";
            // suffix may only contain alnum characters (yup, I made this up.)
            s = filename.substring(pos + 1);
            res = /^[a-z0-9%]+$/i.test(s) ? s : "";
            return v ? URI.decodePathSegment(res) : res;
        } else {
            if (v.charAt(0) === ".") v = v.substring(1);
            var suffix = this.suffix();
            var replace;
            if (!suffix) {
                if (!v) return this;
                this._parts.path += "." + URI.recodePath(v);
            } else if (!v) replace = new RegExp(escapeRegEx("." + suffix) + "$");
            else replace = new RegExp(escapeRegEx(suffix) + "$");
            if (replace) {
                v = URI.recodePath(v);
                this._parts.path = this._parts.path.replace(replace, v);
            }
            this.build(!build);
            return this;
        }
    };
    p.segment = function(segment, v, build) {
        var separator = this._parts.urn ? ":" : "/";
        var path = this.path();
        var absolute = path.substring(0, 1) === "/";
        var segments = path.split(separator);
        if (segment !== undefined && typeof segment !== "number") {
            build = v;
            v = segment;
            segment = undefined;
        }
        if (segment !== undefined && typeof segment !== "number") throw new Error('Bad segment "' + segment + '", must be 0-based integer');
        if (absolute) segments.shift();
        if (segment < 0) // allow negative indexes to address from the end
        segment = Math.max(segments.length + segment, 0);
        if (v === undefined) /*jshint laxbreak: true */ return segment === undefined ? segments : segments[segment];
        else if (segment === null || segments[segment] === undefined) {
            if (isArray(v)) {
                segments = [];
                // collapse empty elements within array
                for(var i = 0, l = v.length; i < l; i++){
                    if (!v[i].length && (!segments.length || !segments[segments.length - 1].length)) continue;
                    if (segments.length && !segments[segments.length - 1].length) segments.pop();
                    segments.push(trimSlashes(v[i]));
                }
            } else if (v || typeof v === "string") {
                v = trimSlashes(v);
                if (segments[segments.length - 1] === "") // empty trailing elements have to be overwritten
                // to prevent results such as /foo//bar
                segments[segments.length - 1] = v;
                else segments.push(v);
            }
        } else if (v) segments[segment] = trimSlashes(v);
        else segments.splice(segment, 1);
        if (absolute) segments.unshift("");
        return this.path(segments.join(separator), build);
    };
    p.segmentCoded = function(segment, v, build) {
        var segments, i, l;
        if (typeof segment !== "number") {
            build = v;
            v = segment;
            segment = undefined;
        }
        if (v === undefined) {
            segments = this.segment(segment, v, build);
            if (!isArray(segments)) segments = segments !== undefined ? URI.decode(segments) : undefined;
            else for(i = 0, l = segments.length; i < l; i++)segments[i] = URI.decode(segments[i]);
            return segments;
        }
        if (!isArray(v)) v = typeof v === "string" || v instanceof String ? URI.encode(v) : v;
        else for(i = 0, l = v.length; i < l; i++)v[i] = URI.encode(v[i]);
        return this.segment(segment, v, build);
    };
    // mutating query string
    var q = p.query;
    p.query = function(v, build) {
        if (v === true) return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        else if (typeof v === "function") {
            var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
            var result = v.call(this, data);
            this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
        } else if (v !== undefined && typeof v !== "string") {
            this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
            this.build(!build);
            return this;
        } else return q.call(this, v, build);
    };
    p.setQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        if (typeof name === "string" || name instanceof String) data[name] = value !== undefined ? value : null;
        else if (typeof name === "object") {
            for(var key in name)if (hasOwn.call(name, key)) data[key] = name[key];
        } else throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== "string") build = value;
        this.build(!build);
        return this;
    };
    p.addQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.addQuery(data, name, value === undefined ? null : value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== "string") build = value;
        this.build(!build);
        return this;
    };
    p.removeQuery = function(name, value, build) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        URI.removeQuery(data, name, value);
        this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        if (typeof name !== "string") build = value;
        this.build(!build);
        return this;
    };
    p.hasQuery = function(name, value, withinArray) {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        return URI.hasQuery(data, name, value, withinArray);
    };
    p.setSearch = p.setQuery;
    p.addSearch = p.addQuery;
    p.removeSearch = p.removeQuery;
    p.hasSearch = p.hasQuery;
    // sanitizing URLs
    p.normalize = function() {
        if (this._parts.urn) return this.normalizeProtocol(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
        return this.normalizeProtocol(false).normalizeHostname(false).normalizePort(false).normalizePath(false).normalizeQuery(false).normalizeFragment(false).build();
    };
    p.normalizeProtocol = function(build) {
        if (typeof this._parts.protocol === "string") {
            this._parts.protocol = this._parts.protocol.toLowerCase();
            this.build(!build);
        }
        return this;
    };
    p.normalizeHostname = function(build) {
        if (this._parts.hostname) {
            if (this.is("IDN") && punycode) this._parts.hostname = punycode.toASCII(this._parts.hostname);
            else if (this.is("IPv6") && IPv6) this._parts.hostname = IPv6.best(this._parts.hostname);
            this._parts.hostname = this._parts.hostname.toLowerCase();
            this.build(!build);
        }
        return this;
    };
    p.normalizePort = function(build) {
        // remove port of it's the protocol's default
        if (typeof this._parts.protocol === "string" && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
            this._parts.port = null;
            this.build(!build);
        }
        return this;
    };
    p.normalizePath = function(build) {
        var _path = this._parts.path;
        if (!_path) return this;
        if (this._parts.urn) {
            this._parts.path = URI.recodeUrnPath(this._parts.path);
            this.build(!build);
            return this;
        }
        if (this._parts.path === "/") return this;
        _path = URI.recodePath(_path);
        var _was_relative;
        var _leadingParents = "";
        var _parent, _pos;
        // handle relative paths
        if (_path.charAt(0) !== "/") {
            _was_relative = true;
            _path = "/" + _path;
        }
        // handle relative files (as opposed to directories)
        if (_path.slice(-3) === "/.." || _path.slice(-2) === "/.") _path += "/";
        // resolve simples
        _path = _path.replace(/(\/(\.\/)+)|(\/\.$)/g, "/").replace(/\/{2,}/g, "/");
        // remember leading parents
        if (_was_relative) {
            _leadingParents = _path.substring(1).match(/^(\.\.\/)+/) || "";
            if (_leadingParents) _leadingParents = _leadingParents[0];
        }
        // resolve parents
        while(true){
            _parent = _path.search(/\/\.\.(\/|$)/);
            if (_parent === -1) break;
            else if (_parent === 0) {
                // top level cannot be relative, skip it
                _path = _path.substring(3);
                continue;
            }
            _pos = _path.substring(0, _parent).lastIndexOf("/");
            if (_pos === -1) _pos = _parent;
            _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
        }
        // revert to relative
        if (_was_relative && this.is("relative")) _path = _leadingParents + _path.substring(1);
        this._parts.path = _path;
        this.build(!build);
        return this;
    };
    p.normalizePathname = p.normalizePath;
    p.normalizeQuery = function(build) {
        if (typeof this._parts.query === "string") {
            if (!this._parts.query.length) this._parts.query = null;
            else this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
            this.build(!build);
        }
        return this;
    };
    p.normalizeFragment = function(build) {
        if (!this._parts.fragment) {
            this._parts.fragment = null;
            this.build(!build);
        }
        return this;
    };
    p.normalizeSearch = p.normalizeQuery;
    p.normalizeHash = p.normalizeFragment;
    p.iso8859 = function() {
        // expect unicode input, iso8859 output
        var e = URI.encode;
        var d = URI.decode;
        URI.encode = escape;
        URI.decode = decodeURIComponent;
        try {
            this.normalize();
        } finally{
            URI.encode = e;
            URI.decode = d;
        }
        return this;
    };
    p.unicode = function() {
        // expect iso8859 input, unicode output
        var e = URI.encode;
        var d = URI.decode;
        URI.encode = strictEncodeURIComponent;
        URI.decode = unescape;
        try {
            this.normalize();
        } finally{
            URI.encode = e;
            URI.decode = d;
        }
        return this;
    };
    p.readable = function() {
        var uri = this.clone();
        // removing username, password, because they shouldn't be displayed according to RFC 3986
        uri.username("").password("").normalize();
        var t = "";
        if (uri._parts.protocol) t += uri._parts.protocol + "://";
        if (uri._parts.hostname) {
            if (uri.is("punycode") && punycode) {
                t += punycode.toUnicode(uri._parts.hostname);
                if (uri._parts.port) t += ":" + uri._parts.port;
            } else t += uri.host();
        }
        if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== "/") t += "/";
        t += uri.path(true);
        if (uri._parts.query) {
            var q = "";
            for(var i = 0, qp = uri._parts.query.split("&"), l = qp.length; i < l; i++){
                var kv = (qp[i] || "").split("=");
                q += "&" + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace).replace(/&/g, "%26");
                if (kv[1] !== undefined) q += "=" + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace).replace(/&/g, "%26");
            }
            t += "?" + q.substring(1);
        }
        t += URI.decodeQuery(uri.hash(), true);
        return t;
    };
    // resolving relative and absolute URLs
    p.absoluteTo = function(base) {
        var resolved = this.clone();
        var properties = [
            "protocol",
            "username",
            "password",
            "hostname",
            "port"
        ];
        var basedir, i, p;
        if (this._parts.urn) throw new Error("URNs do not have any generally defined hierarchical components");
        if (!(base instanceof URI)) base = new URI(base);
        if (resolved._parts.protocol) // Directly returns even if this._parts.hostname is empty.
        return resolved;
        else resolved._parts.protocol = base._parts.protocol;
        if (this._parts.hostname) return resolved;
        for(i = 0; p = properties[i]; i++)resolved._parts[p] = base._parts[p];
        if (!resolved._parts.path) {
            resolved._parts.path = base._parts.path;
            if (!resolved._parts.query) resolved._parts.query = base._parts.query;
        } else {
            if (resolved._parts.path.substring(-2) === "..") resolved._parts.path += "/";
            if (resolved.path().charAt(0) !== "/") {
                basedir = base.directory();
                basedir = basedir ? basedir : base.path().indexOf("/") === 0 ? "/" : "";
                resolved._parts.path = (basedir ? basedir + "/" : "") + resolved._parts.path;
                resolved.normalizePath();
            }
        }
        resolved.build();
        return resolved;
    };
    p.relativeTo = function(base) {
        var relative = this.clone().normalize();
        var relativeParts, baseParts, common, relativePath, basePath;
        if (relative._parts.urn) throw new Error("URNs do not have any generally defined hierarchical components");
        base = new URI(base).normalize();
        relativeParts = relative._parts;
        baseParts = base._parts;
        relativePath = relative.path();
        basePath = base.path();
        if (relativePath.charAt(0) !== "/") throw new Error("URI is already relative");
        if (basePath.charAt(0) !== "/") throw new Error("Cannot calculate a URI relative to another relative URI");
        if (relativeParts.protocol === baseParts.protocol) relativeParts.protocol = null;
        if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) return relative.build();
        if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) return relative.build();
        if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
            relativeParts.hostname = null;
            relativeParts.port = null;
        } else return relative.build();
        if (relativePath === basePath) {
            relativeParts.path = "";
            return relative.build();
        }
        // determine common sub path
        common = URI.commonPath(relativePath, basePath);
        // If the paths have nothing in common, return a relative URL with the absolute path.
        if (!common) return relative.build();
        var parents = baseParts.path.substring(common.length).replace(/[^\/]*$/, "").replace(/.*?\//g, "../");
        relativeParts.path = parents + relativeParts.path.substring(common.length) || "./";
        return relative.build();
    };
    // comparing URIs
    p.equals = function(uri) {
        var one = this.clone();
        var two = new URI(uri);
        var one_map = {};
        var two_map = {};
        var checked = {};
        var one_query, two_query, key;
        one.normalize();
        two.normalize();
        // exact match
        if (one.toString() === two.toString()) return true;
        // extract query string
        one_query = one.query();
        two_query = two.query();
        one.query("");
        two.query("");
        // definitely not equal if not even non-query parts match
        if (one.toString() !== two.toString()) return false;
        // query parameters have the same length, even if they're permuted
        if (one_query.length !== two_query.length) return false;
        one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
        two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);
        for(key in one_map)if (hasOwn.call(one_map, key)) {
            if (!isArray(one_map[key])) {
                if (one_map[key] !== two_map[key]) return false;
            } else if (!arraysEqual(one_map[key], two_map[key])) return false;
            checked[key] = true;
        }
        for(key in two_map)if (hasOwn.call(two_map, key)) {
            if (!checked[key]) // two contains a parameter not present in one
            return false;
        }
        return true;
    };
    // state
    p.preventInvalidHostname = function(v) {
        this._parts.preventInvalidHostname = !!v;
        return this;
    };
    p.duplicateQueryParameters = function(v) {
        this._parts.duplicateQueryParameters = !!v;
        return this;
    };
    p.escapeQuerySpace = function(v) {
        this._parts.escapeQuerySpace = !!v;
        return this;
    };
    return URI;
});

},{"47ae05174c043d43":"1FAM0","285b5b192ee1abaf":"52VsK","2c2eb9d3efde3647":"jJLVe"}],"1FAM0":[function(require,module,exports) {
var global = arguments[3];
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof global == "object" && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw new RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ "version": "1.3.2",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
        else // in Narwhal or RingoJS v0.7.0-
        for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else // in Rhino or a web browser
    root.punycode = punycode;
})(this);

},{}],"52VsK":[function(require,module,exports) {
/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */ (function(root, factory) {
    "use strict";
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (0, module.exports) // Node
    module.exports = factory();
    else if (typeof define === "function" && define.amd) // AMD. Register as an anonymous module.
    define(factory);
    else // Browser globals (root is window)
    root.IPv6 = factory(root);
})(this, function(root) {
    "use strict";
    /*
  var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
  var _out = IPv6.best(_in);
  var _expected = "fe80::204:61ff:fe9d:f156";

  console.log(_in, _out, _expected, _out === _expected);
  */ // save current IPv6 variable, if any
    var _IPv6 = root && root.IPv6;
    function bestPresentation(address) {
        // based on:
        // Javascript to test an IPv6 address for proper format, and to
        // present the "best text representation" according to IETF Draft RFC at
        // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
        // 8 Feb 2010 Rich Brown, Dartware, LLC
        // Please feel free to use this code as long as you provide a link to
        // http://www.intermapper.com
        // http://intermapper.com/support/tools/IPV6-Validator.aspx
        // http://download.dartware.com/thirdparty/ipv6validator.js
        var _address = address.toLowerCase();
        var segments = _address.split(":");
        var length = segments.length;
        var total = 8;
        // trim colons (:: or ::a:b:c… or …a:b:c::)
        if (segments[0] === "" && segments[1] === "" && segments[2] === "") {
            // must have been ::
            // remove first two items
            segments.shift();
            segments.shift();
        } else if (segments[0] === "" && segments[1] === "") // must have been ::xxxx
        // remove the first item
        segments.shift();
        else if (segments[length - 1] === "" && segments[length - 2] === "") // must have been xxxx::
        segments.pop();
        length = segments.length;
        // adjust total segments for IPv4 trailer
        if (segments[length - 1].indexOf(".") !== -1) // found a "." which means IPv4
        total = 7;
        // fill empty segments them with "0000"
        var pos;
        for(pos = 0; pos < length; pos++){
            if (segments[pos] === "") break;
        }
        if (pos < total) {
            segments.splice(pos, 1, "0000");
            while(segments.length < total)segments.splice(pos, 0, "0000");
        }
        // strip leading zeros
        var _segments;
        for(var i = 0; i < total; i++){
            _segments = segments[i].split("");
            for(var j = 0; j < 3; j++){
                if (_segments[0] === "0" && _segments.length > 1) _segments.splice(0, 1);
                else break;
            }
            segments[i] = _segments.join("");
        }
        // find longest sequence of zeroes and coalesce them into one segment
        var best = -1;
        var _best = 0;
        var _current = 0;
        var current = -1;
        var inzeroes = false;
        // i; already declared
        for(i = 0; i < total; i++){
            if (inzeroes) {
                if (segments[i] === "0") _current += 1;
                else {
                    inzeroes = false;
                    if (_current > _best) {
                        best = current;
                        _best = _current;
                    }
                }
            } else if (segments[i] === "0") {
                inzeroes = true;
                current = i;
                _current = 1;
            }
        }
        if (_current > _best) {
            best = current;
            _best = _current;
        }
        if (_best > 1) segments.splice(best, _best, "");
        length = segments.length;
        // assemble remaining segments
        var result = "";
        if (segments[0] === "") result = ":";
        for(i = 0; i < length; i++){
            result += segments[i];
            if (i === length - 1) break;
            result += ":";
        }
        if (segments[length - 1] === "") result += ":";
        return result;
    }
    function noConflict() {
        /*jshint validthis: true */ if (root.IPv6 === this) root.IPv6 = _IPv6;
        return this;
    }
    return {
        best: bestPresentation,
        noConflict: noConflict
    };
});

},{}],"jJLVe":[function(require,module,exports) {
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */ (function(root, factory) {
    "use strict";
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (0, module.exports) // Node
    module.exports = factory();
    else if (typeof define === "function" && define.amd) // AMD. Register as an anonymous module.
    define(factory);
    else // Browser globals (root is window)
    root.SecondLevelDomains = factory(root);
})(this, function(root) {
    "use strict";
    // save current SecondLevelDomains variable, if any
    var _SecondLevelDomains = root && root.SecondLevelDomains;
    var SLD = {
        // list of known Second Level Domains
        // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
        // ----
        // publicsuffix.org is more current and actually used by a couple of browsers internally.
        // downside is it also contains domains like "dyndns.org" - which is fine for the security
        // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
        // ----
        list: {
            "ac": " com gov mil net org ",
            "ae": " ac co gov mil name net org pro sch ",
            "af": " com edu gov net org ",
            "al": " com edu gov mil net org ",
            "ao": " co ed gv it og pb ",
            "ar": " com edu gob gov int mil net org tur ",
            "at": " ac co gv or ",
            "au": " asn com csiro edu gov id net org ",
            "ba": " co com edu gov mil net org rs unbi unmo unsa untz unze ",
            "bb": " biz co com edu gov info net org store tv ",
            "bh": " biz cc com edu gov info net org ",
            "bn": " com edu gov net org ",
            "bo": " com edu gob gov int mil net org tv ",
            "br": " adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ",
            "bs": " com edu gov net org ",
            "bz": " du et om ov rg ",
            "ca": " ab bc mb nb nf nl ns nt nu on pe qc sk yk ",
            "ck": " biz co edu gen gov info net org ",
            "cn": " ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ",
            "co": " com edu gov mil net nom org ",
            "cr": " ac c co ed fi go or sa ",
            "cy": " ac biz com ekloges gov ltd name net org parliament press pro tm ",
            "do": " art com edu gob gov mil net org sld web ",
            "dz": " art asso com edu gov net org pol ",
            "ec": " com edu fin gov info med mil net org pro ",
            "eg": " com edu eun gov mil name net org sci ",
            "er": " com edu gov ind mil net org rochest w ",
            "es": " com edu gob nom org ",
            "et": " biz com edu gov info name net org ",
            "fj": " ac biz com info mil name net org pro ",
            "fk": " ac co gov net nom org ",
            "fr": " asso com f gouv nom prd presse tm ",
            "gg": " co net org ",
            "gh": " com edu gov mil org ",
            "gn": " ac com gov net org ",
            "gr": " com edu gov mil net org ",
            "gt": " com edu gob ind mil net org ",
            "gu": " com edu gov net org ",
            "hk": " com edu gov idv net org ",
            "hu": " 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ",
            "id": " ac co go mil net or sch web ",
            "il": " ac co gov idf k12 muni net org ",
            "in": " ac co edu ernet firm gen gov i ind mil net nic org res ",
            "iq": " com edu gov i mil net org ",
            "ir": " ac co dnssec gov i id net org sch ",
            "it": " edu gov ",
            "je": " co net org ",
            "jo": " com edu gov mil name net org sch ",
            "jp": " ac ad co ed go gr lg ne or ",
            "ke": " ac co go info me mobi ne or sc ",
            "kh": " com edu gov mil net org per ",
            "ki": " biz com de edu gov info mob net org tel ",
            "km": " asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ",
            "kn": " edu gov net org ",
            "kr": " ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ",
            "kw": " com edu gov net org ",
            "ky": " com edu gov net org ",
            "kz": " com edu gov mil net org ",
            "lb": " com edu gov net org ",
            "lk": " assn com edu gov grp hotel int ltd net ngo org sch soc web ",
            "lr": " com edu gov net org ",
            "lv": " asn com conf edu gov id mil net org ",
            "ly": " com edu gov id med net org plc sch ",
            "ma": " ac co gov m net org press ",
            "mc": " asso tm ",
            "me": " ac co edu gov its net org priv ",
            "mg": " com edu gov mil nom org prd tm ",
            "mk": " com edu gov inf name net org pro ",
            "ml": " com edu gov net org presse ",
            "mn": " edu gov org ",
            "mo": " com edu gov net org ",
            "mt": " com edu gov net org ",
            "mv": " aero biz com coop edu gov info int mil museum name net org pro ",
            "mw": " ac co com coop edu gov int museum net org ",
            "mx": " com edu gob net org ",
            "my": " com edu gov mil name net org sch ",
            "nf": " arts com firm info net other per rec store web ",
            "ng": " biz com edu gov mil mobi name net org sch ",
            "ni": " ac co com edu gob mil net nom org ",
            "np": " com edu gov mil net org ",
            "nr": " biz com edu gov info net org ",
            "om": " ac biz co com edu gov med mil museum net org pro sch ",
            "pe": " com edu gob mil net nom org sld ",
            "ph": " com edu gov i mil net ngo org ",
            "pk": " biz com edu fam gob gok gon gop gos gov net org web ",
            "pl": " art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ",
            "pr": " ac biz com edu est gov info isla name net org pro prof ",
            "ps": " com edu gov net org plo sec ",
            "pw": " belau co ed go ne or ",
            "ro": " arts com firm info nom nt org rec store tm www ",
            "rs": " ac co edu gov in org ",
            "sb": " com edu gov net org ",
            "sc": " com edu gov net org ",
            "sh": " co com edu gov net nom org ",
            "sl": " com edu gov net org ",
            "st": " co com consulado edu embaixada gov mil net org principe saotome store ",
            "sv": " com edu gob org red ",
            "sz": " ac co org ",
            "tr": " av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ",
            "tt": " aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ",
            "tw": " club com ebiz edu game gov idv mil net org ",
            "mu": " ac co com gov net or org ",
            "mz": " ac co edu gov org ",
            "na": " co com ",
            "nz": " ac co cri geek gen govt health iwi maori mil net org parliament school ",
            "pa": " abo ac com edu gob ing med net nom org sld ",
            "pt": " com edu gov int net nome org publ ",
            "py": " com edu gov mil net org ",
            "qa": " com edu gov mil net org ",
            "re": " asso com nom ",
            "ru": " ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ",
            "rw": " ac co com edu gouv gov int mil net ",
            "sa": " com edu gov med net org pub sch ",
            "sd": " com edu gov info med net org tv ",
            "se": " a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ",
            "sg": " com edu gov idn net org per ",
            "sn": " art com edu gouv org perso univ ",
            "sy": " com edu gov mil net news org ",
            "th": " ac co go in mi net or ",
            "tj": " ac biz co com edu go gov info int mil name net nic org test web ",
            "tn": " agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ",
            "tz": " ac co go ne or ",
            "ua": " biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ",
            "ug": " ac co go ne or org sc ",
            "uk": " ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ",
            "us": " dni fed isa kids nsn ",
            "uy": " com edu gub mil net org ",
            "ve": " co com edu gob info mil net org web ",
            "vi": " co com k12 net org ",
            "vn": " ac biz com edu gov health info int name net org pro ",
            "ye": " co com gov ltd me net org plc ",
            "yu": " ac co edu gov org ",
            "za": " ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ",
            "zm": " ac co com edu gov net org sch ",
            // https://en.wikipedia.org/wiki/CentralNic#Second-level_domains
            "com": "ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ",
            "net": "gb jp se uk ",
            "org": "ae",
            "de": "com "
        },
        // gorhill 2013-10-25: Using indexOf() instead Regexp(). Significant boost
        // in both performance and memory footprint. No initialization required.
        // http://jsperf.com/uri-js-sld-regex-vs-binary-search/4
        // Following methods use lastIndexOf() rather than array.split() in order
        // to avoid any memory allocations.
        has: function(domain) {
            var tldOffset = domain.lastIndexOf(".");
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) return false;
            var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) return false;
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) return false;
            return sldList.indexOf(" " + domain.slice(sldOffset + 1, tldOffset) + " ") >= 0;
        },
        is: function(domain) {
            var tldOffset = domain.lastIndexOf(".");
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) return false;
            var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
            if (sldOffset >= 0) return false;
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) return false;
            return sldList.indexOf(" " + domain.slice(0, tldOffset) + " ") >= 0;
        },
        get: function(domain) {
            var tldOffset = domain.lastIndexOf(".");
            if (tldOffset <= 0 || tldOffset >= domain.length - 1) return null;
            var sldOffset = domain.lastIndexOf(".", tldOffset - 1);
            if (sldOffset <= 0 || sldOffset >= tldOffset - 1) return null;
            var sldList = SLD.list[domain.slice(tldOffset + 1)];
            if (!sldList) return null;
            if (sldList.indexOf(" " + domain.slice(sldOffset + 1, tldOffset) + " ") < 0) return null;
            return domain.slice(sldOffset + 1);
        },
        noConflict: function() {
            if (root.SecondLevelDomains === this) root.SecondLevelDomains = _SecondLevelDomains;
            return this;
        }
    };
    return SLD;
});

},{}],"9pf4Q":[function(require,module,exports) {
var global = arguments[3];
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CallBuilder = void 0;
var tslib_1 = require("2d9743ba3f278bfb");
var detect_node_1 = tslib_1.__importDefault(require("5df97dba28c09555"));
var urijs_1 = tslib_1.__importDefault(require("5ede3477aa30a61d"));
var URITemplate_1 = tslib_1.__importDefault(require("44e14f1f0156f4e8"));
var errors_1 = require("b742d68da708afe6");
var horizon_axios_client_1 = tslib_1.__importDefault(require("c39232c1cd4daf8"));
var version = require("975537ef24d24424").version;
var JOINABLE = [
    "transaction"
];
var EventSource;
var anyGlobal = global;
if (anyGlobal.EventSource) EventSource = anyGlobal.EventSource;
else if (detect_node_1.default) EventSource = require("23f055c49c026810");
else if (anyGlobal.window.EventSource) EventSource = anyGlobal.window.EventSource;
else EventSource = require("23f055c49c026810");
var CallBuilder = function() {
    function CallBuilder(serverUrl, neighborRoot) {
        if (neighborRoot === void 0) neighborRoot = "";
        this.url = serverUrl.clone();
        this.filter = [];
        this.originalSegments = this.url.segment() || [];
        this.neighborRoot = neighborRoot;
    }
    CallBuilder.prototype.call = function() {
        var _this = this;
        this.checkFilter();
        return this._sendNormalRequest(this.url).then(function(r) {
            return _this._parseResponse(r);
        });
    };
    CallBuilder.prototype.stream = function(options) {
        var _this = this;
        if (options === void 0) options = {};
        this.checkFilter();
        this.url.setQuery("X-Client-Name", "js-stellar-sdk");
        this.url.setQuery("X-Client-Version", version);
        var es;
        var timeout;
        var createTimeout = function() {
            timeout = setTimeout(function() {
                if (es) es.close();
                es = createEventSource();
            }, options.reconnectTimeout || 15000);
        };
        var createEventSource = function() {
            try {
                es = new EventSource(_this.url.toString());
            } catch (err) {
                if (options.onerror) options.onerror(err);
            }
            createTimeout();
            if (es) {
                var closed_1 = false;
                var onClose_1 = function() {
                    if (closed_1) return;
                    clearTimeout(timeout);
                    es.close();
                    createEventSource();
                    closed_1 = true;
                };
                var onMessage = function(message) {
                    if (message.type === "close") {
                        onClose_1();
                        return;
                    }
                    var result = message.data ? _this._parseRecord(JSON.parse(message.data)) : message;
                    if (result.paging_token) _this.url.setQuery("cursor", result.paging_token);
                    clearTimeout(timeout);
                    createTimeout();
                    if (typeof options.onmessage !== "undefined") options.onmessage(result);
                };
                var onError = function(error) {
                    if (options.onerror) options.onerror(error);
                };
                if (es.addEventListener) {
                    es.addEventListener("message", onMessage.bind(_this));
                    es.addEventListener("error", onError.bind(_this));
                    es.addEventListener("close", onClose_1.bind(_this));
                } else {
                    es.onmessage = onMessage.bind(_this);
                    es.onerror = onError.bind(_this);
                }
            }
            return es;
        };
        createEventSource();
        return function close() {
            clearTimeout(timeout);
            if (es) es.close();
        };
    };
    CallBuilder.prototype.cursor = function(cursor) {
        this.url.setQuery("cursor", cursor);
        return this;
    };
    CallBuilder.prototype.limit = function(recordsNumber) {
        this.url.setQuery("limit", recordsNumber.toString());
        return this;
    };
    CallBuilder.prototype.order = function(direction) {
        this.url.setQuery("order", direction);
        return this;
    };
    CallBuilder.prototype.join = function(include) {
        this.url.setQuery("join", include);
        return this;
    };
    CallBuilder.prototype.forEndpoint = function(endpoint, param) {
        if (this.neighborRoot === "") throw new Error("Invalid usage: neighborRoot not set in constructor");
        this.filter.push([
            endpoint,
            param,
            this.neighborRoot
        ]);
        return this;
    };
    CallBuilder.prototype.checkFilter = function() {
        if (this.filter.length >= 2) throw new errors_1.BadRequestError("Too many filters specified", this.filter);
        if (this.filter.length === 1) {
            var newSegment = this.originalSegments.concat(this.filter[0]);
            this.url.segment(newSegment);
        }
    };
    CallBuilder.prototype._requestFnForLink = function(link) {
        var _this = this;
        return function(opts) {
            if (opts === void 0) opts = {};
            return tslib_1.__awaiter(_this, void 0, void 0, function() {
                var uri, template, r;
                return tslib_1.__generator(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            if (link.templated) {
                                template = URITemplate_1.default(link.href);
                                uri = urijs_1.default(template.expand(opts));
                            } else uri = urijs_1.default(link.href);
                            return [
                                4,
                                this._sendNormalRequest(uri)
                            ];
                        case 1:
                            r = _a.sent();
                            return [
                                2,
                                this._parseResponse(r)
                            ];
                    }
                });
            });
        };
    };
    CallBuilder.prototype._parseRecord = function(json) {
        var _this = this;
        if (!json._links) return json;
        var _loop_1 = function(key) {
            var n = json._links[key];
            var included = false;
            if (typeof json[key] !== "undefined") {
                json[key + "_attr"] = json[key];
                included = true;
            }
            if (included && JOINABLE.indexOf(key) >= 0) {
                var record_1 = this_1._parseRecord(json[key]);
                json[key] = function() {
                    return tslib_1.__awaiter(_this, void 0, void 0, function() {
                        return tslib_1.__generator(this, function(_a) {
                            return [
                                2,
                                record_1
                            ];
                        });
                    });
                };
            } else json[key] = this_1._requestFnForLink(n);
        };
        var this_1 = this;
        for(var _i = 0, _a = Object.keys(json._links); _i < _a.length; _i++){
            var key = _a[_i];
            _loop_1(key);
        }
        return json;
    };
    CallBuilder.prototype._sendNormalRequest = function(initialUrl) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var url;
            return tslib_1.__generator(this, function(_a) {
                url = initialUrl;
                if (url.authority() === "") url = url.authority(this.url.authority());
                if (url.protocol() === "") url = url.protocol(this.url.protocol());
                return [
                    2,
                    horizon_axios_client_1.default.get(url.toString()).then(function(response) {
                        return response.data;
                    }).catch(this._handleNetworkError)
                ];
            });
        });
    };
    CallBuilder.prototype._parseResponse = function(json) {
        if (json._embedded && json._embedded.records) return this._toCollectionPage(json);
        return this._parseRecord(json);
    };
    CallBuilder.prototype._toCollectionPage = function(json) {
        var _this = this;
        for(var i = 0; i < json._embedded.records.length; i += 1)json._embedded.records[i] = this._parseRecord(json._embedded.records[i]);
        return {
            records: json._embedded.records,
            next: function() {
                return tslib_1.__awaiter(_this, void 0, void 0, function() {
                    var r;
                    return tslib_1.__generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                return [
                                    4,
                                    this._sendNormalRequest(urijs_1.default(json._links.next.href))
                                ];
                            case 1:
                                r = _a.sent();
                                return [
                                    2,
                                    this._toCollectionPage(r)
                                ];
                        }
                    });
                });
            },
            prev: function() {
                return tslib_1.__awaiter(_this, void 0, void 0, function() {
                    var r;
                    return tslib_1.__generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                return [
                                    4,
                                    this._sendNormalRequest(urijs_1.default(json._links.prev.href))
                                ];
                            case 1:
                                r = _a.sent();
                                return [
                                    2,
                                    this._toCollectionPage(r)
                                ];
                        }
                    });
                });
            }
        };
    };
    CallBuilder.prototype._handleNetworkError = function(error) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
                if (error.response && error.response.status && error.response.statusText) switch(error.response.status){
                    case 404:
                        return [
                            2,
                            Promise.reject(new errors_1.NotFoundError(error.response.statusText, error.response.data))
                        ];
                    default:
                        return [
                            2,
                            Promise.reject(new errors_1.NetworkError(error.response.statusText, error.response.data))
                        ];
                }
                else return [
                    2,
                    Promise.reject(new Error(error.message))
                ];
                return [
                    2
                ];
            });
        });
    };
    return CallBuilder;
}();
exports.CallBuilder = CallBuilder;

},{"2d9743ba3f278bfb":"lRdW5","5df97dba28c09555":"aTVL8","5ede3477aa30a61d":"lm4he","44e14f1f0156f4e8":"hZozI","b742d68da708afe6":"j3jT2","c39232c1cd4daf8":"1qCA8","975537ef24d24424":"8DYjk","23f055c49c026810":"cFYPB"}],"aTVL8":[function(require,module,exports) {
module.exports = false;

},{}],"hZozI":[function(require,module,exports) {
/*!
 * URI.js - Mutating URLs
 * URI Template Support - http://tools.ietf.org/html/rfc6570
 *
 * Version: 1.19.11
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.io/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *
 */ (function(root, factory) {
    "use strict";
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (0, module.exports) // Node
    module.exports = factory(require("32c2dfe94eda008b"));
    else if (typeof define === "function" && define.amd) // AMD. Register as an anonymous module.
    define([
        "./URI"
    ], factory);
    else // Browser globals (root is window)
    root.URITemplate = factory(root.URI, root);
})(this, function(URI, root) {
    "use strict";
    // FIXME: v2.0.0 renamce non-camelCase properties to uppercase
    /*jshint camelcase: false */ // save current URITemplate variable, if any
    var _URITemplate = root && root.URITemplate;
    var hasOwn = Object.prototype.hasOwnProperty;
    function URITemplate(expression) {
        // serve from cache where possible
        if (URITemplate._cache[expression]) return URITemplate._cache[expression];
        // Allow instantiation without the 'new' keyword
        if (!(this instanceof URITemplate)) return new URITemplate(expression);
        this.expression = expression;
        URITemplate._cache[expression] = this;
        return this;
    }
    function Data(data) {
        this.data = data;
        this.cache = {};
    }
    var p = URITemplate.prototype;
    // list of operators and their defined options
    var operators = {
        // Simple string expansion
        "": {
            prefix: "",
            separator: ",",
            named: false,
            empty_name_separator: false,
            encode: "encode"
        },
        // Reserved character strings
        "+": {
            prefix: "",
            separator: ",",
            named: false,
            empty_name_separator: false,
            encode: "encodeReserved"
        },
        // Fragment identifiers prefixed by '#'
        "#": {
            prefix: "#",
            separator: ",",
            named: false,
            empty_name_separator: false,
            encode: "encodeReserved"
        },
        // Name labels or extensions prefixed by '.'
        ".": {
            prefix: ".",
            separator: ".",
            named: false,
            empty_name_separator: false,
            encode: "encode"
        },
        // Path segments prefixed by '/'
        "/": {
            prefix: "/",
            separator: "/",
            named: false,
            empty_name_separator: false,
            encode: "encode"
        },
        // Path parameter name or name=value pairs prefixed by ';'
        ";": {
            prefix: ";",
            separator: ";",
            named: true,
            empty_name_separator: false,
            encode: "encode"
        },
        // Query component beginning with '?' and consisting
        // of name=value pairs separated by '&'; an
        "?": {
            prefix: "?",
            separator: "&",
            named: true,
            empty_name_separator: true,
            encode: "encode"
        },
        // Continuation of query-style &name=value pairs
        // within a literal query component.
        "&": {
            prefix: "&",
            separator: "&",
            named: true,
            empty_name_separator: true,
            encode: "encode"
        }
    };
    // storage for already parsed templates
    URITemplate._cache = {};
    // pattern to identify expressions [operator, variable-list] in template
    URITemplate.EXPRESSION_PATTERN = /\{([^a-zA-Z0-9%_]?)([^\}]+)(\}|$)/g;
    // pattern to identify variables [name, explode, maxlength] in variable-list
    URITemplate.VARIABLE_PATTERN = /^([^*:.](?:\.?[^*:.])*)((\*)|:(\d+))?$/;
    // pattern to verify variable name integrity
    URITemplate.VARIABLE_NAME_PATTERN = /[^a-zA-Z0-9%_.]/;
    // pattern to verify literal integrity
    URITemplate.LITERAL_PATTERN = /[<>{}"`^| \\]/;
    // expand parsed expression (expression, not template!)
    URITemplate.expand = function(expression, data, opts) {
        // container for defined options for the given operator
        var options = operators[expression.operator];
        // expansion type (include keys or not)
        var type = options.named ? "Named" : "Unnamed";
        // list of variables within the expression
        var variables = expression.variables;
        // result buffer for evaluating the expression
        var buffer = [];
        var d, variable, i;
        for(i = 0; variable = variables[i]; i++){
            // fetch simplified data source
            d = data.get(variable.name);
            if (d.type === 0 && opts && opts.strict) throw new Error('Missing expansion value for variable "' + variable.name + '"');
            if (!d.val.length) {
                if (d.type) // empty variables (empty string)
                // still lead to a separator being appended!
                buffer.push("");
                continue;
            }
            if (d.type > 1 && variable.maxlength) // composite variable cannot specify maxlength
            throw new Error('Invalid expression: Prefix modifier not applicable to variable "' + variable.name + '"');
            // expand the given variable
            buffer.push(URITemplate["expand" + type](d, options, variable.explode, variable.explode && options.separator || ",", variable.maxlength, variable.name));
        }
        if (buffer.length) return options.prefix + buffer.join(options.separator);
        else // prefix is not prepended for empty expressions
        return "";
    };
    // expand a named variable
    URITemplate.expandNamed = function(d, options, explode, separator, length, name) {
        // variable result buffer
        var result = "";
        // peformance crap
        var encode = options.encode;
        var empty_name_separator = options.empty_name_separator;
        // flag noting if values are already encoded
        var _encode = !d[encode].length;
        // key for named expansion
        var _name = d.type === 2 ? "" : URI[encode](name);
        var _value, i, l;
        // for each found value
        for(i = 0, l = d.val.length; i < l; i++){
            if (length) {
                // maxlength must be determined before encoding can happen
                _value = URI[encode](d.val[i][1].substring(0, length));
                if (d.type === 2) // apply maxlength to keys of objects as well
                _name = URI[encode](d.val[i][0].substring(0, length));
            } else if (_encode) {
                // encode value
                _value = URI[encode](d.val[i][1]);
                if (d.type === 2) {
                    // encode name and cache encoded value
                    _name = URI[encode](d.val[i][0]);
                    d[encode].push([
                        _name,
                        _value
                    ]);
                } else // cache encoded value
                d[encode].push([
                    undefined,
                    _value
                ]);
            } else {
                // values are already encoded and can be pulled from cache
                _value = d[encode][i][1];
                if (d.type === 2) _name = d[encode][i][0];
            }
            if (result) // unless we're the first value, prepend the separator
            result += separator;
            if (!explode) {
                if (!i) // first element, so prepend variable name
                result += URI[encode](name) + (empty_name_separator || _value ? "=" : "");
                if (d.type === 2) // without explode-modifier, keys of objects are returned comma-separated
                result += _name + ",";
                result += _value;
            } else // only add the = if it is either default (?&) or there actually is a value (;)
            result += _name + (empty_name_separator || _value ? "=" : "") + _value;
        }
        return result;
    };
    // expand an unnamed variable
    URITemplate.expandUnnamed = function(d, options, explode, separator, length) {
        // variable result buffer
        var result = "";
        // performance crap
        var encode = options.encode;
        var empty_name_separator = options.empty_name_separator;
        // flag noting if values are already encoded
        var _encode = !d[encode].length;
        var _name, _value, i, l;
        // for each found value
        for(i = 0, l = d.val.length; i < l; i++){
            if (length) // maxlength must be determined before encoding can happen
            _value = URI[encode](d.val[i][1].substring(0, length));
            else if (_encode) {
                // encode and cache value
                _value = URI[encode](d.val[i][1]);
                d[encode].push([
                    d.type === 2 ? URI[encode](d.val[i][0]) : undefined,
                    _value
                ]);
            } else // value already encoded, pull from cache
            _value = d[encode][i][1];
            if (result) // unless we're the first value, prepend the separator
            result += separator;
            if (d.type === 2) {
                if (length) // maxlength also applies to keys of objects
                _name = URI[encode](d.val[i][0].substring(0, length));
                else // at this point the name must already be encoded
                _name = d[encode][i][0];
                result += _name;
                if (explode) // explode-modifier separates name and value by "="
                result += empty_name_separator || _value ? "=" : "";
                else // no explode-modifier separates name and value by ","
                result += ",";
            }
            result += _value;
        }
        return result;
    };
    URITemplate.noConflict = function() {
        if (root.URITemplate === URITemplate) root.URITemplate = _URITemplate;
        return URITemplate;
    };
    // expand template through given data map
    p.expand = function(data, opts) {
        var result = "";
        if (!this.parts || !this.parts.length) // lazilyy parse the template
        this.parse();
        if (!(data instanceof Data)) // make given data available through the
        // optimized data handling thingie
        data = new Data(data);
        for(var i = 0, l = this.parts.length; i < l; i++)/*jshint laxbreak: true */ result += typeof this.parts[i] === "string" ? this.parts[i] : URITemplate.expand(this.parts[i], data, opts);
        return result;
    };
    // parse template into action tokens
    p.parse = function() {
        // performance crap
        var expression = this.expression;
        var ePattern = URITemplate.EXPRESSION_PATTERN;
        var vPattern = URITemplate.VARIABLE_PATTERN;
        var nPattern = URITemplate.VARIABLE_NAME_PATTERN;
        var lPattern = URITemplate.LITERAL_PATTERN;
        // token result buffer
        var parts = [];
        // position within source template
        var pos = 0;
        var variables, eMatch, vMatch;
        var checkLiteral = function(literal) {
            if (literal.match(lPattern)) throw new Error('Invalid Literal "' + literal + '"');
            return literal;
        };
        // RegExp is shared accross all templates,
        // which requires a manual reset
        ePattern.lastIndex = 0;
        // I don't like while(foo = bar()) loops,
        // to make things simpler I go while(true) and break when required
        while(true){
            eMatch = ePattern.exec(expression);
            if (eMatch === null) {
                // push trailing literal
                parts.push(checkLiteral(expression.substring(pos)));
                break;
            } else {
                // push leading literal
                parts.push(checkLiteral(expression.substring(pos, eMatch.index)));
                pos = eMatch.index + eMatch[0].length;
            }
            if (!operators[eMatch[1]]) throw new Error('Unknown Operator "' + eMatch[1] + '" in "' + eMatch[0] + '"');
            else if (!eMatch[3]) throw new Error('Unclosed Expression "' + eMatch[0] + '"');
            // parse variable-list
            variables = eMatch[2].split(",");
            for(var i = 0, l = variables.length; i < l; i++){
                vMatch = variables[i].match(vPattern);
                if (vMatch === null) throw new Error('Invalid Variable "' + variables[i] + '" in "' + eMatch[0] + '"');
                else if (vMatch[1].match(nPattern)) throw new Error('Invalid Variable Name "' + vMatch[1] + '" in "' + eMatch[0] + '"');
                variables[i] = {
                    name: vMatch[1],
                    explode: !!vMatch[3],
                    maxlength: vMatch[4] && parseInt(vMatch[4], 10)
                };
            }
            if (!variables.length) throw new Error('Expression Missing Variable(s) "' + eMatch[0] + '"');
            parts.push({
                expression: eMatch[0],
                operator: eMatch[1],
                variables: variables
            });
        }
        if (!parts.length) // template doesn't contain any expressions
        // so it is a simple literal string
        // this probably should fire a warning or something?
        parts.push(checkLiteral(expression));
        this.parts = parts;
        return this;
    };
    // simplify data structures
    Data.prototype.get = function(key) {
        // performance crap
        var data = this.data;
        // cache for processed data-point
        var d = {
            // type of data 0: undefined/null, 1: string, 2: object, 3: array
            type: 0,
            // original values (except undefined/null)
            val: [],
            // cache for encoded values (only for non-maxlength expansion)
            encode: [],
            encodeReserved: []
        };
        var i, l, value;
        if (this.cache[key] !== undefined) // we've already processed this key
        return this.cache[key];
        this.cache[key] = d;
        if (String(Object.prototype.toString.call(data)) === "[object Function]") // data itself is a callback (global callback)
        value = data(key);
        else if (String(Object.prototype.toString.call(data[key])) === "[object Function]") // data is a map of callbacks (local callback)
        value = data[key](key);
        else // data is a map of data
        value = data[key];
        // generalize input into [ [name1, value1], [name2, value2], … ]
        // so expansion has to deal with a single data structure only
        if (value === undefined || value === null) // undefined and null values are to be ignored completely
        return d;
        else if (String(Object.prototype.toString.call(value)) === "[object Array]") {
            for(i = 0, l = value.length; i < l; i++)if (value[i] !== undefined && value[i] !== null) // arrays don't have names
            d.val.push([
                undefined,
                String(value[i])
            ]);
            if (d.val.length) // only treat non-empty arrays as arrays
            d.type = 3; // array
        } else if (String(Object.prototype.toString.call(value)) === "[object Object]") {
            for(i in value)if (hasOwn.call(value, i) && value[i] !== undefined && value[i] !== null) // objects have keys, remember them for named expansion
            d.val.push([
                i,
                String(value[i])
            ]);
            if (d.val.length) // only treat non-empty objects as objects
            d.type = 2; // object
        } else {
            d.type = 1; // primitive string (could've been string, number, boolean and objects with a toString())
            // arrays don't have names
            d.val.push([
                undefined,
                String(value)
            ]);
        }
        return d;
    };
    // hook into URI for fluid access
    URI.expand = function(expression, data) {
        var template = new URITemplate(expression);
        var expansion = template.expand(data);
        return new URI(expansion);
    };
    return URITemplate;
});

},{"32c2dfe94eda008b":"lm4he"}],"1qCA8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getCurrentServerTime = exports.SERVER_TIME_MAP = void 0;
var tslib_1 = require("1db04f78719c3eb1");
var axios_1 = tslib_1.__importDefault(require("3af090d5c3a4e355"));
var urijs_1 = tslib_1.__importDefault(require("34690b9d4550629b"));
var version = require("a54a1e48ff5b0410").version;
exports.SERVER_TIME_MAP = {};
var HorizonAxiosClient = axios_1.default.create({
    headers: {
        "X-Client-Name": "js-stellar-sdk",
        "X-Client-Version": version
    }
});
function _toSeconds(ms) {
    return Math.floor(ms / 1000);
}
HorizonAxiosClient.interceptors.response.use(function interceptorHorizonResponse(response) {
    var hostname = urijs_1.default(response.config.url).hostname();
    var serverTime = _toSeconds(Date.parse(response.headers.date));
    var localTimeRecorded = _toSeconds(new Date().getTime());
    if (!isNaN(serverTime)) exports.SERVER_TIME_MAP[hostname] = {
        serverTime: serverTime,
        localTimeRecorded: localTimeRecorded
    };
    return response;
});
exports.default = HorizonAxiosClient;
function getCurrentServerTime(hostname) {
    var entry = exports.SERVER_TIME_MAP[hostname];
    if (!entry || !entry.localTimeRecorded || !entry.serverTime) return null;
    var serverTime = entry.serverTime, localTimeRecorded = entry.localTimeRecorded;
    var currentTime = _toSeconds(new Date().getTime());
    if (currentTime - localTimeRecorded > 300) return null;
    return currentTime - localTimeRecorded + serverTime;
}
exports.getCurrentServerTime = getCurrentServerTime;

},{"1db04f78719c3eb1":"lRdW5","3af090d5c3a4e355":"jo6P5","34690b9d4550629b":"lm4he","a54a1e48ff5b0410":"8DYjk"}],"jo6P5":[function(require,module,exports) {
module.exports = require("d241e9d1bba4dd1f");

},{"d241e9d1bba4dd1f":"63MyY"}],"63MyY":[function(require,module,exports) {
"use strict";
var utils = require("884ce3d82cc56a3e");
var bind = require("b01a8b7103f016ff");
var Axios = require("503c12282ccd417c");
var mergeConfig = require("d4aea592a8b55c10");
var defaults = require("800b0e3a91cb43bd");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Expose Cancel & CancelToken
axios.Cancel = require("d933adbb0ee38d4e");
axios.CancelToken = require("d9419627cb5306d9");
axios.isCancel = require("9f969799f394471c");
axios.VERSION = require("684658d97b248b24").version;
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require("bcc91a22873f161e");
// Expose isAxiosError
axios.isAxiosError = require("83a138ca652e33b0");
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"884ce3d82cc56a3e":"5By4s","b01a8b7103f016ff":"haRQb","503c12282ccd417c":"cpqD8","d4aea592a8b55c10":"b85oP","800b0e3a91cb43bd":"lTJJ4","d933adbb0ee38d4e":"kjMy2","d9419627cb5306d9":"45wzn","9f969799f394471c":"a0VmF","684658d97b248b24":"h29L9","bcc91a22873f161e":"dyQ8N","83a138ca652e33b0":"eyiLq"}],"5By4s":[function(require,module,exports) {
"use strict";
var bind = require("c01e4aa1f67d6c31");
// utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return Array.isArray(val);
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === "undefined";
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ function isArrayBuffer(val) {
    return toString.call(val) === "[object ArrayBuffer]";
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(val) {
    return toString.call(val) === "[object FormData]";
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && isArrayBuffer(val.buffer);
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === "string";
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === "number";
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === "object";
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (toString.call(val) !== "[object Object]") return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ function isDate(val) {
    return toString.call(val) === "[object Date]";
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ function isFile(val) {
    return toString.call(val) === "[object File]";
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ function isBlob(val) {
    return toString.call(val) === "[object Blob]";
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === "[object Function]";
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ function isURLSearchParams(val) {
    return toString.call(val) === "[object URLSearchParams]";
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {};
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({}, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
}
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
};

},{"c01e4aa1f67d6c31":"haRQb"}],"haRQb":[function(require,module,exports) {
"use strict";
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"cpqD8":[function(require,module,exports) {
"use strict";
var utils = require("c33ddb63b41c5510");
var buildURL = require("eefcdb45a49174dc");
var InterceptorManager = require("54647b22c4963b54");
var dispatchRequest = require("ef286831fd883f25");
var mergeConfig = require("e20d9ce97dc03ff8");
var validator = require("e709ae60d09ea03e");
var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
    } else config = configOrUrl || {};
    if (!config.url) throw new Error("Provided config url is not valid");
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = "get";
    var transitional = config.transitional;
    if (transitional !== undefined) validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
        var chain = [
            dispatchRequest,
            undefined
        ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while(chain.length)promise = promise.then(chain.shift(), chain.shift());
        return promise;
    }
    var newConfig = config;
    while(requestInterceptorChain.length){
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
            newConfig = onFulfilled(newConfig);
        } catch (error) {
            onRejected(error);
            break;
        }
    }
    try {
        promise = dispatchRequest(newConfig);
    } catch (error) {
        return Promise.reject(error);
    }
    while(responseInterceptorChain.length)promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    if (!config.url) throw new Error("Provided config url is not valid");
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: (config || {}).data
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: data
        }));
    };
});
module.exports = Axios;

},{"c33ddb63b41c5510":"5By4s","eefcdb45a49174dc":"3bwC2","54647b22c4963b54":"1VRIM","ef286831fd883f25":"6sjJ6","e20d9ce97dc03ff8":"b85oP","e709ae60d09ea03e":"9vgkY"}],"3bwC2":[function(require,module,exports) {
"use strict";
var utils = require("8d5e54ca1f39f460");
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") return;
            if (utils.isArray(val)) key = key + "[]";
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + "=" + encode(v));
            });
        });
        serializedParams = parts.join("&");
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
};

},{"8d5e54ca1f39f460":"5By4s"}],"1VRIM":[function(require,module,exports) {
"use strict";
var utils = require("b0f0b665db8630dd");
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"b0f0b665db8630dd":"5By4s"}],"6sjJ6":[function(require,module,exports) {
"use strict";
var utils = require("4cdd8074b4acceeb");
var transformData = require("aada7b8493c96555");
var isCancel = require("19be5bfb9bb160b3");
var defaults = require("dffbd1f82ae63f9e");
var Cancel = require("9dcab6f33a9fd64a");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
    if (config.signal && config.signal.aborted) throw new Cancel("canceled");
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {};
    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach([
        "delete",
        "get",
        "head",
        "post",
        "put",
        "patch",
        "common"
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"4cdd8074b4acceeb":"5By4s","aada7b8493c96555":"eRqJY","19be5bfb9bb160b3":"a0VmF","dffbd1f82ae63f9e":"lTJJ4","9dcab6f33a9fd64a":"kjMy2"}],"eRqJY":[function(require,module,exports) {
"use strict";
var utils = require("43104c9c05f5cd9d");
var defaults = require("e2fe9dd19755e9fe");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    var context = this || defaults;
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
    });
    return data;
};

},{"43104c9c05f5cd9d":"5By4s","e2fe9dd19755e9fe":"lTJJ4"}],"lTJJ4":[function(require,module,exports) {
var process = require("1d27f7eb7a299b57");
"use strict";
var utils = require("6ed1bb42eb97f374");
var normalizeHeaderName = require("acf022abd71faf49");
var enhanceError = require("7cbf9d1ee98deee2");
var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") // For browsers use XHR adapter
    adapter = require("5409d44f55b785c0");
    else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") // For node use HTTP adapter
    adapter = require("f3ee17cc0b5a4d43");
    return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
    transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
    },
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                return data.toString();
            }
            if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
                setContentTypeIfUnset(headers, "application/json");
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            var transitional = this.transitional || defaults.transitional;
            var silentJSONParsing = transitional && transitional.silentJSONParsing;
            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                return JSON.parse(data);
            } catch (e) {
                if (strictJSONParsing) {
                    if (e.name === "SyntaxError") throw enhanceError(e, this, "E_JSON_PARSE");
                    throw e;
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    },
    headers: {
        common: {
            "Accept": "application/json, text/plain, */*"
        }
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"1d27f7eb7a299b57":"d5jf4","6ed1bb42eb97f374":"5By4s","acf022abd71faf49":"adBZo","7cbf9d1ee98deee2":"itUQr","5409d44f55b785c0":"ldm57","f3ee17cc0b5a4d43":"ldm57"}],"adBZo":[function(require,module,exports) {
"use strict";
var utils = require("5f7c620761e8c6ab");
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"5f7c620761e8c6ab":"5By4s"}],"itUQr":[function(require,module,exports) {
"use strict";
/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */ module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) error.code = code;
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code,
            status: this.response && this.response.status ? this.response.status : null
        };
    };
    return error;
};

},{}],"ldm57":[function(require,module,exports) {
"use strict";
var utils = require("9c8e72fde4bf30a1");
var settle = require("8ec7d02661ff2934");
var cookies = require("b5eb955ba7959fac");
var buildURL = require("3c3c77f19b1ffc0b");
var buildFullPath = require("2e7efa49758f9617");
var parseHeaders = require("5e100406c2635049");
var isURLSameOrigin = require("725c28f10d6ede34");
var createError = require("e190c758a2781e41");
var defaults = require("981131c62c839cef");
var Cancel = require("b5d5228ce1dc6381");
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
            if (config.cancelToken) config.cancelToken.unsubscribe(onCanceled);
            if (config.signal) config.signal.removeEventListener("abort", onCanceled);
        }
        if (utils.isFormData(requestData)) delete requestHeaders["Content-Type"]; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(function _resolve(value) {
                resolve(value);
                done();
            }, function _reject(err) {
                reject(err);
                done();
            }, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(createError("Request aborted", config, "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError("Network Error", config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
            var transitional = config.transitional || defaults.transitional;
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(createError(timeoutErrorMessage, config, transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ("setRequestHeader" in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken || config.signal) {
            // Handle cancellation
            // eslint-disable-next-line func-names
            onCanceled = function(cancel) {
                if (!request) return;
                reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
                request.abort();
                request = null;
            };
            config.cancelToken && config.cancelToken.subscribe(onCanceled);
            if (config.signal) config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
        }
        if (!requestData) requestData = null;
        // Send the request
        request.send(requestData);
    });
};

},{"9c8e72fde4bf30a1":"5By4s","8ec7d02661ff2934":"dD9aC","b5eb955ba7959fac":"4WJjt","3c3c77f19b1ffc0b":"3bwC2","2e7efa49758f9617":"1I5TW","5e100406c2635049":"kqDd5","725c28f10d6ede34":"lxXtv","e190c758a2781e41":"5nVS9","981131c62c839cef":"lTJJ4","b5d5228ce1dc6381":"kjMy2"}],"dD9aC":[function(require,module,exports) {
"use strict";
var createError = require("41c663c7e655b10");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
};

},{"41c663c7e655b10":"5nVS9"}],"5nVS9":[function(require,module,exports) {
"use strict";
var enhanceError = require("6aa028ba444c74bf");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
};

},{"6aa028ba444c74bf":"itUQr"}],"4WJjt":[function(require,module,exports) {
"use strict";
var utils = require("ea9731ad6dfdd464");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push("path=" + path);
            if (utils.isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"ea9731ad6dfdd464":"5By4s"}],"1I5TW":[function(require,module,exports) {
"use strict";
var isAbsoluteURL = require("58911e9c504f1f56");
var combineURLs = require("8feec187752eefd5");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"58911e9c504f1f56":"jD6NM","8feec187752eefd5":"brOWK"}],"jD6NM":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};

},{}],"brOWK":[function(require,module,exports) {
"use strict";
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};

},{}],"kqDd5":[function(require,module,exports) {
"use strict";
var utils = require("e086afba9f82df4");
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === "set-cookie") parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};

},{"e086afba9f82df4":"5By4s"}],"lxXtv":[function(require,module,exports) {
"use strict";
var utils = require("aca551acb05ec5e9");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"aca551acb05ec5e9":"5By4s"}],"kjMy2":[function(require,module,exports) {
"use strict";
/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function Cancel(message) {
    this.message = message;
}
Cancel.prototype.toString = function toString() {
    return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

},{}],"a0VmF":[function(require,module,exports) {
"use strict";
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"b85oP":[function(require,module,exports) {
"use strict";
var utils = require("7e1d2759010031cc");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({}, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
    }
    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) return getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) return getMergedValue(undefined, config1[prop]);
    }
    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
        if (prop in config2) return getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) return getMergedValue(undefined, config1[prop]);
    }
    var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
    };
    utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
};

},{"7e1d2759010031cc":"5By4s"}],"9vgkY":[function(require,module,exports) {
"use strict";
var VERSION = require("5227046f6e4dcc06").version;
var validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach(function(type, i) {
    validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
var deprecatedWarnings = {};
/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
        if (validator === false) throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        if (version && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new TypeError("options must be an object");
    var keys = Object.keys(options);
    var i = keys.length;
    while(i-- > 0){
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
            var value = options[opt];
            var result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new TypeError("option " + opt + " must be " + result);
            continue;
        }
        if (allowUnknown !== true) throw Error("Unknown option " + opt);
    }
}
module.exports = {
    assertOptions: assertOptions,
    validators: validators
};

},{"5227046f6e4dcc06":"h29L9"}],"h29L9":[function(require,module,exports) {
module.exports = {
    "version": "0.25.0"
};

},{}],"45wzn":[function(require,module,exports) {
"use strict";
var Cancel = require("37e2102701c4d703");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    // eslint-disable-next-line func-names
    this.promise.then(function(cancel) {
        if (!token._listeners) return;
        var i;
        var l = token._listeners.length;
        for(i = 0; i < l; i++)token._listeners[i](cancel);
        token._listeners = null;
    });
    // eslint-disable-next-line func-names
    this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
            token.subscribe(resolve);
            _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
            token.unsubscribe(_resolve);
        };
        return promise;
    };
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Subscribe to the cancel signal
 */ CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
        listener(this.reason);
        return;
    }
    if (this._listeners) this._listeners.push(listener);
    else this._listeners = [
        listener
    ];
};
/**
 * Unsubscribe from the cancel signal
 */ CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) return;
    var index = this._listeners.indexOf(listener);
    if (index !== -1) this._listeners.splice(index, 1);
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"37e2102701c4d703":"kjMy2"}],"dyQ8N":[function(require,module,exports) {
"use strict";
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"eyiLq":[function(require,module,exports) {
"use strict";
var utils = require("cc63016198d5af74");
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return utils.isObject(payload) && payload.isAxiosError === true;
};

},{"cc63016198d5af74":"5By4s"}],"cFYPB":[function(require,module,exports) {
var process = require("ddb8ce3d6c003d68");
var Buffer = require("754a27933394d3ef").Buffer;
var parse = require("e0a28ca936ad4ef8").parse;
var events = require("6b3c628aa1df9254");
var https = require("2d49eb1e9623857f");
var http = require("a3100830418efc24");
var util = require("255a33570416503a");
var httpsOptions = [
    "pfx",
    "key",
    "passphrase",
    "cert",
    "ca",
    "ciphers",
    "rejectUnauthorized",
    "secureProtocol",
    "servername",
    "checkServerIdentity"
];
var bom = [
    239,
    187,
    191
];
var colon = 58;
var space = 32;
var lineFeed = 10;
var carriageReturn = 13;
function hasBom(buf) {
    return bom.every(function(charCode, index) {
        return buf[index] === charCode;
    });
}
/**
 * Creates a new EventSource object
 *
 * @param {String} url the URL to which to connect
 * @param {Object} [eventSourceInitDict] extra init params. See README for details.
 * @api public
 **/ function EventSource(url, eventSourceInitDict) {
    var readyState = EventSource.CONNECTING;
    var headers = eventSourceInitDict && eventSourceInitDict.headers;
    var hasNewOrigin = false;
    Object.defineProperty(this, "readyState", {
        get: function() {
            return readyState;
        }
    });
    Object.defineProperty(this, "url", {
        get: function() {
            return url;
        }
    });
    var self = this;
    self.reconnectInterval = 1000;
    self.connectionInProgress = false;
    function onConnectionClosed(message) {
        if (readyState === EventSource.CLOSED) return;
        readyState = EventSource.CONNECTING;
        _emit("error", new Event("error", {
            message: message
        }));
        // The url may have been changed by a temporary redirect. If that's the case,
        // revert it now, and flag that we are no longer pointing to a new origin
        if (reconnectUrl) {
            url = reconnectUrl;
            reconnectUrl = null;
            hasNewOrigin = false;
        }
        setTimeout(function() {
            if (readyState !== EventSource.CONNECTING || self.connectionInProgress) return;
            self.connectionInProgress = true;
            connect();
        }, self.reconnectInterval);
    }
    var req;
    var lastEventId = "";
    if (headers && headers["Last-Event-ID"]) {
        lastEventId = headers["Last-Event-ID"];
        delete headers["Last-Event-ID"];
    }
    var discardTrailingNewline = false;
    var data = "";
    var eventName = "";
    var reconnectUrl = null;
    function connect() {
        var options = parse(url);
        var isSecure = options.protocol === "https:";
        options.headers = {
            "Cache-Control": "no-cache",
            "Accept": "text/event-stream"
        };
        if (lastEventId) options.headers["Last-Event-ID"] = lastEventId;
        if (headers) {
            var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers;
            for(var i in reqHeaders){
                var header = reqHeaders[i];
                if (header) options.headers[i] = header;
            }
        }
        // Legacy: this should be specified as `eventSourceInitDict.https.rejectUnauthorized`,
        // but for now exists as a backwards-compatibility layer
        options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized);
        if (eventSourceInitDict && eventSourceInitDict.createConnection !== undefined) options.createConnection = eventSourceInitDict.createConnection;
        // If specify http proxy, make the request to sent to the proxy server,
        // and include the original url in path and Host headers
        var useProxy = eventSourceInitDict && eventSourceInitDict.proxy;
        if (useProxy) {
            var proxy = parse(eventSourceInitDict.proxy);
            isSecure = proxy.protocol === "https:";
            options.protocol = isSecure ? "https:" : "http:";
            options.path = url;
            options.headers.Host = options.host;
            options.hostname = proxy.hostname;
            options.host = proxy.host;
            options.port = proxy.port;
        }
        // If https options are specified, merge them into the request options
        if (eventSourceInitDict && eventSourceInitDict.https) for(var optName in eventSourceInitDict.https){
            if (httpsOptions.indexOf(optName) === -1) continue;
            var option = eventSourceInitDict.https[optName];
            if (option !== undefined) options[optName] = option;
        }
        // Pass this on to the XHR
        if (eventSourceInitDict && eventSourceInitDict.withCredentials !== undefined) options.withCredentials = eventSourceInitDict.withCredentials;
        req = (isSecure ? https : http).request(options, function(res) {
            self.connectionInProgress = false;
            // Handle HTTP errors
            if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {
                _emit("error", new Event("error", {
                    status: res.statusCode,
                    message: res.statusMessage
                }));
                onConnectionClosed();
                return;
            }
            // Handle HTTP redirects
            if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {
                var location = res.headers.location;
                if (!location) {
                    // Server sent redirect response without Location header.
                    _emit("error", new Event("error", {
                        status: res.statusCode,
                        message: res.statusMessage
                    }));
                    return;
                }
                var prevOrigin = getOrigin(url);
                var nextOrigin = getOrigin(location);
                hasNewOrigin = prevOrigin !== nextOrigin;
                if (res.statusCode === 307) reconnectUrl = url;
                url = location;
                process.nextTick(connect);
                return;
            }
            if (res.statusCode !== 200) {
                _emit("error", new Event("error", {
                    status: res.statusCode,
                    message: res.statusMessage
                }));
                return self.close();
            }
            readyState = EventSource.OPEN;
            res.on("close", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                onConnectionClosed();
            });
            res.on("end", function() {
                res.removeAllListeners("close");
                res.removeAllListeners("end");
                onConnectionClosed();
            });
            _emit("open", new Event("open"));
            // text/event-stream parser adapted from webkit's
            // Source/WebCore/page/EventSource.cpp
            var isFirst = true;
            var buf;
            var startingPos = 0;
            var startingFieldLength = -1;
            res.on("data", function(chunk) {
                buf = buf ? Buffer.concat([
                    buf,
                    chunk
                ]) : chunk;
                if (isFirst && hasBom(buf)) buf = buf.slice(bom.length);
                isFirst = false;
                var pos = 0;
                var length = buf.length;
                while(pos < length){
                    if (discardTrailingNewline) {
                        if (buf[pos] === lineFeed) ++pos;
                        discardTrailingNewline = false;
                    }
                    var lineLength = -1;
                    var fieldLength = startingFieldLength;
                    var c;
                    for(var i = startingPos; lineLength < 0 && i < length; ++i){
                        c = buf[i];
                        if (c === colon) {
                            if (fieldLength < 0) fieldLength = i - pos;
                        } else if (c === carriageReturn) {
                            discardTrailingNewline = true;
                            lineLength = i - pos;
                        } else if (c === lineFeed) lineLength = i - pos;
                    }
                    if (lineLength < 0) {
                        startingPos = length - pos;
                        startingFieldLength = fieldLength;
                        break;
                    } else {
                        startingPos = 0;
                        startingFieldLength = -1;
                    }
                    parseEventStreamLine(buf, pos, fieldLength, lineLength);
                    pos += lineLength + 1;
                }
                if (pos === length) buf = void 0;
                else if (pos > 0) buf = buf.slice(pos);
            });
        });
        req.on("error", function(err) {
            self.connectionInProgress = false;
            onConnectionClosed(err.message);
        });
        if (req.setNoDelay) req.setNoDelay(true);
        req.end();
    }
    connect();
    function _emit() {
        if (self.listeners(arguments[0]).length > 0) self.emit.apply(self, arguments);
    }
    this._close = function() {
        if (readyState === EventSource.CLOSED) return;
        readyState = EventSource.CLOSED;
        if (req.abort) req.abort();
        if (req.xhr && req.xhr.abort) req.xhr.abort();
    };
    function parseEventStreamLine(buf, pos, fieldLength, lineLength) {
        if (lineLength === 0) {
            if (data.length > 0) {
                var type = eventName || "message";
                _emit(type, new MessageEvent(type, {
                    data: data.slice(0, -1),
                    lastEventId: lastEventId,
                    origin: getOrigin(url)
                }));
                data = "";
            }
            eventName = void 0;
        } else if (fieldLength > 0) {
            var noValue = fieldLength < 0;
            var step = 0;
            var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();
            if (noValue) step = lineLength;
            else if (buf[pos + fieldLength + 1] !== space) step = fieldLength + 1;
            else step = fieldLength + 2;
            pos += step;
            var valueLength = lineLength - step;
            var value = buf.slice(pos, pos + valueLength).toString();
            if (field === "data") data += value + "\n";
            else if (field === "event") eventName = value;
            else if (field === "id") lastEventId = value;
            else if (field === "retry") {
                var retry = parseInt(value, 10);
                if (!Number.isNaN(retry)) self.reconnectInterval = retry;
            }
        }
    }
}
module.exports = EventSource;
util.inherits(EventSource, events.EventEmitter);
EventSource.prototype.constructor = EventSource; // make stacktraces readable
[
    "open",
    "error",
    "message"
].forEach(function(method) {
    Object.defineProperty(EventSource.prototype, "on" + method, {
        /**
     * Returns the current listener
     *
     * @return {Mixed} the set function or undefined
     * @api private
     */ get: function get() {
            var listener = this.listeners(method)[0];
            return listener ? listener._listener ? listener._listener : listener : undefined;
        },
        /**
     * Start listening for events
     *
     * @param {Function} listener the listener
     * @return {Mixed} the set function or undefined
     * @api private
     */ set: function set(listener) {
            this.removeAllListeners(method);
            this.addEventListener(method, listener);
        }
    });
});
/**
 * Ready states
 */ Object.defineProperty(EventSource, "CONNECTING", {
    enumerable: true,
    value: 0
});
Object.defineProperty(EventSource, "OPEN", {
    enumerable: true,
    value: 1
});
Object.defineProperty(EventSource, "CLOSED", {
    enumerable: true,
    value: 2
});
EventSource.prototype.CONNECTING = 0;
EventSource.prototype.OPEN = 1;
EventSource.prototype.CLOSED = 2;
/**
 * Closes the connection, if one is made, and sets the readyState attribute to 2 (closed)
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close
 * @api public
 */ EventSource.prototype.close = function() {
    this._close();
};
/**
 * Emulates the W3C Browser based WebSocket interface using addEventListener.
 *
 * @param {String} type A string representing the event type to listen out for
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.addEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ EventSource.prototype.addEventListener = function addEventListener(type, listener) {
    if (typeof listener === "function") {
        // store a reference so we can return the original function again
        listener._listener = listener;
        this.on(type, listener);
    }
};
/**
 * Emulates the W3C Browser based WebSocket interface using dispatchEvent.
 *
 * @param {Event} event An event to be dispatched
 * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
 * @api public
 */ EventSource.prototype.dispatchEvent = function dispatchEvent(event) {
    if (!event.type) throw new Error("UNSPECIFIED_EVENT_TYPE_ERR");
    // if event is instance of an CustomEvent (or has 'details' property),
    // send the detail object as the payload for the event
    this.emit(event.type, event.detail);
};
/**
 * Emulates the W3C Browser based WebSocket interface using removeEventListener.
 *
 * @param {String} type A string representing the event type to remove
 * @param {Function} listener callback
 * @see https://developer.mozilla.org/en/DOM/element.removeEventListener
 * @see http://dev.w3.org/html5/websockets/#the-websocket-interface
 * @api public
 */ EventSource.prototype.removeEventListener = function removeEventListener(type, listener) {
    if (typeof listener === "function") {
        listener._listener = undefined;
        this.removeListener(type, listener);
    }
};
/**
 * W3C Event
 *
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event
 * @api private
 */ function Event(type, optionalProperties) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    if (optionalProperties) {
        for(var f in optionalProperties)if (optionalProperties.hasOwnProperty(f)) Object.defineProperty(this, f, {
            writable: false,
            value: optionalProperties[f],
            enumerable: true
        });
    }
}
/**
 * W3C MessageEvent
 *
 * @see http://www.w3.org/TR/webmessaging/#event-definitions
 * @api private
 */ function MessageEvent(type, eventInitDict) {
    Object.defineProperty(this, "type", {
        writable: false,
        value: type,
        enumerable: true
    });
    for(var f in eventInitDict)if (eventInitDict.hasOwnProperty(f)) Object.defineProperty(this, f, {
        writable: false,
        value: eventInitDict[f],
        enumerable: true
    });
}
/**
 * Returns a new object of headers that does not include any authorization and cookie headers
 *
 * @param {Object} headers An object of headers ({[headerName]: headerValue})
 * @return {Object} a new object of headers
 * @api private
 */ function removeUnsafeHeaders(headers) {
    var safe = {};
    for(var key in headers){
        if (/^(cookie|authorization)$/i.test(key)) continue;
        safe[key] = headers[key];
    }
    return safe;
}
/**
 * Transform an URL to a valid origin value.
 *
 * @param {String|Object} url URL to transform to it's origin.
 * @returns {String} The origin.
 * @api private
 */ function getOrigin(url) {
    if (typeof url === "string") url = parse(url);
    if (!url.protocol || !url.hostname) return "null";
    return (url.protocol + "//" + url.host).toLowerCase();
}

},{"ddb8ce3d6c003d68":"d5jf4","754a27933394d3ef":"fCgem","e0a28ca936ad4ef8":"7qjc7","6b3c628aa1df9254":"1VQLm","2d49eb1e9623857f":"djrPu","a3100830418efc24":"5y8Jo","255a33570416503a":"cxohQ"}],"7qjc7":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var punycode = require("5ee3cb25353fd998");
var util = require("736df06ed268d12d");
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;
function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [
    "'"
].concat(unwise), // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
    "javascript": true,
    "javascript:": true
}, // protocols that never have a hostname.
hostlessProtocol = {
    "javascript": true,
    "javascript:": true
}, // protocols that always contain a // bit.
slashedProtocol = {
    "http": true,
    "https": true,
    "ftp": true,
    "gopher": true,
    "file": true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
}, querystring = require("63c5e492aef7fe53");
function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && util.isObject(url) && url instanceof Url) return url;
    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!util.isString(url)) throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = querystring.parse(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            return this;
        }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < hostEndingChars.length; i++){
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf("@", hostEnd);
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < nonHostChars.length; i++){
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || "";
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = "/" + notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > hostnameMaxLen) this.hostname = "";
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        this.hostname = punycode.toASCII(this.hostname);
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") rest = "/" + rest;
        }
    }
    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for(var i = 0, l = autoEscape.length; i < l; i++){
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = querystring.parse(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = "";
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
    //to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (util.isString(obj)) obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
}
Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) host += ":" + this.port;
    }
    if (this.query && util.isObject(this.query) && Object.keys(this.query).length) query = querystring.stringify(this.query);
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) host = "";
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
    if (util.isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === "") {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
        }
        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) result.path = result.pathname = "/";
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (!util.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) result.path = "/" + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === ".") srcPath.splice(i, 1);
        else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--; up)srcPath.unshift("..");
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) srcPath.unshift("");
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") srcPath.push("");
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    // put the host back
    if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift("");
    if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
    } else result.pathname = srcPath.join("/");
    //to support request.http
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};

},{"5ee3cb25353fd998":"4SwIZ","736df06ed268d12d":"8nk0t","63c5e492aef7fe53":"7oCJH"}],"4SwIZ":[function(require,module,exports) {
var global = arguments[3];
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof global == "object" && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw new RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ "version": "1.4.1",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
        else // in Narwhal or RingoJS v0.7.0-
        for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else // in Rhino or a web browser
    root.punycode = punycode;
})(this);

},{}],"8nk0t":[function(require,module,exports) {
"use strict";
module.exports = {
    isString: function(arg) {
        return typeof arg === "string";
    },
    isObject: function(arg) {
        return typeof arg === "object" && arg !== null;
    },
    isNull: function(arg) {
        return arg === null;
    },
    isNullOrUndefined: function(arg) {
        return arg == null;
    }
};

},{}],"7oCJH":[function(require,module,exports) {
"use strict";
exports.decode = exports.parse = require("48c8502eca9d9da0");
exports.encode = exports.stringify = require("9e68ca215ebe768d");

},{"48c8502eca9d9da0":"3WtwQ","9e68ca215ebe768d":"i5gNM"}],"3WtwQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
    sep = sep || "&";
    eq = eq || "=";
    var obj = {};
    if (typeof qs !== "string" || qs.length === 0) return obj;
    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === "number") maxKeys = options.maxKeys;
    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) len = maxKeys;
    for(var i = 0; i < len; ++i){
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
        } else {
            kstr = x;
            vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) obj[k] = v;
        else if (isArray(obj[k])) obj[k].push(v);
        else obj[k] = [
            obj[k],
            v
        ];
    }
    return obj;
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};

},{}],"i5gNM":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var stringifyPrimitive = function(v) {
    switch(typeof v){
        case "string":
            return v;
        case "boolean":
            return v ? "true" : "false";
        case "number":
            return isFinite(v) ? v : "";
        default:
            return "";
    }
};
module.exports = function(obj, sep, eq, name) {
    sep = sep || "&";
    eq = eq || "=";
    if (obj === null) obj = undefined;
    if (typeof obj === "object") return map(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray(obj[k])) return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
        else return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
    }).join(sep);
    if (!name) return "";
    return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};
function map(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for(var i = 0; i < xs.length; i++)res.push(f(xs[i], i));
    return res;
}
var objectKeys = Object.keys || function(obj) {
    var res = [];
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    return res;
};

},{}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"djrPu":[function(require,module,exports) {
var http = require("84a2bccfe25ad4ea");
var url = require("9196ab379ef491b3");
var https = module.exports;
for(var key in http)if (http.hasOwnProperty(key)) https[key] = http[key];
https.request = function(params, cb) {
    params = validateParams(params);
    return http.request.call(this, params, cb);
};
https.get = function(params, cb) {
    params = validateParams(params);
    return http.get.call(this, params, cb);
};
function validateParams(params) {
    if (typeof params === "string") params = url.parse(params);
    if (!params.protocol) params.protocol = "https:";
    if (params.protocol !== "https:") throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
    return params;
}

},{"84a2bccfe25ad4ea":"5y8Jo","9196ab379ef491b3":"7qjc7"}],"5y8Jo":[function(require,module,exports) {
var global = arguments[3];
var ClientRequest = require("af6240eafc1d8d2a");
var response = require("11108e57e46e6140");
var extend = require("9afc9c679c911295");
var statusCodes = require("20405c177f665bbc");
var url = require("328877712e4a0aae");
var http = exports;
http.request = function(opts, cb) {
    if (typeof opts === "string") opts = url.parse(opts);
    else opts = extend(opts);
    // Normally, the page is loaded from http or https, so not specifying a protocol
    // will result in a (valid) protocol-relative url. However, this won't work if
    // the protocol is something else, like 'file:'
    var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";
    var protocol = opts.protocol || defaultProtocol;
    var host = opts.hostname || opts.host;
    var port = opts.port;
    var path = opts.path || "/";
    // Necessary for IPv6 addresses
    if (host && host.indexOf(":") !== -1) host = "[" + host + "]";
    // This may be a relative url. The browser should always be able to interpret it correctly.
    opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
    opts.method = (opts.method || "GET").toUpperCase();
    opts.headers = opts.headers || {};
    // Also valid opts.auth, opts.mode
    var req = new ClientRequest(opts);
    if (cb) req.on("response", cb);
    return req;
};
http.get = function get(opts, cb) {
    var req = http.request(opts, cb);
    req.end();
    return req;
};
http.ClientRequest = ClientRequest;
http.IncomingMessage = response.IncomingMessage;
http.Agent = function() {};
http.Agent.defaultMaxSockets = 4;
http.globalAgent = new http.Agent();
http.STATUS_CODES = statusCodes;
http.METHODS = [
    "CHECKOUT",
    "CONNECT",
    "COPY",
    "DELETE",
    "GET",
    "HEAD",
    "LOCK",
    "M-SEARCH",
    "MERGE",
    "MKACTIVITY",
    "MKCOL",
    "MOVE",
    "NOTIFY",
    "OPTIONS",
    "PATCH",
    "POST",
    "PROPFIND",
    "PROPPATCH",
    "PURGE",
    "PUT",
    "REPORT",
    "SEARCH",
    "SUBSCRIBE",
    "TRACE",
    "UNLOCK",
    "UNSUBSCRIBE"
];

},{"af6240eafc1d8d2a":"csW06","11108e57e46e6140":"47huq","9afc9c679c911295":"93zjj","20405c177f665bbc":"iqSVp","328877712e4a0aae":"7qjc7"}],"csW06":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("a33457621cd54a4f").Buffer;
var process = require("6bc40c2509d6ee92");
var capability = require("1d5d6ffe24ecf03e");
var inherits = require("c752cda8739a51a");
var response = require("9b8b29d9bd8b65c7");
var stream = require("1b098d7c1cd451c1");
var IncomingMessage = response.IncomingMessage;
var rStates = response.readyStates;
function decideMode(preferBinary, useFetch) {
    if (capability.fetch && useFetch) return "fetch";
    else if (capability.mozchunkedarraybuffer) return "moz-chunked-arraybuffer";
    else if (capability.msstream) return "ms-stream";
    else if (capability.arraybuffer && preferBinary) return "arraybuffer";
    else return "text";
}
var ClientRequest = module.exports = function(opts) {
    var self = this;
    stream.Writable.call(self);
    self._opts = opts;
    self._body = [];
    self._headers = {};
    if (opts.auth) self.setHeader("Authorization", "Basic " + Buffer.from(opts.auth).toString("base64"));
    Object.keys(opts.headers).forEach(function(name) {
        self.setHeader(name, opts.headers[name]);
    });
    var preferBinary;
    var useFetch = true;
    if (opts.mode === "disable-fetch" || "requestTimeout" in opts && !capability.abortController) {
        // If the use of XHR should be preferred. Not typically needed.
        useFetch = false;
        preferBinary = true;
    } else if (opts.mode === "prefer-streaming") // If streaming is a high priority but binary compatibility and
    // the accuracy of the 'content-type' header aren't
    preferBinary = false;
    else if (opts.mode === "allow-wrong-content-type") // If streaming is more important than preserving the 'content-type' header
    preferBinary = !capability.overrideMimeType;
    else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") // Use binary if text streaming may corrupt data or the content-type header, or for speed
    preferBinary = true;
    else throw new Error("Invalid value for opts.mode");
    self._mode = decideMode(preferBinary, useFetch);
    self._fetchTimer = null;
    self._socketTimeout = null;
    self._socketTimer = null;
    self.on("finish", function() {
        self._onFinish();
    });
};
inherits(ClientRequest, stream.Writable);
ClientRequest.prototype.setHeader = function(name, value) {
    var self = this;
    var lowerName = name.toLowerCase();
    // This check is not necessary, but it prevents warnings from browsers about setting unsafe
    // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
    // http-browserify did it, so I will too.
    if (unsafeHeaders.indexOf(lowerName) !== -1) return;
    self._headers[lowerName] = {
        name: name,
        value: value
    };
};
ClientRequest.prototype.getHeader = function(name) {
    var header = this._headers[name.toLowerCase()];
    if (header) return header.value;
    return null;
};
ClientRequest.prototype.removeHeader = function(name) {
    var self = this;
    delete self._headers[name.toLowerCase()];
};
ClientRequest.prototype._onFinish = function() {
    var self = this;
    if (self._destroyed) return;
    var opts = self._opts;
    if ("timeout" in opts && opts.timeout !== 0) self.setTimeout(opts.timeout);
    var headersObj = self._headers;
    var body = null;
    if (opts.method !== "GET" && opts.method !== "HEAD") body = new Blob(self._body, {
        type: (headersObj["content-type"] || {}).value || ""
    });
    // create flattened list of headers
    var headersList = [];
    Object.keys(headersObj).forEach(function(keyName) {
        var name = headersObj[keyName].name;
        var value = headersObj[keyName].value;
        if (Array.isArray(value)) value.forEach(function(v) {
            headersList.push([
                name,
                v
            ]);
        });
        else headersList.push([
            name,
            value
        ]);
    });
    if (self._mode === "fetch") {
        var signal = null;
        if (capability.abortController) {
            var controller = new AbortController();
            signal = controller.signal;
            self._fetchAbortController = controller;
            if ("requestTimeout" in opts && opts.requestTimeout !== 0) self._fetchTimer = global.setTimeout(function() {
                self.emit("requestTimeout");
                if (self._fetchAbortController) self._fetchAbortController.abort();
            }, opts.requestTimeout);
        }
        global.fetch(self._opts.url, {
            method: self._opts.method,
            headers: headersList,
            body: body || undefined,
            mode: "cors",
            credentials: opts.withCredentials ? "include" : "same-origin",
            signal: signal
        }).then(function(response) {
            self._fetchResponse = response;
            self._resetTimers(false);
            self._connect();
        }, function(reason) {
            self._resetTimers(true);
            if (!self._destroyed) self.emit("error", reason);
        });
    } else {
        var xhr = self._xhr = new global.XMLHttpRequest();
        try {
            xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
            process.nextTick(function() {
                self.emit("error", err);
            });
            return;
        }
        // Can't set responseType on really old browsers
        if ("responseType" in xhr) xhr.responseType = self._mode;
        if ("withCredentials" in xhr) xhr.withCredentials = !!opts.withCredentials;
        if (self._mode === "text" && "overrideMimeType" in xhr) xhr.overrideMimeType("text/plain; charset=x-user-defined");
        if ("requestTimeout" in opts) {
            xhr.timeout = opts.requestTimeout;
            xhr.ontimeout = function() {
                self.emit("requestTimeout");
            };
        }
        headersList.forEach(function(header) {
            xhr.setRequestHeader(header[0], header[1]);
        });
        self._response = null;
        xhr.onreadystatechange = function() {
            switch(xhr.readyState){
                case rStates.LOADING:
                case rStates.DONE:
                    self._onXHRProgress();
                    break;
            }
        };
        // Necessary for streaming in Firefox, since xhr.response is ONLY defined
        // in onprogress, not in onreadystatechange with xhr.readyState = 3
        if (self._mode === "moz-chunked-arraybuffer") xhr.onprogress = function() {
            self._onXHRProgress();
        };
        xhr.onerror = function() {
            if (self._destroyed) return;
            self._resetTimers(true);
            self.emit("error", new Error("XHR error"));
        };
        try {
            xhr.send(body);
        } catch (err) {
            process.nextTick(function() {
                self.emit("error", err);
            });
            return;
        }
    }
};
/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */ function statusValid(xhr) {
    try {
        var status = xhr.status;
        return status !== null && status !== 0;
    } catch (e) {
        return false;
    }
}
ClientRequest.prototype._onXHRProgress = function() {
    var self = this;
    self._resetTimers(false);
    if (!statusValid(self._xhr) || self._destroyed) return;
    if (!self._response) self._connect();
    self._response._onXHRProgress(self._resetTimers.bind(self));
};
ClientRequest.prototype._connect = function() {
    var self = this;
    if (self._destroyed) return;
    self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self));
    self._response.on("error", function(err) {
        self.emit("error", err);
    });
    self.emit("response", self._response);
};
ClientRequest.prototype._write = function(chunk, encoding, cb) {
    var self = this;
    self._body.push(chunk);
    cb();
};
ClientRequest.prototype._resetTimers = function(done) {
    var self = this;
    global.clearTimeout(self._socketTimer);
    self._socketTimer = null;
    if (done) {
        global.clearTimeout(self._fetchTimer);
        self._fetchTimer = null;
    } else if (self._socketTimeout) self._socketTimer = global.setTimeout(function() {
        self.emit("timeout");
    }, self._socketTimeout);
};
ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function(err) {
    var self = this;
    self._destroyed = true;
    self._resetTimers(true);
    if (self._response) self._response._destroyed = true;
    if (self._xhr) self._xhr.abort();
    else if (self._fetchAbortController) self._fetchAbortController.abort();
    if (err) self.emit("error", err);
};
ClientRequest.prototype.end = function(data, encoding, cb) {
    var self = this;
    if (typeof data === "function") {
        cb = data;
        data = undefined;
    }
    stream.Writable.prototype.end.call(self, data, encoding, cb);
};
ClientRequest.prototype.setTimeout = function(timeout, cb) {
    var self = this;
    if (cb) self.once("timeout", cb);
    self._socketTimeout = timeout;
    self._resetTimers(false);
};
ClientRequest.prototype.flushHeaders = function() {};
ClientRequest.prototype.setNoDelay = function() {};
ClientRequest.prototype.setSocketKeepAlive = function() {};
// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "date",
    "dnt",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "via"
];

},{"a33457621cd54a4f":"fCgem","6bc40c2509d6ee92":"d5jf4","1d5d6ffe24ecf03e":"jih7t","c752cda8739a51a":"bRL3M","9b8b29d9bd8b65c7":"47huq","1b098d7c1cd451c1":"jXNWE"}],"jih7t":[function(require,module,exports) {
var global = arguments[3];
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);
exports.writableStream = isFunction(global.WritableStream);
exports.abortController = isFunction(global.AbortController);
// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr;
function getXHR() {
    // Cache the xhr value
    if (xhr !== undefined) return xhr;
    if (global.XMLHttpRequest) {
        xhr = new global.XMLHttpRequest();
        // If XDomainRequest is available (ie only, where xhr might not work
        // cross domain), use the page location. Otherwise use example.com
        // Note: this doesn't actually make an http request.
        try {
            xhr.open("GET", global.XDomainRequest ? "/" : "https://example.com");
        } catch (e) {
            xhr = null;
        }
    } else // Service workers don't have XHR
    xhr = null;
    return xhr;
}
function checkTypeSupport(type) {
    var xhr = getXHR();
    if (!xhr) return false;
    try {
        xhr.responseType = type;
        return xhr.responseType === type;
    } catch (e) {}
    return false;
}
// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || checkTypeSupport("arraybuffer");
// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && checkTypeSupport("ms-stream");
exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport("moz-chunked-arraybuffer");
// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);
function isFunction(value) {
    return typeof value === "function";
}
xhr = null // Help gc
;

},{}],"47huq":[function(require,module,exports) {
var process = require("309cdfa6578f6876");
var Buffer = require("ce6f7f8308f829f7").Buffer;
var global = arguments[3];
var capability = require("369ddbcf0e03b2f9");
var inherits = require("63b74898b72702e2");
var stream = require("c507cc4ad0cc4ab6");
var rStates = exports.readyStates = {
    UNSENT: 0,
    OPENED: 1,
    HEADERS_RECEIVED: 2,
    LOADING: 3,
    DONE: 4
};
var IncomingMessage = exports.IncomingMessage = function(xhr, response, mode, resetTimers) {
    var self = this;
    stream.Readable.call(self);
    self._mode = mode;
    self.headers = {};
    self.rawHeaders = [];
    self.trailers = {};
    self.rawTrailers = [];
    // Fake the 'close' event, but only once 'end' fires
    self.on("end", function() {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        process.nextTick(function() {
            self.emit("close");
        });
    });
    if (mode === "fetch") {
        self._fetchResponse = response;
        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
        response.headers.forEach(function(header, key) {
            self.headers[key.toLowerCase()] = header;
            self.rawHeaders.push(key, header);
        });
        if (capability.writableStream) {
            var writable = new WritableStream({
                write: function(chunk) {
                    resetTimers(false);
                    return new Promise(function(resolve, reject) {
                        if (self._destroyed) reject();
                        else if (self.push(Buffer.from(chunk))) resolve();
                        else self._resumeFetch = resolve;
                    });
                },
                close: function() {
                    resetTimers(true);
                    if (!self._destroyed) self.push(null);
                },
                abort: function(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit("error", err);
                }
            });
            try {
                response.body.pipeTo(writable).catch(function(err) {
                    resetTimers(true);
                    if (!self._destroyed) self.emit("error", err);
                });
                return;
            } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
        }
        // fallback for when writableStream or pipeTo aren't available
        var reader = response.body.getReader();
        function read() {
            reader.read().then(function(result) {
                if (self._destroyed) return;
                resetTimers(result.done);
                if (result.done) {
                    self.push(null);
                    return;
                }
                self.push(Buffer.from(result.value));
                read();
            }).catch(function(err) {
                resetTimers(true);
                if (!self._destroyed) self.emit("error", err);
            });
        }
        read();
    } else {
        self._xhr = xhr;
        self._pos = 0;
        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
            var matches = header.match(/^([^:]+):\s*(.*)/);
            if (matches) {
                var key = matches[1].toLowerCase();
                if (key === "set-cookie") {
                    if (self.headers[key] === undefined) self.headers[key] = [];
                    self.headers[key].push(matches[2]);
                } else if (self.headers[key] !== undefined) self.headers[key] += ", " + matches[2];
                else self.headers[key] = matches[2];
                self.rawHeaders.push(matches[1], matches[2]);
            }
        });
        self._charset = "x-user-defined";
        if (!capability.overrideMimeType) {
            var mimeType = self.rawHeaders["mime-type"];
            if (mimeType) {
                var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
                if (charsetMatch) self._charset = charsetMatch[1].toLowerCase();
            }
            if (!self._charset) self._charset = "utf-8" // best guess
            ;
        }
    }
};
inherits(IncomingMessage, stream.Readable);
IncomingMessage.prototype._read = function() {
    var self = this;
    var resolve = self._resumeFetch;
    if (resolve) {
        self._resumeFetch = null;
        resolve();
    }
};
IncomingMessage.prototype._onXHRProgress = function(resetTimers) {
    var self = this;
    var xhr = self._xhr;
    var response = null;
    switch(self._mode){
        case "text":
            response = xhr.responseText;
            if (response.length > self._pos) {
                var newData = response.substr(self._pos);
                if (self._charset === "x-user-defined") {
                    var buffer = Buffer.alloc(newData.length);
                    for(var i = 0; i < newData.length; i++)buffer[i] = newData.charCodeAt(i) & 0xff;
                    self.push(buffer);
                } else self.push(newData, self._charset);
                self._pos = response.length;
            }
            break;
        case "arraybuffer":
            if (xhr.readyState !== rStates.DONE || !xhr.response) break;
            response = xhr.response;
            self.push(Buffer.from(new Uint8Array(response)));
            break;
        case "moz-chunked-arraybuffer":
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING || !response) break;
            self.push(Buffer.from(new Uint8Array(response)));
            break;
        case "ms-stream":
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING) break;
            var reader = new global.MSStreamReader();
            reader.onprogress = function() {
                if (reader.result.byteLength > self._pos) {
                    self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))));
                    self._pos = reader.result.byteLength;
                }
            };
            reader.onload = function() {
                resetTimers(true);
                self.push(null);
            };
            // reader.onerror = ??? // TODO: this
            reader.readAsArrayBuffer(response);
            break;
    }
    // The ms-stream case handles end separately in reader.onload()
    if (self._xhr.readyState === rStates.DONE && self._mode !== "ms-stream") {
        resetTimers(true);
        self.push(null);
    }
};

},{"309cdfa6578f6876":"d5jf4","ce6f7f8308f829f7":"fCgem","369ddbcf0e03b2f9":"jih7t","63b74898b72702e2":"bRL3M","c507cc4ad0cc4ab6":"jXNWE"}],"jXNWE":[function(require,module,exports) {
exports = module.exports = require("11098721cd86045b");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("ae381cb8ea094eea");
exports.Duplex = require("b3ec3f8d232fba51");
exports.Transform = require("25d5c0ce2ea33317");
exports.PassThrough = require("1b00d1fe82589507");
exports.finished = require("2bdf4e635663d8cb");
exports.pipeline = require("234c2d16f0dec60c");

},{"11098721cd86045b":"6NdbQ","ae381cb8ea094eea":"gTkcq","b3ec3f8d232fba51":"kKNA3","25d5c0ce2ea33317":"ba8Mr","1b00d1fe82589507":"2xP98","2bdf4e635663d8cb":"aOMy2","234c2d16f0dec60c":"fyp4t"}],"6NdbQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var global = arguments[3];
var process = require("1d408e4b7c4c9302");
"use strict";
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("7aff77b771b8f82b").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("2003709f39315aea");
/*</replacement>*/ var Buffer = require("453cd3131c378797").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("33812c79491221a2");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("3a0a850c5101ce16");
var destroyImpl = require("c54e6e1bbf14494a");
var _require = require("e90408d6b106d7ad"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("cf9576288f4df3e6").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("25ae768993bf7ba1")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("beddf7e12052adea");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("6c31abec30133196").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("beddf7e12052adea");
    if (!(this instanceof Readable)) return new Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("6c31abec30133196").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function nReadingNextTick(self1) {
    debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("3093a47e7b175c23");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("b2c3477cdec3940d");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"1d408e4b7c4c9302":"d5jf4","7aff77b771b8f82b":"1VQLm","2003709f39315aea":"60BLS","453cd3131c378797":"fCgem","33812c79491221a2":"jhUEF","3a0a850c5101ce16":"hf3P2","c54e6e1bbf14494a":"YI8DF","e90408d6b106d7ad":"61BRN","cf9576288f4df3e6":"aJlwj","25ae768993bf7ba1":"bRL3M","beddf7e12052adea":"kKNA3","6c31abec30133196":"3vmkr","3093a47e7b175c23":"k019Y","b2c3477cdec3940d":"ak0YH"}],"60BLS":[function(require,module,exports) {
module.exports = require("6961ae93fb6facbc").EventEmitter;

},{"6961ae93fb6facbc":"1VQLm"}],"hf3P2":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var _require = require("102b27ee60b9371f"), Buffer = _require.Buffer;
var _require2 = require("a2a57f63693043e1"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"102b27ee60b9371f":"fCgem","a2a57f63693043e1":"jhUEF"}],"YI8DF":[function(require,module,exports) {
var process = require("3d2b745c90dd2596");
"use strict";
// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"3d2b745c90dd2596":"d5jf4"}],"61BRN":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("dd5d2bb3db55b5e8").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"dd5d2bb3db55b5e8":"aJlwj"}],"aJlwj":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"kKNA3":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
var process = require("8c4c098107fc85d0");
"use strict";
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("2b7c35474a08432c");
var Writable = require("538533be5f234123");
require("f8d4fc90973a1e84")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"8c4c098107fc85d0":"d5jf4","2b7c35474a08432c":"6NdbQ","538533be5f234123":"gTkcq","f8d4fc90973a1e84":"bRL3M"}],"gTkcq":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
var global = arguments[3];
var process = require("f6594d89cac55e92");
"use strict";
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("3bd89c46e672c3c3")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("2f2c09af625cafe6");
/*</replacement>*/ var Buffer = require("3e84eaec0290f897").Buffer;
var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("1cf1f052efc4dcac");
var _require = require("9df75264bed7e79e"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("96fe2b91f2af54d7").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("1526d6039e2c620e")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("d55ec0d72efc0034");
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("d55ec0d72efc0034");
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"f6594d89cac55e92":"d5jf4","3bd89c46e672c3c3":"j92NQ","2f2c09af625cafe6":"60BLS","3e84eaec0290f897":"fCgem","1cf1f052efc4dcac":"YI8DF","9df75264bed7e79e":"61BRN","96fe2b91f2af54d7":"aJlwj","1526d6039e2c620e":"bRL3M","d55ec0d72efc0034":"kKNA3"}],"j92NQ":[function(require,module,exports) {
/**
 * Module exports.
 */ var global = arguments[3];
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("2668efe853d0291d").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"2668efe853d0291d":"eW7r9"}],"k019Y":[function(require,module,exports) {
var process = require("1340c2b4bf219a38");
"use strict";
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var finished = require("b60fbe78c6e58a64");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"1340c2b4bf219a38":"d5jf4","b60fbe78c6e58a64":"aOMy2"}],"aOMy2":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("4a5ffbeee2998443").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"4a5ffbeee2998443":"aJlwj"}],"ak0YH":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"ba8Mr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("bede7581957fc95d").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("c09c25683c8a66fb");
require("e3284f2b53fccdc6")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"bede7581957fc95d":"aJlwj","c09c25683c8a66fb":"kKNA3","e3284f2b53fccdc6":"bRL3M"}],"2xP98":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("f585d377fae27fd3");
require("e0c82a679768150c")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"f585d377fae27fd3":"ba8Mr","e0c82a679768150c":"bRL3M"}],"fyp4t":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("9e84f79046d402cb").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("2c52bb78bf92a6e0");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"9e84f79046d402cb":"aJlwj","2c52bb78bf92a6e0":"aOMy2"}],"93zjj":[function(require,module,exports) {
module.exports = extend;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function extend() {
    var target = {};
    for(var i = 0; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source)if (hasOwnProperty.call(source, key)) target[key] = source[key];
    }
    return target;
}

},{}],"iqSVp":[function(require,module,exports) {
module.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
};

},{}],"cxohQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var process = require("eb28dcbf8a8ddc0f");
var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
    if (!isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
        return objects.join(" ");
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
        if (x === "%%") return "%";
        if (i >= len) return x;
        switch(x){
            case "%s":
                return String(args[i++]);
            case "%d":
                return Number(args[i++]);
            case "%j":
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return "[Circular]";
                }
            default:
                return x;
        }
    });
    for(var x = args[i]; i < len; x = args[++i])if (isNull(x) || !isObject(x)) str += " " + x;
    else str += " " + inspect(x);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
    if (typeof process !== "undefined" && process.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof process === "undefined") return function() {
        return exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (process.throwDeprecation) throw new Error(msg);
            else if (process.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var debugs = {};
var debugEnvRegex = /^$/;
var debugEnv;
exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function() {
                var msg = exports.format.apply(exports, arguments);
                console.error("%s %d: %s", set, pid, msg);
            };
        } else debugs[set] = function() {};
    }
    return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    exports._extend(ctx, opts);
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
    "bold": [
        1,
        22
    ],
    "italic": [
        3,
        23
    ],
    "underline": [
        4,
        24
    ],
    "inverse": [
        7,
        27
    ],
    "white": [
        37,
        39
    ],
    "grey": [
        90,
        39
    ],
    "black": [
        30,
        39
    ],
    "blue": [
        34,
        39
    ],
    "cyan": [
        36,
        39
    ],
    "green": [
        32,
        39
    ],
    "magenta": [
        35,
        39
    ],
    "red": [
        31,
        39
    ],
    "yellow": [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
    "special": "cyan",
    "number": "yellow",
    "boolean": "yellow",
    "undefined": "grey",
    "null": "bold",
    "string": "green",
    "date": "magenta",
    // "name": intentionally not styling
    "regexp": "red"
};
function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];
    if (style) return "\x1b[" + inspect.colors[style][0] + "m" + str + "\x1b[" + inspect.colors[style][1] + "m";
    else return str;
}
function stylizeNoColor(str, styleType) {
    return str;
}
function arrayToHash(array) {
    var hash = {};
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
        if (isError(value)) return formatError(value);
    }
    var base = "", array = false, braces = [
        "{",
        "}"
    ];
    // Make Array say that they are Array
    if (isArray(value)) {
        array = true;
        braces = [
            "[",
            "]"
        ];
    }
    // Make functions say that they are functions
    if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
    }
    // Make RegExps say that they are RegExps
    if (isRegExp(value)) base = " " + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if (isDate(value)) base = " " + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if (isError(value)) base = " " + formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        else return ctx.stylize("[Object]", "special");
    }
    ctx.seen.push(value);
    var output;
    if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
}
function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
    if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
    }
    if (isNumber(value)) return ctx.stylize("" + value, "number");
    if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
    // For some reason typeof null is "object", so special case here.
    if (isNull(value)) return ctx.stylize("null", "null");
}
function formatError(value) {
    return "[" + Error.prototype.toString.call(value) + "]";
}
function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push("");
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize("[Getter/Setter]", "special");
        else str = ctx.stylize("[Getter]", "special");
    } else if (desc.set) str = ctx.stylize("[Setter]", "special");
    if (!hasOwnProperty(visibleKeys, key)) name = "[" + key + "]";
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
            else str = formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf("\n") > -1) {
                if (array) str = str.split("\n").map(function(line) {
                    return "  " + line;
                }).join("\n").slice(2);
                else str = "\n" + str.split("\n").map(function(line) {
                    return "   " + line;
                }).join("\n");
            }
        } else str = ctx.stylize("[Circular]", "special");
    }
    if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.slice(1, -1);
            name = ctx.stylize(name, "name");
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
        }
    }
    return name + ": " + str;
}
function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
    return braces[0] + base + " " + output.join(", ") + " " + braces[1];
}
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = require("4eee2d8508f068b");
function isArray(ar) {
    return Array.isArray(ar);
}
exports.isArray = isArray;
function isBoolean(arg) {
    return typeof arg === "boolean";
}
exports.isBoolean = isBoolean;
function isNull(arg) {
    return arg === null;
}
exports.isNull = isNull;
function isNullOrUndefined(arg) {
    return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function isNumber(arg) {
    return typeof arg === "number";
}
exports.isNumber = isNumber;
function isString(arg) {
    return typeof arg === "string";
}
exports.isString = isString;
function isSymbol(arg) {
    return typeof arg === "symbol";
}
exports.isSymbol = isSymbol;
function isUndefined(arg) {
    return arg === void 0;
}
exports.isUndefined = isUndefined;
function isRegExp(re) {
    return isObject(re) && objectToString(re) === "[object RegExp]";
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;
function isObject(arg) {
    return typeof arg === "object" && arg !== null;
}
exports.isObject = isObject;
function isDate(d) {
    return isObject(d) && objectToString(d) === "[object Date]";
}
exports.isDate = isDate;
exports.types.isDate = isDate;
function isError(e) {
    return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;
function isFunction(arg) {
    return typeof arg === "function";
}
exports.isFunction = isFunction;
function isPrimitive(arg) {
    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
    typeof arg === "undefined";
}
exports.isPrimitive = isPrimitive;
exports.isBuffer = require("15e9afa7d840bbc4");
function objectToString(o) {
    return Object.prototype.toString.call(o);
}
function pad(n) {
    return n < 10 ? "0" + n.toString(10) : n.toString(10);
}
var months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
// 26 Feb 16:19:34
function timestamp() {
    var d = new Date();
    var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
    ].join(":");
    return [
        d.getDate(),
        months[d.getMonth()],
        time
    ].join(" ");
}
// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
    console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports.inherits = require("7ee1ffc2618a7090");
exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;
exports.promisify = function promisify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
};
exports.promisify.custom = kCustomPromisifiedSymbol;
function callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function callbackify(original) {
    if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") throw new TypeError("The last argument must be of type Function");
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            process.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
    return callbackified;
}
exports.callbackify = callbackify;

},{"eb28dcbf8a8ddc0f":"d5jf4","4eee2d8508f068b":"bnQvf","15e9afa7d840bbc4":"inNNy","7ee1ffc2618a7090":"bRL3M"}],"bnQvf":[function(require,module,exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
"use strict";
var isArgumentsObject = require("8f5347b42b6e2a55");
var isGeneratorFunction = require("8a0defb236755a33");
var whichTypedArray = require("669d7c58f2755a1e");
var isTypedArray = require("47058d8b651ec118");
function uncurryThis(f) {
    return f.call.bind(f);
}
var BigIntSupported = typeof BigInt !== "undefined";
var SymbolSupported = typeof Symbol !== "undefined";
var ObjectToString = uncurryThis(Object.prototype.toString);
var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);
if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
function checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== "object") return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
    return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
}
exports.isPromise = isPromise;
function isArrayBufferView(value) {
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return isTypedArray(value) || isDataView(value);
}
exports.isArrayBufferView = isArrayBufferView;
function isUint8Array(value) {
    return whichTypedArray(value) === "Uint8Array";
}
exports.isUint8Array = isUint8Array;
function isUint8ClampedArray(value) {
    return whichTypedArray(value) === "Uint8ClampedArray";
}
exports.isUint8ClampedArray = isUint8ClampedArray;
function isUint16Array(value) {
    return whichTypedArray(value) === "Uint16Array";
}
exports.isUint16Array = isUint16Array;
function isUint32Array(value) {
    return whichTypedArray(value) === "Uint32Array";
}
exports.isUint32Array = isUint32Array;
function isInt8Array(value) {
    return whichTypedArray(value) === "Int8Array";
}
exports.isInt8Array = isInt8Array;
function isInt16Array(value) {
    return whichTypedArray(value) === "Int16Array";
}
exports.isInt16Array = isInt16Array;
function isInt32Array(value) {
    return whichTypedArray(value) === "Int32Array";
}
exports.isInt32Array = isInt32Array;
function isFloat32Array(value) {
    return whichTypedArray(value) === "Float32Array";
}
exports.isFloat32Array = isFloat32Array;
function isFloat64Array(value) {
    return whichTypedArray(value) === "Float64Array";
}
exports.isFloat64Array = isFloat64Array;
function isBigInt64Array(value) {
    return whichTypedArray(value) === "BigInt64Array";
}
exports.isBigInt64Array = isBigInt64Array;
function isBigUint64Array(value) {
    return whichTypedArray(value) === "BigUint64Array";
}
exports.isBigUint64Array = isBigUint64Array;
function isMapToString(value) {
    return ObjectToString(value) === "[object Map]";
}
isMapToString.working = typeof Map !== "undefined" && isMapToString(new Map());
function isMap(value) {
    if (typeof Map === "undefined") return false;
    return isMapToString.working ? isMapToString(value) : value instanceof Map;
}
exports.isMap = isMap;
function isSetToString(value) {
    return ObjectToString(value) === "[object Set]";
}
isSetToString.working = typeof Set !== "undefined" && isSetToString(new Set());
function isSet(value) {
    if (typeof Set === "undefined") return false;
    return isSetToString.working ? isSetToString(value) : value instanceof Set;
}
exports.isSet = isSet;
function isWeakMapToString(value) {
    return ObjectToString(value) === "[object WeakMap]";
}
isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(new WeakMap());
function isWeakMap(value) {
    if (typeof WeakMap === "undefined") return false;
    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;
function isWeakSetToString(value) {
    return ObjectToString(value) === "[object WeakSet]";
}
isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(new WeakSet());
function isWeakSet(value) {
    return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;
function isArrayBufferToString(value) {
    return ObjectToString(value) === "[object ArrayBuffer]";
}
isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
function isArrayBuffer(value) {
    if (typeof ArrayBuffer === "undefined") return false;
    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;
function isDataViewToString(value) {
    return ObjectToString(value) === "[object DataView]";
}
isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function isDataView(value) {
    if (typeof DataView === "undefined") return false;
    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
}
exports.isDataView = isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
    return ObjectToString(value) === "[object SharedArrayBuffer]";
}
function isSharedArrayBuffer(value) {
    if (typeof SharedArrayBufferCopy === "undefined") return false;
    if (typeof isSharedArrayBufferToString.working === "undefined") isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;
function isAsyncFunction(value) {
    return ObjectToString(value) === "[object AsyncFunction]";
}
exports.isAsyncFunction = isAsyncFunction;
function isMapIterator(value) {
    return ObjectToString(value) === "[object Map Iterator]";
}
exports.isMapIterator = isMapIterator;
function isSetIterator(value) {
    return ObjectToString(value) === "[object Set Iterator]";
}
exports.isSetIterator = isSetIterator;
function isGeneratorObject(value) {
    return ObjectToString(value) === "[object Generator]";
}
exports.isGeneratorObject = isGeneratorObject;
function isWebAssemblyCompiledModule(value) {
    return ObjectToString(value) === "[object WebAssembly.Module]";
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
function isNumberObject(value) {
    return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;
function isStringObject(value) {
    return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;
function isBooleanObject(value) {
    return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;
function isBigIntObject(value) {
    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;
function isSymbolObject(value) {
    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;
function isBoxedPrimitive(value) {
    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
}
exports.isBoxedPrimitive = isBoxedPrimitive;
function isAnyArrayBuffer(value) {
    return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;
[
    "isProxy",
    "isExternal",
    "isModuleNamespaceObject"
].forEach(function(method) {
    Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + " is not supported in userland");
        }
    });
});

},{"8f5347b42b6e2a55":"czr4n","8a0defb236755a33":"2XUdn","669d7c58f2755a1e":"lVUO7","47058d8b651ec118":"1ihkG"}],"czr4n":[function(require,module,exports) {
"use strict";
var hasToStringTag = require("f91f7c763c060109")();
var callBound = require("afb69449da77c18d");
var $toString = callBound("Object.prototype.toString");
var isStandardArguments = function isArguments(value) {
    if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) return false;
    return $toString(value) === "[object Arguments]";
};
var isLegacyArguments = function isArguments(value) {
    if (isStandardArguments(value)) return true;
    return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
};
var supportsStandardArguments = function() {
    return isStandardArguments(arguments);
}();
isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

},{"f91f7c763c060109":"9LdQ9","afb69449da77c18d":"5yYiF"}],"9LdQ9":[function(require,module,exports) {
"use strict";
var hasSymbols = require("3c2577a3ffe562a5");
module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
};

},{"3c2577a3ffe562a5":"euYk7"}],"euYk7":[function(require,module,exports) {
"use strict";
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
    if (typeof Symbol.iterator === "symbol") return true;
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") return false;
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

},{}],"5yYiF":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("4521bf6a30f9a357");
var callBind = require("648dc287afc24165");
var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) return callBind(intrinsic);
    return intrinsic;
};

},{"4521bf6a30f9a357":"dZb05","648dc287afc24165":"bfo8D"}],"dZb05":[function(require,module,exports) {
"use strict";
var undefined;
var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {}
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) try {
    $gOPD({}, "");
} catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
}
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = require("4005a887f4dd0496")();
var getProto = Object.getPrototypeOf || function(x) {
    return x.__proto__;
}; // eslint-disable-line no-proto
var needsEval = {};
var TypedArray = typeof Uint8Array === "undefined" ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
    "%AsyncFromSyncIteratorPrototype%": undefined,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%eval%": eval,
    "%EvalError%": EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
    "%JSON%": typeof JSON === "object" ? JSON : undefined,
    "%Map%": typeof Map === "undefined" ? undefined : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
    "%RangeError%": RangeError,
    "%ReferenceError%": ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined,
    "%Symbol%": hasSymbols ? Symbol : undefined,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
    "%URIError%": URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
};
try {
    null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
    // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    var errorProto = getProto(getProto(e));
    INTRINSICS["%Error.prototype%"] = errorProto;
}
var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
    else if (name === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
    else if (name === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
    else if (name === "%AsyncGenerator%") {
        var fn = doEval("%AsyncGeneratorFunction%");
        if (fn) value = fn.prototype;
    } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval("%AsyncGenerator%");
        if (gen) value = getProto(gen.prototype);
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    "%ArrayBufferPrototype%": [
        "ArrayBuffer",
        "prototype"
    ],
    "%ArrayPrototype%": [
        "Array",
        "prototype"
    ],
    "%ArrayProto_entries%": [
        "Array",
        "prototype",
        "entries"
    ],
    "%ArrayProto_forEach%": [
        "Array",
        "prototype",
        "forEach"
    ],
    "%ArrayProto_keys%": [
        "Array",
        "prototype",
        "keys"
    ],
    "%ArrayProto_values%": [
        "Array",
        "prototype",
        "values"
    ],
    "%AsyncFunctionPrototype%": [
        "AsyncFunction",
        "prototype"
    ],
    "%AsyncGenerator%": [
        "AsyncGeneratorFunction",
        "prototype"
    ],
    "%AsyncGeneratorPrototype%": [
        "AsyncGeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%BooleanPrototype%": [
        "Boolean",
        "prototype"
    ],
    "%DataViewPrototype%": [
        "DataView",
        "prototype"
    ],
    "%DatePrototype%": [
        "Date",
        "prototype"
    ],
    "%ErrorPrototype%": [
        "Error",
        "prototype"
    ],
    "%EvalErrorPrototype%": [
        "EvalError",
        "prototype"
    ],
    "%Float32ArrayPrototype%": [
        "Float32Array",
        "prototype"
    ],
    "%Float64ArrayPrototype%": [
        "Float64Array",
        "prototype"
    ],
    "%FunctionPrototype%": [
        "Function",
        "prototype"
    ],
    "%Generator%": [
        "GeneratorFunction",
        "prototype"
    ],
    "%GeneratorPrototype%": [
        "GeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%Int8ArrayPrototype%": [
        "Int8Array",
        "prototype"
    ],
    "%Int16ArrayPrototype%": [
        "Int16Array",
        "prototype"
    ],
    "%Int32ArrayPrototype%": [
        "Int32Array",
        "prototype"
    ],
    "%JSONParse%": [
        "JSON",
        "parse"
    ],
    "%JSONStringify%": [
        "JSON",
        "stringify"
    ],
    "%MapPrototype%": [
        "Map",
        "prototype"
    ],
    "%NumberPrototype%": [
        "Number",
        "prototype"
    ],
    "%ObjectPrototype%": [
        "Object",
        "prototype"
    ],
    "%ObjProto_toString%": [
        "Object",
        "prototype",
        "toString"
    ],
    "%ObjProto_valueOf%": [
        "Object",
        "prototype",
        "valueOf"
    ],
    "%PromisePrototype%": [
        "Promise",
        "prototype"
    ],
    "%PromiseProto_then%": [
        "Promise",
        "prototype",
        "then"
    ],
    "%Promise_all%": [
        "Promise",
        "all"
    ],
    "%Promise_reject%": [
        "Promise",
        "reject"
    ],
    "%Promise_resolve%": [
        "Promise",
        "resolve"
    ],
    "%RangeErrorPrototype%": [
        "RangeError",
        "prototype"
    ],
    "%ReferenceErrorPrototype%": [
        "ReferenceError",
        "prototype"
    ],
    "%RegExpPrototype%": [
        "RegExp",
        "prototype"
    ],
    "%SetPrototype%": [
        "Set",
        "prototype"
    ],
    "%SharedArrayBufferPrototype%": [
        "SharedArrayBuffer",
        "prototype"
    ],
    "%StringPrototype%": [
        "String",
        "prototype"
    ],
    "%SymbolPrototype%": [
        "Symbol",
        "prototype"
    ],
    "%SyntaxErrorPrototype%": [
        "SyntaxError",
        "prototype"
    ],
    "%TypedArrayPrototype%": [
        "TypedArray",
        "prototype"
    ],
    "%TypeErrorPrototype%": [
        "TypeError",
        "prototype"
    ],
    "%Uint8ArrayPrototype%": [
        "Uint8Array",
        "prototype"
    ],
    "%Uint8ClampedArrayPrototype%": [
        "Uint8ClampedArray",
        "prototype"
    ],
    "%Uint16ArrayPrototype%": [
        "Uint16Array",
        "prototype"
    ],
    "%Uint32ArrayPrototype%": [
        "Uint32Array",
        "prototype"
    ],
    "%URIErrorPrototype%": [
        "URIError",
        "prototype"
    ],
    "%WeakMapPrototype%": [
        "WeakMap",
        "prototype"
    ],
    "%WeakSetPrototype%": [
        "WeakSet",
        "prototype"
    ]
};
var bind = require("596e3166363a0856");
var hasOwn = require("dece4114c26c651a");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    else if (last === "%" && first !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) value = doEval(intrinsicName);
        if (typeof value === "undefined" && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) throw new $TypeError("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $TypeError('"allowMissing" argument must be a boolean');
    if ($exec(/^%?[^%]*%?$/, name) === null) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
        if (part === "constructor" || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

},{"4005a887f4dd0496":"3dK91","596e3166363a0856":"6J4ob","dece4114c26c651a":"ksyoO"}],"3dK91":[function(require,module,exports) {
"use strict";
var origSymbol = typeof Symbol !== "undefined" && Symbol;
var hasSymbolSham = require("eafbf31080e2c91f");
module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") return false;
    if (typeof Symbol !== "function") return false;
    if (typeof origSymbol("foo") !== "symbol") return false;
    if (typeof Symbol("bar") !== "symbol") return false;
    return hasSymbolSham();
};

},{"eafbf31080e2c91f":"euYk7"}],"6J4ob":[function(require,module,exports) {
"use strict";
var implementation = require("e40dffaa2260a8b2");
module.exports = Function.prototype.bind || implementation;

},{"e40dffaa2260a8b2":"jwaxQ"}],"jwaxQ":[function(require,module,exports) {
"use strict";
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = "[object Function]";
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));
            if (Object(result) === result) return result;
            return this;
        } else return target.apply(that, args.concat(slice.call(arguments)));
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs.push("$" + i);
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

},{}],"ksyoO":[function(require,module,exports) {
"use strict";
var bind = require("c12e7996082b0cc1");
module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"c12e7996082b0cc1":"6J4ob"}],"bfo8D":[function(require,module,exports) {
"use strict";
var bind = require("59bc467021bf2da8");
var GetIntrinsic = require("31006a9ec0a51d7f");
var $apply = GetIntrinsic("%Function.prototype.apply%");
var $call = GetIntrinsic("%Function.prototype.call%");
var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
var $max = GetIntrinsic("%Math.max%");
if ($defineProperty) try {
    $defineProperty({}, "a", {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = null;
}
module.exports = function callBind(originalFunction) {
    var func = $reflectApply(bind, $call, arguments);
    if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
        $defineProperty(func, "length", {
            value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
        });
    }
    return func;
};
var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) $defineProperty(module.exports, "apply", {
    value: applyBind
});
else module.exports.apply = applyBind;

},{"59bc467021bf2da8":"6J4ob","31006a9ec0a51d7f":"dZb05"}],"2XUdn":[function(require,module,exports) {
"use strict";
var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = require("7bd7269674392950")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function() {
    if (!hasToStringTag) return false;
    try {
        return Function("return function*() {}")();
    } catch (e) {}
};
var GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== "function") return false;
    if (isFnRegex.test(fnToStr.call(fn))) return true;
    if (!hasToStringTag) {
        var str = toStr.call(fn);
        return str === "[object GeneratorFunction]";
    }
    if (!getProto) return false;
    if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
    }
    return getProto(fn) === GeneratorFunction;
};

},{"7bd7269674392950":"9LdQ9"}],"lVUO7":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var forEach = require("28de519efce343f8");
var availableTypedArrays = require("3256e00ebc4b45d2");
var callBound = require("ca9f142ea63ae80a");
var gOPD = require("b8f5d7c286de9d9e");
var $toString = callBound("Object.prototype.toString");
var hasToStringTag = require("8e5b7fb1e4c60847")();
var g = typeof globalThis === "undefined" ? global : globalThis;
var typedArrays = availableTypedArrays();
var $slice = callBound("String.prototype.slice");
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    if (typeof g[typedArray] === "function") {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
        }
    }
});
var tryTypedArrays = function tryAllTypedArrays(value) {
    var foundName = false;
    forEach(toStrTags, function(getter, typedArray) {
        if (!foundName) try {
            var name = getter.call(value);
            if (name === typedArray) foundName = name;
        } catch (e) {}
    });
    return foundName;
};
var isTypedArray = require("dd30f95a55ed3584");
module.exports = function whichTypedArray(value) {
    if (!isTypedArray(value)) return false;
    if (!hasToStringTag || !(Symbol.toStringTag in value)) return $slice($toString(value), 8, -1);
    return tryTypedArrays(value);
};

},{"28de519efce343f8":"1Sol9","3256e00ebc4b45d2":"kfela","ca9f142ea63ae80a":"5yYiF","b8f5d7c286de9d9e":"eOTQB","8e5b7fb1e4c60847":"9LdQ9","dd30f95a55ed3584":"1ihkG"}],"1Sol9":[function(require,module,exports) {
"use strict";
var isCallable = require("940368d30b0f3f34");
var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var forEachArray = function forEachArray(array, iterator, receiver) {
    for(var i = 0, len = array.length; i < len; i++)if (hasOwnProperty.call(array, i)) {
        if (receiver == null) iterator(array[i], i, array);
        else iterator.call(receiver, array[i], i, array);
    }
};
var forEachString = function forEachString(string, iterator, receiver) {
    for(var i = 0, len = string.length; i < len; i++)// no such thing as a sparse string.
    if (receiver == null) iterator(string.charAt(i), i, string);
    else iterator.call(receiver, string.charAt(i), i, string);
};
var forEachObject = function forEachObject(object, iterator, receiver) {
    for(var k in object)if (hasOwnProperty.call(object, k)) {
        if (receiver == null) iterator(object[k], k, object);
        else iterator.call(receiver, object[k], k, object);
    }
};
var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) throw new TypeError("iterator must be a function");
    var receiver;
    if (arguments.length >= 3) receiver = thisArg;
    if (toStr.call(list) === "[object Array]") forEachArray(list, iterator, receiver);
    else if (typeof list === "string") forEachString(list, iterator, receiver);
    else forEachObject(list, iterator, receiver);
};
module.exports = forEach;

},{"940368d30b0f3f34":"9ocyk"}],"9ocyk":[function(require,module,exports) {
"use strict";
var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") try {
    badArrayLike = Object.defineProperty({}, "length", {
        get: function() {
            throw isCallableMarker;
        }
    });
    isCallableMarker = {};
    // eslint-disable-next-line no-throw-literal
    reflectApply(function() {
        throw 42;
    }, null, badArrayLike);
} catch (_) {
    if (_ !== isCallableMarker) reflectApply = null;
}
else reflectApply = null;
var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
    try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
    } catch (e) {
        return false; // not a function
    }
};
var tryFunctionObject = function tryFunctionToStr(value) {
    try {
        if (isES6ClassFn(value)) return false;
        fnToStr.call(value);
        return true;
    } catch (e) {
        return false;
    }
};
var toStr = Object.prototype.toString;
var objectClass = "[object Object]";
var fnClass = "[object Function]";
var genClass = "[object GeneratorFunction]";
var ddaClass = "[object HTMLAllCollection]"; // IE 11
var ddaClass2 = "[object HTML document.all class]";
var ddaClass3 = "[object HTMLCollection]"; // IE 9-10
var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag; // better: use `has-tostringtag`
var isIE68 = !(0 in [
    , 
]); // eslint-disable-line no-sparse-arrays, comma-spacing
var isDDA = function isDocumentDotAll() {
    return false;
};
if (typeof document === "object") {
    // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
    var all = document.all;
    if (toStr.call(all) === toStr.call(document.all)) isDDA = function isDocumentDotAll(value) {
        /* globals document: false */ // in IE 6-8, typeof document.all is "object" and it's truthy
        if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) try {
            var str = toStr.call(value);
            return (str === ddaClass || str === ddaClass2 || str === ddaClass3 // opera 12.16
             || str === objectClass // IE 6-8
            ) && value("") == null; // eslint-disable-line eqeqeq
        } catch (e) {}
        return false;
    };
}
module.exports = reflectApply ? function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    try {
        reflectApply(value, null, badArrayLike);
    } catch (e) {
        if (e !== isCallableMarker) return false;
    }
    return !isES6ClassFn(value) && tryFunctionObject(value);
} : function isCallable(value) {
    if (isDDA(value)) return true;
    if (!value) return false;
    if (typeof value !== "function" && typeof value !== "object") return false;
    if (hasToStringTag) return tryFunctionObject(value);
    if (isES6ClassFn(value)) return false;
    var strClass = toStr.call(value);
    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) return false;
    return tryFunctionObject(value);
};

},{}],"kfela":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var possibleNames = [
    "BigInt64Array",
    "BigUint64Array",
    "Float32Array",
    "Float64Array",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray"
];
var g = typeof globalThis === "undefined" ? global : globalThis;
module.exports = function availableTypedArrays() {
    var out = [];
    for(var i = 0; i < possibleNames.length; i++)if (typeof g[possibleNames[i]] === "function") out[out.length] = possibleNames[i];
    return out;
};

},{}],"eOTQB":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("74c8bcdc3ce1400");
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
if ($gOPD) try {
    $gOPD([], "length");
} catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
}
module.exports = $gOPD;

},{"74c8bcdc3ce1400":"dZb05"}],"1ihkG":[function(require,module,exports) {
var global = arguments[3];
"use strict";
var forEach = require("dc4474a45afb1e2");
var availableTypedArrays = require("659919d77afc2efa");
var callBound = require("e8d8c8816680fc15");
var $toString = callBound("Object.prototype.toString");
var hasToStringTag = require("eb4d0397cd4b20cc")();
var gOPD = require("def7c31fd6e42796");
var g = typeof globalThis === "undefined" ? global : globalThis;
var typedArrays = availableTypedArrays();
var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
var $slice = callBound("String.prototype.slice");
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
    var arr = new g[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = getPrototypeOf(arr);
        var descriptor = gOPD(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
        }
        toStrTags[typedArray] = descriptor.get;
    }
});
var tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    forEach(toStrTags, function(getter, typedArray) {
        if (!anyTrue) try {
            anyTrue = getter.call(value) === typedArray;
        } catch (e) {}
    });
    return anyTrue;
};
module.exports = function isTypedArray(value) {
    if (!value || typeof value !== "object") return false;
    if (!hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $slice($toString(value), 8, -1);
        return $indexOf(typedArrays, tag) > -1;
    }
    if (!gOPD) return false;
    return tryTypedArrays(value);
};

},{"dc4474a45afb1e2":"1Sol9","659919d77afc2efa":"kfela","e8d8c8816680fc15":"5yYiF","eb4d0397cd4b20cc":"9LdQ9","def7c31fd6e42796":"eOTQB"}],"inNNy":[function(require,module,exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
};

},{}],"9JBxK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountCallBuilder = void 0;
var tslib_1 = require("7cd2295afa064c9f");
var call_builder_1 = require("902af4065630d06");
var AccountCallBuilder = function(_super) {
    tslib_1.__extends(AccountCallBuilder, _super);
    function AccountCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("accounts");
        return _this;
    }
    AccountCallBuilder.prototype.accountId = function(id) {
        var builder = new call_builder_1.CallBuilder(this.url.clone());
        builder.filter.push([
            id
        ]);
        return builder;
    };
    AccountCallBuilder.prototype.forSigner = function(id) {
        this.url.setQuery("signer", id);
        return this;
    };
    AccountCallBuilder.prototype.forAsset = function(asset) {
        this.url.setQuery("asset", "" + asset);
        return this;
    };
    AccountCallBuilder.prototype.sponsor = function(id) {
        this.url.setQuery("sponsor", id);
        return this;
    };
    AccountCallBuilder.prototype.forLiquidityPool = function(id) {
        this.url.setQuery("liquidity_pool", id);
        return this;
    };
    return AccountCallBuilder;
}(call_builder_1.CallBuilder);
exports.AccountCallBuilder = AccountCallBuilder;

},{"7cd2295afa064c9f":"lRdW5","902af4065630d06":"9pf4Q"}],"htuDk":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AssetsCallBuilder = void 0;
var tslib_1 = require("342c7b5188542b84");
var call_builder_1 = require("da0f5146bf17908c");
var AssetsCallBuilder = function(_super) {
    tslib_1.__extends(AssetsCallBuilder, _super);
    function AssetsCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("assets");
        return _this;
    }
    AssetsCallBuilder.prototype.forCode = function(value) {
        this.url.setQuery("asset_code", value);
        return this;
    };
    AssetsCallBuilder.prototype.forIssuer = function(value) {
        this.url.setQuery("asset_issuer", value);
        return this;
    };
    return AssetsCallBuilder;
}(call_builder_1.CallBuilder);
exports.AssetsCallBuilder = AssetsCallBuilder;

},{"342c7b5188542b84":"lRdW5","da0f5146bf17908c":"9pf4Q"}],"cS2h4":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ClaimableBalanceCallBuilder = void 0;
var tslib_1 = require("1c90c4d6bad4f070");
var call_builder_1 = require("5d5150a8ffbfef8b");
var ClaimableBalanceCallBuilder = function(_super) {
    tslib_1.__extends(ClaimableBalanceCallBuilder, _super);
    function ClaimableBalanceCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("claimable_balances");
        return _this;
    }
    ClaimableBalanceCallBuilder.prototype.claimableBalance = function(claimableBalanceId) {
        var builder = new call_builder_1.CallBuilder(this.url.clone());
        builder.filter.push([
            claimableBalanceId
        ]);
        return builder;
    };
    ClaimableBalanceCallBuilder.prototype.sponsor = function(sponsor) {
        this.url.setQuery("sponsor", sponsor);
        return this;
    };
    ClaimableBalanceCallBuilder.prototype.claimant = function(claimant) {
        this.url.setQuery("claimant", claimant);
        return this;
    };
    ClaimableBalanceCallBuilder.prototype.asset = function(asset) {
        this.url.setQuery("asset", asset.toString());
        return this;
    };
    return ClaimableBalanceCallBuilder;
}(call_builder_1.CallBuilder);
exports.ClaimableBalanceCallBuilder = ClaimableBalanceCallBuilder;

},{"1c90c4d6bad4f070":"lRdW5","5d5150a8ffbfef8b":"9pf4Q"}],"lgce1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EffectCallBuilder = void 0;
var tslib_1 = require("ead422e346473597");
var call_builder_1 = require("5376619f0b10d88f");
var EffectCallBuilder = function(_super) {
    tslib_1.__extends(EffectCallBuilder, _super);
    function EffectCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl, "effects") || this;
        _this.url.segment("effects");
        return _this;
    }
    EffectCallBuilder.prototype.forAccount = function(accountId) {
        return this.forEndpoint("accounts", accountId);
    };
    EffectCallBuilder.prototype.forLedger = function(sequence) {
        return this.forEndpoint("ledgers", sequence.toString());
    };
    EffectCallBuilder.prototype.forTransaction = function(transactionId) {
        return this.forEndpoint("transactions", transactionId);
    };
    EffectCallBuilder.prototype.forOperation = function(operationId) {
        return this.forEndpoint("operations", operationId);
    };
    EffectCallBuilder.prototype.forLiquidityPool = function(poolId) {
        return this.forEndpoint("liquidity_pools", poolId);
    };
    return EffectCallBuilder;
}(call_builder_1.CallBuilder);
exports.EffectCallBuilder = EffectCallBuilder;

},{"ead422e346473597":"lRdW5","5376619f0b10d88f":"9pf4Q"}],"gvsmQ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FriendbotBuilder = void 0;
var tslib_1 = require("4722eba77ab85cba");
var call_builder_1 = require("9c225b78db6df69e");
var FriendbotBuilder = function(_super) {
    tslib_1.__extends(FriendbotBuilder, _super);
    function FriendbotBuilder(serverUrl, address) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("friendbot");
        _this.url.setQuery("addr", address);
        return _this;
    }
    return FriendbotBuilder;
}(call_builder_1.CallBuilder);
exports.FriendbotBuilder = FriendbotBuilder;

},{"4722eba77ab85cba":"lRdW5","9c225b78db6df69e":"9pf4Q"}],"5PA2M":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LedgerCallBuilder = void 0;
var tslib_1 = require("60177be527cbc7d5");
var call_builder_1 = require("fc474142274eff6f");
var LedgerCallBuilder = function(_super) {
    tslib_1.__extends(LedgerCallBuilder, _super);
    function LedgerCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("ledgers");
        return _this;
    }
    LedgerCallBuilder.prototype.ledger = function(sequence) {
        this.filter.push([
            "ledgers",
            sequence.toString()
        ]);
        return this;
    };
    return LedgerCallBuilder;
}(call_builder_1.CallBuilder);
exports.LedgerCallBuilder = LedgerCallBuilder;

},{"60177be527cbc7d5":"lRdW5","fc474142274eff6f":"9pf4Q"}],"lF1w6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LiquidityPoolCallBuilder = void 0;
var tslib_1 = require("4dac147fea7c1f45");
var call_builder_1 = require("f244fa1f768cfe8e");
var LiquidityPoolCallBuilder = function(_super) {
    tslib_1.__extends(LiquidityPoolCallBuilder, _super);
    function LiquidityPoolCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("liquidity_pools");
        return _this;
    }
    LiquidityPoolCallBuilder.prototype.forAssets = function() {
        var assets = [];
        for(var _i = 0; _i < arguments.length; _i++)assets[_i] = arguments[_i];
        var assetList = assets.map(function(asset) {
            return asset.toString();
        }).join(",");
        this.url.setQuery("reserves", assetList);
        return this;
    };
    LiquidityPoolCallBuilder.prototype.forAccount = function(id) {
        this.url.setQuery("account", id);
        return this;
    };
    LiquidityPoolCallBuilder.prototype.liquidityPoolId = function(id) {
        if (!id.match(/[a-fA-F0-9]{64}/)) throw new TypeError(id + " does not look like a liquidity pool ID");
        var builder = new call_builder_1.CallBuilder(this.url.clone());
        builder.filter.push([
            id.toLowerCase()
        ]);
        return builder;
    };
    return LiquidityPoolCallBuilder;
}(call_builder_1.CallBuilder);
exports.LiquidityPoolCallBuilder = LiquidityPoolCallBuilder;

},{"4dac147fea7c1f45":"lRdW5","f244fa1f768cfe8e":"9pf4Q"}],"i6ylp":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OfferCallBuilder = void 0;
var tslib_1 = require("c1ae68e0c2ed12b0");
var call_builder_1 = require("eac64b8a333cb7c6");
var OfferCallBuilder = function(_super) {
    tslib_1.__extends(OfferCallBuilder, _super);
    function OfferCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl, "offers") || this;
        _this.url.segment("offers");
        return _this;
    }
    OfferCallBuilder.prototype.offer = function(offerId) {
        var builder = new call_builder_1.CallBuilder(this.url.clone());
        builder.filter.push([
            offerId
        ]);
        return builder;
    };
    OfferCallBuilder.prototype.forAccount = function(id) {
        return this.forEndpoint("accounts", id);
    };
    OfferCallBuilder.prototype.buying = function(asset) {
        if (!asset.isNative()) {
            this.url.setQuery("buying_asset_type", asset.getAssetType());
            this.url.setQuery("buying_asset_code", asset.getCode());
            this.url.setQuery("buying_asset_issuer", asset.getIssuer());
        } else this.url.setQuery("buying_asset_type", "native");
        return this;
    };
    OfferCallBuilder.prototype.selling = function(asset) {
        if (!asset.isNative()) {
            this.url.setQuery("selling_asset_type", asset.getAssetType());
            this.url.setQuery("selling_asset_code", asset.getCode());
            this.url.setQuery("selling_asset_issuer", asset.getIssuer());
        } else this.url.setQuery("selling_asset_type", "native");
        return this;
    };
    OfferCallBuilder.prototype.sponsor = function(id) {
        this.url.setQuery("sponsor", id);
        return this;
    };
    OfferCallBuilder.prototype.seller = function(seller) {
        this.url.setQuery("seller", seller);
        return this;
    };
    return OfferCallBuilder;
}(call_builder_1.CallBuilder);
exports.OfferCallBuilder = OfferCallBuilder;

},{"c1ae68e0c2ed12b0":"lRdW5","eac64b8a333cb7c6":"9pf4Q"}],"9WTre":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OperationCallBuilder = void 0;
var tslib_1 = require("dae49c0de7e96a1f");
var call_builder_1 = require("4061983a490cf245");
var OperationCallBuilder = function(_super) {
    tslib_1.__extends(OperationCallBuilder, _super);
    function OperationCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl, "operations") || this;
        _this.url.segment("operations");
        return _this;
    }
    OperationCallBuilder.prototype.operation = function(operationId) {
        var builder = new call_builder_1.CallBuilder(this.url.clone());
        builder.filter.push([
            operationId
        ]);
        return builder;
    };
    OperationCallBuilder.prototype.forAccount = function(accountId) {
        return this.forEndpoint("accounts", accountId);
    };
    OperationCallBuilder.prototype.forClaimableBalance = function(claimableBalanceId) {
        return this.forEndpoint("claimable_balances", claimableBalanceId);
    };
    OperationCallBuilder.prototype.forLedger = function(sequence) {
        return this.forEndpoint("ledgers", sequence.toString());
    };
    OperationCallBuilder.prototype.forTransaction = function(transactionId) {
        return this.forEndpoint("transactions", transactionId);
    };
    OperationCallBuilder.prototype.forLiquidityPool = function(poolId) {
        return this.forEndpoint("liquidity_pools", poolId);
    };
    OperationCallBuilder.prototype.includeFailed = function(value) {
        this.url.setQuery("include_failed", value.toString());
        return this;
    };
    return OperationCallBuilder;
}(call_builder_1.CallBuilder);
exports.OperationCallBuilder = OperationCallBuilder;

},{"dae49c0de7e96a1f":"lRdW5","4061983a490cf245":"9pf4Q"}],"eS2cz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OrderbookCallBuilder = void 0;
var tslib_1 = require("65e3e88f6c22d3d8");
var call_builder_1 = require("16c4581478908c82");
var OrderbookCallBuilder = function(_super) {
    tslib_1.__extends(OrderbookCallBuilder, _super);
    function OrderbookCallBuilder(serverUrl, selling, buying) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("order_book");
        if (!selling.isNative()) {
            _this.url.setQuery("selling_asset_type", selling.getAssetType());
            _this.url.setQuery("selling_asset_code", selling.getCode());
            _this.url.setQuery("selling_asset_issuer", selling.getIssuer());
        } else _this.url.setQuery("selling_asset_type", "native");
        if (!buying.isNative()) {
            _this.url.setQuery("buying_asset_type", buying.getAssetType());
            _this.url.setQuery("buying_asset_code", buying.getCode());
            _this.url.setQuery("buying_asset_issuer", buying.getIssuer());
        } else _this.url.setQuery("buying_asset_type", "native");
        return _this;
    }
    return OrderbookCallBuilder;
}(call_builder_1.CallBuilder);
exports.OrderbookCallBuilder = OrderbookCallBuilder;

},{"65e3e88f6c22d3d8":"lRdW5","16c4581478908c82":"9pf4Q"}],"1PSGS":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PaymentCallBuilder = void 0;
var tslib_1 = require("24971bffa3415c0");
var call_builder_1 = require("9b8c25bf1cc204eb");
var PaymentCallBuilder = function(_super) {
    tslib_1.__extends(PaymentCallBuilder, _super);
    function PaymentCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl, "payments") || this;
        _this.url.segment("payments");
        return _this;
    }
    PaymentCallBuilder.prototype.forAccount = function(accountId) {
        return this.forEndpoint("accounts", accountId);
    };
    PaymentCallBuilder.prototype.forLedger = function(sequence) {
        return this.forEndpoint("ledgers", sequence.toString());
    };
    PaymentCallBuilder.prototype.forTransaction = function(transactionId) {
        return this.forEndpoint("transactions", transactionId);
    };
    return PaymentCallBuilder;
}(call_builder_1.CallBuilder);
exports.PaymentCallBuilder = PaymentCallBuilder;

},{"24971bffa3415c0":"lRdW5","9b8c25bf1cc204eb":"9pf4Q"}],"lTWAW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StrictReceivePathCallBuilder = void 0;
var tslib_1 = require("51fa4586745d0483");
var call_builder_1 = require("287c9bd6d4d73efe");
var StrictReceivePathCallBuilder = function(_super) {
    tslib_1.__extends(StrictReceivePathCallBuilder, _super);
    function StrictReceivePathCallBuilder(serverUrl, source, destinationAsset, destinationAmount) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("paths/strict-receive");
        if (typeof source === "string") _this.url.setQuery("source_account", source);
        else {
            var assets = source.map(function(asset) {
                if (asset.isNative()) return "native";
                return asset.getCode() + ":" + asset.getIssuer();
            }).join(",");
            _this.url.setQuery("source_assets", assets);
        }
        _this.url.setQuery("destination_amount", destinationAmount);
        if (!destinationAsset.isNative()) {
            _this.url.setQuery("destination_asset_type", destinationAsset.getAssetType());
            _this.url.setQuery("destination_asset_code", destinationAsset.getCode());
            _this.url.setQuery("destination_asset_issuer", destinationAsset.getIssuer());
        } else _this.url.setQuery("destination_asset_type", "native");
        return _this;
    }
    return StrictReceivePathCallBuilder;
}(call_builder_1.CallBuilder);
exports.StrictReceivePathCallBuilder = StrictReceivePathCallBuilder;

},{"51fa4586745d0483":"lRdW5","287c9bd6d4d73efe":"9pf4Q"}],"iGXk7":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StrictSendPathCallBuilder = void 0;
var tslib_1 = require("30556ed4a2e57493");
var call_builder_1 = require("44584029d5375d39");
var StrictSendPathCallBuilder = function(_super) {
    tslib_1.__extends(StrictSendPathCallBuilder, _super);
    function StrictSendPathCallBuilder(serverUrl, sourceAsset, sourceAmount, destination) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("paths/strict-send");
        if (sourceAsset.isNative()) _this.url.setQuery("source_asset_type", "native");
        else {
            _this.url.setQuery("source_asset_type", sourceAsset.getAssetType());
            _this.url.setQuery("source_asset_code", sourceAsset.getCode());
            _this.url.setQuery("source_asset_issuer", sourceAsset.getIssuer());
        }
        _this.url.setQuery("source_amount", sourceAmount);
        if (typeof destination === "string") _this.url.setQuery("destination_account", destination);
        else {
            var assets = destination.map(function(asset) {
                if (asset.isNative()) return "native";
                return asset.getCode() + ":" + asset.getIssuer();
            }).join(",");
            _this.url.setQuery("destination_assets", assets);
        }
        return _this;
    }
    return StrictSendPathCallBuilder;
}(call_builder_1.CallBuilder);
exports.StrictSendPathCallBuilder = StrictSendPathCallBuilder;

},{"30556ed4a2e57493":"lRdW5","44584029d5375d39":"9pf4Q"}],"hxBtO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TradeAggregationCallBuilder = void 0;
var tslib_1 = require("bf2395ce33258807");
var call_builder_1 = require("b5e34ad6a216a92e");
var errors_1 = require("b6c4f1ac545d8eb1");
var allowedResolutions = [
    60000,
    300000,
    900000,
    3600000,
    86400000,
    604800000
];
var TradeAggregationCallBuilder = function(_super) {
    tslib_1.__extends(TradeAggregationCallBuilder, _super);
    function TradeAggregationCallBuilder(serverUrl, base, counter, start_time, end_time, resolution, offset) {
        var _this = _super.call(this, serverUrl) || this;
        _this.url.segment("trade_aggregations");
        if (!base.isNative()) {
            _this.url.setQuery("base_asset_type", base.getAssetType());
            _this.url.setQuery("base_asset_code", base.getCode());
            _this.url.setQuery("base_asset_issuer", base.getIssuer());
        } else _this.url.setQuery("base_asset_type", "native");
        if (!counter.isNative()) {
            _this.url.setQuery("counter_asset_type", counter.getAssetType());
            _this.url.setQuery("counter_asset_code", counter.getCode());
            _this.url.setQuery("counter_asset_issuer", counter.getIssuer());
        } else _this.url.setQuery("counter_asset_type", "native");
        if (typeof start_time !== "number" || typeof end_time !== "number") throw new errors_1.BadRequestError("Invalid time bounds", [
            start_time,
            end_time
        ]);
        else {
            _this.url.setQuery("start_time", start_time.toString());
            _this.url.setQuery("end_time", end_time.toString());
        }
        if (!_this.isValidResolution(resolution)) throw new errors_1.BadRequestError("Invalid resolution", resolution);
        else _this.url.setQuery("resolution", resolution.toString());
        if (!_this.isValidOffset(offset, resolution)) throw new errors_1.BadRequestError("Invalid offset", offset);
        else _this.url.setQuery("offset", offset.toString());
        return _this;
    }
    TradeAggregationCallBuilder.prototype.isValidResolution = function(resolution) {
        for(var _i = 0, allowedResolutions_1 = allowedResolutions; _i < allowedResolutions_1.length; _i++){
            var allowed = allowedResolutions_1[_i];
            if (allowed === resolution) return true;
        }
        return false;
    };
    TradeAggregationCallBuilder.prototype.isValidOffset = function(offset, resolution) {
        var hour = 3600000;
        return !(offset > resolution || offset >= 24 * hour || offset % hour !== 0);
    };
    return TradeAggregationCallBuilder;
}(call_builder_1.CallBuilder);
exports.TradeAggregationCallBuilder = TradeAggregationCallBuilder;

},{"bf2395ce33258807":"lRdW5","b5e34ad6a216a92e":"9pf4Q","b6c4f1ac545d8eb1":"j3jT2"}],"l7CoE":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TradesCallBuilder = void 0;
var tslib_1 = require("365de3cea8e0bfdc");
var call_builder_1 = require("f616b8e726d80c44");
var TradesCallBuilder = function(_super) {
    tslib_1.__extends(TradesCallBuilder, _super);
    function TradesCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl, "trades") || this;
        _this.url.segment("trades");
        return _this;
    }
    TradesCallBuilder.prototype.forAssetPair = function(base, counter) {
        if (!base.isNative()) {
            this.url.setQuery("base_asset_type", base.getAssetType());
            this.url.setQuery("base_asset_code", base.getCode());
            this.url.setQuery("base_asset_issuer", base.getIssuer());
        } else this.url.setQuery("base_asset_type", "native");
        if (!counter.isNative()) {
            this.url.setQuery("counter_asset_type", counter.getAssetType());
            this.url.setQuery("counter_asset_code", counter.getCode());
            this.url.setQuery("counter_asset_issuer", counter.getIssuer());
        } else this.url.setQuery("counter_asset_type", "native");
        return this;
    };
    TradesCallBuilder.prototype.forOffer = function(offerId) {
        this.url.setQuery("offer_id", offerId);
        return this;
    };
    TradesCallBuilder.prototype.forType = function(tradeType) {
        this.url.setQuery("trade_type", tradeType);
        return this;
    };
    TradesCallBuilder.prototype.forAccount = function(accountId) {
        return this.forEndpoint("accounts", accountId);
    };
    TradesCallBuilder.prototype.forLiquidityPool = function(liquidityPoolId) {
        return this.forEndpoint("liquidity_pools", liquidityPoolId);
    };
    return TradesCallBuilder;
}(call_builder_1.CallBuilder);
exports.TradesCallBuilder = TradesCallBuilder;

},{"365de3cea8e0bfdc":"lRdW5","f616b8e726d80c44":"9pf4Q"}],"gNrlo":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransactionCallBuilder = void 0;
var tslib_1 = require("a4ee0b589909c7ba");
var call_builder_1 = require("f65e4b62897fda82");
var TransactionCallBuilder = function(_super) {
    tslib_1.__extends(TransactionCallBuilder, _super);
    function TransactionCallBuilder(serverUrl) {
        var _this = _super.call(this, serverUrl, "transactions") || this;
        _this.url.segment("transactions");
        return _this;
    }
    TransactionCallBuilder.prototype.transaction = function(transactionId) {
        var builder = new call_builder_1.CallBuilder(this.url.clone());
        builder.filter.push([
            transactionId
        ]);
        return builder;
    };
    TransactionCallBuilder.prototype.forAccount = function(accountId) {
        return this.forEndpoint("accounts", accountId);
    };
    TransactionCallBuilder.prototype.forClaimableBalance = function(claimableBalanceId) {
        return this.forEndpoint("claimable_balances", claimableBalanceId);
    };
    TransactionCallBuilder.prototype.forLedger = function(sequence) {
        return this.forEndpoint("ledgers", sequence.toString());
    };
    TransactionCallBuilder.prototype.forLiquidityPool = function(poolId) {
        return this.forEndpoint("liquidity_pools", poolId);
    };
    TransactionCallBuilder.prototype.includeFailed = function(value) {
        this.url.setQuery("include_failed", value.toString());
        return this;
    };
    return TransactionCallBuilder;
}(call_builder_1.CallBuilder);
exports.TransactionCallBuilder = TransactionCallBuilder;

},{"a4ee0b589909c7ba":"lRdW5","f65e4b62897fda82":"9pf4Q"}],"9AUxB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FederationServer = exports.FEDERATION_RESPONSE_MAX_SIZE = void 0;
var tslib_1 = require("f546ca20cf7a4b43");
var axios_1 = tslib_1.__importDefault(require("d3c5e2b08a03bcd7"));
var stellar_base_1 = require("7ccfcdd3dad2d964");
var urijs_1 = tslib_1.__importDefault(require("a9b982fdae924cfc"));
var config_1 = require("9579fc4c24863503");
var errors_1 = require("ed2113689e16d321");
var stellar_toml_resolver_1 = require("58f0adc32aa34989");
exports.FEDERATION_RESPONSE_MAX_SIZE = 102400;
var FederationServer = function() {
    function FederationServer(serverURL, domain, opts) {
        if (opts === void 0) opts = {};
        this.serverURL = urijs_1.default(serverURL);
        this.domain = domain;
        var allowHttp = typeof opts.allowHttp === "undefined" ? config_1.Config.isAllowHttp() : opts.allowHttp;
        this.timeout = typeof opts.timeout === "undefined" ? config_1.Config.getTimeout() : opts.timeout;
        if (this.serverURL.protocol() !== "https" && !allowHttp) throw new Error("Cannot connect to insecure federation server");
    }
    FederationServer.resolve = function(value, opts) {
        if (opts === void 0) opts = {};
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var addressParts, domain, federationServer;
            return tslib_1.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (value.indexOf("*") < 0) {
                            if (!stellar_base_1.StrKey.isValidEd25519PublicKey(value)) return [
                                2,
                                Promise.reject(new Error("Invalid Account ID"))
                            ];
                            return [
                                2,
                                Promise.resolve({
                                    account_id: value
                                })
                            ];
                        }
                        addressParts = value.split("*");
                        domain = addressParts[1];
                        if (addressParts.length !== 2 || !domain) return [
                            2,
                            Promise.reject(new Error("Invalid Stellar address"))
                        ];
                        return [
                            4,
                            FederationServer.createForDomain(domain, opts)
                        ];
                    case 1:
                        federationServer = _a.sent();
                        return [
                            2,
                            federationServer.resolveAddress(value)
                        ];
                }
            });
        });
    };
    FederationServer.createForDomain = function(domain, opts) {
        if (opts === void 0) opts = {};
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var tomlObject;
            return tslib_1.__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4,
                            stellar_toml_resolver_1.StellarTomlResolver.resolve(domain, opts)
                        ];
                    case 1:
                        tomlObject = _a.sent();
                        if (!tomlObject.FEDERATION_SERVER) return [
                            2,
                            Promise.reject(new Error("stellar.toml does not contain FEDERATION_SERVER field"))
                        ];
                        return [
                            2,
                            new FederationServer(tomlObject.FEDERATION_SERVER, domain, opts)
                        ];
                }
            });
        });
    };
    FederationServer.prototype.resolveAddress = function(address) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var stellarAddress, url;
            return tslib_1.__generator(this, function(_a) {
                stellarAddress = address;
                if (address.indexOf("*") < 0) {
                    if (!this.domain) return [
                        2,
                        Promise.reject(new Error("Unknown domain. Make sure `address` contains a domain (ex. `bob*stellar.org`) or pass `domain` parameter when instantiating the server object."))
                    ];
                    stellarAddress = address + "*" + this.domain;
                }
                url = this.serverURL.query({
                    type: "name",
                    q: stellarAddress
                });
                return [
                    2,
                    this._sendRequest(url)
                ];
            });
        });
    };
    FederationServer.prototype.resolveAccountId = function(accountId) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var url;
            return tslib_1.__generator(this, function(_a) {
                url = this.serverURL.query({
                    type: "id",
                    q: accountId
                });
                return [
                    2,
                    this._sendRequest(url)
                ];
            });
        });
    };
    FederationServer.prototype.resolveTransactionId = function(transactionId) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var url;
            return tslib_1.__generator(this, function(_a) {
                url = this.serverURL.query({
                    type: "txid",
                    q: transactionId
                });
                return [
                    2,
                    this._sendRequest(url)
                ];
            });
        });
    };
    FederationServer.prototype._sendRequest = function(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var timeout;
            return tslib_1.__generator(this, function(_a) {
                timeout = this.timeout;
                return [
                    2,
                    axios_1.default.get(url.toString(), {
                        maxContentLength: exports.FEDERATION_RESPONSE_MAX_SIZE,
                        timeout: timeout
                    }).then(function(response) {
                        if (typeof response.data.memo !== "undefined" && typeof response.data.memo !== "string") throw new Error("memo value should be of type string");
                        return response.data;
                    }).catch(function(response) {
                        if (response instanceof Error) {
                            if (response.message.match(/^maxContentLength size/)) throw new Error("federation response exceeds allowed size of " + exports.FEDERATION_RESPONSE_MAX_SIZE);
                            else return Promise.reject(response);
                        } else return Promise.reject(new errors_1.BadResponseError("Server query failed. Server responded: " + response.status + " " + response.statusText, response.data));
                    })
                ];
            });
        });
    };
    return FederationServer;
}();
exports.FederationServer = FederationServer;

},{"f546ca20cf7a4b43":"lRdW5","d3c5e2b08a03bcd7":"jo6P5","7ccfcdd3dad2d964":"aicMq","a9b982fdae924cfc":"lm4he","9579fc4c24863503":"bdmoV","ed2113689e16d321":"j3jT2","58f0adc32aa34989":"kxlCs"}],"kxlCs":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StellarTomlResolver = exports.STELLAR_TOML_MAX_SIZE = void 0;
var tslib_1 = require("169e2bcb2f687016");
var axios_1 = tslib_1.__importDefault(require("2da0a69ad20c7e31"));
var toml_1 = tslib_1.__importDefault(require("b8d31d3f8d038430"));
var config_1 = require("d25b0461ea6281a1");
exports.STELLAR_TOML_MAX_SIZE = 102400;
var CancelToken = axios_1.default.CancelToken;
var StellarTomlResolver = function() {
    function StellarTomlResolver() {}
    StellarTomlResolver.resolve = function(domain, opts) {
        if (opts === void 0) opts = {};
        return tslib_1.__awaiter(this, void 0, void 0, function() {
            var allowHttp, timeout, protocol;
            return tslib_1.__generator(this, function(_a) {
                allowHttp = typeof opts.allowHttp === "undefined" ? config_1.Config.isAllowHttp() : opts.allowHttp;
                timeout = typeof opts.timeout === "undefined" ? config_1.Config.getTimeout() : opts.timeout;
                protocol = allowHttp ? "http" : "https";
                return [
                    2,
                    axios_1.default.get(protocol + "://" + domain + "/.well-known/stellar.toml", {
                        maxContentLength: exports.STELLAR_TOML_MAX_SIZE,
                        cancelToken: timeout ? new CancelToken(function(cancel) {
                            return setTimeout(function() {
                                return cancel("timeout of " + timeout + "ms exceeded");
                            }, timeout);
                        }) : undefined,
                        timeout: timeout
                    }).then(function(response) {
                        try {
                            var tomlObject = toml_1.default.parse(response.data);
                            return Promise.resolve(tomlObject);
                        } catch (e) {
                            return Promise.reject(new Error("stellar.toml is invalid - Parsing error on line " + e.line + ", column " + e.column + ": " + e.message));
                        }
                    }).catch(function(err) {
                        if (err.message.match(/^maxContentLength size/)) throw new Error("stellar.toml file exceeds allowed size of " + exports.STELLAR_TOML_MAX_SIZE);
                        else throw err;
                    })
                ];
            });
        });
    };
    return StellarTomlResolver;
}();
exports.StellarTomlResolver = StellarTomlResolver;

},{"169e2bcb2f687016":"lRdW5","2da0a69ad20c7e31":"jo6P5","b8d31d3f8d038430":"hg9R1","d25b0461ea6281a1":"bdmoV"}],"hg9R1":[function(require,module,exports) {
var parser = require("aa5edd286a58e86f");
var compiler = require("9494c0392bd9b3ef");
module.exports = {
    parse: function(input) {
        var nodes = parser.parse(input.toString());
        return compiler.compile(nodes);
    }
};

},{"aa5edd286a58e86f":"5hlfz","9494c0392bd9b3ef":"7Blkt"}],"5hlfz":[function(require,module,exports) {
module.exports = function() {
    /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */ function peg$subclass(child, parent) {
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }
    function SyntaxError(message, expected, found, offset, line, column) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.offset = offset;
        this.line = line;
        this.column = column;
        this.name = "SyntaxError";
    }
    peg$subclass(SyntaxError, Error);
    function parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {}, peg$FAILED = {}, peg$startRuleFunctions = {
            start: peg$parsestart
        }, peg$startRuleFunction = peg$parsestart, peg$c0 = [], peg$c1 = function() {
            return nodes;
        }, peg$c2 = peg$FAILED, peg$c3 = "#", peg$c4 = {
            type: "literal",
            value: "#",
            description: '"#"'
        }, peg$c5 = void 0, peg$c6 = {
            type: "any",
            description: "any character"
        }, peg$c7 = "[", peg$c8 = {
            type: "literal",
            value: "[",
            description: '"["'
        }, peg$c9 = "]", peg$c10 = {
            type: "literal",
            value: "]",
            description: '"]"'
        }, peg$c11 = function(name) {
            addNode(node("ObjectPath", name, line, column));
        }, peg$c12 = function(name) {
            addNode(node("ArrayPath", name, line, column));
        }, peg$c13 = function(parts, name) {
            return parts.concat(name);
        }, peg$c14 = function(name) {
            return [
                name
            ];
        }, peg$c15 = function(name) {
            return name;
        }, peg$c16 = ".", peg$c17 = {
            type: "literal",
            value: ".",
            description: '"."'
        }, peg$c18 = "=", peg$c19 = {
            type: "literal",
            value: "=",
            description: '"="'
        }, peg$c20 = function(key, value) {
            addNode(node("Assign", value, line, column, key));
        }, peg$c21 = function(chars) {
            return chars.join("");
        }, peg$c22 = function(node) {
            return node.value;
        }, peg$c23 = '"""', peg$c24 = {
            type: "literal",
            value: '"""',
            description: '"\\"\\"\\""'
        }, peg$c25 = null, peg$c26 = function(chars) {
            return node("String", chars.join(""), line, column);
        }, peg$c27 = '"', peg$c28 = {
            type: "literal",
            value: '"',
            description: '"\\""'
        }, peg$c29 = "'''", peg$c30 = {
            type: "literal",
            value: "'''",
            description: "\"'''\""
        }, peg$c31 = "'", peg$c32 = {
            type: "literal",
            value: "'",
            description: '"\'"'
        }, peg$c33 = function(char) {
            return char;
        }, peg$c34 = function(char) {
            return char;
        }, peg$c35 = "\\", peg$c36 = {
            type: "literal",
            value: "\\",
            description: '"\\\\"'
        }, peg$c37 = function() {
            return "";
        }, peg$c38 = "e", peg$c39 = {
            type: "literal",
            value: "e",
            description: '"e"'
        }, peg$c40 = "E", peg$c41 = {
            type: "literal",
            value: "E",
            description: '"E"'
        }, peg$c42 = function(left, right) {
            return node("Float", parseFloat(left + "e" + right), line, column);
        }, peg$c43 = function(text) {
            return node("Float", parseFloat(text), line, column);
        }, peg$c44 = "+", peg$c45 = {
            type: "literal",
            value: "+",
            description: '"+"'
        }, peg$c46 = function(digits) {
            return digits.join("");
        }, peg$c47 = "-", peg$c48 = {
            type: "literal",
            value: "-",
            description: '"-"'
        }, peg$c49 = function(digits) {
            return "-" + digits.join("");
        }, peg$c50 = function(text) {
            return node("Integer", parseInt(text, 10), line, column);
        }, peg$c51 = "true", peg$c52 = {
            type: "literal",
            value: "true",
            description: '"true"'
        }, peg$c53 = function() {
            return node("Boolean", true, line, column);
        }, peg$c54 = "false", peg$c55 = {
            type: "literal",
            value: "false",
            description: '"false"'
        }, peg$c56 = function() {
            return node("Boolean", false, line, column);
        }, peg$c57 = function() {
            return node("Array", [], line, column);
        }, peg$c58 = function(value) {
            return node("Array", value ? [
                value
            ] : [], line, column);
        }, peg$c59 = function(values) {
            return node("Array", values, line, column);
        }, peg$c60 = function(values, value) {
            return node("Array", values.concat(value), line, column);
        }, peg$c61 = function(value) {
            return value;
        }, peg$c62 = ",", peg$c63 = {
            type: "literal",
            value: ",",
            description: '","'
        }, peg$c64 = "{", peg$c65 = {
            type: "literal",
            value: "{",
            description: '"{"'
        }, peg$c66 = "}", peg$c67 = {
            type: "literal",
            value: "}",
            description: '"}"'
        }, peg$c68 = function(values) {
            return node("InlineTable", values, line, column);
        }, peg$c69 = function(key, value) {
            return node("InlineTableValue", value, line, column, key);
        }, peg$c70 = function(digits) {
            return "." + digits;
        }, peg$c71 = function(date) {
            return date.join("");
        }, peg$c72 = ":", peg$c73 = {
            type: "literal",
            value: ":",
            description: '":"'
        }, peg$c74 = function(time) {
            return time.join("");
        }, peg$c75 = "T", peg$c76 = {
            type: "literal",
            value: "T",
            description: '"T"'
        }, peg$c77 = "Z", peg$c78 = {
            type: "literal",
            value: "Z",
            description: '"Z"'
        }, peg$c79 = function(date, time) {
            return node("Date", new Date(date + "T" + time + "Z"), line, column);
        }, peg$c80 = function(date, time) {
            return node("Date", new Date(date + "T" + time), line, column);
        }, peg$c81 = /^[ \t]/, peg$c82 = {
            type: "class",
            value: "[ \\t]",
            description: "[ \\t]"
        }, peg$c83 = "\n", peg$c84 = {
            type: "literal",
            value: "\n",
            description: '"\\n"'
        }, peg$c85 = "\r", peg$c86 = {
            type: "literal",
            value: "\r",
            description: '"\\r"'
        }, peg$c87 = /^[0-9a-f]/i, peg$c88 = {
            type: "class",
            value: "[0-9a-f]i",
            description: "[0-9a-f]i"
        }, peg$c89 = /^[0-9]/, peg$c90 = {
            type: "class",
            value: "[0-9]",
            description: "[0-9]"
        }, peg$c91 = "_", peg$c92 = {
            type: "literal",
            value: "_",
            description: '"_"'
        }, peg$c93 = function() {
            return "";
        }, peg$c94 = /^[A-Za-z0-9_\-]/, peg$c95 = {
            type: "class",
            value: "[A-Za-z0-9_\\-]",
            description: "[A-Za-z0-9_\\-]"
        }, peg$c96 = function(d) {
            return d.join("");
        }, peg$c97 = '\\"', peg$c98 = {
            type: "literal",
            value: '\\"',
            description: '"\\\\\\""'
        }, peg$c99 = function() {
            return '"';
        }, peg$c100 = "\\\\", peg$c101 = {
            type: "literal",
            value: "\\\\",
            description: '"\\\\\\\\"'
        }, peg$c102 = function() {
            return "\\";
        }, peg$c103 = "\\b", peg$c104 = {
            type: "literal",
            value: "\\b",
            description: '"\\\\b"'
        }, peg$c105 = function() {
            return "\b";
        }, peg$c106 = "\\t", peg$c107 = {
            type: "literal",
            value: "\\t",
            description: '"\\\\t"'
        }, peg$c108 = function() {
            return "	";
        }, peg$c109 = "\\n", peg$c110 = {
            type: "literal",
            value: "\\n",
            description: '"\\\\n"'
        }, peg$c111 = function() {
            return "\n";
        }, peg$c112 = "\\f", peg$c113 = {
            type: "literal",
            value: "\\f",
            description: '"\\\\f"'
        }, peg$c114 = function() {
            return "\f";
        }, peg$c115 = "\\r", peg$c116 = {
            type: "literal",
            value: "\\r",
            description: '"\\\\r"'
        }, peg$c117 = function() {
            return "\r";
        }, peg$c118 = "\\U", peg$c119 = {
            type: "literal",
            value: "\\U",
            description: '"\\\\U"'
        }, peg$c120 = function(digits) {
            return convertCodePoint(digits.join(""));
        }, peg$c121 = "\\u", peg$c122 = {
            type: "literal",
            value: "\\u",
            description: '"\\\\u"'
        }, peg$currPos = 0, peg$reportedPos = 0, peg$cachedPos = 0, peg$cachedPosDetails = {
            line: 1,
            column: 1,
            seenCR: false
        }, peg$maxFailPos = 0, peg$maxFailExpected = [], peg$silentFails = 0, peg$cache = {}, peg$result;
        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) throw new Error("Can't start parsing from rule \"" + options.startRule + '".');
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
            return input.substring(peg$reportedPos, peg$currPos);
        }
        function offset() {
            return peg$reportedPos;
        }
        function line() {
            return peg$computePosDetails(peg$reportedPos).line;
        }
        function column() {
            return peg$computePosDetails(peg$reportedPos).column;
        }
        function expected(description) {
            throw peg$buildException(null, [
                {
                    type: "other",
                    description: description
                }
            ], peg$reportedPos);
        }
        function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
        }
        function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
                var p, ch;
                for(p = startPos; p < endPos; p++){
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) details.line++;
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                }
            }
            if (peg$cachedPos !== pos) {
                if (peg$cachedPos > pos) {
                    peg$cachedPos = 0;
                    peg$cachedPosDetails = {
                        line: 1,
                        column: 1,
                        seenCR: false
                    };
                }
                advance(peg$cachedPosDetails, peg$cachedPos, pos);
                peg$cachedPos = pos;
            }
            return peg$cachedPosDetails;
        }
        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) return;
            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected);
        }
        function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
                var i = 1;
                expected.sort(function(a, b) {
                    if (a.description < b.description) return -1;
                    else if (a.description > b.description) return 1;
                    else return 0;
                });
                while(i < expected.length)if (expected[i - 1] === expected[i]) expected.splice(i, 1);
                else i++;
            }
            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) {
                        return ch.charCodeAt(0).toString(16).toUpperCase();
                    }
                    return s.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) {
                        return "\\x0" + hex(ch);
                    }).replace(/[\x10-\x1F\x80-\xFF]/g, function(ch) {
                        return "\\x" + hex(ch);
                    }).replace(/[\u0180-\u0FFF]/g, function(ch) {
                        return "\\u0" + hex(ch);
                    }).replace(/[\u1080-\uFFFF]/g, function(ch) {
                        return "\\u" + hex(ch);
                    });
                }
                var expectedDescs = new Array(expected.length), expectedDesc, foundDesc, i;
                for(i = 0; i < expected.length; i++)expectedDescs[i] = expected[i].description;
                expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];
                foundDesc = found ? '"' + stringEscape(found) + '"' : "end of input";
                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }
            var posDetails = peg$computePosDetails(pos), found = pos < input.length ? input.charAt(pos) : null;
            if (expected !== null) cleanupExpected(expected);
            return new SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, pos, posDetails.line, posDetails.column);
        }
        function peg$parsestart() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 0, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseline();
            while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parseline();
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c1();
            }
            s0 = s1;
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseline() {
            var s0, s1, s2, s3, s4, s5, s6;
            var key = peg$currPos * 49 + 1, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseexpression();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseS();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parseS();
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parsecomment();
                        while(s5 !== peg$FAILED){
                            s4.push(s5);
                            s5 = peg$parsecomment();
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parseNL();
                            if (s6 !== peg$FAILED) while(s6 !== peg$FAILED){
                                s5.push(s6);
                                s6 = peg$parseNL();
                            }
                            else s5 = peg$c2;
                            if (s5 === peg$FAILED) s5 = peg$parseEOF();
                            if (s5 !== peg$FAILED) {
                                s1 = [
                                    s1,
                                    s2,
                                    s3,
                                    s4,
                                    s5
                                ];
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseS();
                if (s2 !== peg$FAILED) while(s2 !== peg$FAILED){
                    s1.push(s2);
                    s2 = peg$parseS();
                }
                else s1 = peg$c2;
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseNL();
                    if (s3 !== peg$FAILED) while(s3 !== peg$FAILED){
                        s2.push(s3);
                        s3 = peg$parseNL();
                    }
                    else s2 = peg$c2;
                    if (s2 === peg$FAILED) s2 = peg$parseEOF();
                    if (s2 !== peg$FAILED) {
                        s1 = [
                            s1,
                            s2
                        ];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
                if (s0 === peg$FAILED) s0 = peg$parseNL();
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseexpression() {
            var s0;
            var key = peg$currPos * 49 + 2, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$parsecomment();
            if (s0 === peg$FAILED) {
                s0 = peg$parsepath();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsetablearray();
                    if (s0 === peg$FAILED) s0 = peg$parseassignment();
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsecomment() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 49 + 3, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 35) {
                s1 = peg$c3;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c4);
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parseNL();
                if (s5 === peg$FAILED) s5 = peg$parseEOF();
                peg$silentFails--;
                if (s5 === peg$FAILED) s4 = peg$c5;
                else {
                    peg$currPos = s4;
                    s4 = peg$c2;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c6);
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [
                            s4,
                            s5
                        ];
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c2;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$c2;
                }
                while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    s5 = peg$parseNL();
                    if (s5 === peg$FAILED) s5 = peg$parseEOF();
                    peg$silentFails--;
                    if (s5 === peg$FAILED) s4 = peg$c5;
                    else {
                        peg$currPos = s4;
                        s4 = peg$c2;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c6);
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [
                                s4,
                                s5
                            ];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$c2;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$c2;
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [
                        s1,
                        s2
                    ];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsepath() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 49 + 4, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c7;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c8);
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseS();
                while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$parseS();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsetable_key();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseS();
                        while(s5 !== peg$FAILED){
                            s4.push(s5);
                            s5 = peg$parseS();
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s5 = peg$c9;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) peg$fail(peg$c10);
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c11(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsetablearray() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            var key = peg$currPos * 49 + 5, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c7;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c8);
            }
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                    s2 = peg$c7;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c8);
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseS();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parseS();
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parsetable_key();
                        if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parseS();
                            while(s6 !== peg$FAILED){
                                s5.push(s6);
                                s6 = peg$parseS();
                            }
                            if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                    s6 = peg$c9;
                                    peg$currPos++;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) peg$fail(peg$c10);
                                }
                                if (s6 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s7 = peg$c9;
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) peg$fail(peg$c10);
                                    }
                                    if (s7 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c12(s4);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsetable_key() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 6, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsedot_ended_table_key_part();
            if (s2 !== peg$FAILED) while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parsedot_ended_table_key_part();
            }
            else s1 = peg$c2;
            if (s1 !== peg$FAILED) {
                s2 = peg$parsetable_key_part();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c13(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsetable_key_part();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c14(s1);
                }
                s0 = s1;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsetable_key_part() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 7, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsekey();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseS();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parseS();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c15(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseS();
                while(s2 !== peg$FAILED){
                    s1.push(s2);
                    s2 = peg$parseS();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsequoted_key();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parseS();
                        while(s4 !== peg$FAILED){
                            s3.push(s4);
                            s4 = peg$parseS();
                        }
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c15(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsedot_ended_table_key_part() {
            var s0, s1, s2, s3, s4, s5, s6;
            var key = peg$currPos * 49 + 8, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsekey();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseS();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parseS();
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s4 = peg$c16;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c17);
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parseS();
                            while(s6 !== peg$FAILED){
                                s5.push(s6);
                                s6 = peg$parseS();
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c15(s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseS();
                while(s2 !== peg$FAILED){
                    s1.push(s2);
                    s2 = peg$parseS();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsequoted_key();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parseS();
                        while(s4 !== peg$FAILED){
                            s3.push(s4);
                            s4 = peg$parseS();
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 46) {
                                s4 = peg$c16;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) peg$fail(peg$c17);
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$parseS();
                                while(s6 !== peg$FAILED){
                                    s5.push(s6);
                                    s6 = peg$parseS();
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c15(s2);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseassignment() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 49 + 9, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parsekey();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseS();
                while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$parseS();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c18;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c19);
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseS();
                        while(s5 !== peg$FAILED){
                            s4.push(s5);
                            s5 = peg$parseS();
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parsevalue();
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c20(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsequoted_key();
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseS();
                    while(s3 !== peg$FAILED){
                        s2.push(s3);
                        s3 = peg$parseS();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s3 = peg$c18;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c19);
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parseS();
                            while(s5 !== peg$FAILED){
                                s4.push(s5);
                                s5 = peg$parseS();
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parsevalue();
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c20(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsekey() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 10, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseASCII_BASIC();
            if (s2 !== peg$FAILED) while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parseASCII_BASIC();
            }
            else s1 = peg$c2;
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c21(s1);
            }
            s0 = s1;
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsequoted_key() {
            var s0, s1;
            var key = peg$currPos * 49 + 11, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parsedouble_quoted_single_line_string();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c22(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsesingle_quoted_single_line_string();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c22(s1);
                }
                s0 = s1;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsevalue() {
            var s0;
            var key = peg$currPos * 49 + 12, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$parsestring();
            if (s0 === peg$FAILED) {
                s0 = peg$parsedatetime();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsefloat();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseinteger();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseboolean();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parsearray();
                                if (s0 === peg$FAILED) s0 = peg$parseinline_table();
                            }
                        }
                    }
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsestring() {
            var s0;
            var key = peg$currPos * 49 + 13, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$parsedouble_quoted_multiline_string();
            if (s0 === peg$FAILED) {
                s0 = peg$parsedouble_quoted_single_line_string();
                if (s0 === peg$FAILED) {
                    s0 = peg$parsesingle_quoted_multiline_string();
                    if (s0 === peg$FAILED) s0 = peg$parsesingle_quoted_single_line_string();
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsedouble_quoted_multiline_string() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 14, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c23) {
                s1 = peg$c23;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c24);
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseNL();
                if (s2 === peg$FAILED) s2 = peg$c25;
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsemultiline_string_char();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parsemultiline_string_char();
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c23) {
                            s4 = peg$c23;
                            peg$currPos += 3;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c24);
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c26(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsedouble_quoted_single_line_string() {
            var s0, s1, s2, s3;
            var key = peg$currPos * 49 + 15, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c27;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c28);
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsestring_char();
                while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$parsestring_char();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s3 = peg$c27;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c28);
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c26(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsesingle_quoted_multiline_string() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 16, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c29) {
                s1 = peg$c29;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c30);
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseNL();
                if (s2 === peg$FAILED) s2 = peg$c25;
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsemultiline_literal_char();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parsemultiline_literal_char();
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c29) {
                            s4 = peg$c29;
                            peg$currPos += 3;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c30);
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c26(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsesingle_quoted_single_line_string() {
            var s0, s1, s2, s3;
            var key = peg$currPos * 49 + 17, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c31;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c32);
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseliteral_char();
                while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$parseliteral_char();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 39) {
                        s3 = peg$c31;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c32);
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c26(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsestring_char() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 18, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$parseESCAPED();
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 34) {
                    s2 = peg$c27;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c28);
                }
                peg$silentFails--;
                if (s2 === peg$FAILED) s1 = peg$c5;
                else {
                    peg$currPos = s1;
                    s1 = peg$c2;
                }
                if (s1 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c6);
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c33(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseliteral_char() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 19, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 39) {
                s2 = peg$c31;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c32);
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) s1 = peg$c5;
            else {
                peg$currPos = s1;
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c6);
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c33(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsemultiline_string_char() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 20, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$parseESCAPED();
            if (s0 === peg$FAILED) {
                s0 = peg$parsemultiline_string_delim();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 3) === peg$c23) {
                        s2 = peg$c23;
                        peg$currPos += 3;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c24);
                    }
                    peg$silentFails--;
                    if (s2 === peg$FAILED) s1 = peg$c5;
                    else {
                        peg$currPos = s1;
                        s1 = peg$c2;
                    }
                    if (s1 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s2 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c6);
                        }
                        if (s2 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c34(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsemultiline_string_delim() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 21, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
                s1 = peg$c35;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c36);
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseNL();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseNLS();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parseNLS();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c37();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsemultiline_literal_char() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 22, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 3) === peg$c29) {
                s2 = peg$c29;
                peg$currPos += 3;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c30);
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) s1 = peg$c5;
            else {
                peg$currPos = s1;
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c6);
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c33(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsefloat() {
            var s0, s1, s2, s3;
            var key = peg$currPos * 49 + 23, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parsefloat_text();
            if (s1 === peg$FAILED) s1 = peg$parseinteger_text();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 101) {
                    s2 = peg$c38;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c39);
                }
                if (s2 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 69) {
                        s2 = peg$c40;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c41);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseinteger_text();
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c42(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsefloat_text();
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c43(s1);
                }
                s0 = s1;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsefloat_text() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 49 + 24, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 43) {
                s1 = peg$c44;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c45);
            }
            if (s1 === peg$FAILED) s1 = peg$c25;
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseDIGITS();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s4 = peg$c16;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c17);
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseDIGITS();
                        if (s5 !== peg$FAILED) {
                            s3 = [
                                s3,
                                s4,
                                s5
                            ];
                            s2 = s3;
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c2;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c46(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s1 = peg$c47;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c48);
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseDIGITS();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s4 = peg$c16;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c17);
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseDIGITS();
                            if (s5 !== peg$FAILED) {
                                s3 = [
                                    s3,
                                    s4,
                                    s5
                                ];
                                s2 = s3;
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c2;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c2;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c49(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseinteger() {
            var s0, s1;
            var key = peg$currPos * 49 + 25, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parseinteger_text();
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c50(s1);
            }
            s0 = s1;
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseinteger_text() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 26, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 43) {
                s1 = peg$c44;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c45);
            }
            if (s1 === peg$FAILED) s1 = peg$c25;
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseDIGIT_OR_UNDER();
                if (s3 !== peg$FAILED) while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$parseDIGIT_OR_UNDER();
                }
                else s2 = peg$c2;
                if (s2 !== peg$FAILED) {
                    s3 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s4 = peg$c16;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c17);
                    }
                    peg$silentFails--;
                    if (s4 === peg$FAILED) s3 = peg$c5;
                    else {
                        peg$currPos = s3;
                        s3 = peg$c2;
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c46(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 45) {
                    s1 = peg$c47;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c48);
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseDIGIT_OR_UNDER();
                    if (s3 !== peg$FAILED) while(s3 !== peg$FAILED){
                        s2.push(s3);
                        s3 = peg$parseDIGIT_OR_UNDER();
                    }
                    else s2 = peg$c2;
                    if (s2 !== peg$FAILED) {
                        s3 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 46) {
                            s4 = peg$c16;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c17);
                        }
                        peg$silentFails--;
                        if (s4 === peg$FAILED) s3 = peg$c5;
                        else {
                            peg$currPos = s3;
                            s3 = peg$c2;
                        }
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c49(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseboolean() {
            var s0, s1;
            var key = peg$currPos * 49 + 27, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c51) {
                s1 = peg$c51;
                peg$currPos += 4;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c52);
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c53();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c54) {
                    s1 = peg$c54;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c55);
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c56();
                }
                s0 = s1;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsearray() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 28, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c7;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c8);
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsearray_sep();
                while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$parsearray_sep();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s3 = peg$c9;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c10);
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c57();
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 91) {
                    s1 = peg$c7;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c8);
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsearray_value();
                    if (s2 === peg$FAILED) s2 = peg$c25;
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s3 = peg$c9;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c10);
                        }
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c58(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 91) {
                        s1 = peg$c7;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c8);
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = [];
                        s3 = peg$parsearray_value_list();
                        if (s3 !== peg$FAILED) while(s3 !== peg$FAILED){
                            s2.push(s3);
                            s3 = peg$parsearray_value_list();
                        }
                        else s2 = peg$c2;
                        if (s2 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 93) {
                                s3 = peg$c9;
                                peg$currPos++;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) peg$fail(peg$c10);
                            }
                            if (s3 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c59(s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 91) {
                            s1 = peg$c7;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c8);
                        }
                        if (s1 !== peg$FAILED) {
                            s2 = [];
                            s3 = peg$parsearray_value_list();
                            if (s3 !== peg$FAILED) while(s3 !== peg$FAILED){
                                s2.push(s3);
                                s3 = peg$parsearray_value_list();
                            }
                            else s2 = peg$c2;
                            if (s2 !== peg$FAILED) {
                                s3 = peg$parsearray_value();
                                if (s3 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 93) {
                                        s4 = peg$c9;
                                        peg$currPos++;
                                    } else {
                                        s4 = peg$FAILED;
                                        if (peg$silentFails === 0) peg$fail(peg$c10);
                                    }
                                    if (s4 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c60(s2, s3);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    }
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsearray_value() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 29, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsearray_sep();
            while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parsearray_sep();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsevalue();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsearray_sep();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parsearray_sep();
                    }
                    if (s3 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c61(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsearray_value_list() {
            var s0, s1, s2, s3, s4, s5, s6;
            var key = peg$currPos * 49 + 30, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsearray_sep();
            while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parsearray_sep();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsevalue();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parsearray_sep();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parsearray_sep();
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                            s4 = peg$c62;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c63);
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parsearray_sep();
                            while(s6 !== peg$FAILED){
                                s5.push(s6);
                                s6 = peg$parsearray_sep();
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c61(s2);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsearray_sep() {
            var s0;
            var key = peg$currPos * 49 + 31, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$parseS();
            if (s0 === peg$FAILED) {
                s0 = peg$parseNL();
                if (s0 === peg$FAILED) s0 = peg$parsecomment();
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseinline_table() {
            var s0, s1, s2, s3, s4, s5;
            var key = peg$currPos * 49 + 32, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c64;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c65);
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseS();
                while(s3 !== peg$FAILED){
                    s2.push(s3);
                    s3 = peg$parseS();
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseinline_table_assignment();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parseinline_table_assignment();
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseS();
                        while(s5 !== peg$FAILED){
                            s4.push(s5);
                            s5 = peg$parseS();
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s5 = peg$c66;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) peg$fail(peg$c67);
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c68(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseinline_table_assignment() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
            var key = peg$currPos * 49 + 33, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseS();
            while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parseS();
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parsekey();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$parseS();
                    while(s4 !== peg$FAILED){
                        s3.push(s4);
                        s4 = peg$parseS();
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s4 = peg$c18;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c19);
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parseS();
                            while(s6 !== peg$FAILED){
                                s5.push(s6);
                                s6 = peg$parseS();
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parsevalue();
                                if (s6 !== peg$FAILED) {
                                    s7 = [];
                                    s8 = peg$parseS();
                                    while(s8 !== peg$FAILED){
                                        s7.push(s8);
                                        s8 = peg$parseS();
                                    }
                                    if (s7 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 44) {
                                            s8 = peg$c62;
                                            peg$currPos++;
                                        } else {
                                            s8 = peg$FAILED;
                                            if (peg$silentFails === 0) peg$fail(peg$c63);
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = [];
                                            s10 = peg$parseS();
                                            while(s10 !== peg$FAILED){
                                                s9.push(s10);
                                                s10 = peg$parseS();
                                            }
                                            if (s9 !== peg$FAILED) {
                                                peg$reportedPos = s0;
                                                s1 = peg$c69(s2, s6);
                                                s0 = s1;
                                            } else {
                                                peg$currPos = s0;
                                                s0 = peg$c2;
                                            }
                                        } else {
                                            peg$currPos = s0;
                                            s0 = peg$c2;
                                        }
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parseS();
                while(s2 !== peg$FAILED){
                    s1.push(s2);
                    s2 = peg$parseS();
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parsekey();
                    if (s2 !== peg$FAILED) {
                        s3 = [];
                        s4 = peg$parseS();
                        while(s4 !== peg$FAILED){
                            s3.push(s4);
                            s4 = peg$parseS();
                        }
                        if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 61) {
                                s4 = peg$c18;
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) peg$fail(peg$c19);
                            }
                            if (s4 !== peg$FAILED) {
                                s5 = [];
                                s6 = peg$parseS();
                                while(s6 !== peg$FAILED){
                                    s5.push(s6);
                                    s6 = peg$parseS();
                                }
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parsevalue();
                                    if (s6 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c69(s2, s6);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c2;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c2;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsesecfragment() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 34, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c16;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c17);
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseDIGITS();
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c70(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsedate() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;
            var key = peg$currPos * 49 + 35, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseDIGIT_OR_UNDER();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseDIGIT_OR_UNDER();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseDIGIT_OR_UNDER();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseDIGIT_OR_UNDER();
                        if (s5 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 45) {
                                s6 = peg$c47;
                                peg$currPos++;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) peg$fail(peg$c48);
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseDIGIT_OR_UNDER();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseDIGIT_OR_UNDER();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 45) {
                                            s9 = peg$c47;
                                            peg$currPos++;
                                        } else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) peg$fail(peg$c48);
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseDIGIT_OR_UNDER();
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parseDIGIT_OR_UNDER();
                                                if (s11 !== peg$FAILED) {
                                                    s2 = [
                                                        s2,
                                                        s3,
                                                        s4,
                                                        s5,
                                                        s6,
                                                        s7,
                                                        s8,
                                                        s9,
                                                        s10,
                                                        s11
                                                    ];
                                                    s1 = s2;
                                                } else {
                                                    peg$currPos = s1;
                                                    s1 = peg$c2;
                                                }
                                            } else {
                                                peg$currPos = s1;
                                                s1 = peg$c2;
                                            }
                                        } else {
                                            peg$currPos = s1;
                                            s1 = peg$c2;
                                        }
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$c2;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$c2;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c2;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c2;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c2;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c71(s1);
            }
            s0 = s1;
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsetime() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
            var key = peg$currPos * 49 + 36, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseDIGIT_OR_UNDER();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseDIGIT_OR_UNDER();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c72;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c73);
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseDIGIT_OR_UNDER();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseDIGIT_OR_UNDER();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s7 = peg$c72;
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) peg$fail(peg$c73);
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseDIGIT_OR_UNDER();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseDIGIT_OR_UNDER();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parsesecfragment();
                                            if (s10 === peg$FAILED) s10 = peg$c25;
                                            if (s10 !== peg$FAILED) {
                                                s2 = [
                                                    s2,
                                                    s3,
                                                    s4,
                                                    s5,
                                                    s6,
                                                    s7,
                                                    s8,
                                                    s9,
                                                    s10
                                                ];
                                                s1 = s2;
                                            } else {
                                                peg$currPos = s1;
                                                s1 = peg$c2;
                                            }
                                        } else {
                                            peg$currPos = s1;
                                            s1 = peg$c2;
                                        }
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$c2;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$c2;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c2;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c2;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c2;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c74(s1);
            }
            s0 = s1;
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsetime_with_offset() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;
            var key = peg$currPos * 49 + 37, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$currPos;
            s2 = peg$parseDIGIT_OR_UNDER();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseDIGIT_OR_UNDER();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c72;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c73);
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseDIGIT_OR_UNDER();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseDIGIT_OR_UNDER();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s7 = peg$c72;
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) peg$fail(peg$c73);
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseDIGIT_OR_UNDER();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseDIGIT_OR_UNDER();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parsesecfragment();
                                            if (s10 === peg$FAILED) s10 = peg$c25;
                                            if (s10 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 45) {
                                                    s11 = peg$c47;
                                                    peg$currPos++;
                                                } else {
                                                    s11 = peg$FAILED;
                                                    if (peg$silentFails === 0) peg$fail(peg$c48);
                                                }
                                                if (s11 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 43) {
                                                        s11 = peg$c44;
                                                        peg$currPos++;
                                                    } else {
                                                        s11 = peg$FAILED;
                                                        if (peg$silentFails === 0) peg$fail(peg$c45);
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseDIGIT_OR_UNDER();
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parseDIGIT_OR_UNDER();
                                                        if (s13 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 58) {
                                                                s14 = peg$c72;
                                                                peg$currPos++;
                                                            } else {
                                                                s14 = peg$FAILED;
                                                                if (peg$silentFails === 0) peg$fail(peg$c73);
                                                            }
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = peg$parseDIGIT_OR_UNDER();
                                                                if (s15 !== peg$FAILED) {
                                                                    s16 = peg$parseDIGIT_OR_UNDER();
                                                                    if (s16 !== peg$FAILED) {
                                                                        s2 = [
                                                                            s2,
                                                                            s3,
                                                                            s4,
                                                                            s5,
                                                                            s6,
                                                                            s7,
                                                                            s8,
                                                                            s9,
                                                                            s10,
                                                                            s11,
                                                                            s12,
                                                                            s13,
                                                                            s14,
                                                                            s15,
                                                                            s16
                                                                        ];
                                                                        s1 = s2;
                                                                    } else {
                                                                        peg$currPos = s1;
                                                                        s1 = peg$c2;
                                                                    }
                                                                } else {
                                                                    peg$currPos = s1;
                                                                    s1 = peg$c2;
                                                                }
                                                            } else {
                                                                peg$currPos = s1;
                                                                s1 = peg$c2;
                                                            }
                                                        } else {
                                                            peg$currPos = s1;
                                                            s1 = peg$c2;
                                                        }
                                                    } else {
                                                        peg$currPos = s1;
                                                        s1 = peg$c2;
                                                    }
                                                } else {
                                                    peg$currPos = s1;
                                                    s1 = peg$c2;
                                                }
                                            } else {
                                                peg$currPos = s1;
                                                s1 = peg$c2;
                                            }
                                        } else {
                                            peg$currPos = s1;
                                            s1 = peg$c2;
                                        }
                                    } else {
                                        peg$currPos = s1;
                                        s1 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s1;
                                    s1 = peg$c2;
                                }
                            } else {
                                peg$currPos = s1;
                                s1 = peg$c2;
                            }
                        } else {
                            peg$currPos = s1;
                            s1 = peg$c2;
                        }
                    } else {
                        peg$currPos = s1;
                        s1 = peg$c2;
                    }
                } else {
                    peg$currPos = s1;
                    s1 = peg$c2;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$c2;
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c74(s1);
            }
            s0 = s1;
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parsedatetime() {
            var s0, s1, s2, s3, s4;
            var key = peg$currPos * 49 + 38, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = peg$parsedate();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 84) {
                    s2 = peg$c75;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c76);
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parsetime();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 90) {
                            s4 = peg$c77;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c78);
                        }
                        if (s4 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c79(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsedate();
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 84) {
                        s2 = peg$c75;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c76);
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parsetime_with_offset();
                        if (s3 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c80(s1, s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c2;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseS() {
            var s0;
            var key = peg$currPos * 49 + 39, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            if (peg$c81.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c82);
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseNL() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 40, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            if (input.charCodeAt(peg$currPos) === 10) {
                s0 = peg$c83;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c84);
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 13) {
                    s1 = peg$c85;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c86);
                }
                if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 10) {
                        s2 = peg$c83;
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c84);
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [
                            s1,
                            s2
                        ];
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseNLS() {
            var s0;
            var key = peg$currPos * 49 + 41, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$parseNL();
            if (s0 === peg$FAILED) s0 = peg$parseS();
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseEOF() {
            var s0, s1;
            var key = peg$currPos * 49 + 42, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c6);
            }
            peg$silentFails--;
            if (s1 === peg$FAILED) s0 = peg$c5;
            else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseHEX() {
            var s0;
            var key = peg$currPos * 49 + 43, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            if (peg$c87.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c88);
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseDIGIT_OR_UNDER() {
            var s0, s1;
            var key = peg$currPos * 49 + 44, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            if (peg$c89.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c90);
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 95) {
                    s1 = peg$c91;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c92);
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c93();
                }
                s0 = s1;
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseASCII_BASIC() {
            var s0;
            var key = peg$currPos * 49 + 45, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            if (peg$c94.test(input.charAt(peg$currPos))) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c95);
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseDIGITS() {
            var s0, s1, s2;
            var key = peg$currPos * 49 + 46, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseDIGIT_OR_UNDER();
            if (s2 !== peg$FAILED) while(s2 !== peg$FAILED){
                s1.push(s2);
                s2 = peg$parseDIGIT_OR_UNDER();
            }
            else s1 = peg$c2;
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c96(s1);
            }
            s0 = s1;
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseESCAPED() {
            var s0, s1;
            var key = peg$currPos * 49 + 47, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c97) {
                s1 = peg$c97;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c98);
            }
            if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c99();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c100) {
                    s1 = peg$c100;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c101);
                }
                if (s1 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c102();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c103) {
                        s1 = peg$c103;
                        peg$currPos += 2;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) peg$fail(peg$c104);
                    }
                    if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c105();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c106) {
                            s1 = peg$c106;
                            peg$currPos += 2;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) peg$fail(peg$c107);
                        }
                        if (s1 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c108();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c109) {
                                s1 = peg$c109;
                                peg$currPos += 2;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) peg$fail(peg$c110);
                            }
                            if (s1 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c111();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c112) {
                                    s1 = peg$c112;
                                    peg$currPos += 2;
                                } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) peg$fail(peg$c113);
                                }
                                if (s1 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c114();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c115) {
                                        s1 = peg$c115;
                                        peg$currPos += 2;
                                    } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) peg$fail(peg$c116);
                                    }
                                    if (s1 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c117();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) s0 = peg$parseESCAPED_UNICODE();
                                }
                            }
                        }
                    }
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        function peg$parseESCAPED_UNICODE() {
            var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
            var key = peg$currPos * 49 + 48, cached = peg$cache[key];
            if (cached) {
                peg$currPos = cached.nextPos;
                return cached.result;
            }
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c118) {
                s1 = peg$c118;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) peg$fail(peg$c119);
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseHEX();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseHEX();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseHEX();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseHEX();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseHEX();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseHEX();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseHEX();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseHEX();
                                            if (s10 !== peg$FAILED) {
                                                s3 = [
                                                    s3,
                                                    s4,
                                                    s5,
                                                    s6,
                                                    s7,
                                                    s8,
                                                    s9,
                                                    s10
                                                ];
                                                s2 = s3;
                                            } else {
                                                peg$currPos = s2;
                                                s2 = peg$c2;
                                            }
                                        } else {
                                            peg$currPos = s2;
                                            s2 = peg$c2;
                                        }
                                    } else {
                                        peg$currPos = s2;
                                        s2 = peg$c2;
                                    }
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$c2;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c2;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c2;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                    }
                } else {
                    peg$currPos = s2;
                    s2 = peg$c2;
                }
                if (s2 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c120(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c2;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c121) {
                    s1 = peg$c121;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) peg$fail(peg$c122);
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseHEX();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseHEX();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseHEX();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseHEX();
                                if (s6 !== peg$FAILED) {
                                    s3 = [
                                        s3,
                                        s4,
                                        s5,
                                        s6
                                    ];
                                    s2 = s3;
                                } else {
                                    peg$currPos = s2;
                                    s2 = peg$c2;
                                }
                            } else {
                                peg$currPos = s2;
                                s2 = peg$c2;
                            }
                        } else {
                            peg$currPos = s2;
                            s2 = peg$c2;
                        }
                    } else {
                        peg$currPos = s2;
                        s2 = peg$c2;
                    }
                    if (s2 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c120(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c2;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c2;
                }
            }
            peg$cache[key] = {
                nextPos: peg$currPos,
                result: s0
            };
            return s0;
        }
        var nodes = [];
        function genError(err, line, col) {
            var ex = new Error(err);
            ex.line = line;
            ex.column = col;
            throw ex;
        }
        function addNode(node) {
            nodes.push(node);
        }
        function node(type, value, line, column, key) {
            var obj = {
                type: type,
                value: value,
                line: line(),
                column: column()
            };
            if (key) obj.key = key;
            return obj;
        }
        function convertCodePoint(str, line, col) {
            var num = parseInt("0x" + str);
            if (!isFinite(num) || Math.floor(num) != num || num < 0 || num > 0x10FFFF || num > 0xD7FF && num < 0xE000) genError("Invalid Unicode escape code: " + str, line, col);
            else return fromCodePoint(num);
        }
        function fromCodePoint() {
            var MAX_SIZE = 0x4000;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) return "";
            var result = "";
            while(++index < length){
                var codePoint = Number(arguments[index]);
                if (codePoint <= 0xFFFF) codeUnits.push(codePoint);
                else {
                    // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                    codePoint -= 0x10000;
                    highSurrogate = (codePoint >> 10) + 0xD800;
                    lowSurrogate = codePoint % 0x400 + 0xDC00;
                    codeUnits.push(highSurrogate, lowSurrogate);
                }
                if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                    result += String.fromCharCode.apply(null, codeUnits);
                    codeUnits.length = 0;
                }
            }
            return result;
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) return peg$result;
        else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) peg$fail({
                type: "end",
                description: "end of input"
            });
            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
        }
    }
    return {
        SyntaxError: SyntaxError,
        parse: parse
    };
}();

},{}],"7Blkt":[function(require,module,exports) {
"use strict";
function compile(nodes) {
    var assignedPaths = [];
    var valueAssignments = [];
    var currentPath = "";
    var data = {};
    var context = data;
    var arrayMode = false;
    return reduce(nodes);
    function reduce(nodes) {
        var node;
        for(var i = 0; i < nodes.length; i++){
            node = nodes[i];
            switch(node.type){
                case "Assign":
                    assign(node);
                    break;
                case "ObjectPath":
                    setPath(node);
                    break;
                case "ArrayPath":
                    addTableArray(node);
                    break;
            }
        }
        return data;
    }
    function genError(err, line, col) {
        var ex = new Error(err);
        ex.line = line;
        ex.column = col;
        throw ex;
    }
    function assign(node) {
        var key = node.key;
        var value = node.value;
        var line = node.line;
        var column = node.column;
        var fullPath;
        if (currentPath) fullPath = currentPath + "." + key;
        else fullPath = key;
        if (typeof context[key] !== "undefined") genError("Cannot redefine existing key '" + fullPath + "'.", line, column);
        context[key] = reduceValueNode(value);
        if (!pathAssigned(fullPath)) {
            assignedPaths.push(fullPath);
            valueAssignments.push(fullPath);
        }
    }
    function pathAssigned(path) {
        return assignedPaths.indexOf(path) !== -1;
    }
    function reduceValueNode(node) {
        if (node.type === "Array") return reduceArrayWithTypeChecking(node.value);
        else if (node.type === "InlineTable") return reduceInlineTableNode(node.value);
        else return node.value;
    }
    function reduceInlineTableNode(values) {
        var obj = {};
        for(var i = 0; i < values.length; i++){
            var val = values[i];
            if (val.value.type === "InlineTable") obj[val.key] = reduceInlineTableNode(val.value.value);
            else if (val.type === "InlineTableValue") obj[val.key] = reduceValueNode(val.value);
        }
        return obj;
    }
    function setPath(node) {
        var path = node.value;
        var quotedPath = path.map(quoteDottedString).join(".");
        var line = node.line;
        var column = node.column;
        if (pathAssigned(quotedPath)) genError("Cannot redefine existing key '" + path + "'.", line, column);
        assignedPaths.push(quotedPath);
        context = deepRef(data, path, {}, line, column);
        currentPath = path;
    }
    function addTableArray(node) {
        var path = node.value;
        var quotedPath = path.map(quoteDottedString).join(".");
        var line = node.line;
        var column = node.column;
        if (!pathAssigned(quotedPath)) assignedPaths.push(quotedPath);
        assignedPaths = assignedPaths.filter(function(p) {
            return p.indexOf(quotedPath) !== 0;
        });
        assignedPaths.push(quotedPath);
        context = deepRef(data, path, [], line, column);
        currentPath = quotedPath;
        if (context instanceof Array) {
            var newObj = {};
            context.push(newObj);
            context = newObj;
        } else genError("Cannot redefine existing key '" + path + "'.", line, column);
    }
    // Given a path 'a.b.c', create (as necessary) `start.a`,
    // `start.a.b`, and `start.a.b.c`, assigning `value` to `start.a.b.c`.
    // If `a` or `b` are arrays and have items in them, the last item in the
    // array is used as the context for the next sub-path.
    function deepRef(start, keys, value, line, column) {
        var traversed = [];
        var traversedPath = "";
        var path = keys.join(".");
        var ctx = start;
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            traversed.push(key);
            traversedPath = traversed.join(".");
            if (typeof ctx[key] === "undefined") {
                if (i === keys.length - 1) ctx[key] = value;
                else ctx[key] = {};
            } else if (i !== keys.length - 1 && valueAssignments.indexOf(traversedPath) > -1) // already a non-object value at key, can't be used as part of a new path
            genError("Cannot redefine existing key '" + traversedPath + "'.", line, column);
            ctx = ctx[key];
            if (ctx instanceof Array && ctx.length && i < keys.length - 1) ctx = ctx[ctx.length - 1];
        }
        return ctx;
    }
    function reduceArrayWithTypeChecking(array) {
        // Ensure that all items in the array are of the same type
        var firstType = null;
        for(var i = 0; i < array.length; i++){
            var node = array[i];
            if (firstType === null) firstType = node.type;
            else if (node.type !== firstType) genError("Cannot add value of type " + node.type + " to array of type " + firstType + ".", node.line, node.column);
        }
        // Recursively reduce array of nodes into array of the nodes' values
        return array.map(reduceValueNode);
    }
    function quoteDottedString(str) {
        if (str.indexOf(".") > -1) return '"' + str + '"';
        else return str;
    }
}
module.exports = {
    compile: compile
};

},{}],"idUEx":[function(require,module,exports) {
var Buffer = require("971f3a37d2a51647").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Utils = void 0;
var tslib_1 = require("c0e703fe2d51eb98");
var clone_1 = tslib_1.__importDefault(require("c278800633af264a"));
var randombytes_1 = tslib_1.__importDefault(require("628b1bcefcbaf427"));
var stellar_base_1 = require("1503d872a8494edc");
var errors_1 = require("c0b75cb8417ab3ad");
var Utils;
(function(Utils) {
    function buildChallengeTx(serverKeypair, clientAccountID, homeDomain, timeout, networkPassphrase, webAuthDomain, memo, clientDomain, clientSigningKey) {
        if (timeout === void 0) timeout = 300;
        if (memo === void 0) memo = null;
        if (clientDomain === void 0) clientDomain = null;
        if (clientSigningKey === void 0) clientSigningKey = null;
        if (clientAccountID.startsWith("M") && memo) throw Error("memo cannot be used if clientAccountID is a muxed account");
        var account = new stellar_base_1.Account(serverKeypair.publicKey(), "-1");
        var now = Math.floor(Date.now() / 1000);
        var value = randombytes_1.default(48).toString("base64");
        var builder = new stellar_base_1.TransactionBuilder(account, {
            fee: stellar_base_1.BASE_FEE,
            networkPassphrase: networkPassphrase,
            timebounds: {
                minTime: now,
                maxTime: now + timeout
            }
        }).addOperation(stellar_base_1.Operation.manageData({
            name: homeDomain + " auth",
            value: value,
            source: clientAccountID
        })).addOperation(stellar_base_1.Operation.manageData({
            name: "web_auth_domain",
            value: webAuthDomain,
            source: account.accountId()
        }));
        if (clientDomain) {
            if (!clientSigningKey) throw Error("clientSigningKey is required if clientDomain is provided");
            builder.addOperation(stellar_base_1.Operation.manageData({
                name: "client_domain",
                value: clientDomain,
                source: clientSigningKey
            }));
        }
        if (memo) builder.addMemo(stellar_base_1.Memo.id(memo));
        var transaction = builder.build();
        transaction.sign(serverKeypair);
        return transaction.toEnvelope().toXDR("base64").toString();
    }
    Utils.buildChallengeTx = buildChallengeTx;
    function readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain) {
        var _a;
        if (serverAccountID.startsWith("M")) throw Error("Invalid serverAccountID: multiplexed accounts are not supported.");
        var transaction;
        try {
            transaction = new stellar_base_1.Transaction(challengeTx, networkPassphrase);
        } catch (_b) {
            try {
                transaction = new stellar_base_1.FeeBumpTransaction(challengeTx, networkPassphrase);
            } catch (_c) {
                throw new errors_1.InvalidSep10ChallengeError("Invalid challenge: unable to deserialize challengeTx transaction string");
            }
            throw new errors_1.InvalidSep10ChallengeError("Invalid challenge: expected a Transaction but received a FeeBumpTransaction");
        }
        var sequence = Number.parseInt(transaction.sequence, 10);
        if (sequence !== 0) throw new errors_1.InvalidSep10ChallengeError("The transaction sequence number should be zero");
        if (transaction.source !== serverAccountID) throw new errors_1.InvalidSep10ChallengeError("The transaction source account is not equal to the server's account");
        if (transaction.operations.length < 1) throw new errors_1.InvalidSep10ChallengeError("The transaction should contain at least one operation");
        var _d = transaction.operations, operation = _d[0], subsequentOperations = _d.slice(1);
        if (!operation.source) throw new errors_1.InvalidSep10ChallengeError("The transaction's operation should contain a source account");
        var clientAccountID = operation.source;
        var memo = null;
        if (transaction.memo.type !== stellar_base_1.MemoNone) {
            if (clientAccountID.startsWith("M")) throw new errors_1.InvalidSep10ChallengeError("The transaction has a memo but the client account ID is a muxed account");
            if (transaction.memo.type !== stellar_base_1.MemoID) throw new errors_1.InvalidSep10ChallengeError("The transaction's memo must be of type `id`");
            memo = transaction.memo.value;
        }
        if (operation.type !== "manageData") throw new errors_1.InvalidSep10ChallengeError("The transaction's operation type should be 'manageData'");
        if (transaction.timeBounds && Number.parseInt((_a = transaction.timeBounds) === null || _a === void 0 ? void 0 : _a.maxTime, 10) === stellar_base_1.TimeoutInfinite) throw new errors_1.InvalidSep10ChallengeError("The transaction requires non-infinite timebounds");
        if (!validateTimebounds(transaction, 300)) throw new errors_1.InvalidSep10ChallengeError("The transaction has expired");
        if (operation.value === undefined) throw new errors_1.InvalidSep10ChallengeError("The transaction's operation values should not be null");
        if (!operation.value) throw new errors_1.InvalidSep10ChallengeError("The transaction's operation value should not be null");
        if (Buffer.from(operation.value.toString(), "base64").length !== 48) throw new errors_1.InvalidSep10ChallengeError("The transaction's operation value should be a 64 bytes base64 random string");
        if (!homeDomains) throw new errors_1.InvalidSep10ChallengeError("Invalid homeDomains: a home domain must be provided for verification");
        var matchedHomeDomain;
        if (typeof homeDomains === "string") {
            if (homeDomains + " auth" === operation.name) matchedHomeDomain = homeDomains;
        } else if (Array.isArray(homeDomains)) matchedHomeDomain = homeDomains.find(function(domain) {
            return domain + " auth" === operation.name;
        });
        else throw new errors_1.InvalidSep10ChallengeError("Invalid homeDomains: homeDomains type is " + typeof homeDomains + " but should be a string or an array");
        if (!matchedHomeDomain) throw new errors_1.InvalidSep10ChallengeError("Invalid homeDomains: the transaction's operation key name does not match the expected home domain");
        for(var _i = 0, subsequentOperations_1 = subsequentOperations; _i < subsequentOperations_1.length; _i++){
            var op = subsequentOperations_1[_i];
            if (op.type !== "manageData") throw new errors_1.InvalidSep10ChallengeError("The transaction has operations that are not of type 'manageData'");
            if (op.source !== serverAccountID && op.name !== "client_domain") throw new errors_1.InvalidSep10ChallengeError("The transaction has operations that are unrecognized");
            if (op.name === "web_auth_domain") {
                if (op.value === undefined) throw new errors_1.InvalidSep10ChallengeError("'web_auth_domain' operation value should not be null");
                if (op.value.compare(Buffer.from(webAuthDomain))) throw new errors_1.InvalidSep10ChallengeError("'web_auth_domain' operation value does not match " + webAuthDomain);
            }
        }
        if (!verifyTxSignedBy(transaction, serverAccountID)) throw new errors_1.InvalidSep10ChallengeError("Transaction not signed by server: '" + serverAccountID + "'");
        return {
            tx: transaction,
            clientAccountID: clientAccountID,
            matchedHomeDomain: matchedHomeDomain,
            memo: memo
        };
    }
    Utils.readChallengeTx = readChallengeTx;
    function verifyChallengeTxThreshold(challengeTx, serverAccountID, networkPassphrase, threshold, signerSummary, homeDomains, webAuthDomain) {
        var _a;
        var signers = signerSummary.map(function(signer) {
            return signer.key;
        });
        var signersFound = verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain);
        var weight = 0;
        var _loop_1 = function(signer) {
            var sigWeight = ((_a = signerSummary.find(function(s) {
                return s.key === signer;
            })) === null || _a === void 0 ? void 0 : _a.weight) || 0;
            weight += sigWeight;
        };
        for(var _i = 0, signersFound_1 = signersFound; _i < signersFound_1.length; _i++){
            var signer = signersFound_1[_i];
            _loop_1(signer);
        }
        if (weight < threshold) throw new errors_1.InvalidSep10ChallengeError("signers with weight " + weight + " do not meet threshold " + threshold + '"');
        return signersFound;
    }
    Utils.verifyChallengeTxThreshold = verifyChallengeTxThreshold;
    function verifyChallengeTxSigners(challengeTx, serverAccountID, networkPassphrase, signers, homeDomains, webAuthDomain) {
        var tx = readChallengeTx(challengeTx, serverAccountID, networkPassphrase, homeDomains, webAuthDomain).tx;
        var serverKP;
        try {
            serverKP = stellar_base_1.Keypair.fromPublicKey(serverAccountID);
        } catch (err) {
            throw new Error("Couldn't infer keypair from the provided 'serverAccountID': " + err.message);
        }
        var clientSigners = new Set();
        for(var _i = 0, signers_1 = signers; _i < signers_1.length; _i++){
            var signer = signers_1[_i];
            if (signer === serverKP.publicKey()) continue;
            if (signer.charAt(0) !== "G") continue;
            clientSigners.add(signer);
        }
        if (clientSigners.size === 0) throw new errors_1.InvalidSep10ChallengeError("No verifiable client signers provided, at least one G... address must be provided");
        var clientSigningKey;
        for(var _a = 0, _b = tx.operations; _a < _b.length; _a++){
            var op = _b[_a];
            if (op.type === "manageData" && op.name === "client_domain") {
                if (clientSigningKey) throw new errors_1.InvalidSep10ChallengeError("Found more than one client_domain operation");
                clientSigningKey = op.source;
            }
        }
        var allSigners = tslib_1.__spreadArrays([
            serverKP.publicKey()
        ], Array.from(clientSigners));
        if (clientSigningKey) allSigners.push(clientSigningKey);
        var signersFound = gatherTxSigners(tx, allSigners);
        var serverSignatureFound = false;
        var clientSigningKeySignatureFound = false;
        for(var _c = 0, signersFound_2 = signersFound; _c < signersFound_2.length; _c++){
            var signer = signersFound_2[_c];
            if (signer === serverKP.publicKey()) serverSignatureFound = true;
            if (signer === clientSigningKey) clientSigningKeySignatureFound = true;
        }
        if (!serverSignatureFound) throw new errors_1.InvalidSep10ChallengeError("Transaction not signed by server: '" + serverKP.publicKey() + "'");
        if (clientSigningKey && !clientSigningKeySignatureFound) throw new errors_1.InvalidSep10ChallengeError("Transaction not signed by the source account of the 'client_domain' ManageData operation");
        if (signersFound.length === 1) throw new errors_1.InvalidSep10ChallengeError("None of the given signers match the transaction signatures");
        if (signersFound.length !== tx.signatures.length) throw new errors_1.InvalidSep10ChallengeError("Transaction has unrecognized signatures");
        signersFound.splice(signersFound.indexOf(serverKP.publicKey()), 1);
        if (clientSigningKey) signersFound.splice(signersFound.indexOf(clientSigningKey), 1);
        return signersFound;
    }
    Utils.verifyChallengeTxSigners = verifyChallengeTxSigners;
    function verifyTxSignedBy(transaction, accountID) {
        return gatherTxSigners(transaction, [
            accountID
        ]).length !== 0;
    }
    Utils.verifyTxSignedBy = verifyTxSignedBy;
    function gatherTxSigners(transaction, signers) {
        var hashedSignatureBase = transaction.hash();
        var txSignatures = clone_1.default(transaction.signatures);
        var signersFound = new Set();
        for(var _i = 0, signers_2 = signers; _i < signers_2.length; _i++){
            var signer = signers_2[_i];
            if (txSignatures.length === 0) break;
            var keypair = void 0;
            try {
                keypair = stellar_base_1.Keypair.fromPublicKey(signer);
            } catch (err) {
                throw new errors_1.InvalidSep10ChallengeError("Signer is not a valid address: " + err.message);
            }
            for(var i = 0; i < txSignatures.length; i++){
                var decSig = txSignatures[i];
                if (!decSig.hint().equals(keypair.signatureHint())) continue;
                if (keypair.verify(hashedSignatureBase, decSig.signature())) {
                    signersFound.add(signer);
                    txSignatures.splice(i, 1);
                    break;
                }
            }
        }
        return Array.from(signersFound);
    }
    Utils.gatherTxSigners = gatherTxSigners;
    function validateTimebounds(transaction, gracePeriod) {
        if (gracePeriod === void 0) gracePeriod = 0;
        if (!transaction.timeBounds) return false;
        var now = Math.floor(Date.now() / 1000);
        var _a = transaction.timeBounds, minTime = _a.minTime, maxTime = _a.maxTime;
        return now >= Number.parseInt(minTime, 10) - gracePeriod && now <= Number.parseInt(maxTime, 10) + gracePeriod;
    }
})(Utils = exports.Utils || (exports.Utils = {}));

},{"971f3a37d2a51647":"fCgem","c0e703fe2d51eb98":"lRdW5","c278800633af264a":"edHVe","628b1bcefcbaf427":"8hjhE","1503d872a8494edc":"aicMq","c0b75cb8417ab3ad":"j3jT2"}],"8hjhE":[function(require,module,exports) {
var process = require("80cfbc6d90449828");
var global = arguments[3];
"use strict";
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
}
var Buffer = require("45a92a9fdf1eb8c").Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === "function") return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"80cfbc6d90449828":"d5jf4","45a92a9fdf1eb8c":"eW7r9"}],"bEhTA":[function(require,module,exports) {
/*
 * Adapted for React Native compatibility from https://github.com/alepop/ed25519-hd-key
 */ var Buffer = require("5612af728f2fbaf").Buffer;
const createHmac = require("251524d30a984601");
const utils_1 = require("27be29a461c07330");
const ED25519_CURVE = "ed25519 seed";
const HARDENED_OFFSET = 0x80000000;
exports.getMasterKeyFromSeed = (seed)=>{
    const hmac = createHmac("sha512", ED25519_CURVE);
    const I = hmac.update(Buffer.from(seed, "hex")).digest();
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR
    };
};
const CKDPriv = ({ key , chainCode  }, index)=>{
    const indexBuffer = Buffer.allocUnsafe(4);
    indexBuffer.writeUInt32BE(index, 0);
    const data = Buffer.concat([
        Buffer.alloc(1, 0),
        key,
        indexBuffer
    ]);
    const I = createHmac("sha512", chainCode).update(data).digest();
    const IL = I.slice(0, 32);
    const IR = I.slice(32);
    return {
        key: IL,
        chainCode: IR
    };
};
exports.isValidPath = (path)=>{
    if (!utils_1.pathRegex.test(path)) return false;
    return !path.split("/").slice(1).map(utils_1.replaceDerive).some(isNaN);
};
exports.derivePath = (path, seed)=>{
    if (!exports.isValidPath(path)) throw new Error("Invalid derivation path");
    const { key , chainCode  } = exports.getMasterKeyFromSeed(seed);
    const segments = path.split("/").slice(1).map(utils_1.replaceDerive).map((el)=>parseInt(el, 10));
    return segments.reduce((parentKeys, segment)=>CKDPriv(parentKeys, segment + HARDENED_OFFSET), {
        key,
        chainCode
    });
};

},{"5612af728f2fbaf":"fCgem","251524d30a984601":"k1utz","27be29a461c07330":"5uORH"}],"k1utz":[function(require,module,exports) {
"use strict";
var inherits = require("79ab3a19323be816");
var Legacy = require("2a9dddd0bd6d8169");
var Base = require("853b22dfbbb7b704");
var Buffer = require("6905099751e2ca60").Buffer;
var md5 = require("34a4e4d17c88afc7");
var RIPEMD160 = require("b8a533c50a0bec53");
var sha = require("78649577031b6582");
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") return new Hmac("rmd160", key);
    if (alg === "md5") return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"79ab3a19323be816":"bRL3M","2a9dddd0bd6d8169":"kO6k7","853b22dfbbb7b704":"g5fTz","6905099751e2ca60":"eW7r9","34a4e4d17c88afc7":"h5gRT","b8a533c50a0bec53":"bFDDq","78649577031b6582":"jkn7m"}],"kO6k7":[function(require,module,exports) {
"use strict";
var inherits = require("d0ff805cbbb4c98a");
var Buffer = require("fdc5b0dd20bf6811").Buffer;
var Base = require("4171b4136abf2c21");
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"d0ff805cbbb4c98a":"bRL3M","fdc5b0dd20bf6811":"eW7r9","4171b4136abf2c21":"g5fTz"}],"g5fTz":[function(require,module,exports) {
var Buffer = require("4930617daf57ca18").Buffer;
var Transform = require("d007914db85dae53").Transform;
var StringDecoder = require("2862549312ff49a9").StringDecoder;
var inherits = require("30b7254bc14c7edb");
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {};
CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
};
CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"4930617daf57ca18":"eW7r9","d007914db85dae53":"j77ns","2862549312ff49a9":"3vmkr","30b7254bc14c7edb":"bRL3M"}],"j77ns":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("73573f0b70b80332").EventEmitter;
var inherits = require("f193210887cf9f5");
inherits(Stream, EE);
Stream.Readable = require("22567ca04c2f8fae");
Stream.Writable = require("de9f20bca69a8bf8");
Stream.Duplex = require("4654fcfb7c23995a");
Stream.Transform = require("a8722ff39313c286");
Stream.PassThrough = require("2486ecf35c3b0e10");
Stream.finished = require("6799e6e027be59e2");
Stream.pipeline = require("4ede1e1046a2d22b");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"73573f0b70b80332":"1VQLm","f193210887cf9f5":"bRL3M","22567ca04c2f8fae":"6NdbQ","de9f20bca69a8bf8":"gTkcq","4654fcfb7c23995a":"kKNA3","a8722ff39313c286":"ba8Mr","2486ecf35c3b0e10":"2xP98","6799e6e027be59e2":"aOMy2","4ede1e1046a2d22b":"fyp4t"}],"h5gRT":[function(require,module,exports) {
var MD5 = require("3b1f170ad6aaa89b");
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"3b1f170ad6aaa89b":"45VeE"}],"45VeE":[function(require,module,exports) {
"use strict";
var inherits = require("b982802611787ae6");
var HashBase = require("cf200541ad31d78d");
var Buffer = require("dcd473a4279f1582").Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"b982802611787ae6":"bRL3M","cf200541ad31d78d":"51qBP","dcd473a4279f1582":"eW7r9"}],"51qBP":[function(require,module,exports) {
"use strict";
var Buffer = require("5fca0ce3a2662528").Buffer;
var Transform = require("4a63908cf3e4ea14").Transform;
var inherits = require("587e07b950a0af9b");
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
};
module.exports = HashBase;

},{"5fca0ce3a2662528":"eW7r9","4a63908cf3e4ea14":"jXNWE","587e07b950a0af9b":"bRL3M"}],"bFDDq":[function(require,module,exports) {
"use strict";
var Buffer = require("b7e9f2174793eec8").Buffer;
var inherits = require("71aa2ea6a861254b");
var HashBase = require("2845b98c050c19b9");
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"b7e9f2174793eec8":"fCgem","71aa2ea6a861254b":"bRL3M","2845b98c050c19b9":"51qBP"}],"5uORH":[function(require,module,exports) {
/*
 * Filename: /Users/naviocean/Working/HAWKING/hawkinganchor/app/helpers/hd-wallet/ed25519-hd-key/utils.js
 * Path: /Users/naviocean/Working/HAWKING/hawkinganchor
 * Created Date: Wednesday, November 21st 2018, 8:58:20 pm
 * Author: Navi Ocean
 *
 * Copyright (c) 2018 Hawking LLC
 */ exports.pathRegex = new RegExp("^m(\\/[0-9]+')+$");
exports.replaceDerive = (val)=>val.replace("'", "");

},{}],"dexZq":[function(require,module,exports) {
var Buffer = require("fefe86cda3e1d89c").Buffer;
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const sha256_1 = require("d52df2eec4675c67");
const sha512_1 = require("a4c23521998080ce");
const pbkdf2_1 = require("b8b17dedfe3878f1");
const utils_1 = require("8f0822a6f9b133fd");
const _wordlists_1 = require("32b50a741507ec34");
let DEFAULT_WORDLIST = _wordlists_1._default;
const INVALID_MNEMONIC = "Invalid mnemonic";
const INVALID_ENTROPY = "Invalid entropy";
const INVALID_CHECKSUM = "Invalid mnemonic checksum";
const WORDLIST_REQUIRED = "A wordlist is required but a default could not be found.\nPlease pass a 2048 word array explicitly.";
function normalize(str) {
    return (str || "").normalize("NFKD");
}
function lpad(str, padString, length) {
    while(str.length < length)str = padString + str;
    return str;
}
function binaryToByte(bin) {
    return parseInt(bin, 2);
}
function bytesToBinary(bytes) {
    return bytes.map((x)=>lpad(x.toString(2), "0", 8)).join("");
}
function deriveChecksumBits(entropyBuffer) {
    const ENT = entropyBuffer.length * 8;
    const CS = ENT / 32;
    const hash = sha256_1.sha256(Uint8Array.from(entropyBuffer));
    return bytesToBinary(Array.from(hash)).slice(0, CS);
}
function salt(password) {
    return "mnemonic" + (password || "");
}
function mnemonicToSeedSync(mnemonic, password) {
    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), "utf8"));
    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), "utf8"));
    const res = pbkdf2_1.pbkdf2(sha512_1.sha512, mnemonicBuffer, saltBuffer, {
        c: 2048,
        dkLen: 64
    });
    return Buffer.from(res);
}
exports.mnemonicToSeedSync = mnemonicToSeedSync;
function mnemonicToSeed(mnemonic, password) {
    const mnemonicBuffer = Uint8Array.from(Buffer.from(normalize(mnemonic), "utf8"));
    const saltBuffer = Uint8Array.from(Buffer.from(salt(normalize(password)), "utf8"));
    return pbkdf2_1.pbkdf2Async(sha512_1.sha512, mnemonicBuffer, saltBuffer, {
        c: 2048,
        dkLen: 64
    }).then((res)=>Buffer.from(res));
}
exports.mnemonicToSeed = mnemonicToSeed;
function mnemonicToEntropy(mnemonic, wordlist) {
    wordlist = wordlist || DEFAULT_WORDLIST;
    if (!wordlist) throw new Error(WORDLIST_REQUIRED);
    const words = normalize(mnemonic).split(" ");
    if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC);
    // convert word indices to 11 bit binary strings
    const bits = words.map((word)=>{
        const index = wordlist.indexOf(word);
        if (index === -1) throw new Error(INVALID_MNEMONIC);
        return lpad(index.toString(2), "0", 11);
    }).join("");
    // split the binary string into ENT/CS
    const dividerIndex = Math.floor(bits.length / 33) * 32;
    const entropyBits = bits.slice(0, dividerIndex);
    const checksumBits = bits.slice(dividerIndex);
    // calculate the checksum and compare
    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
    if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY);
    if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY);
    if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY);
    const entropy = Buffer.from(entropyBytes);
    const newChecksum = deriveChecksumBits(entropy);
    if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM);
    return entropy.toString("hex");
}
exports.mnemonicToEntropy = mnemonicToEntropy;
function entropyToMnemonic(entropy, wordlist) {
    if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, "hex");
    wordlist = wordlist || DEFAULT_WORDLIST;
    if (!wordlist) throw new Error(WORDLIST_REQUIRED);
    // 128 <= ENT <= 256
    if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY);
    if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY);
    if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);
    const entropyBits = bytesToBinary(Array.from(entropy));
    const checksumBits = deriveChecksumBits(entropy);
    const bits = entropyBits + checksumBits;
    const chunks = bits.match(/(.{1,11})/g);
    const words = chunks.map((binary)=>{
        const index = binaryToByte(binary);
        return wordlist[index];
    });
    return wordlist[0] === "あいこくしん" // Japanese wordlist
     ? words.join("　") : words.join(" ");
}
exports.entropyToMnemonic = entropyToMnemonic;
function generateMnemonic(strength, rng, wordlist) {
    strength = strength || 128;
    if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY);
    rng = rng || ((size)=>Buffer.from(utils_1.randomBytes(size)));
    return entropyToMnemonic(rng(strength / 8), wordlist);
}
exports.generateMnemonic = generateMnemonic;
function validateMnemonic(mnemonic, wordlist) {
    try {
        mnemonicToEntropy(mnemonic, wordlist);
    } catch (e) {
        return false;
    }
    return true;
}
exports.validateMnemonic = validateMnemonic;
function setDefaultWordlist(language) {
    const result = _wordlists_1.wordlists[language];
    if (result) DEFAULT_WORDLIST = result;
    else throw new Error('Could not find wordlist for language "' + language + '"');
}
exports.setDefaultWordlist = setDefaultWordlist;
function getDefaultWordlist() {
    if (!DEFAULT_WORDLIST) throw new Error("No Default Wordlist set");
    return Object.keys(_wordlists_1.wordlists).filter((lang)=>{
        if (lang === "JA" || lang === "EN") return false;
        return _wordlists_1.wordlists[lang].every((word, index)=>word === DEFAULT_WORDLIST[index]);
    })[0];
}
exports.getDefaultWordlist = getDefaultWordlist;
var _wordlists_2 = require("32b50a741507ec34");
exports.wordlists = _wordlists_2.wordlists;

},{"fefe86cda3e1d89c":"fCgem","d52df2eec4675c67":"JjjO8","a4c23521998080ce":"jlH7E","b8b17dedfe3878f1":"c4hz5","8f0822a6f9b133fd":"2ehgp","32b50a741507ec34":"58Kp2"}],"JjjO8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sha224 = exports.sha256 = void 0;
const _sha2_js_1 = require("6b9f410e221aa018");
const utils_js_1 = require("3400437fbd7e848a");
// Choice: a ? b : c
const Chi = (a, b, c)=>a & b ^ ~a & c;
// Majority function, true if any two inpust is true
const Maj = (a, b, c)=>a & b ^ a & c ^ b & c;
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = new Uint32Array(64);
class SHA256 extends _sha2_js_1.SHA2 {
    constructor(){
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A , B , C , D , E , F , G , H  } = this;
        return [
            A,
            B,
            C,
            D,
            E,
            F,
            G,
            H
        ];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);
        for(let i = 16; i < 64; i++){
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        // Compression function main loop, 64 rounds
        let { A , B , C , D , E , F , G , H  } = this;
        for(let i = 0; i < 64; i++){
            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
            const T2 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
        }
        // Add the compressed chunk to the current hash value
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class SHA224 extends SHA256 {
    constructor(){
        super();
        this.A = -1056596264;
        this.B = 914150663;
        this.C = 812702999;
        this.D = -150054599;
        this.E = -4191439;
        this.F = 1750603025;
        this.G = 1694076839;
        this.H = -1090891868;
        this.outputLen = 28;
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */ exports.sha256 = (0, utils_js_1.wrapConstructor)(()=>new SHA256());
exports.sha224 = (0, utils_js_1.wrapConstructor)(()=>new SHA224());

},{"6b9f410e221aa018":"6HKeB","3400437fbd7e848a":"2ehgp"}],"6HKeB":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SHA2 = void 0;
const _assert_js_1 = require("d4cc272fa3f6fb59");
const utils_js_1 = require("e8e8064dd23d05e9");
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function") return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, padOffset, isLE){
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
    }
    update(data) {
        _assert_js_1.default.exists(this);
        const { view , buffer , blockLen  } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, utils_js_1.createView)(data);
                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        _assert_js_1.default.exists(this);
        _assert_js_1.default.output(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer , view , blockLen , isLE  } = this;
        let { pos  } = this;
        // append the bit '1' to the message
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for(let i = pos; i < blockLen; i++)buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) throw new Error("_sha2: outputLen bigger than state");
        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer , outputLen  } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen , buffer , length , finished , destroyed , pos  } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
    }
}
exports.SHA2 = SHA2;

},{"d4cc272fa3f6fb59":"BFdql","e8e8064dd23d05e9":"2ehgp"}],"BFdql":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
}
exports.number = number;
function bool(b) {
    if (typeof b !== "boolean") throw new Error(`Expected boolean, not ${b}`);
}
exports.bool = bool;
function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
exports.bytes = bytes;
function hash(hash) {
    if (typeof hash !== "function" || typeof hash.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash.outputLen);
    number(hash.blockLen);
}
exports.hash = hash;
function exists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
}
exports.exists = exists;
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
}
exports.output = output;
const assert = {
    number,
    bool,
    bytes,
    hash,
    exists,
    output
};
exports.default = assert;

},{}],"2ehgp":[function(require,module,exports) {
"use strict";
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
// We use `globalThis.crypto`, but node.js versions earlier than v19 don't
// declare it in global scope. For node.js, package.json#exports field mapping
// rewrites import from `crypto` to `cryptoNode`, which imports native module.
// Makes the utils un-importable in browsers without a bundler.
// Once node.js 18 is deprecated, we can just drop the import.
const crypto_1 = require("316d6d1131740c0b");
// Cast array to different type
const u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
exports.u8 = u8;
const u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
exports.u32 = u32;
// Cast array to view
const createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
exports.createView = createView;
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift)=>word << 32 - shift | word >>> shift;
exports.rotr = rotr;
// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
exports.isLE = new Uint8Array(new Uint32Array([
    0x11223344
]).buffer)[0] === 0x44;
if (!exports.isLE) throw new Error("Non little-endian hardware is not supported");
const hexes = Array.from({
    length: 256
}, (v, i)=>i.toString(16).padStart(2, "0"));
/**
 * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef])) // 'deadbeef'
 */ function bytesToHex(uint8a) {
    // pre-caching improves the speed 6x
    if (!(uint8a instanceof Uint8Array)) throw new Error("Uint8Array expected");
    let hex = "";
    for(let i = 0; i < uint8a.length; i++)hex += hexes[uint8a[i]];
    return hex;
}
exports.bytesToHex = bytesToHex;
/**
 * @example hexToBytes('deadbeef') // Uint8Array.from([0xde, 0xad, 0xbe, 0xef])
 */ function hexToBytes(hex) {
    if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
    if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
    const array = new Uint8Array(hex.length / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
exports.hexToBytes = hexToBytes;
// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const nextTick = async ()=>{};
exports.nextTick = nextTick;
// Returns control to thread each 'tick' ms to avoid blocking
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for(let i = 0; i < iters; i++){
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick) continue;
        await (0, exports.nextTick)();
        ts += diff;
    }
}
exports.asyncLoop = asyncLoop;
function utf8ToBytes(str) {
    if (typeof str !== "string") throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
    return new TextEncoder().encode(str);
}
exports.utf8ToBytes = utf8ToBytes;
function toBytes(data) {
    if (typeof data === "string") data = utf8ToBytes(data);
    if (!(data instanceof Uint8Array)) throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
    return data;
}
exports.toBytes = toBytes;
/**
 * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
 * @example concatBytes(buf1, buf2)
 */ function concatBytes(...arrays) {
    if (!arrays.every((a)=>a instanceof Uint8Array)) throw new Error("Uint8Array list expected");
    if (arrays.length === 1) return arrays[0];
    const length = arrays.reduce((a, arr)=>a + arr.length, 0);
    const result = new Uint8Array(length);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
exports.concatBytes = concatBytes;
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
exports.Hash = Hash;
// Check if object doens't have custom constructor (like Uint8Array/Array)
const isPlainObject = (obj)=>Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
function checkOpts(defaults, opts) {
    if (opts !== undefined && (typeof opts !== "object" || !isPlainObject(opts))) throw new TypeError("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
}
exports.checkOpts = checkOpts;
function wrapConstructor(hashConstructor) {
    const hashC = (message)=>hashConstructor().update(toBytes(message)).digest();
    const tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = ()=>hashConstructor();
    return hashC;
}
exports.wrapConstructor = wrapConstructor;
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
/**
 * Secure PRNG. Uses `globalThis.crypto` or node.js crypto module.
 */ function randomBytes(bytesLength = 32) {
    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
    throw new Error("crypto.getRandomValues must be defined");
}
exports.randomBytes = randomBytes;

},{"316d6d1131740c0b":"85XD8"}],"85XD8":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.crypto = void 0;
exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;

},{}],"jlH7E":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
const _sha2_js_1 = require("bfd08628ffc78509");
const _u64_js_1 = require("abda67990d22e60a");
const utils_js_1 = require("53d45558bb453f6f");
// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([
    "0x428a2f98d728ae22",
    "0x7137449123ef65cd",
    "0xb5c0fbcfec4d3b2f",
    "0xe9b5dba58189dbbc",
    "0x3956c25bf348b538",
    "0x59f111f1b605d019",
    "0x923f82a4af194f9b",
    "0xab1c5ed5da6d8118",
    "0xd807aa98a3030242",
    "0x12835b0145706fbe",
    "0x243185be4ee4b28c",
    "0x550c7dc3d5ffb4e2",
    "0x72be5d74f27b896f",
    "0x80deb1fe3b1696b1",
    "0x9bdc06a725c71235",
    "0xc19bf174cf692694",
    "0xe49b69c19ef14ad2",
    "0xefbe4786384f25e3",
    "0x0fc19dc68b8cd5b5",
    "0x240ca1cc77ac9c65",
    "0x2de92c6f592b0275",
    "0x4a7484aa6ea6e483",
    "0x5cb0a9dcbd41fbd4",
    "0x76f988da831153b5",
    "0x983e5152ee66dfab",
    "0xa831c66d2db43210",
    "0xb00327c898fb213f",
    "0xbf597fc7beef0ee4",
    "0xc6e00bf33da88fc2",
    "0xd5a79147930aa725",
    "0x06ca6351e003826f",
    "0x142929670a0e6e70",
    "0x27b70a8546d22ffc",
    "0x2e1b21385c26c926",
    "0x4d2c6dfc5ac42aed",
    "0x53380d139d95b3df",
    "0x650a73548baf63de",
    "0x766a0abb3c77b2a8",
    "0x81c2c92e47edaee6",
    "0x92722c851482353b",
    "0xa2bfe8a14cf10364",
    "0xa81a664bbc423001",
    "0xc24b8b70d0f89791",
    "0xc76c51a30654be30",
    "0xd192e819d6ef5218",
    "0xd69906245565a910",
    "0xf40e35855771202a",
    "0x106aa07032bbd1b8",
    "0x19a4c116b8d2d0c8",
    "0x1e376c085141ab53",
    "0x2748774cdf8eeb99",
    "0x34b0bcb5e19b48a8",
    "0x391c0cb3c5c95a63",
    "0x4ed8aa4ae3418acb",
    "0x5b9cca4f7763e373",
    "0x682e6ff3d6b2b8a3",
    "0x748f82ee5defb2fc",
    "0x78a5636f43172f60",
    "0x84c87814a1f0ab72",
    "0x8cc702081a6439ec",
    "0x90befffa23631e28",
    "0xa4506cebde82bde9",
    "0xbef9a3f7b2c67915",
    "0xc67178f2e372532b",
    "0xca273eceea26619c",
    "0xd186b8c721c0c207",
    "0xeada7dd6cde0eb1e",
    "0xf57d4f7fee6ed178",
    "0x06f067aa72176fba",
    "0x0a637dc5a2c898a6",
    "0x113f9804bef90dae",
    "0x1b710b35131c471b",
    "0x28db77f523047d84",
    "0x32caab7b40c72493",
    "0x3c9ebe0a15c9bebc",
    "0x431d67c49c100d4c",
    "0x4cc5d4becb3e42b6",
    "0x597f299cfc657e2a",
    "0x5fcb6fab3ad6faec",
    "0x6c44198c4a475817"
].map((n)=>BigInt(n)));
// Temporary buffer, not used to store anything between runs
const SHA512_W_H = new Uint32Array(80);
const SHA512_W_L = new Uint32Array(80);
class SHA512 extends _sha2_js_1.SHA2 {
    constructor(){
        super(128, 64, 16, false);
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 1779033703;
        this.Al = -205731576;
        this.Bh = -1150833019;
        this.Bl = -2067093701;
        this.Ch = 1013904242;
        this.Cl = -23791573;
        this.Dh = -1521486534;
        this.Dl = 1595750129;
        this.Eh = 1359893119;
        this.El = -1377402159;
        this.Fh = -1694144372;
        this.Fl = 725511199;
        this.Gh = 528734635;
        this.Gl = -79577749;
        this.Hh = 1541459225;
        this.Hl = 327033209;
    }
    // prettier-ignore
    get() {
        const { Ah , Al , Bh , Bl , Ch , Cl , Dh , Dl , Eh , El , Fh , Fl , Gh , Gl , Hh , Hl  } = this;
        return [
            Ah,
            Al,
            Bh,
            Bl,
            Ch,
            Cl,
            Dh,
            Dl,
            Eh,
            El,
            Fh,
            Fl,
            Gh,
            Gl,
            Hh,
            Hl
        ];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4){
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32(offset += 4);
        }
        for(let i = 16; i < 80; i++){
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah , Al , Bh , Bl , Ch , Cl , Dh , Dl , Eh , El , Fh , Fl , Gh , Gl , Hh , Hl  } = this;
        // Compression function main loop, 80 rounds
        for(let i = 0; i < 80; i++){
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh , l: El  } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah , l: Al  } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh , l: Bl  } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch , l: Cl  } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh , l: Dl  } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh , l: El  } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh , l: Fl  } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh , l: Gl  } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh , l: Hl  } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
exports.SHA512 = SHA512;
class SHA512_224 extends SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = -1942145080;
        this.Al = 424955298;
        this.Bh = 1944164710;
        this.Bl = -1982016298;
        this.Ch = 502970286;
        this.Cl = 855612546;
        this.Dh = 1738396948;
        this.Dl = 1479516111;
        this.Eh = 258812777;
        this.El = 2077511080;
        this.Fh = 2011393907;
        this.Fl = 79989058;
        this.Gh = 1067287976;
        this.Gl = 1780299464;
        this.Hh = 286451373;
        this.Hl = -1848208735;
        this.outputLen = 28;
    }
}
class SHA512_256 extends SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 573645204;
        this.Al = -64227540;
        this.Bh = -1621794909;
        this.Bl = -934517566;
        this.Ch = 596883563;
        this.Cl = 1867755857;
        this.Dh = -1774684391;
        this.Dl = 1497426621;
        this.Eh = -1775747358;
        this.El = -1467023389;
        this.Fh = -1101128155;
        this.Fl = 1401305490;
        this.Gh = 721525244;
        this.Gl = 746961066;
        this.Hh = 246885852;
        this.Hl = -2117784414;
        this.outputLen = 32;
    }
}
class SHA384 extends SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = -876896931;
        this.Al = -1056596264;
        this.Bh = 1654270250;
        this.Bl = 914150663;
        this.Ch = -1856437926;
        this.Cl = 812702999;
        this.Dh = 355462360;
        this.Dl = -150054599;
        this.Eh = 1731405415;
        this.El = -4191439;
        this.Fh = -1900787065;
        this.Fl = 1750603025;
        this.Gh = -619958771;
        this.Gl = 1694076839;
        this.Hh = 1203062813;
        this.Hl = -1090891868;
        this.outputLen = 48;
    }
}
exports.sha512 = (0, utils_js_1.wrapConstructor)(()=>new SHA512());
exports.sha512_224 = (0, utils_js_1.wrapConstructor)(()=>new SHA512_224());
exports.sha512_256 = (0, utils_js_1.wrapConstructor)(()=>new SHA512_256());
exports.sha384 = (0, utils_js_1.wrapConstructor)(()=>new SHA384());

},{"bfd08628ffc78509":"6HKeB","abda67990d22e60a":"8TbxJ","53d45558bb453f6f":"2ehgp"}],"8TbxJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.add = exports.toBig = exports.split = exports.fromBig = void 0;
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le) return {
        h: Number(n & U32_MASK64),
        l: Number(n >> _32n & U32_MASK64)
    };
    return {
        h: Number(n >> _32n & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0
    };
}
exports.fromBig = fromBig;
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for(let i = 0; i < lst.length; i++){
        const { h , l  } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [
            h,
            l
        ];
    }
    return [
        Ah,
        Al
    ];
}
exports.split = split;
const toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
exports.toBig = toBig;
// for Shift in [0, 32)
const shrSH = (h, l, s)=>h >>> s;
const shrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
const rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
const rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l)=>l;
const rotr32L = (h, l)=>h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
const rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
const rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
// Removing "export" has 5% perf penalty -_-
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
        l: l | 0
    };
}
exports.add = add;
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
// prettier-ignore
const u64 = {
    fromBig,
    split,
    toBig: exports.toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
};
exports.default = u64;

},{}],"c4hz5":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.pbkdf2Async = exports.pbkdf2 = void 0;
const _assert_js_1 = require("792ff4aef19a9de7");
const hmac_js_1 = require("7340510640bc2764");
const utils_js_1 = require("8f1b177e986fb492");
// Common prologue and epilogue for sync/async functions
function pbkdf2Init(hash, _password, _salt, _opts) {
    _assert_js_1.default.hash(hash);
    const opts = (0, utils_js_1.checkOpts)({
        dkLen: 32,
        asyncTick: 10
    }, _opts);
    const { c , dkLen , asyncTick  } = opts;
    _assert_js_1.default.number(c);
    _assert_js_1.default.number(dkLen);
    _assert_js_1.default.number(asyncTick);
    if (c < 1) throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = (0, utils_js_1.toBytes)(_password);
    const salt = (0, utils_js_1.toBytes)(_salt);
    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
    const DK = new Uint8Array(dkLen);
    // U1 = PRF(Password, Salt + INT_32_BE(i))
    const PRF = hmac_js_1.hmac.create(hash, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return {
        c,
        dkLen,
        asyncTick,
        DK,
        PRF,
        PRFSalt
    };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW) prfW.destroy();
    u.fill(0);
    return DK;
}
/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */ function pbkdf2(hash, password, salt, opts) {
    const { c , dkLen , DK , PRF , PRFSalt  } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for(let ui = 1; ui < c; ui++){
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
        }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
exports.pbkdf2 = pbkdf2;
async function pbkdf2Async(hash, password, salt, opts) {
    const { c , dkLen , asyncTick , DK , PRF , PRFSalt  } = pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i)=>{
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
        });
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
exports.pbkdf2Async = pbkdf2Async;

},{"792ff4aef19a9de7":"BFdql","7340510640bc2764":"3IfCc","8f1b177e986fb492":"2ehgp"}],"3IfCc":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hmac = void 0;
const _assert_js_1 = require("50c85facc79e3c63");
const utils_js_1 = require("2ded9f2f3bac624c");
// HMAC (RFC 2104)
class HMAC extends utils_js_1.Hash {
    constructor(hash, _key){
        super();
        this.finished = false;
        this.destroyed = false;
        _assert_js_1.default.hash(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function") throw new TypeError("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for(let i = 0; i < pad.length; i++)pad[i] ^= 106;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        _assert_js_1.default.exists(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        _assert_js_1.default.exists(this);
        _assert_js_1.default.bytes(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash , iHash , finished , destroyed , blockLen , outputLen  } = this;
        to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();
exports.hmac = hmac;
exports.hmac.create = (hash, key)=>new HMAC(hash, key);

},{"50c85facc79e3c63":"BFdql","2ded9f2f3bac624c":"2ehgp"}],"58Kp2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// browserify by default only pulls in files that are hard coded in requires
// In order of last to first in this file, the default wordlist will be chosen
// based on what is present. (Bundles may remove wordlists they don't need)
const wordlists = {};
exports.wordlists = wordlists;
let _default;
exports._default = _default;
try {
    exports._default = _default = require("7af680bd7b4792b2");
    wordlists.czech = _default;
} catch (err) {}
try {
    exports._default = _default = require("258ddb2100fd0d37");
    wordlists.chinese_simplified = _default;
} catch (err) {}
try {
    exports._default = _default = require("4057574fe44963fc");
    wordlists.chinese_traditional = _default;
} catch (err) {}
try {
    exports._default = _default = require("8c0409fc30729488");
    wordlists.korean = _default;
} catch (err) {}
try {
    exports._default = _default = require("62ad7cd38b6952a0");
    wordlists.french = _default;
} catch (err) {}
try {
    exports._default = _default = require("5053599f73dff124");
    wordlists.italian = _default;
} catch (err) {}
try {
    exports._default = _default = require("b0b36f2ed8562e01");
    wordlists.spanish = _default;
} catch (err) {}
try {
    exports._default = _default = require("18524b0742edfd3a");
    wordlists.japanese = _default;
    wordlists.JA = _default;
} catch (err) {}
try {
    exports._default = _default = require("344629f5533faec5");
    wordlists.portuguese = _default;
} catch (err) {}
try {
    exports._default = _default = require("c04db4278f254485");
    wordlists.english = _default;
    wordlists.EN = _default;
} catch (err) {}

},{"7af680bd7b4792b2":"cZf8O","258ddb2100fd0d37":"1S9Pj","4057574fe44963fc":"4TvTz","8c0409fc30729488":"dBMLx","62ad7cd38b6952a0":"aN8U3","5053599f73dff124":"1x33J","b0b36f2ed8562e01":"bdE8o","18524b0742edfd3a":"2avXR","344629f5533faec5":"b5sLs","c04db4278f254485":"4mrVv"}],"cZf8O":[function(require,module,exports) {
module.exports = JSON.parse('["abdikace","abeceda","adresa","agrese","akce","aktovka","alej","alkohol","amputace","ananas","andulka","anekdota","anketa","antika","anulovat","archa","arogance","asfalt","asistent","aspirace","astma","astronom","atlas","atletika","atol","autobus","azyl","babka","bachor","bacil","baculka","badatel","bageta","bagr","bahno","bakterie","balada","baletka","balkon","balonek","balvan","balza","bambus","bankomat","barbar","baret","barman","baroko","barva","baterka","batoh","bavlna","bazalka","bazilika","bazuka","bedna","beran","beseda","bestie","beton","bezinka","bezmoc","beztak","bicykl","bidlo","biftek","bikiny","bilance","biograf","biolog","bitva","bizon","blahobyt","blatouch","blecha","bledule","blesk","blikat","blizna","blokovat","bloudit","blud","bobek","bobr","bodlina","bodnout","bohatost","bojkot","bojovat","bokorys","bolest","borec","borovice","bota","boubel","bouchat","bouda","boule","bourat","boxer","bradavka","brambora","branka","bratr","brepta","briketa","brko","brloh","bronz","broskev","brunetka","brusinka","brzda","brzy","bublina","bubnovat","buchta","buditel","budka","budova","bufet","bujarost","bukvice","buldok","bulva","bunda","bunkr","burza","butik","buvol","buzola","bydlet","bylina","bytovka","bzukot","capart","carevna","cedr","cedule","cejch","cejn","cela","celer","celkem","celnice","cenina","cennost","cenovka","centrum","cenzor","cestopis","cetka","chalupa","chapadlo","charita","chata","chechtat","chemie","chichot","chirurg","chlad","chleba","chlubit","chmel","chmura","chobot","chochol","chodba","cholera","chomout","chopit","choroba","chov","chrapot","chrlit","chrt","chrup","chtivost","chudina","chutnat","chvat","chvilka","chvost","chyba","chystat","chytit","cibule","cigareta","cihelna","cihla","cinkot","cirkus","cisterna","citace","citrus","cizinec","cizost","clona","cokoliv","couvat","ctitel","ctnost","cudnost","cuketa","cukr","cupot","cvaknout","cval","cvik","cvrkot","cyklista","daleko","dareba","datel","datum","dcera","debata","dechovka","decibel","deficit","deflace","dekl","dekret","demokrat","deprese","derby","deska","detektiv","dikobraz","diktovat","dioda","diplom","disk","displej","divadlo","divoch","dlaha","dlouho","dluhopis","dnes","dobro","dobytek","docent","dochutit","dodnes","dohled","dohoda","dohra","dojem","dojnice","doklad","dokola","doktor","dokument","dolar","doleva","dolina","doma","dominant","domluvit","domov","donutit","dopad","dopis","doplnit","doposud","doprovod","dopustit","dorazit","dorost","dort","dosah","doslov","dostatek","dosud","dosyta","dotaz","dotek","dotknout","doufat","doutnat","dovozce","dozadu","doznat","dozorce","drahota","drak","dramatik","dravec","draze","drdol","drobnost","drogerie","drozd","drsnost","drtit","drzost","duben","duchovno","dudek","duha","duhovka","dusit","dusno","dutost","dvojice","dvorec","dynamit","ekolog","ekonomie","elektron","elipsa","email","emise","emoce","empatie","epizoda","epocha","epopej","epos","esej","esence","eskorta","eskymo","etiketa","euforie","evoluce","exekuce","exkurze","expedice","exploze","export","extrakt","facka","fajfka","fakulta","fanatik","fantazie","farmacie","favorit","fazole","federace","fejeton","fenka","fialka","figurant","filozof","filtr","finance","finta","fixace","fjord","flanel","flirt","flotila","fond","fosfor","fotbal","fotka","foton","frakce","freska","fronta","fukar","funkce","fyzika","galeje","garant","genetika","geolog","gilotina","glazura","glejt","golem","golfista","gotika","graf","gramofon","granule","grep","gril","grog","groteska","guma","hadice","hadr","hala","halenka","hanba","hanopis","harfa","harpuna","havran","hebkost","hejkal","hejno","hejtman","hektar","helma","hematom","herec","herna","heslo","hezky","historik","hladovka","hlasivky","hlava","hledat","hlen","hlodavec","hloh","hloupost","hltat","hlubina","hluchota","hmat","hmota","hmyz","hnis","hnojivo","hnout","hoblina","hoboj","hoch","hodiny","hodlat","hodnota","hodovat","hojnost","hokej","holinka","holka","holub","homole","honitba","honorace","horal","horda","horizont","horko","horlivec","hormon","hornina","horoskop","horstvo","hospoda","hostina","hotovost","houba","houf","houpat","houska","hovor","hradba","hranice","hravost","hrazda","hrbolek","hrdina","hrdlo","hrdost","hrnek","hrobka","hromada","hrot","hrouda","hrozen","hrstka","hrubost","hryzat","hubenost","hubnout","hudba","hukot","humr","husita","hustota","hvozd","hybnost","hydrant","hygiena","hymna","hysterik","idylka","ihned","ikona","iluze","imunita","infekce","inflace","inkaso","inovace","inspekce","internet","invalida","investor","inzerce","ironie","jablko","jachta","jahoda","jakmile","jakost","jalovec","jantar","jarmark","jaro","jasan","jasno","jatka","javor","jazyk","jedinec","jedle","jednatel","jehlan","jekot","jelen","jelito","jemnost","jenom","jepice","jeseter","jevit","jezdec","jezero","jinak","jindy","jinoch","jiskra","jistota","jitrnice","jizva","jmenovat","jogurt","jurta","kabaret","kabel","kabinet","kachna","kadet","kadidlo","kahan","kajak","kajuta","kakao","kaktus","kalamita","kalhoty","kalibr","kalnost","kamera","kamkoliv","kamna","kanibal","kanoe","kantor","kapalina","kapela","kapitola","kapka","kaple","kapota","kapr","kapusta","kapybara","karamel","karotka","karton","kasa","katalog","katedra","kauce","kauza","kavalec","kazajka","kazeta","kazivost","kdekoliv","kdesi","kedluben","kemp","keramika","kino","klacek","kladivo","klam","klapot","klasika","klaun","klec","klenba","klepat","klesnout","klid","klima","klisna","klobouk","klokan","klopa","kloub","klubovna","klusat","kluzkost","kmen","kmitat","kmotr","kniha","knot","koalice","koberec","kobka","kobliha","kobyla","kocour","kohout","kojenec","kokos","koktejl","kolaps","koleda","kolize","kolo","komando","kometa","komik","komnata","komora","kompas","komunita","konat","koncept","kondice","konec","konfese","kongres","konina","konkurs","kontakt","konzerva","kopanec","kopie","kopnout","koprovka","korbel","korektor","kormidlo","koroptev","korpus","koruna","koryto","korzet","kosatec","kostka","kotel","kotleta","kotoul","koukat","koupelna","kousek","kouzlo","kovboj","koza","kozoroh","krabice","krach","krajina","kralovat","krasopis","kravata","kredit","krejcar","kresba","kreveta","kriket","kritik","krize","krkavec","krmelec","krmivo","krocan","krok","kronika","kropit","kroupa","krovka","krtek","kruhadlo","krupice","krutost","krvinka","krychle","krypta","krystal","kryt","kudlanka","kufr","kujnost","kukla","kulajda","kulich","kulka","kulomet","kultura","kuna","kupodivu","kurt","kurzor","kutil","kvalita","kvasinka","kvestor","kynolog","kyselina","kytara","kytice","kytka","kytovec","kyvadlo","labrador","lachtan","ladnost","laik","lakomec","lamela","lampa","lanovka","lasice","laso","lastura","latinka","lavina","lebka","leckdy","leden","lednice","ledovka","ledvina","legenda","legie","legrace","lehce","lehkost","lehnout","lektvar","lenochod","lentilka","lepenka","lepidlo","letadlo","letec","letmo","letokruh","levhart","levitace","levobok","libra","lichotka","lidojed","lidskost","lihovina","lijavec","lilek","limetka","linie","linka","linoleum","listopad","litina","litovat","lobista","lodivod","logika","logoped","lokalita","loket","lomcovat","lopata","lopuch","lord","losos","lotr","loudal","louh","louka","louskat","lovec","lstivost","lucerna","lucifer","lump","lusk","lustrace","lvice","lyra","lyrika","lysina","madam","madlo","magistr","mahagon","majetek","majitel","majorita","makak","makovice","makrela","malba","malina","malovat","malvice","maminka","mandle","manko","marnost","masakr","maskot","masopust","matice","matrika","maturita","mazanec","mazivo","mazlit","mazurka","mdloba","mechanik","meditace","medovina","melasa","meloun","mentolka","metla","metoda","metr","mezera","migrace","mihnout","mihule","mikina","mikrofon","milenec","milimetr","milost","mimika","mincovna","minibar","minomet","minulost","miska","mistr","mixovat","mladost","mlha","mlhovina","mlok","mlsat","mluvit","mnich","mnohem","mobil","mocnost","modelka","modlitba","mohyla","mokro","molekula","momentka","monarcha","monokl","monstrum","montovat","monzun","mosaz","moskyt","most","motivace","motorka","motyka","moucha","moudrost","mozaika","mozek","mozol","mramor","mravenec","mrkev","mrtvola","mrzet","mrzutost","mstitel","mudrc","muflon","mulat","mumie","munice","muset","mutace","muzeum","muzikant","myslivec","mzda","nabourat","nachytat","nadace","nadbytek","nadhoz","nadobro","nadpis","nahlas","nahnat","nahodile","nahradit","naivita","najednou","najisto","najmout","naklonit","nakonec","nakrmit","nalevo","namazat","namluvit","nanometr","naoko","naopak","naostro","napadat","napevno","naplnit","napnout","naposled","naprosto","narodit","naruby","narychlo","nasadit","nasekat","naslepo","nastat","natolik","navenek","navrch","navzdory","nazvat","nebe","nechat","necky","nedaleko","nedbat","neduh","negace","nehet","nehoda","nejen","nejprve","neklid","nelibost","nemilost","nemoc","neochota","neonka","nepokoj","nerost","nerv","nesmysl","nesoulad","netvor","neuron","nevina","nezvykle","nicota","nijak","nikam","nikdy","nikl","nikterak","nitro","nocleh","nohavice","nominace","nora","norek","nositel","nosnost","nouze","noviny","novota","nozdra","nuda","nudle","nuget","nutit","nutnost","nutrie","nymfa","obal","obarvit","obava","obdiv","obec","obehnat","obejmout","obezita","obhajoba","obilnice","objasnit","objekt","obklopit","oblast","oblek","obliba","obloha","obluda","obnos","obohatit","obojek","obout","obrazec","obrna","obruba","obrys","obsah","obsluha","obstarat","obuv","obvaz","obvinit","obvod","obvykle","obyvatel","obzor","ocas","ocel","ocenit","ochladit","ochota","ochrana","ocitnout","odboj","odbyt","odchod","odcizit","odebrat","odeslat","odevzdat","odezva","odhadce","odhodit","odjet","odjinud","odkaz","odkoupit","odliv","odluka","odmlka","odolnost","odpad","odpis","odplout","odpor","odpustit","odpykat","odrazka","odsoudit","odstup","odsun","odtok","odtud","odvaha","odveta","odvolat","odvracet","odznak","ofina","ofsajd","ohlas","ohnisko","ohrada","ohrozit","ohryzek","okap","okenice","oklika","okno","okouzlit","okovy","okrasa","okres","okrsek","okruh","okupant","okurka","okusit","olejnina","olizovat","omak","omeleta","omezit","omladina","omlouvat","omluva","omyl","onehdy","opakovat","opasek","operace","opice","opilost","opisovat","opora","opozice","opravdu","oproti","orbital","orchestr","orgie","orlice","orloj","ortel","osada","oschnout","osika","osivo","oslava","oslepit","oslnit","oslovit","osnova","osoba","osolit","ospalec","osten","ostraha","ostuda","ostych","osvojit","oteplit","otisk","otop","otrhat","otrlost","otrok","otruby","otvor","ovanout","ovar","oves","ovlivnit","ovoce","oxid","ozdoba","pachatel","pacient","padouch","pahorek","pakt","palanda","palec","palivo","paluba","pamflet","pamlsek","panenka","panika","panna","panovat","panstvo","pantofle","paprika","parketa","parodie","parta","paruka","paryba","paseka","pasivita","pastelka","patent","patrona","pavouk","pazneht","pazourek","pecka","pedagog","pejsek","peklo","peloton","penalta","pendrek","penze","periskop","pero","pestrost","petarda","petice","petrolej","pevnina","pexeso","pianista","piha","pijavice","pikle","piknik","pilina","pilnost","pilulka","pinzeta","pipeta","pisatel","pistole","pitevna","pivnice","pivovar","placenta","plakat","plamen","planeta","plastika","platit","plavidlo","plaz","plech","plemeno","plenta","ples","pletivo","plevel","plivat","plnit","plno","plocha","plodina","plomba","plout","pluk","plyn","pobavit","pobyt","pochod","pocit","poctivec","podat","podcenit","podepsat","podhled","podivit","podklad","podmanit","podnik","podoba","podpora","podraz","podstata","podvod","podzim","poezie","pohanka","pohnutka","pohovor","pohroma","pohyb","pointa","pojistka","pojmout","pokazit","pokles","pokoj","pokrok","pokuta","pokyn","poledne","polibek","polknout","poloha","polynom","pomalu","pominout","pomlka","pomoc","pomsta","pomyslet","ponechat","ponorka","ponurost","popadat","popel","popisek","poplach","poprosit","popsat","popud","poradce","porce","porod","porucha","poryv","posadit","posed","posila","poskok","poslanec","posoudit","pospolu","postava","posudek","posyp","potah","potkan","potlesk","potomek","potrava","potupa","potvora","poukaz","pouto","pouzdro","povaha","povidla","povlak","povoz","povrch","povstat","povyk","povzdech","pozdrav","pozemek","poznatek","pozor","pozvat","pracovat","prahory","praktika","prales","praotec","praporek","prase","pravda","princip","prkno","probudit","procento","prodej","profese","prohra","projekt","prolomit","promile","pronikat","propad","prorok","prosba","proton","proutek","provaz","prskavka","prsten","prudkost","prut","prvek","prvohory","psanec","psovod","pstruh","ptactvo","puberta","puch","pudl","pukavec","puklina","pukrle","pult","pumpa","punc","pupen","pusa","pusinka","pustina","putovat","putyka","pyramida","pysk","pytel","racek","rachot","radiace","radnice","radon","raft","ragby","raketa","rakovina","rameno","rampouch","rande","rarach","rarita","rasovna","rastr","ratolest","razance","razidlo","reagovat","reakce","recept","redaktor","referent","reflex","rejnok","reklama","rekord","rekrut","rektor","reputace","revize","revma","revolver","rezerva","riskovat","riziko","robotika","rodokmen","rohovka","rokle","rokoko","romaneto","ropovod","ropucha","rorejs","rosol","rostlina","rotmistr","rotoped","rotunda","roubenka","roucho","roup","roura","rovina","rovnice","rozbor","rozchod","rozdat","rozeznat","rozhodce","rozinka","rozjezd","rozkaz","rozloha","rozmar","rozpad","rozruch","rozsah","roztok","rozum","rozvod","rubrika","ruchadlo","rukavice","rukopis","ryba","rybolov","rychlost","rydlo","rypadlo","rytina","ryzost","sadista","sahat","sako","samec","samizdat","samota","sanitka","sardinka","sasanka","satelit","sazba","sazenice","sbor","schovat","sebranka","secese","sedadlo","sediment","sedlo","sehnat","sejmout","sekera","sekta","sekunda","sekvoje","semeno","seno","servis","sesadit","seshora","seskok","seslat","sestra","sesuv","sesypat","setba","setina","setkat","setnout","setrvat","sever","seznam","shoda","shrnout","sifon","silnice","sirka","sirotek","sirup","situace","skafandr","skalisko","skanzen","skaut","skeptik","skica","skladba","sklenice","sklo","skluz","skoba","skokan","skoro","skripta","skrz","skupina","skvost","skvrna","slabika","sladidlo","slanina","slast","slavnost","sledovat","slepec","sleva","slezina","slib","slina","sliznice","slon","sloupek","slovo","sluch","sluha","slunce","slupka","slza","smaragd","smetana","smilstvo","smlouva","smog","smrad","smrk","smrtka","smutek","smysl","snad","snaha","snob","sobota","socha","sodovka","sokol","sopka","sotva","souboj","soucit","soudce","souhlas","soulad","soumrak","souprava","soused","soutok","souviset","spalovna","spasitel","spis","splav","spodek","spojenec","spolu","sponzor","spornost","spousta","sprcha","spustit","sranda","sraz","srdce","srna","srnec","srovnat","srpen","srst","srub","stanice","starosta","statika","stavba","stehno","stezka","stodola","stolek","stopa","storno","stoupat","strach","stres","strhnout","strom","struna","studna","stupnice","stvol","styk","subjekt","subtropy","suchar","sudost","sukno","sundat","sunout","surikata","surovina","svah","svalstvo","svetr","svatba","svazek","svisle","svitek","svoboda","svodidlo","svorka","svrab","sykavka","sykot","synek","synovec","sypat","sypkost","syrovost","sysel","sytost","tabletka","tabule","tahoun","tajemno","tajfun","tajga","tajit","tajnost","taktika","tamhle","tampon","tancovat","tanec","tanker","tapeta","tavenina","tazatel","technika","tehdy","tekutina","telefon","temnota","tendence","tenista","tenor","teplota","tepna","teprve","terapie","termoska","textil","ticho","tiskopis","titulek","tkadlec","tkanina","tlapka","tleskat","tlukot","tlupa","tmel","toaleta","topinka","topol","torzo","touha","toulec","tradice","traktor","tramp","trasa","traverza","trefit","trest","trezor","trhavina","trhlina","trochu","trojice","troska","trouba","trpce","trpitel","trpkost","trubec","truchlit","truhlice","trus","trvat","tudy","tuhnout","tuhost","tundra","turista","turnaj","tuzemsko","tvaroh","tvorba","tvrdost","tvrz","tygr","tykev","ubohost","uboze","ubrat","ubrousek","ubrus","ubytovna","ucho","uctivost","udivit","uhradit","ujednat","ujistit","ujmout","ukazatel","uklidnit","uklonit","ukotvit","ukrojit","ulice","ulita","ulovit","umyvadlo","unavit","uniforma","uniknout","upadnout","uplatnit","uplynout","upoutat","upravit","uran","urazit","usednout","usilovat","usmrtit","usnadnit","usnout","usoudit","ustlat","ustrnout","utahovat","utkat","utlumit","utonout","utopenec","utrousit","uvalit","uvolnit","uvozovka","uzdravit","uzel","uzenina","uzlina","uznat","vagon","valcha","valoun","vana","vandal","vanilka","varan","varhany","varovat","vcelku","vchod","vdova","vedro","vegetace","vejce","velbloud","veletrh","velitel","velmoc","velryba","venkov","veranda","verze","veselka","veskrze","vesnice","vespodu","vesta","veterina","veverka","vibrace","vichr","videohra","vidina","vidle","vila","vinice","viset","vitalita","vize","vizitka","vjezd","vklad","vkus","vlajka","vlak","vlasec","vlevo","vlhkost","vliv","vlnovka","vloupat","vnucovat","vnuk","voda","vodivost","vodoznak","vodstvo","vojensky","vojna","vojsko","volant","volba","volit","volno","voskovka","vozidlo","vozovna","vpravo","vrabec","vracet","vrah","vrata","vrba","vrcholek","vrhat","vrstva","vrtule","vsadit","vstoupit","vstup","vtip","vybavit","vybrat","vychovat","vydat","vydra","vyfotit","vyhledat","vyhnout","vyhodit","vyhradit","vyhubit","vyjasnit","vyjet","vyjmout","vyklopit","vykonat","vylekat","vymazat","vymezit","vymizet","vymyslet","vynechat","vynikat","vynutit","vypadat","vyplatit","vypravit","vypustit","vyrazit","vyrovnat","vyrvat","vyslovit","vysoko","vystavit","vysunout","vysypat","vytasit","vytesat","vytratit","vyvinout","vyvolat","vyvrhel","vyzdobit","vyznat","vzadu","vzbudit","vzchopit","vzdor","vzduch","vzdychat","vzestup","vzhledem","vzkaz","vzlykat","vznik","vzorek","vzpoura","vztah","vztek","xylofon","zabrat","zabydlet","zachovat","zadarmo","zadusit","zafoukat","zahltit","zahodit","zahrada","zahynout","zajatec","zajet","zajistit","zaklepat","zakoupit","zalepit","zamezit","zamotat","zamyslet","zanechat","zanikat","zaplatit","zapojit","zapsat","zarazit","zastavit","zasunout","zatajit","zatemnit","zatknout","zaujmout","zavalit","zavelet","zavinit","zavolat","zavrtat","zazvonit","zbavit","zbrusu","zbudovat","zbytek","zdaleka","zdarma","zdatnost","zdivo","zdobit","zdroj","zdvih","zdymadlo","zelenina","zeman","zemina","zeptat","zezadu","zezdola","zhatit","zhltnout","zhluboka","zhotovit","zhruba","zima","zimnice","zjemnit","zklamat","zkoumat","zkratka","zkumavka","zlato","zlehka","zloba","zlom","zlost","zlozvyk","zmapovat","zmar","zmatek","zmije","zmizet","zmocnit","zmodrat","zmrzlina","zmutovat","znak","znalost","znamenat","znovu","zobrazit","zotavit","zoubek","zoufale","zplodit","zpomalit","zprava","zprostit","zprudka","zprvu","zrada","zranit","zrcadlo","zrnitost","zrno","zrovna","zrychlit","zrzavost","zticha","ztratit","zubovina","zubr","zvednout","zvenku","zvesela","zvon","zvrat","zvukovod","zvyk"]');

},{}],"1S9Pj":[function(require,module,exports) {
module.exports = JSON.parse('["的","一","是","在","不","了","有","和","人","这","中","大","为","上","个","国","我","以","要","他","时","来","用","们","生","到","作","地","于","出","就","分","对","成","会","可","主","发","年","动","同","工","也","能","下","过","子","说","产","种","面","而","方","后","多","定","行","学","法","所","民","得","经","十","三","之","进","着","等","部","度","家","电","力","里","如","水","化","高","自","二","理","起","小","物","现","实","加","量","都","两","体","制","机","当","使","点","从","业","本","去","把","性","好","应","开","它","合","还","因","由","其","些","然","前","外","天","政","四","日","那","社","义","事","平","形","相","全","表","间","样","与","关","各","重","新","线","内","数","正","心","反","你","明","看","原","又","么","利","比","或","但","质","气","第","向","道","命","此","变","条","只","没","结","解","问","意","建","月","公","无","系","军","很","情","者","最","立","代","想","已","通","并","提","直","题","党","程","展","五","果","料","象","员","革","位","入","常","文","总","次","品","式","活","设","及","管","特","件","长","求","老","头","基","资","边","流","路","级","少","图","山","统","接","知","较","将","组","见","计","别","她","手","角","期","根","论","运","农","指","几","九","区","强","放","决","西","被","干","做","必","战","先","回","则","任","取","据","处","队","南","给","色","光","门","即","保","治","北","造","百","规","热","领","七","海","口","东","导","器","压","志","世","金","增","争","济","阶","油","思","术","极","交","受","联","什","认","六","共","权","收","证","改","清","美","再","采","转","更","单","风","切","打","白","教","速","花","带","安","场","身","车","例","真","务","具","万","每","目","至","达","走","积","示","议","声","报","斗","完","类","八","离","华","名","确","才","科","张","信","马","节","话","米","整","空","元","况","今","集","温","传","土","许","步","群","广","石","记","需","段","研","界","拉","林","律","叫","且","究","观","越","织","装","影","算","低","持","音","众","书","布","复","容","儿","须","际","商","非","验","连","断","深","难","近","矿","千","周","委","素","技","备","半","办","青","省","列","习","响","约","支","般","史","感","劳","便","团","往","酸","历","市","克","何","除","消","构","府","称","太","准","精","值","号","率","族","维","划","选","标","写","存","候","毛","亲","快","效","斯","院","查","江","型","眼","王","按","格","养","易","置","派","层","片","始","却","专","状","育","厂","京","识","适","属","圆","包","火","住","调","满","县","局","照","参","红","细","引","听","该","铁","价","严","首","底","液","官","德","随","病","苏","失","尔","死","讲","配","女","黄","推","显","谈","罪","神","艺","呢","席","含","企","望","密","批","营","项","防","举","球","英","氧","势","告","李","台","落","木","帮","轮","破","亚","师","围","注","远","字","材","排","供","河","态","封","另","施","减","树","溶","怎","止","案","言","士","均","武","固","叶","鱼","波","视","仅","费","紧","爱","左","章","早","朝","害","续","轻","服","试","食","充","兵","源","判","护","司","足","某","练","差","致","板","田","降","黑","犯","负","击","范","继","兴","似","余","坚","曲","输","修","故","城","夫","够","送","笔","船","占","右","财","吃","富","春","职","觉","汉","画","功","巴","跟","虽","杂","飞","检","吸","助","升","阳","互","初","创","抗","考","投","坏","策","古","径","换","未","跑","留","钢","曾","端","责","站","简","述","钱","副","尽","帝","射","草","冲","承","独","令","限","阿","宣","环","双","请","超","微","让","控","州","良","轴","找","否","纪","益","依","优","顶","础","载","倒","房","突","坐","粉","敌","略","客","袁","冷","胜","绝","析","块","剂","测","丝","协","诉","念","陈","仍","罗","盐","友","洋","错","苦","夜","刑","移","频","逐","靠","混","母","短","皮","终","聚","汽","村","云","哪","既","距","卫","停","烈","央","察","烧","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","游","久","菜","味","旧","模","湖","货","损","预","阻","毫","普","稳","乙","妈","植","息","扩","银","语","挥","酒","守","拿","序","纸","医","缺","雨","吗","针","刘","啊","急","唱","误","训","愿","审","附","获","茶","鲜","粮","斤","孩","脱","硫","肥","善","龙","演","父","渐","血","欢","械","掌","歌","沙","刚","攻","谓","盾","讨","晚","粒","乱","燃","矛","乎","杀","药","宁","鲁","贵","钟","煤","读","班","伯","香","介","迫","句","丰","培","握","兰","担","弦","蛋","沉","假","穿","执","答","乐","谁","顺","烟","缩","征","脸","喜","松","脚","困","异","免","背","星","福","买","染","井","概","慢","怕","磁","倍","祖","皇","促","静","补","评","翻","肉","践","尼","衣","宽","扬","棉","希","伤","操","垂","秋","宜","氢","套","督","振","架","亮","末","宪","庆","编","牛","触","映","雷","销","诗","座","居","抓","裂","胞","呼","娘","景","威","绿","晶","厚","盟","衡","鸡","孙","延","危","胶","屋","乡","临","陆","顾","掉","呀","灯","岁","措","束","耐","剧","玉","赵","跳","哥","季","课","凯","胡","额","款","绍","卷","齐","伟","蒸","殖","永","宗","苗","川","炉","岩","弱","零","杨","奏","沿","露","杆","探","滑","镇","饭","浓","航","怀","赶","库","夺","伊","灵","税","途","灭","赛","归","召","鼓","播","盘","裁","险","康","唯","录","菌","纯","借","糖","盖","横","符","私","努","堂","域","枪","润","幅","哈","竟","熟","虫","泽","脑","壤","碳","欧","遍","侧","寨","敢","彻","虑","斜","薄","庭","纳","弹","饲","伸","折","麦","湿","暗","荷","瓦","塞","床","筑","恶","户","访","塔","奇","透","梁","刀","旋","迹","卡","氯","遇","份","毒","泥","退","洗","摆","灰","彩","卖","耗","夏","择","忙","铜","献","硬","予","繁","圈","雪","函","亦","抽","篇","阵","阴","丁","尺","追","堆","雄","迎","泛","爸","楼","避","谋","吨","野","猪","旗","累","偏","典","馆","索","秦","脂","潮","爷","豆","忽","托","惊","塑","遗","愈","朱","替","纤","粗","倾","尚","痛","楚","谢","奋","购","磨","君","池","旁","碎","骨","监","捕","弟","暴","割","贯","殊","释","词","亡","壁","顿","宝","午","尘","闻","揭","炮","残","冬","桥","妇","警","综","招","吴","付","浮","遭","徐","您","摇","谷","赞","箱","隔","订","男","吹","园","纷","唐","败","宋","玻","巨","耕","坦","荣","闭","湾","键","凡","驻","锅","救","恩","剥","凝","碱","齿","截","炼","麻","纺","禁","废","盛","版","缓","净","睛","昌","婚","涉","筒","嘴","插","岸","朗","庄","街","藏","姑","贸","腐","奴","啦","惯","乘","伙","恢","匀","纱","扎","辩","耳","彪","臣","亿","璃","抵","脉","秀","萨","俄","网","舞","店","喷","纵","寸","汗","挂","洪","贺","闪","柬","爆","烯","津","稻","墙","软","勇","像","滚","厘","蒙","芳","肯","坡","柱","荡","腿","仪","旅","尾","轧","冰","贡","登","黎","削","钻","勒","逃","障","氨","郭","峰","币","港","伏","轨","亩","毕","擦","莫","刺","浪","秘","援","株","健","售","股","岛","甘","泡","睡","童","铸","汤","阀","休","汇","舍","牧","绕","炸","哲","磷","绩","朋","淡","尖","启","陷","柴","呈","徒","颜","泪","稍","忘","泵","蓝","拖","洞","授","镜","辛","壮","锋","贫","虚","弯","摩","泰","幼","廷","尊","窗","纲","弄","隶","疑","氏","宫","姐","震","瑞","怪","尤","琴","循","描","膜","违","夹","腰","缘","珠","穷","森","枝","竹","沟","催","绳","忆","邦","剩","幸","浆","栏","拥","牙","贮","礼","滤","钠","纹","罢","拍","咱","喊","袖","埃","勤","罚","焦","潜","伍","墨","欲","缝","姓","刊","饱","仿","奖","铝","鬼","丽","跨","默","挖","链","扫","喝","袋","炭","污","幕","诸","弧","励","梅","奶","洁","灾","舟","鉴","苯","讼","抱","毁","懂","寒","智","埔","寄","届","跃","渡","挑","丹","艰","贝","碰","拔","爹","戴","码","梦","芽","熔","赤","渔","哭","敬","颗","奔","铅","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","仓","魏","锐","晓","氮","兼","隐","碍","赫","拨","忠","肃","缸","牵","抢","博","巧","壳","兄","杜","讯","诚","碧","祥","柯","页","巡","矩","悲","灌","龄","伦","票","寻","桂","铺","圣","恐","恰","郑","趣","抬","荒","腾","贴","柔","滴","猛","阔","辆","妻","填","撤","储","签","闹","扰","紫","砂","递","戏","吊","陶","伐","喂","疗","瓶","婆","抚","臂","摸","忍","虾","蜡","邻","胸","巩","挤","偶","弃","槽","劲","乳","邓","吉","仁","烂","砖","租","乌","舰","伴","瓜","浅","丙","暂","燥","橡","柳","迷","暖","牌","秧","胆","详","簧","踏","瓷","谱","呆","宾","糊","洛","辉","愤","竞","隙","怒","粘","乃","绪","肩","籍","敏","涂","熙","皆","侦","悬","掘","享","纠","醒","狂","锁","淀","恨","牲","霸","爬","赏","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鸭","趋","凤","晨","畜","辈","秩","卵","署","梯","炎","滩","棋","驱","筛","峡","冒","啥","寿","译","浸","泉","帽","迟","硅","疆","贷","漏","稿","冠","嫩","胁","芯","牢","叛","蚀","奥","鸣","岭","羊","凭","串","塘","绘","酵","融","盆","锡","庙","筹","冻","辅","摄","袭","筋","拒","僚","旱","钾","鸟","漆","沈","眉","疏","添","棒","穗","硝","韩","逼","扭","侨","凉","挺","碗","栽","炒","杯","患","馏","劝","豪","辽","勃","鸿","旦","吏","拜","狗","埋","辊","掩","饮","搬","骂","辞","勾","扣","估","蒋","绒","雾","丈","朵","姆","拟","宇","辑","陕","雕","偿","蓄","崇","剪","倡","厅","咬","驶","薯","刷","斥","番","赋","奉","佛","浇","漫","曼","扇","钙","桃","扶","仔","返","俗","亏","腔","鞋","棱","覆","框","悄","叔","撞","骗","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","胀","谐","抛","霉","桑","岗","嘛","衰","盗","渗","脏","赖","涌","甜","曹","阅","肌","哩","厉","烃","纬","毅","昨","伪","症","煮","叹","钉","搭","茎","笼","酷","偷","弓","锥","恒","杰","坑","鼻","翼","纶","叙","狱","逮","罐","络","棚","抑","膨","蔬","寺","骤","穆","冶","枯","册","尸","凸","绅","坯","牺","焰","轰","欣","晋","瘦","御","锭","锦","丧","旬","锻","垄","搜","扑","邀","亭","酯","迈","舒","脆","酶","闲","忧","酚","顽","羽","涨","卸","仗","陪","辟","惩","杭","姚","肚","捉","飘","漂","昆","欺","吾","郎","烷","汁","呵","饰","萧","雅","邮","迁","燕","撒","姻","赴","宴","烦","债","帐","斑","铃","旨","醇","董","饼","雏","姿","拌","傅","腹","妥","揉","贤","拆","歪","葡","胺","丢","浩","徽","昂","垫","挡","览","贪","慰","缴","汪","慌","冯","诺","姜","谊","凶","劣","诬","耀","昏","躺","盈","骑","乔","溪","丛","卢","抹","闷","咨","刮","驾","缆","悟","摘","铒","掷","颇","幻","柄","惠","惨","佳","仇","腊","窝","涤","剑","瞧","堡","泼","葱","罩","霍","捞","胎","苍","滨","俩","捅","湘","砍","霞","邵","萄","疯","淮","遂","熊","粪","烘","宿","档","戈","驳","嫂","裕","徙","箭","捐","肠","撑","晒","辨","殿","莲","摊","搅","酱","屏","疫","哀","蔡","堵","沫","皱","畅","叠","阁","莱","敲","辖","钩","痕","坝","巷","饿","祸","丘","玄","溜","曰","逻","彭","尝","卿","妨","艇","吞","韦","怨","矮","歇"]');

},{}],"4TvTz":[function(require,module,exports) {
module.exports = JSON.parse('["的","一","是","在","不","了","有","和","人","這","中","大","為","上","個","國","我","以","要","他","時","來","用","們","生","到","作","地","於","出","就","分","對","成","會","可","主","發","年","動","同","工","也","能","下","過","子","說","產","種","面","而","方","後","多","定","行","學","法","所","民","得","經","十","三","之","進","著","等","部","度","家","電","力","裡","如","水","化","高","自","二","理","起","小","物","現","實","加","量","都","兩","體","制","機","當","使","點","從","業","本","去","把","性","好","應","開","它","合","還","因","由","其","些","然","前","外","天","政","四","日","那","社","義","事","平","形","相","全","表","間","樣","與","關","各","重","新","線","內","數","正","心","反","你","明","看","原","又","麼","利","比","或","但","質","氣","第","向","道","命","此","變","條","只","沒","結","解","問","意","建","月","公","無","系","軍","很","情","者","最","立","代","想","已","通","並","提","直","題","黨","程","展","五","果","料","象","員","革","位","入","常","文","總","次","品","式","活","設","及","管","特","件","長","求","老","頭","基","資","邊","流","路","級","少","圖","山","統","接","知","較","將","組","見","計","別","她","手","角","期","根","論","運","農","指","幾","九","區","強","放","決","西","被","幹","做","必","戰","先","回","則","任","取","據","處","隊","南","給","色","光","門","即","保","治","北","造","百","規","熱","領","七","海","口","東","導","器","壓","志","世","金","增","爭","濟","階","油","思","術","極","交","受","聯","什","認","六","共","權","收","證","改","清","美","再","採","轉","更","單","風","切","打","白","教","速","花","帶","安","場","身","車","例","真","務","具","萬","每","目","至","達","走","積","示","議","聲","報","鬥","完","類","八","離","華","名","確","才","科","張","信","馬","節","話","米","整","空","元","況","今","集","溫","傳","土","許","步","群","廣","石","記","需","段","研","界","拉","林","律","叫","且","究","觀","越","織","裝","影","算","低","持","音","眾","書","布","复","容","兒","須","際","商","非","驗","連","斷","深","難","近","礦","千","週","委","素","技","備","半","辦","青","省","列","習","響","約","支","般","史","感","勞","便","團","往","酸","歷","市","克","何","除","消","構","府","稱","太","準","精","值","號","率","族","維","劃","選","標","寫","存","候","毛","親","快","效","斯","院","查","江","型","眼","王","按","格","養","易","置","派","層","片","始","卻","專","狀","育","廠","京","識","適","屬","圓","包","火","住","調","滿","縣","局","照","參","紅","細","引","聽","該","鐵","價","嚴","首","底","液","官","德","隨","病","蘇","失","爾","死","講","配","女","黃","推","顯","談","罪","神","藝","呢","席","含","企","望","密","批","營","項","防","舉","球","英","氧","勢","告","李","台","落","木","幫","輪","破","亞","師","圍","注","遠","字","材","排","供","河","態","封","另","施","減","樹","溶","怎","止","案","言","士","均","武","固","葉","魚","波","視","僅","費","緊","愛","左","章","早","朝","害","續","輕","服","試","食","充","兵","源","判","護","司","足","某","練","差","致","板","田","降","黑","犯","負","擊","范","繼","興","似","餘","堅","曲","輸","修","故","城","夫","夠","送","筆","船","佔","右","財","吃","富","春","職","覺","漢","畫","功","巴","跟","雖","雜","飛","檢","吸","助","昇","陽","互","初","創","抗","考","投","壞","策","古","徑","換","未","跑","留","鋼","曾","端","責","站","簡","述","錢","副","盡","帝","射","草","衝","承","獨","令","限","阿","宣","環","雙","請","超","微","讓","控","州","良","軸","找","否","紀","益","依","優","頂","礎","載","倒","房","突","坐","粉","敵","略","客","袁","冷","勝","絕","析","塊","劑","測","絲","協","訴","念","陳","仍","羅","鹽","友","洋","錯","苦","夜","刑","移","頻","逐","靠","混","母","短","皮","終","聚","汽","村","雲","哪","既","距","衛","停","烈","央","察","燒","迅","境","若","印","洲","刻","括","激","孔","搞","甚","室","待","核","校","散","侵","吧","甲","遊","久","菜","味","舊","模","湖","貨","損","預","阻","毫","普","穩","乙","媽","植","息","擴","銀","語","揮","酒","守","拿","序","紙","醫","缺","雨","嗎","針","劉","啊","急","唱","誤","訓","願","審","附","獲","茶","鮮","糧","斤","孩","脫","硫","肥","善","龍","演","父","漸","血","歡","械","掌","歌","沙","剛","攻","謂","盾","討","晚","粒","亂","燃","矛","乎","殺","藥","寧","魯","貴","鐘","煤","讀","班","伯","香","介","迫","句","豐","培","握","蘭","擔","弦","蛋","沉","假","穿","執","答","樂","誰","順","煙","縮","徵","臉","喜","松","腳","困","異","免","背","星","福","買","染","井","概","慢","怕","磁","倍","祖","皇","促","靜","補","評","翻","肉","踐","尼","衣","寬","揚","棉","希","傷","操","垂","秋","宜","氫","套","督","振","架","亮","末","憲","慶","編","牛","觸","映","雷","銷","詩","座","居","抓","裂","胞","呼","娘","景","威","綠","晶","厚","盟","衡","雞","孫","延","危","膠","屋","鄉","臨","陸","顧","掉","呀","燈","歲","措","束","耐","劇","玉","趙","跳","哥","季","課","凱","胡","額","款","紹","卷","齊","偉","蒸","殖","永","宗","苗","川","爐","岩","弱","零","楊","奏","沿","露","桿","探","滑","鎮","飯","濃","航","懷","趕","庫","奪","伊","靈","稅","途","滅","賽","歸","召","鼓","播","盤","裁","險","康","唯","錄","菌","純","借","糖","蓋","橫","符","私","努","堂","域","槍","潤","幅","哈","竟","熟","蟲","澤","腦","壤","碳","歐","遍","側","寨","敢","徹","慮","斜","薄","庭","納","彈","飼","伸","折","麥","濕","暗","荷","瓦","塞","床","築","惡","戶","訪","塔","奇","透","梁","刀","旋","跡","卡","氯","遇","份","毒","泥","退","洗","擺","灰","彩","賣","耗","夏","擇","忙","銅","獻","硬","予","繁","圈","雪","函","亦","抽","篇","陣","陰","丁","尺","追","堆","雄","迎","泛","爸","樓","避","謀","噸","野","豬","旗","累","偏","典","館","索","秦","脂","潮","爺","豆","忽","托","驚","塑","遺","愈","朱","替","纖","粗","傾","尚","痛","楚","謝","奮","購","磨","君","池","旁","碎","骨","監","捕","弟","暴","割","貫","殊","釋","詞","亡","壁","頓","寶","午","塵","聞","揭","炮","殘","冬","橋","婦","警","綜","招","吳","付","浮","遭","徐","您","搖","谷","贊","箱","隔","訂","男","吹","園","紛","唐","敗","宋","玻","巨","耕","坦","榮","閉","灣","鍵","凡","駐","鍋","救","恩","剝","凝","鹼","齒","截","煉","麻","紡","禁","廢","盛","版","緩","淨","睛","昌","婚","涉","筒","嘴","插","岸","朗","莊","街","藏","姑","貿","腐","奴","啦","慣","乘","夥","恢","勻","紗","扎","辯","耳","彪","臣","億","璃","抵","脈","秀","薩","俄","網","舞","店","噴","縱","寸","汗","掛","洪","賀","閃","柬","爆","烯","津","稻","牆","軟","勇","像","滾","厘","蒙","芳","肯","坡","柱","盪","腿","儀","旅","尾","軋","冰","貢","登","黎","削","鑽","勒","逃","障","氨","郭","峰","幣","港","伏","軌","畝","畢","擦","莫","刺","浪","秘","援","株","健","售","股","島","甘","泡","睡","童","鑄","湯","閥","休","匯","舍","牧","繞","炸","哲","磷","績","朋","淡","尖","啟","陷","柴","呈","徒","顏","淚","稍","忘","泵","藍","拖","洞","授","鏡","辛","壯","鋒","貧","虛","彎","摩","泰","幼","廷","尊","窗","綱","弄","隸","疑","氏","宮","姐","震","瑞","怪","尤","琴","循","描","膜","違","夾","腰","緣","珠","窮","森","枝","竹","溝","催","繩","憶","邦","剩","幸","漿","欄","擁","牙","貯","禮","濾","鈉","紋","罷","拍","咱","喊","袖","埃","勤","罰","焦","潛","伍","墨","欲","縫","姓","刊","飽","仿","獎","鋁","鬼","麗","跨","默","挖","鏈","掃","喝","袋","炭","污","幕","諸","弧","勵","梅","奶","潔","災","舟","鑑","苯","訟","抱","毀","懂","寒","智","埔","寄","屆","躍","渡","挑","丹","艱","貝","碰","拔","爹","戴","碼","夢","芽","熔","赤","漁","哭","敬","顆","奔","鉛","仲","虎","稀","妹","乏","珍","申","桌","遵","允","隆","螺","倉","魏","銳","曉","氮","兼","隱","礙","赫","撥","忠","肅","缸","牽","搶","博","巧","殼","兄","杜","訊","誠","碧","祥","柯","頁","巡","矩","悲","灌","齡","倫","票","尋","桂","鋪","聖","恐","恰","鄭","趣","抬","荒","騰","貼","柔","滴","猛","闊","輛","妻","填","撤","儲","簽","鬧","擾","紫","砂","遞","戲","吊","陶","伐","餵","療","瓶","婆","撫","臂","摸","忍","蝦","蠟","鄰","胸","鞏","擠","偶","棄","槽","勁","乳","鄧","吉","仁","爛","磚","租","烏","艦","伴","瓜","淺","丙","暫","燥","橡","柳","迷","暖","牌","秧","膽","詳","簧","踏","瓷","譜","呆","賓","糊","洛","輝","憤","競","隙","怒","粘","乃","緒","肩","籍","敏","塗","熙","皆","偵","懸","掘","享","糾","醒","狂","鎖","淀","恨","牲","霸","爬","賞","逆","玩","陵","祝","秒","浙","貌","役","彼","悉","鴨","趨","鳳","晨","畜","輩","秩","卵","署","梯","炎","灘","棋","驅","篩","峽","冒","啥","壽","譯","浸","泉","帽","遲","矽","疆","貸","漏","稿","冠","嫩","脅","芯","牢","叛","蝕","奧","鳴","嶺","羊","憑","串","塘","繪","酵","融","盆","錫","廟","籌","凍","輔","攝","襲","筋","拒","僚","旱","鉀","鳥","漆","沈","眉","疏","添","棒","穗","硝","韓","逼","扭","僑","涼","挺","碗","栽","炒","杯","患","餾","勸","豪","遼","勃","鴻","旦","吏","拜","狗","埋","輥","掩","飲","搬","罵","辭","勾","扣","估","蔣","絨","霧","丈","朵","姆","擬","宇","輯","陝","雕","償","蓄","崇","剪","倡","廳","咬","駛","薯","刷","斥","番","賦","奉","佛","澆","漫","曼","扇","鈣","桃","扶","仔","返","俗","虧","腔","鞋","棱","覆","框","悄","叔","撞","騙","勘","旺","沸","孤","吐","孟","渠","屈","疾","妙","惜","仰","狠","脹","諧","拋","黴","桑","崗","嘛","衰","盜","滲","臟","賴","湧","甜","曹","閱","肌","哩","厲","烴","緯","毅","昨","偽","症","煮","嘆","釘","搭","莖","籠","酷","偷","弓","錐","恆","傑","坑","鼻","翼","綸","敘","獄","逮","罐","絡","棚","抑","膨","蔬","寺","驟","穆","冶","枯","冊","屍","凸","紳","坯","犧","焰","轟","欣","晉","瘦","禦","錠","錦","喪","旬","鍛","壟","搜","撲","邀","亭","酯","邁","舒","脆","酶","閒","憂","酚","頑","羽","漲","卸","仗","陪","闢","懲","杭","姚","肚","捉","飄","漂","昆","欺","吾","郎","烷","汁","呵","飾","蕭","雅","郵","遷","燕","撒","姻","赴","宴","煩","債","帳","斑","鈴","旨","醇","董","餅","雛","姿","拌","傅","腹","妥","揉","賢","拆","歪","葡","胺","丟","浩","徽","昂","墊","擋","覽","貪","慰","繳","汪","慌","馮","諾","姜","誼","兇","劣","誣","耀","昏","躺","盈","騎","喬","溪","叢","盧","抹","悶","諮","刮","駕","纜","悟","摘","鉺","擲","頗","幻","柄","惠","慘","佳","仇","臘","窩","滌","劍","瞧","堡","潑","蔥","罩","霍","撈","胎","蒼","濱","倆","捅","湘","砍","霞","邵","萄","瘋","淮","遂","熊","糞","烘","宿","檔","戈","駁","嫂","裕","徙","箭","捐","腸","撐","曬","辨","殿","蓮","攤","攪","醬","屏","疫","哀","蔡","堵","沫","皺","暢","疊","閣","萊","敲","轄","鉤","痕","壩","巷","餓","禍","丘","玄","溜","曰","邏","彭","嘗","卿","妨","艇","吞","韋","怨","矮","歇"]');

},{}],"dBMLx":[function(require,module,exports) {
module.exports = JSON.parse('["가격","가끔","가난","가능","가득","가르침","가뭄","가방","가상","가슴","가운데","가을","가이드","가입","가장","가정","가족","가죽","각오","각자","간격","간부","간섭","간장","간접","간판","갈등","갈비","갈색","갈증","감각","감기","감소","감수성","감자","감정","갑자기","강남","강당","강도","강력히","강변","강북","강사","강수량","강아지","강원도","강의","강제","강조","같이","개구리","개나리","개방","개별","개선","개성","개인","객관적","거실","거액","거울","거짓","거품","걱정","건강","건물","건설","건조","건축","걸음","검사","검토","게시판","게임","겨울","견해","결과","결국","결론","결석","결승","결심","결정","결혼","경계","경고","경기","경력","경복궁","경비","경상도","경영","경우","경쟁","경제","경주","경찰","경치","경향","경험","계곡","계단","계란","계산","계속","계약","계절","계층","계획","고객","고구려","고궁","고급","고등학생","고무신","고민","고양이","고장","고전","고집","고춧가루","고통","고향","곡식","골목","골짜기","골프","공간","공개","공격","공군","공급","공기","공동","공무원","공부","공사","공식","공업","공연","공원","공장","공짜","공책","공통","공포","공항","공휴일","과목","과일","과장","과정","과학","관객","관계","관광","관념","관람","관련","관리","관습","관심","관점","관찰","광경","광고","광장","광주","괴로움","굉장히","교과서","교문","교복","교실","교양","교육","교장","교직","교통","교환","교훈","구경","구름","구멍","구별","구분","구석","구성","구속","구역","구입","구청","구체적","국가","국기","국내","국립","국물","국민","국수","국어","국왕","국적","국제","국회","군대","군사","군인","궁극적","권리","권위","권투","귀국","귀신","규정","규칙","균형","그날","그냥","그늘","그러나","그룹","그릇","그림","그제서야","그토록","극복","극히","근거","근교","근래","근로","근무","근본","근원","근육","근처","글씨","글자","금강산","금고","금년","금메달","금액","금연","금요일","금지","긍정적","기간","기관","기념","기능","기독교","기둥","기록","기름","기법","기본","기분","기쁨","기숙사","기술","기억","기업","기온","기운","기원","기적","기준","기침","기혼","기획","긴급","긴장","길이","김밥","김치","김포공항","깍두기","깜빡","깨달음","깨소금","껍질","꼭대기","꽃잎","나들이","나란히","나머지","나물","나침반","나흘","낙엽","난방","날개","날씨","날짜","남녀","남대문","남매","남산","남자","남편","남학생","낭비","낱말","내년","내용","내일","냄비","냄새","냇물","냉동","냉면","냉방","냉장고","넥타이","넷째","노동","노란색","노력","노인","녹음","녹차","녹화","논리","논문","논쟁","놀이","농구","농담","농민","농부","농업","농장","농촌","높이","눈동자","눈물","눈썹","뉴욕","느낌","늑대","능동적","능력","다방","다양성","다음","다이어트","다행","단계","단골","단독","단맛","단순","단어","단위","단점","단체","단추","단편","단풍","달걀","달러","달력","달리","닭고기","담당","담배","담요","담임","답변","답장","당근","당분간","당연히","당장","대규모","대낮","대단히","대답","대도시","대략","대량","대륙","대문","대부분","대신","대응","대장","대전","대접","대중","대책","대출","대충","대통령","대학","대한민국","대합실","대형","덩어리","데이트","도대체","도덕","도둑","도망","도서관","도심","도움","도입","도자기","도저히","도전","도중","도착","독감","독립","독서","독일","독창적","동화책","뒷모습","뒷산","딸아이","마누라","마늘","마당","마라톤","마련","마무리","마사지","마약","마요네즈","마을","마음","마이크","마중","마지막","마찬가지","마찰","마흔","막걸리","막내","막상","만남","만두","만세","만약","만일","만점","만족","만화","많이","말기","말씀","말투","맘대로","망원경","매년","매달","매력","매번","매스컴","매일","매장","맥주","먹이","먼저","먼지","멀리","메일","며느리","며칠","면담","멸치","명단","명령","명예","명의","명절","명칭","명함","모금","모니터","모델","모든","모범","모습","모양","모임","모조리","모집","모퉁이","목걸이","목록","목사","목소리","목숨","목적","목표","몰래","몸매","몸무게","몸살","몸속","몸짓","몸통","몹시","무관심","무궁화","무더위","무덤","무릎","무슨","무엇","무역","무용","무조건","무지개","무척","문구","문득","문법","문서","문제","문학","문화","물가","물건","물결","물고기","물론","물리학","물음","물질","물체","미국","미디어","미사일","미술","미역","미용실","미움","미인","미팅","미혼","민간","민족","민주","믿음","밀가루","밀리미터","밑바닥","바가지","바구니","바나나","바늘","바닥","바닷가","바람","바이러스","바탕","박물관","박사","박수","반대","반드시","반말","반발","반성","반응","반장","반죽","반지","반찬","받침","발가락","발걸음","발견","발달","발레","발목","발바닥","발생","발음","발자국","발전","발톱","발표","밤하늘","밥그릇","밥맛","밥상","밥솥","방금","방면","방문","방바닥","방법","방송","방식","방안","방울","방지","방학","방해","방향","배경","배꼽","배달","배드민턴","백두산","백색","백성","백인","백제","백화점","버릇","버섯","버튼","번개","번역","번지","번호","벌금","벌레","벌써","범위","범인","범죄","법률","법원","법적","법칙","베이징","벨트","변경","변동","변명","변신","변호사","변화","별도","별명","별일","병실","병아리","병원","보관","보너스","보라색","보람","보름","보상","보안","보자기","보장","보전","보존","보통","보편적","보험","복도","복사","복숭아","복습","볶음","본격적","본래","본부","본사","본성","본인","본질","볼펜","봉사","봉지","봉투","부근","부끄러움","부담","부동산","부문","부분","부산","부상","부엌","부인","부작용","부장","부정","부족","부지런히","부친","부탁","부품","부회장","북부","북한","분노","분량","분리","분명","분석","분야","분위기","분필","분홍색","불고기","불과","불교","불꽃","불만","불법","불빛","불안","불이익","불행","브랜드","비극","비난","비닐","비둘기","비디오","비로소","비만","비명","비밀","비바람","비빔밥","비상","비용","비율","비중","비타민","비판","빌딩","빗물","빗방울","빗줄기","빛깔","빨간색","빨래","빨리","사건","사계절","사나이","사냥","사람","사랑","사립","사모님","사물","사방","사상","사생활","사설","사슴","사실","사업","사용","사월","사장","사전","사진","사촌","사춘기","사탕","사투리","사흘","산길","산부인과","산업","산책","살림","살인","살짝","삼계탕","삼국","삼십","삼월","삼촌","상관","상금","상대","상류","상반기","상상","상식","상업","상인","상자","상점","상처","상추","상태","상표","상품","상황","새벽","색깔","색연필","생각","생명","생물","생방송","생산","생선","생신","생일","생활","서랍","서른","서명","서민","서비스","서양","서울","서적","서점","서쪽","서클","석사","석유","선거","선물","선배","선생","선수","선원","선장","선전","선택","선풍기","설거지","설날","설렁탕","설명","설문","설사","설악산","설치","설탕","섭씨","성공","성당","성명","성별","성인","성장","성적","성질","성함","세금","세미나","세상","세월","세종대왕","세탁","센터","센티미터","셋째","소규모","소극적","소금","소나기","소년","소득","소망","소문","소설","소속","소아과","소용","소원","소음","소중히","소지품","소질","소풍","소형","속담","속도","속옷","손가락","손길","손녀","손님","손등","손목","손뼉","손실","손질","손톱","손해","솔직히","솜씨","송아지","송이","송편","쇠고기","쇼핑","수건","수년","수단","수돗물","수동적","수면","수명","수박","수상","수석","수술","수시로","수업","수염","수영","수입","수준","수집","수출","수컷","수필","수학","수험생","수화기","숙녀","숙소","숙제","순간","순서","순수","순식간","순위","숟가락","술병","술집","숫자","스님","스물","스스로","스승","스웨터","스위치","스케이트","스튜디오","스트레스","스포츠","슬쩍","슬픔","습관","습기","승객","승리","승부","승용차","승진","시각","시간","시골","시금치","시나리오","시댁","시리즈","시멘트","시민","시부모","시선","시설","시스템","시아버지","시어머니","시월","시인","시일","시작","시장","시절","시점","시중","시즌","시집","시청","시합","시험","식구","식기","식당","식량","식료품","식물","식빵","식사","식생활","식초","식탁","식품","신고","신규","신념","신문","신발","신비","신사","신세","신용","신제품","신청","신체","신화","실감","실내","실력","실례","실망","실수","실습","실시","실장","실정","실질적","실천","실체","실컷","실태","실패","실험","실현","심리","심부름","심사","심장","심정","심판","쌍둥이","씨름","씨앗","아가씨","아나운서","아드님","아들","아쉬움","아스팔트","아시아","아울러","아저씨","아줌마","아직","아침","아파트","아프리카","아픔","아홉","아흔","악기","악몽","악수","안개","안경","안과","안내","안녕","안동","안방","안부","안주","알루미늄","알코올","암시","암컷","압력","앞날","앞문","애인","애정","액수","앨범","야간","야단","야옹","약간","약국","약속","약수","약점","약품","약혼녀","양념","양력","양말","양배추","양주","양파","어둠","어려움","어른","어젯밤","어쨌든","어쩌다가","어쩐지","언니","언덕","언론","언어","얼굴","얼른","얼음","얼핏","엄마","업무","업종","업체","엉덩이","엉망","엉터리","엊그제","에너지","에어컨","엔진","여건","여고생","여관","여군","여권","여대생","여덟","여동생","여든","여론","여름","여섯","여성","여왕","여인","여전히","여직원","여학생","여행","역사","역시","역할","연결","연구","연극","연기","연락","연설","연세","연속","연습","연애","연예인","연인","연장","연주","연출","연필","연합","연휴","열기","열매","열쇠","열심히","열정","열차","열흘","염려","엽서","영국","영남","영상","영양","영역","영웅","영원히","영하","영향","영혼","영화","옆구리","옆방","옆집","예감","예금","예방","예산","예상","예선","예술","예습","예식장","예약","예전","예절","예정","예컨대","옛날","오늘","오락","오랫동안","오렌지","오로지","오른발","오븐","오십","오염","오월","오전","오직","오징어","오페라","오피스텔","오히려","옥상","옥수수","온갖","온라인","온몸","온종일","온통","올가을","올림픽","올해","옷차림","와이셔츠","와인","완성","완전","왕비","왕자","왜냐하면","왠지","외갓집","외국","외로움","외삼촌","외출","외침","외할머니","왼발","왼손","왼쪽","요금","요일","요즘","요청","용기","용서","용어","우산","우선","우승","우연히","우정","우체국","우편","운동","운명","운반","운전","운행","울산","울음","움직임","웃어른","웃음","워낙","원고","원래","원서","원숭이","원인","원장","원피스","월급","월드컵","월세","월요일","웨이터","위반","위법","위성","위원","위험","위협","윗사람","유난히","유럽","유명","유물","유산","유적","유치원","유학","유행","유형","육군","육상","육십","육체","은행","음력","음료","음반","음성","음식","음악","음주","의견","의논","의문","의복","의식","의심","의외로","의욕","의원","의학","이것","이곳","이념","이놈","이달","이대로","이동","이렇게","이력서","이론적","이름","이민","이발소","이별","이불","이빨","이상","이성","이슬","이야기","이용","이웃","이월","이윽고","이익","이전","이중","이튿날","이틀","이혼","인간","인격","인공","인구","인근","인기","인도","인류","인물","인생","인쇄","인연","인원","인재","인종","인천","인체","인터넷","인하","인형","일곱","일기","일단","일대","일등","일반","일본","일부","일상","일생","일손","일요일","일월","일정","일종","일주일","일찍","일체","일치","일행","일회용","임금","임무","입대","입력","입맛","입사","입술","입시","입원","입장","입학","자가용","자격","자극","자동","자랑","자부심","자식","자신","자연","자원","자율","자전거","자정","자존심","자판","작가","작년","작성","작업","작용","작은딸","작품","잔디","잔뜩","잔치","잘못","잠깐","잠수함","잠시","잠옷","잠자리","잡지","장관","장군","장기간","장래","장례","장르","장마","장면","장모","장미","장비","장사","장소","장식","장애인","장인","장점","장차","장학금","재능","재빨리","재산","재생","재작년","재정","재채기","재판","재학","재활용","저것","저고리","저곳","저녁","저런","저렇게","저번","저울","저절로","저축","적극","적당히","적성","적용","적응","전개","전공","전기","전달","전라도","전망","전문","전반","전부","전세","전시","전용","전자","전쟁","전주","전철","전체","전통","전혀","전후","절대","절망","절반","절약","절차","점검","점수","점심","점원","점점","점차","접근","접시","접촉","젓가락","정거장","정도","정류장","정리","정말","정면","정문","정반대","정보","정부","정비","정상","정성","정오","정원","정장","정지","정치","정확히","제공","제과점","제대로","제목","제발","제법","제삿날","제안","제일","제작","제주도","제출","제품","제한","조각","조건","조금","조깅","조명","조미료","조상","조선","조용히","조절","조정","조직","존댓말","존재","졸업","졸음","종교","종로","종류","종소리","종업원","종종","종합","좌석","죄인","주관적","주름","주말","주머니","주먹","주문","주민","주방","주변","주식","주인","주일","주장","주전자","주택","준비","줄거리","줄기","줄무늬","중간","중계방송","중국","중년","중단","중독","중반","중부","중세","중소기업","중순","중앙","중요","중학교","즉석","즉시","즐거움","증가","증거","증권","증상","증세","지각","지갑","지경","지극히","지금","지급","지능","지름길","지리산","지방","지붕","지식","지역","지우개","지원","지적","지점","지진","지출","직선","직업","직원","직장","진급","진동","진로","진료","진리","진짜","진찰","진출","진통","진행","질문","질병","질서","짐작","집단","집안","집중","짜증","찌꺼기","차남","차라리","차량","차림","차별","차선","차츰","착각","찬물","찬성","참가","참기름","참새","참석","참여","참외","참조","찻잔","창가","창고","창구","창문","창밖","창작","창조","채널","채점","책가방","책방","책상","책임","챔피언","처벌","처음","천국","천둥","천장","천재","천천히","철도","철저히","철학","첫날","첫째","청년","청바지","청소","청춘","체계","체력","체온","체육","체중","체험","초등학생","초반","초밥","초상화","초순","초여름","초원","초저녁","초점","초청","초콜릿","촛불","총각","총리","총장","촬영","최근","최상","최선","최신","최악","최종","추석","추억","추진","추천","추측","축구","축소","축제","축하","출근","출발","출산","출신","출연","출입","출장","출판","충격","충고","충돌","충분히","충청도","취업","취직","취향","치약","친구","친척","칠십","칠월","칠판","침대","침묵","침실","칫솔","칭찬","카메라","카운터","칼국수","캐릭터","캠퍼스","캠페인","커튼","컨디션","컬러","컴퓨터","코끼리","코미디","콘서트","콜라","콤플렉스","콩나물","쾌감","쿠데타","크림","큰길","큰딸","큰소리","큰아들","큰어머니","큰일","큰절","클래식","클럽","킬로","타입","타자기","탁구","탁자","탄생","태권도","태양","태풍","택시","탤런트","터널","터미널","테니스","테스트","테이블","텔레비전","토론","토마토","토요일","통계","통과","통로","통신","통역","통일","통장","통제","통증","통합","통화","퇴근","퇴원","퇴직금","튀김","트럭","특급","특별","특성","특수","특징","특히","튼튼히","티셔츠","파란색","파일","파출소","판결","판단","판매","판사","팔십","팔월","팝송","패션","팩스","팩시밀리","팬티","퍼센트","페인트","편견","편의","편지","편히","평가","평균","평생","평소","평양","평일","평화","포스터","포인트","포장","포함","표면","표정","표준","표현","품목","품질","풍경","풍속","풍습","프랑스","프린터","플라스틱","피곤","피망","피아노","필름","필수","필요","필자","필통","핑계","하느님","하늘","하드웨어","하룻밤","하반기","하숙집","하순","하여튼","하지만","하천","하품","하필","학과","학교","학급","학기","학년","학력","학번","학부모","학비","학생","학술","학습","학용품","학원","학위","학자","학점","한계","한글","한꺼번에","한낮","한눈","한동안","한때","한라산","한마디","한문","한번","한복","한식","한여름","한쪽","할머니","할아버지","할인","함께","함부로","합격","합리적","항공","항구","항상","항의","해결","해군","해답","해당","해물","해석","해설","해수욕장","해안","핵심","핸드백","햄버거","햇볕","햇살","행동","행복","행사","행운","행위","향기","향상","향수","허락","허용","헬기","현관","현금","현대","현상","현실","현장","현재","현지","혈액","협력","형부","형사","형수","형식","형제","형태","형편","혜택","호기심","호남","호랑이","호박","호텔","호흡","혹시","홀로","홈페이지","홍보","홍수","홍차","화면","화분","화살","화요일","화장","화학","확보","확인","확장","확정","환갑","환경","환영","환율","환자","활기","활동","활발히","활용","활짝","회견","회관","회복","회색","회원","회장","회전","횟수","횡단보도","효율적","후반","후춧가루","훈련","훨씬","휴식","휴일","흉내","흐름","흑백","흑인","흔적","흔히","흥미","흥분","희곡","희망","희생","흰색","힘껏"]');

},{}],"aN8U3":[function(require,module,exports) {
module.exports = JSON.parse('["abaisser","abandon","abdiquer","abeille","abolir","aborder","aboutir","aboyer","abrasif","abreuver","abriter","abroger","abrupt","absence","absolu","absurde","abusif","abyssal","académie","acajou","acarien","accabler","accepter","acclamer","accolade","accroche","accuser","acerbe","achat","acheter","aciduler","acier","acompte","acquérir","acronyme","acteur","actif","actuel","adepte","adéquat","adhésif","adjectif","adjuger","admettre","admirer","adopter","adorer","adoucir","adresse","adroit","adulte","adverbe","aérer","aéronef","affaire","affecter","affiche","affreux","affubler","agacer","agencer","agile","agiter","agrafer","agréable","agrume","aider","aiguille","ailier","aimable","aisance","ajouter","ajuster","alarmer","alchimie","alerte","algèbre","algue","aliéner","aliment","alléger","alliage","allouer","allumer","alourdir","alpaga","altesse","alvéole","amateur","ambigu","ambre","aménager","amertume","amidon","amiral","amorcer","amour","amovible","amphibie","ampleur","amusant","analyse","anaphore","anarchie","anatomie","ancien","anéantir","angle","angoisse","anguleux","animal","annexer","annonce","annuel","anodin","anomalie","anonyme","anormal","antenne","antidote","anxieux","apaiser","apéritif","aplanir","apologie","appareil","appeler","apporter","appuyer","aquarium","aqueduc","arbitre","arbuste","ardeur","ardoise","argent","arlequin","armature","armement","armoire","armure","arpenter","arracher","arriver","arroser","arsenic","artériel","article","aspect","asphalte","aspirer","assaut","asservir","assiette","associer","assurer","asticot","astre","astuce","atelier","atome","atrium","atroce","attaque","attentif","attirer","attraper","aubaine","auberge","audace","audible","augurer","aurore","automne","autruche","avaler","avancer","avarice","avenir","averse","aveugle","aviateur","avide","avion","aviser","avoine","avouer","avril","axial","axiome","badge","bafouer","bagage","baguette","baignade","balancer","balcon","baleine","balisage","bambin","bancaire","bandage","banlieue","bannière","banquier","barbier","baril","baron","barque","barrage","bassin","bastion","bataille","bateau","batterie","baudrier","bavarder","belette","bélier","belote","bénéfice","berceau","berger","berline","bermuda","besace","besogne","bétail","beurre","biberon","bicycle","bidule","bijou","bilan","bilingue","billard","binaire","biologie","biopsie","biotype","biscuit","bison","bistouri","bitume","bizarre","blafard","blague","blanchir","blessant","blinder","blond","bloquer","blouson","bobard","bobine","boire","boiser","bolide","bonbon","bondir","bonheur","bonifier","bonus","bordure","borne","botte","boucle","boueux","bougie","boulon","bouquin","bourse","boussole","boutique","boxeur","branche","brasier","brave","brebis","brèche","breuvage","bricoler","brigade","brillant","brioche","brique","brochure","broder","bronzer","brousse","broyeur","brume","brusque","brutal","bruyant","buffle","buisson","bulletin","bureau","burin","bustier","butiner","butoir","buvable","buvette","cabanon","cabine","cachette","cadeau","cadre","caféine","caillou","caisson","calculer","calepin","calibre","calmer","calomnie","calvaire","camarade","caméra","camion","campagne","canal","caneton","canon","cantine","canular","capable","caporal","caprice","capsule","capter","capuche","carabine","carbone","caresser","caribou","carnage","carotte","carreau","carton","cascade","casier","casque","cassure","causer","caution","cavalier","caverne","caviar","cédille","ceinture","céleste","cellule","cendrier","censurer","central","cercle","cérébral","cerise","cerner","cerveau","cesser","chagrin","chaise","chaleur","chambre","chance","chapitre","charbon","chasseur","chaton","chausson","chavirer","chemise","chenille","chéquier","chercher","cheval","chien","chiffre","chignon","chimère","chiot","chlorure","chocolat","choisir","chose","chouette","chrome","chute","cigare","cigogne","cimenter","cinéma","cintrer","circuler","cirer","cirque","citerne","citoyen","citron","civil","clairon","clameur","claquer","classe","clavier","client","cligner","climat","clivage","cloche","clonage","cloporte","cobalt","cobra","cocasse","cocotier","coder","codifier","coffre","cogner","cohésion","coiffer","coincer","colère","colibri","colline","colmater","colonel","combat","comédie","commande","compact","concert","conduire","confier","congeler","connoter","consonne","contact","convexe","copain","copie","corail","corbeau","cordage","corniche","corpus","correct","cortège","cosmique","costume","coton","coude","coupure","courage","couteau","couvrir","coyote","crabe","crainte","cravate","crayon","créature","créditer","crémeux","creuser","crevette","cribler","crier","cristal","critère","croire","croquer","crotale","crucial","cruel","crypter","cubique","cueillir","cuillère","cuisine","cuivre","culminer","cultiver","cumuler","cupide","curatif","curseur","cyanure","cycle","cylindre","cynique","daigner","damier","danger","danseur","dauphin","débattre","débiter","déborder","débrider","débutant","décaler","décembre","déchirer","décider","déclarer","décorer","décrire","décupler","dédale","déductif","déesse","défensif","défiler","défrayer","dégager","dégivrer","déglutir","dégrafer","déjeuner","délice","déloger","demander","demeurer","démolir","dénicher","dénouer","dentelle","dénuder","départ","dépenser","déphaser","déplacer","déposer","déranger","dérober","désastre","descente","désert","désigner","désobéir","dessiner","destrier","détacher","détester","détourer","détresse","devancer","devenir","deviner","devoir","diable","dialogue","diamant","dicter","différer","digérer","digital","digne","diluer","dimanche","diminuer","dioxyde","directif","diriger","discuter","disposer","dissiper","distance","divertir","diviser","docile","docteur","dogme","doigt","domaine","domicile","dompter","donateur","donjon","donner","dopamine","dortoir","dorure","dosage","doseur","dossier","dotation","douanier","double","douceur","douter","doyen","dragon","draper","dresser","dribbler","droiture","duperie","duplexe","durable","durcir","dynastie","éblouir","écarter","écharpe","échelle","éclairer","éclipse","éclore","écluse","école","économie","écorce","écouter","écraser","écrémer","écrivain","écrou","écume","écureuil","édifier","éduquer","effacer","effectif","effigie","effort","effrayer","effusion","égaliser","égarer","éjecter","élaborer","élargir","électron","élégant","éléphant","élève","éligible","élitisme","éloge","élucider","éluder","emballer","embellir","embryon","émeraude","émission","emmener","émotion","émouvoir","empereur","employer","emporter","emprise","émulsion","encadrer","enchère","enclave","encoche","endiguer","endosser","endroit","enduire","énergie","enfance","enfermer","enfouir","engager","engin","englober","énigme","enjamber","enjeu","enlever","ennemi","ennuyeux","enrichir","enrobage","enseigne","entasser","entendre","entier","entourer","entraver","énumérer","envahir","enviable","envoyer","enzyme","éolien","épaissir","épargne","épatant","épaule","épicerie","épidémie","épier","épilogue","épine","épisode","épitaphe","époque","épreuve","éprouver","épuisant","équerre","équipe","ériger","érosion","erreur","éruption","escalier","espadon","espèce","espiègle","espoir","esprit","esquiver","essayer","essence","essieu","essorer","estime","estomac","estrade","étagère","étaler","étanche","étatique","éteindre","étendoir","éternel","éthanol","éthique","ethnie","étirer","étoffer","étoile","étonnant","étourdir","étrange","étroit","étude","euphorie","évaluer","évasion","éventail","évidence","éviter","évolutif","évoquer","exact","exagérer","exaucer","exceller","excitant","exclusif","excuse","exécuter","exemple","exercer","exhaler","exhorter","exigence","exiler","exister","exotique","expédier","explorer","exposer","exprimer","exquis","extensif","extraire","exulter","fable","fabuleux","facette","facile","facture","faiblir","falaise","fameux","famille","farceur","farfelu","farine","farouche","fasciner","fatal","fatigue","faucon","fautif","faveur","favori","fébrile","féconder","fédérer","félin","femme","fémur","fendoir","féodal","fermer","féroce","ferveur","festival","feuille","feutre","février","fiasco","ficeler","fictif","fidèle","figure","filature","filetage","filière","filleul","filmer","filou","filtrer","financer","finir","fiole","firme","fissure","fixer","flairer","flamme","flasque","flatteur","fléau","flèche","fleur","flexion","flocon","flore","fluctuer","fluide","fluvial","folie","fonderie","fongible","fontaine","forcer","forgeron","formuler","fortune","fossile","foudre","fougère","fouiller","foulure","fourmi","fragile","fraise","franchir","frapper","frayeur","frégate","freiner","frelon","frémir","frénésie","frère","friable","friction","frisson","frivole","froid","fromage","frontal","frotter","fruit","fugitif","fuite","fureur","furieux","furtif","fusion","futur","gagner","galaxie","galerie","gambader","garantir","gardien","garnir","garrigue","gazelle","gazon","géant","gélatine","gélule","gendarme","général","génie","genou","gentil","géologie","géomètre","géranium","germe","gestuel","geyser","gibier","gicler","girafe","givre","glace","glaive","glisser","globe","gloire","glorieux","golfeur","gomme","gonfler","gorge","gorille","goudron","gouffre","goulot","goupille","gourmand","goutte","graduel","graffiti","graine","grand","grappin","gratuit","gravir","grenat","griffure","griller","grimper","grogner","gronder","grotte","groupe","gruger","grutier","gruyère","guépard","guerrier","guide","guimauve","guitare","gustatif","gymnaste","gyrostat","habitude","hachoir","halte","hameau","hangar","hanneton","haricot","harmonie","harpon","hasard","hélium","hématome","herbe","hérisson","hermine","héron","hésiter","heureux","hiberner","hibou","hilarant","histoire","hiver","homard","hommage","homogène","honneur","honorer","honteux","horde","horizon","horloge","hormone","horrible","houleux","housse","hublot","huileux","humain","humble","humide","humour","hurler","hydromel","hygiène","hymne","hypnose","idylle","ignorer","iguane","illicite","illusion","image","imbiber","imiter","immense","immobile","immuable","impact","impérial","implorer","imposer","imprimer","imputer","incarner","incendie","incident","incliner","incolore","indexer","indice","inductif","inédit","ineptie","inexact","infini","infliger","informer","infusion","ingérer","inhaler","inhiber","injecter","injure","innocent","inoculer","inonder","inscrire","insecte","insigne","insolite","inspirer","instinct","insulter","intact","intense","intime","intrigue","intuitif","inutile","invasion","inventer","inviter","invoquer","ironique","irradier","irréel","irriter","isoler","ivoire","ivresse","jaguar","jaillir","jambe","janvier","jardin","jauger","jaune","javelot","jetable","jeton","jeudi","jeunesse","joindre","joncher","jongler","joueur","jouissif","journal","jovial","joyau","joyeux","jubiler","jugement","junior","jupon","juriste","justice","juteux","juvénile","kayak","kimono","kiosque","label","labial","labourer","lacérer","lactose","lagune","laine","laisser","laitier","lambeau","lamelle","lampe","lanceur","langage","lanterne","lapin","largeur","larme","laurier","lavabo","lavoir","lecture","légal","léger","légume","lessive","lettre","levier","lexique","lézard","liasse","libérer","libre","licence","licorne","liège","lièvre","ligature","ligoter","ligue","limer","limite","limonade","limpide","linéaire","lingot","lionceau","liquide","lisière","lister","lithium","litige","littoral","livreur","logique","lointain","loisir","lombric","loterie","louer","lourd","loutre","louve","loyal","lubie","lucide","lucratif","lueur","lugubre","luisant","lumière","lunaire","lundi","luron","lutter","luxueux","machine","magasin","magenta","magique","maigre","maillon","maintien","mairie","maison","majorer","malaxer","maléfice","malheur","malice","mallette","mammouth","mandater","maniable","manquant","manteau","manuel","marathon","marbre","marchand","mardi","maritime","marqueur","marron","marteler","mascotte","massif","matériel","matière","matraque","maudire","maussade","mauve","maximal","méchant","méconnu","médaille","médecin","méditer","méduse","meilleur","mélange","mélodie","membre","mémoire","menacer","mener","menhir","mensonge","mentor","mercredi","mérite","merle","messager","mesure","métal","météore","méthode","métier","meuble","miauler","microbe","miette","mignon","migrer","milieu","million","mimique","mince","minéral","minimal","minorer","minute","miracle","miroiter","missile","mixte","mobile","moderne","moelleux","mondial","moniteur","monnaie","monotone","monstre","montagne","monument","moqueur","morceau","morsure","mortier","moteur","motif","mouche","moufle","moulin","mousson","mouton","mouvant","multiple","munition","muraille","murène","murmure","muscle","muséum","musicien","mutation","muter","mutuel","myriade","myrtille","mystère","mythique","nageur","nappe","narquois","narrer","natation","nation","nature","naufrage","nautique","navire","nébuleux","nectar","néfaste","négation","négliger","négocier","neige","nerveux","nettoyer","neurone","neutron","neveu","niche","nickel","nitrate","niveau","noble","nocif","nocturne","noirceur","noisette","nomade","nombreux","nommer","normatif","notable","notifier","notoire","nourrir","nouveau","novateur","novembre","novice","nuage","nuancer","nuire","nuisible","numéro","nuptial","nuque","nutritif","obéir","objectif","obliger","obscur","observer","obstacle","obtenir","obturer","occasion","occuper","océan","octobre","octroyer","octupler","oculaire","odeur","odorant","offenser","officier","offrir","ogive","oiseau","oisillon","olfactif","olivier","ombrage","omettre","onctueux","onduler","onéreux","onirique","opale","opaque","opérer","opinion","opportun","opprimer","opter","optique","orageux","orange","orbite","ordonner","oreille","organe","orgueil","orifice","ornement","orque","ortie","osciller","osmose","ossature","otarie","ouragan","ourson","outil","outrager","ouvrage","ovation","oxyde","oxygène","ozone","paisible","palace","palmarès","palourde","palper","panache","panda","pangolin","paniquer","panneau","panorama","pantalon","papaye","papier","papoter","papyrus","paradoxe","parcelle","paresse","parfumer","parler","parole","parrain","parsemer","partager","parure","parvenir","passion","pastèque","paternel","patience","patron","pavillon","pavoiser","payer","paysage","peigne","peintre","pelage","pélican","pelle","pelouse","peluche","pendule","pénétrer","pénible","pensif","pénurie","pépite","péplum","perdrix","perforer","période","permuter","perplexe","persil","perte","peser","pétale","petit","pétrir","peuple","pharaon","phobie","phoque","photon","phrase","physique","piano","pictural","pièce","pierre","pieuvre","pilote","pinceau","pipette","piquer","pirogue","piscine","piston","pivoter","pixel","pizza","placard","plafond","plaisir","planer","plaque","plastron","plateau","pleurer","plexus","pliage","plomb","plonger","pluie","plumage","pochette","poésie","poète","pointe","poirier","poisson","poivre","polaire","policier","pollen","polygone","pommade","pompier","ponctuel","pondérer","poney","portique","position","posséder","posture","potager","poteau","potion","pouce","poulain","poumon","pourpre","poussin","pouvoir","prairie","pratique","précieux","prédire","préfixe","prélude","prénom","présence","prétexte","prévoir","primitif","prince","prison","priver","problème","procéder","prodige","profond","progrès","proie","projeter","prologue","promener","propre","prospère","protéger","prouesse","proverbe","prudence","pruneau","psychose","public","puceron","puiser","pulpe","pulsar","punaise","punitif","pupitre","purifier","puzzle","pyramide","quasar","querelle","question","quiétude","quitter","quotient","racine","raconter","radieux","ragondin","raideur","raisin","ralentir","rallonge","ramasser","rapide","rasage","ratisser","ravager","ravin","rayonner","réactif","réagir","réaliser","réanimer","recevoir","réciter","réclamer","récolter","recruter","reculer","recycler","rédiger","redouter","refaire","réflexe","réformer","refrain","refuge","régalien","région","réglage","régulier","réitérer","rejeter","rejouer","relatif","relever","relief","remarque","remède","remise","remonter","remplir","remuer","renard","renfort","renifler","renoncer","rentrer","renvoi","replier","reporter","reprise","reptile","requin","réserve","résineux","résoudre","respect","rester","résultat","rétablir","retenir","réticule","retomber","retracer","réunion","réussir","revanche","revivre","révolte","révulsif","richesse","rideau","rieur","rigide","rigoler","rincer","riposter","risible","risque","rituel","rival","rivière","rocheux","romance","rompre","ronce","rondin","roseau","rosier","rotatif","rotor","rotule","rouge","rouille","rouleau","routine","royaume","ruban","rubis","ruche","ruelle","rugueux","ruiner","ruisseau","ruser","rustique","rythme","sabler","saboter","sabre","sacoche","safari","sagesse","saisir","salade","salive","salon","saluer","samedi","sanction","sanglier","sarcasme","sardine","saturer","saugrenu","saumon","sauter","sauvage","savant","savonner","scalpel","scandale","scélérat","scénario","sceptre","schéma","science","scinder","score","scrutin","sculpter","séance","sécable","sécher","secouer","sécréter","sédatif","séduire","seigneur","séjour","sélectif","semaine","sembler","semence","séminal","sénateur","sensible","sentence","séparer","séquence","serein","sergent","sérieux","serrure","sérum","service","sésame","sévir","sevrage","sextuple","sidéral","siècle","siéger","siffler","sigle","signal","silence","silicium","simple","sincère","sinistre","siphon","sirop","sismique","situer","skier","social","socle","sodium","soigneux","soldat","soleil","solitude","soluble","sombre","sommeil","somnoler","sonde","songeur","sonnette","sonore","sorcier","sortir","sosie","sottise","soucieux","soudure","souffle","soulever","soupape","source","soutirer","souvenir","spacieux","spatial","spécial","sphère","spiral","stable","station","sternum","stimulus","stipuler","strict","studieux","stupeur","styliste","sublime","substrat","subtil","subvenir","succès","sucre","suffixe","suggérer","suiveur","sulfate","superbe","supplier","surface","suricate","surmener","surprise","sursaut","survie","suspect","syllabe","symbole","symétrie","synapse","syntaxe","système","tabac","tablier","tactile","tailler","talent","talisman","talonner","tambour","tamiser","tangible","tapis","taquiner","tarder","tarif","tartine","tasse","tatami","tatouage","taupe","taureau","taxer","témoin","temporel","tenaille","tendre","teneur","tenir","tension","terminer","terne","terrible","tétine","texte","thème","théorie","thérapie","thorax","tibia","tiède","timide","tirelire","tiroir","tissu","titane","titre","tituber","toboggan","tolérant","tomate","tonique","tonneau","toponyme","torche","tordre","tornade","torpille","torrent","torse","tortue","totem","toucher","tournage","tousser","toxine","traction","trafic","tragique","trahir","train","trancher","travail","trèfle","tremper","trésor","treuil","triage","tribunal","tricoter","trilogie","triomphe","tripler","triturer","trivial","trombone","tronc","tropical","troupeau","tuile","tulipe","tumulte","tunnel","turbine","tuteur","tutoyer","tuyau","tympan","typhon","typique","tyran","ubuesque","ultime","ultrason","unanime","unifier","union","unique","unitaire","univers","uranium","urbain","urticant","usage","usine","usuel","usure","utile","utopie","vacarme","vaccin","vagabond","vague","vaillant","vaincre","vaisseau","valable","valise","vallon","valve","vampire","vanille","vapeur","varier","vaseux","vassal","vaste","vecteur","vedette","végétal","véhicule","veinard","véloce","vendredi","vénérer","venger","venimeux","ventouse","verdure","vérin","vernir","verrou","verser","vertu","veston","vétéran","vétuste","vexant","vexer","viaduc","viande","victoire","vidange","vidéo","vignette","vigueur","vilain","village","vinaigre","violon","vipère","virement","virtuose","virus","visage","viseur","vision","visqueux","visuel","vital","vitesse","viticole","vitrine","vivace","vivipare","vocation","voguer","voile","voisin","voiture","volaille","volcan","voltiger","volume","vorace","vortex","voter","vouloir","voyage","voyelle","wagon","xénon","yacht","zèbre","zénith","zeste","zoologie"]');

},{}],"1x33J":[function(require,module,exports) {
module.exports = JSON.parse('["abaco","abbaglio","abbinato","abete","abisso","abolire","abrasivo","abrogato","accadere","accenno","accusato","acetone","achille","acido","acqua","acre","acrilico","acrobata","acuto","adagio","addebito","addome","adeguato","aderire","adipe","adottare","adulare","affabile","affetto","affisso","affranto","aforisma","afoso","africano","agave","agente","agevole","aggancio","agire","agitare","agonismo","agricolo","agrumeto","aguzzo","alabarda","alato","albatro","alberato","albo","albume","alce","alcolico","alettone","alfa","algebra","aliante","alibi","alimento","allagato","allegro","allievo","allodola","allusivo","almeno","alogeno","alpaca","alpestre","altalena","alterno","alticcio","altrove","alunno","alveolo","alzare","amalgama","amanita","amarena","ambito","ambrato","ameba","america","ametista","amico","ammasso","ammenda","ammirare","ammonito","amore","ampio","ampliare","amuleto","anacardo","anagrafe","analista","anarchia","anatra","anca","ancella","ancora","andare","andrea","anello","angelo","angolare","angusto","anima","annegare","annidato","anno","annuncio","anonimo","anticipo","anzi","apatico","apertura","apode","apparire","appetito","appoggio","approdo","appunto","aprile","arabica","arachide","aragosta","araldica","arancio","aratura","arazzo","arbitro","archivio","ardito","arenile","argento","argine","arguto","aria","armonia","arnese","arredato","arringa","arrosto","arsenico","arso","artefice","arzillo","asciutto","ascolto","asepsi","asettico","asfalto","asino","asola","aspirato","aspro","assaggio","asse","assoluto","assurdo","asta","astenuto","astice","astratto","atavico","ateismo","atomico","atono","attesa","attivare","attorno","attrito","attuale","ausilio","austria","autista","autonomo","autunno","avanzato","avere","avvenire","avviso","avvolgere","azione","azoto","azzimo","azzurro","babele","baccano","bacino","baco","badessa","badilata","bagnato","baita","balcone","baldo","balena","ballata","balzano","bambino","bandire","baraonda","barbaro","barca","baritono","barlume","barocco","basilico","basso","batosta","battuto","baule","bava","bavosa","becco","beffa","belgio","belva","benda","benevole","benigno","benzina","bere","berlina","beta","bibita","bici","bidone","bifido","biga","bilancia","bimbo","binocolo","biologo","bipede","bipolare","birbante","birra","biscotto","bisesto","bisnonno","bisonte","bisturi","bizzarro","blando","blatta","bollito","bonifico","bordo","bosco","botanico","bottino","bozzolo","braccio","bradipo","brama","branca","bravura","bretella","brevetto","brezza","briglia","brillante","brindare","broccolo","brodo","bronzina","brullo","bruno","bubbone","buca","budino","buffone","buio","bulbo","buono","burlone","burrasca","bussola","busta","cadetto","caduco","calamaro","calcolo","calesse","calibro","calmo","caloria","cambusa","camerata","camicia","cammino","camola","campale","canapa","candela","cane","canino","canotto","cantina","capace","capello","capitolo","capogiro","cappero","capra","capsula","carapace","carcassa","cardo","carisma","carovana","carretto","cartolina","casaccio","cascata","caserma","caso","cassone","castello","casuale","catasta","catena","catrame","cauto","cavillo","cedibile","cedrata","cefalo","celebre","cellulare","cena","cenone","centesimo","ceramica","cercare","certo","cerume","cervello","cesoia","cespo","ceto","chela","chiaro","chicca","chiedere","chimera","china","chirurgo","chitarra","ciao","ciclismo","cifrare","cigno","cilindro","ciottolo","circa","cirrosi","citrico","cittadino","ciuffo","civetta","civile","classico","clinica","cloro","cocco","codardo","codice","coerente","cognome","collare","colmato","colore","colposo","coltivato","colza","coma","cometa","commando","comodo","computer","comune","conciso","condurre","conferma","congelare","coniuge","connesso","conoscere","consumo","continuo","convegno","coperto","copione","coppia","copricapo","corazza","cordata","coricato","cornice","corolla","corpo","corredo","corsia","cortese","cosmico","costante","cottura","covato","cratere","cravatta","creato","credere","cremoso","crescita","creta","criceto","crinale","crisi","critico","croce","cronaca","crostata","cruciale","crusca","cucire","cuculo","cugino","cullato","cupola","curatore","cursore","curvo","cuscino","custode","dado","daino","dalmata","damerino","daniela","dannoso","danzare","datato","davanti","davvero","debutto","decennio","deciso","declino","decollo","decreto","dedicato","definito","deforme","degno","delegare","delfino","delirio","delta","demenza","denotato","dentro","deposito","derapata","derivare","deroga","descritto","deserto","desiderio","desumere","detersivo","devoto","diametro","dicembre","diedro","difeso","diffuso","digerire","digitale","diluvio","dinamico","dinnanzi","dipinto","diploma","dipolo","diradare","dire","dirotto","dirupo","disagio","discreto","disfare","disgelo","disposto","distanza","disumano","dito","divano","divelto","dividere","divorato","doblone","docente","doganale","dogma","dolce","domato","domenica","dominare","dondolo","dono","dormire","dote","dottore","dovuto","dozzina","drago","druido","dubbio","dubitare","ducale","duna","duomo","duplice","duraturo","ebano","eccesso","ecco","eclissi","economia","edera","edicola","edile","editoria","educare","egemonia","egli","egoismo","egregio","elaborato","elargire","elegante","elencato","eletto","elevare","elfico","elica","elmo","elsa","eluso","emanato","emblema","emesso","emiro","emotivo","emozione","empirico","emulo","endemico","enduro","energia","enfasi","enoteca","entrare","enzima","epatite","epilogo","episodio","epocale","eppure","equatore","erario","erba","erboso","erede","eremita","erigere","ermetico","eroe","erosivo","errante","esagono","esame","esanime","esaudire","esca","esempio","esercito","esibito","esigente","esistere","esito","esofago","esortato","esoso","espanso","espresso","essenza","esso","esteso","estimare","estonia","estroso","esultare","etilico","etnico","etrusco","etto","euclideo","europa","evaso","evidenza","evitato","evoluto","evviva","fabbrica","faccenda","fachiro","falco","famiglia","fanale","fanfara","fango","fantasma","fare","farfalla","farinoso","farmaco","fascia","fastoso","fasullo","faticare","fato","favoloso","febbre","fecola","fede","fegato","felpa","feltro","femmina","fendere","fenomeno","fermento","ferro","fertile","fessura","festivo","fetta","feudo","fiaba","fiducia","fifa","figurato","filo","finanza","finestra","finire","fiore","fiscale","fisico","fiume","flacone","flamenco","flebo","flemma","florido","fluente","fluoro","fobico","focaccia","focoso","foderato","foglio","folata","folclore","folgore","fondente","fonetico","fonia","fontana","forbito","forchetta","foresta","formica","fornaio","foro","fortezza","forzare","fosfato","fosso","fracasso","frana","frassino","fratello","freccetta","frenata","fresco","frigo","frollino","fronde","frugale","frutta","fucilata","fucsia","fuggente","fulmine","fulvo","fumante","fumetto","fumoso","fune","funzione","fuoco","furbo","furgone","furore","fuso","futile","gabbiano","gaffe","galateo","gallina","galoppo","gambero","gamma","garanzia","garbo","garofano","garzone","gasdotto","gasolio","gastrico","gatto","gaudio","gazebo","gazzella","geco","gelatina","gelso","gemello","gemmato","gene","genitore","gennaio","genotipo","gergo","ghepardo","ghiaccio","ghisa","giallo","gilda","ginepro","giocare","gioiello","giorno","giove","girato","girone","gittata","giudizio","giurato","giusto","globulo","glutine","gnomo","gobba","golf","gomito","gommone","gonfio","gonna","governo","gracile","grado","grafico","grammo","grande","grattare","gravoso","grazia","greca","gregge","grifone","grigio","grinza","grotta","gruppo","guadagno","guaio","guanto","guardare","gufo","guidare","ibernato","icona","identico","idillio","idolo","idra","idrico","idrogeno","igiene","ignaro","ignorato","ilare","illeso","illogico","illudere","imballo","imbevuto","imbocco","imbuto","immane","immerso","immolato","impacco","impeto","impiego","importo","impronta","inalare","inarcare","inattivo","incanto","incendio","inchino","incisivo","incluso","incontro","incrocio","incubo","indagine","india","indole","inedito","infatti","infilare","inflitto","ingaggio","ingegno","inglese","ingordo","ingrosso","innesco","inodore","inoltrare","inondato","insano","insetto","insieme","insonnia","insulina","intasato","intero","intonaco","intuito","inumidire","invalido","invece","invito","iperbole","ipnotico","ipotesi","ippica","iride","irlanda","ironico","irrigato","irrorare","isolato","isotopo","isterico","istituto","istrice","italia","iterare","labbro","labirinto","lacca","lacerato","lacrima","lacuna","laddove","lago","lampo","lancetta","lanterna","lardoso","larga","laringe","lastra","latenza","latino","lattuga","lavagna","lavoro","legale","leggero","lembo","lentezza","lenza","leone","lepre","lesivo","lessato","lesto","letterale","leva","levigato","libero","lido","lievito","lilla","limatura","limitare","limpido","lineare","lingua","liquido","lira","lirica","lisca","lite","litigio","livrea","locanda","lode","logica","lombare","londra","longevo","loquace","lorenzo","loto","lotteria","luce","lucidato","lumaca","luminoso","lungo","lupo","luppolo","lusinga","lusso","lutto","macabro","macchina","macero","macinato","madama","magico","maglia","magnete","magro","maiolica","malafede","malgrado","malinteso","malsano","malto","malumore","mana","mancia","mandorla","mangiare","manifesto","mannaro","manovra","mansarda","mantide","manubrio","mappa","maratona","marcire","maretta","marmo","marsupio","maschera","massaia","mastino","materasso","matricola","mattone","maturo","mazurca","meandro","meccanico","mecenate","medesimo","meditare","mega","melassa","melis","melodia","meninge","meno","mensola","mercurio","merenda","merlo","meschino","mese","messere","mestolo","metallo","metodo","mettere","miagolare","mica","micelio","michele","microbo","midollo","miele","migliore","milano","milite","mimosa","minerale","mini","minore","mirino","mirtillo","miscela","missiva","misto","misurare","mitezza","mitigare","mitra","mittente","mnemonico","modello","modifica","modulo","mogano","mogio","mole","molosso","monastero","monco","mondina","monetario","monile","monotono","monsone","montato","monviso","mora","mordere","morsicato","mostro","motivato","motosega","motto","movenza","movimento","mozzo","mucca","mucosa","muffa","mughetto","mugnaio","mulatto","mulinello","multiplo","mummia","munto","muovere","murale","musa","muscolo","musica","mutevole","muto","nababbo","nafta","nanometro","narciso","narice","narrato","nascere","nastrare","naturale","nautica","naviglio","nebulosa","necrosi","negativo","negozio","nemmeno","neofita","neretto","nervo","nessuno","nettuno","neutrale","neve","nevrotico","nicchia","ninfa","nitido","nobile","nocivo","nodo","nome","nomina","nordico","normale","norvegese","nostrano","notare","notizia","notturno","novella","nucleo","nulla","numero","nuovo","nutrire","nuvola","nuziale","oasi","obbedire","obbligo","obelisco","oblio","obolo","obsoleto","occasione","occhio","occidente","occorrere","occultare","ocra","oculato","odierno","odorare","offerta","offrire","offuscato","oggetto","oggi","ognuno","olandese","olfatto","oliato","oliva","ologramma","oltre","omaggio","ombelico","ombra","omega","omissione","ondoso","onere","onice","onnivoro","onorevole","onta","operato","opinione","opposto","oracolo","orafo","ordine","orecchino","orefice","orfano","organico","origine","orizzonte","orma","ormeggio","ornativo","orologio","orrendo","orribile","ortensia","ortica","orzata","orzo","osare","oscurare","osmosi","ospedale","ospite","ossa","ossidare","ostacolo","oste","otite","otre","ottagono","ottimo","ottobre","ovale","ovest","ovino","oviparo","ovocito","ovunque","ovviare","ozio","pacchetto","pace","pacifico","padella","padrone","paese","paga","pagina","palazzina","palesare","pallido","palo","palude","pandoro","pannello","paolo","paonazzo","paprica","parabola","parcella","parere","pargolo","pari","parlato","parola","partire","parvenza","parziale","passivo","pasticca","patacca","patologia","pattume","pavone","peccato","pedalare","pedonale","peggio","peloso","penare","pendice","penisola","pennuto","penombra","pensare","pentola","pepe","pepita","perbene","percorso","perdonato","perforare","pergamena","periodo","permesso","perno","perplesso","persuaso","pertugio","pervaso","pesatore","pesista","peso","pestifero","petalo","pettine","petulante","pezzo","piacere","pianta","piattino","piccino","picozza","piega","pietra","piffero","pigiama","pigolio","pigro","pila","pilifero","pillola","pilota","pimpante","pineta","pinna","pinolo","pioggia","piombo","piramide","piretico","pirite","pirolisi","pitone","pizzico","placebo","planare","plasma","platano","plenario","pochezza","poderoso","podismo","poesia","poggiare","polenta","poligono","pollice","polmonite","polpetta","polso","poltrona","polvere","pomice","pomodoro","ponte","popoloso","porfido","poroso","porpora","porre","portata","posa","positivo","possesso","postulato","potassio","potere","pranzo","prassi","pratica","precluso","predica","prefisso","pregiato","prelievo","premere","prenotare","preparato","presenza","pretesto","prevalso","prima","principe","privato","problema","procura","produrre","profumo","progetto","prolunga","promessa","pronome","proposta","proroga","proteso","prova","prudente","prugna","prurito","psiche","pubblico","pudica","pugilato","pugno","pulce","pulito","pulsante","puntare","pupazzo","pupilla","puro","quadro","qualcosa","quasi","querela","quota","raccolto","raddoppio","radicale","radunato","raffica","ragazzo","ragione","ragno","ramarro","ramingo","ramo","randagio","rantolare","rapato","rapina","rappreso","rasatura","raschiato","rasente","rassegna","rastrello","rata","ravveduto","reale","recepire","recinto","recluta","recondito","recupero","reddito","redimere","regalato","registro","regola","regresso","relazione","remare","remoto","renna","replica","reprimere","reputare","resa","residente","responso","restauro","rete","retina","retorica","rettifica","revocato","riassunto","ribadire","ribelle","ribrezzo","ricarica","ricco","ricevere","riciclato","ricordo","ricreduto","ridicolo","ridurre","rifasare","riflesso","riforma","rifugio","rigare","rigettato","righello","rilassato","rilevato","rimanere","rimbalzo","rimedio","rimorchio","rinascita","rincaro","rinforzo","rinnovo","rinomato","rinsavito","rintocco","rinuncia","rinvenire","riparato","ripetuto","ripieno","riportare","ripresa","ripulire","risata","rischio","riserva","risibile","riso","rispetto","ristoro","risultato","risvolto","ritardo","ritegno","ritmico","ritrovo","riunione","riva","riverso","rivincita","rivolto","rizoma","roba","robotico","robusto","roccia","roco","rodaggio","rodere","roditore","rogito","rollio","romantico","rompere","ronzio","rosolare","rospo","rotante","rotondo","rotula","rovescio","rubizzo","rubrica","ruga","rullino","rumine","rumoroso","ruolo","rupe","russare","rustico","sabato","sabbiare","sabotato","sagoma","salasso","saldatura","salgemma","salivare","salmone","salone","saltare","saluto","salvo","sapere","sapido","saporito","saraceno","sarcasmo","sarto","sassoso","satellite","satira","satollo","saturno","savana","savio","saziato","sbadiglio","sbalzo","sbancato","sbarra","sbattere","sbavare","sbendare","sbirciare","sbloccato","sbocciato","sbrinare","sbruffone","sbuffare","scabroso","scadenza","scala","scambiare","scandalo","scapola","scarso","scatenare","scavato","scelto","scenico","scettro","scheda","schiena","sciarpa","scienza","scindere","scippo","sciroppo","scivolo","sclerare","scodella","scolpito","scomparto","sconforto","scoprire","scorta","scossone","scozzese","scriba","scrollare","scrutinio","scuderia","scultore","scuola","scuro","scusare","sdebitare","sdoganare","seccatura","secondo","sedano","seggiola","segnalato","segregato","seguito","selciato","selettivo","sella","selvaggio","semaforo","sembrare","seme","seminato","sempre","senso","sentire","sepolto","sequenza","serata","serbato","sereno","serio","serpente","serraglio","servire","sestina","setola","settimana","sfacelo","sfaldare","sfamato","sfarzoso","sfaticato","sfera","sfida","sfilato","sfinge","sfocato","sfoderare","sfogo","sfoltire","sforzato","sfratto","sfruttato","sfuggito","sfumare","sfuso","sgabello","sgarbato","sgonfiare","sgorbio","sgrassato","sguardo","sibilo","siccome","sierra","sigla","signore","silenzio","sillaba","simbolo","simpatico","simulato","sinfonia","singolo","sinistro","sino","sintesi","sinusoide","sipario","sisma","sistole","situato","slitta","slogatura","sloveno","smarrito","smemorato","smentito","smeraldo","smilzo","smontare","smottato","smussato","snellire","snervato","snodo","sobbalzo","sobrio","soccorso","sociale","sodale","soffitto","sogno","soldato","solenne","solido","sollazzo","solo","solubile","solvente","somatico","somma","sonda","sonetto","sonnifero","sopire","soppeso","sopra","sorgere","sorpasso","sorriso","sorso","sorteggio","sorvolato","sospiro","sosta","sottile","spada","spalla","spargere","spatola","spavento","spazzola","specie","spedire","spegnere","spelatura","speranza","spessore","spettrale","spezzato","spia","spigoloso","spillato","spinoso","spirale","splendido","sportivo","sposo","spranga","sprecare","spronato","spruzzo","spuntino","squillo","sradicare","srotolato","stabile","stacco","staffa","stagnare","stampato","stantio","starnuto","stasera","statuto","stelo","steppa","sterzo","stiletto","stima","stirpe","stivale","stizzoso","stonato","storico","strappo","stregato","stridulo","strozzare","strutto","stuccare","stufo","stupendo","subentro","succoso","sudore","suggerito","sugo","sultano","suonare","superbo","supporto","surgelato","surrogato","sussurro","sutura","svagare","svedese","sveglio","svelare","svenuto","svezia","sviluppo","svista","svizzera","svolta","svuotare","tabacco","tabulato","tacciare","taciturno","tale","talismano","tampone","tannino","tara","tardivo","targato","tariffa","tarpare","tartaruga","tasto","tattico","taverna","tavolata","tazza","teca","tecnico","telefono","temerario","tempo","temuto","tendone","tenero","tensione","tentacolo","teorema","terme","terrazzo","terzetto","tesi","tesserato","testato","tetro","tettoia","tifare","tigella","timbro","tinto","tipico","tipografo","tiraggio","tiro","titanio","titolo","titubante","tizio","tizzone","toccare","tollerare","tolto","tombola","tomo","tonfo","tonsilla","topazio","topologia","toppa","torba","tornare","torrone","tortora","toscano","tossire","tostatura","totano","trabocco","trachea","trafila","tragedia","tralcio","tramonto","transito","trapano","trarre","trasloco","trattato","trave","treccia","tremolio","trespolo","tributo","tricheco","trifoglio","trillo","trincea","trio","tristezza","triturato","trivella","tromba","trono","troppo","trottola","trovare","truccato","tubatura","tuffato","tulipano","tumulto","tunisia","turbare","turchino","tuta","tutela","ubicato","uccello","uccisore","udire","uditivo","uffa","ufficio","uguale","ulisse","ultimato","umano","umile","umorismo","uncinetto","ungere","ungherese","unicorno","unificato","unisono","unitario","unte","uovo","upupa","uragano","urgenza","urlo","usanza","usato","uscito","usignolo","usuraio","utensile","utilizzo","utopia","vacante","vaccinato","vagabondo","vagliato","valanga","valgo","valico","valletta","valoroso","valutare","valvola","vampata","vangare","vanitoso","vano","vantaggio","vanvera","vapore","varano","varcato","variante","vasca","vedetta","vedova","veduto","vegetale","veicolo","velcro","velina","velluto","veloce","venato","vendemmia","vento","verace","verbale","vergogna","verifica","vero","verruca","verticale","vescica","vessillo","vestale","veterano","vetrina","vetusto","viandante","vibrante","vicenda","vichingo","vicinanza","vidimare","vigilia","vigneto","vigore","vile","villano","vimini","vincitore","viola","vipera","virgola","virologo","virulento","viscoso","visione","vispo","vissuto","visura","vita","vitello","vittima","vivanda","vivido","viziare","voce","voga","volatile","volere","volpe","voragine","vulcano","zampogna","zanna","zappato","zattera","zavorra","zefiro","zelante","zelo","zenzero","zerbino","zibetto","zinco","zircone","zitto","zolla","zotico","zucchero","zufolo","zulu","zuppa"]');

},{}],"bdE8o":[function(require,module,exports) {
module.exports = JSON.parse('["ábaco","abdomen","abeja","abierto","abogado","abono","aborto","abrazo","abrir","abuelo","abuso","acabar","academia","acceso","acción","aceite","acelga","acento","aceptar","ácido","aclarar","acné","acoger","acoso","activo","acto","actriz","actuar","acudir","acuerdo","acusar","adicto","admitir","adoptar","adorno","aduana","adulto","aéreo","afectar","afición","afinar","afirmar","ágil","agitar","agonía","agosto","agotar","agregar","agrio","agua","agudo","águila","aguja","ahogo","ahorro","aire","aislar","ajedrez","ajeno","ajuste","alacrán","alambre","alarma","alba","álbum","alcalde","aldea","alegre","alejar","alerta","aleta","alfiler","alga","algodón","aliado","aliento","alivio","alma","almeja","almíbar","altar","alteza","altivo","alto","altura","alumno","alzar","amable","amante","amapola","amargo","amasar","ámbar","ámbito","ameno","amigo","amistad","amor","amparo","amplio","ancho","anciano","ancla","andar","andén","anemia","ángulo","anillo","ánimo","anís","anotar","antena","antiguo","antojo","anual","anular","anuncio","añadir","añejo","año","apagar","aparato","apetito","apio","aplicar","apodo","aporte","apoyo","aprender","aprobar","apuesta","apuro","arado","araña","arar","árbitro","árbol","arbusto","archivo","arco","arder","ardilla","arduo","área","árido","aries","armonía","arnés","aroma","arpa","arpón","arreglo","arroz","arruga","arte","artista","asa","asado","asalto","ascenso","asegurar","aseo","asesor","asiento","asilo","asistir","asno","asombro","áspero","astilla","astro","astuto","asumir","asunto","atajo","ataque","atar","atento","ateo","ático","atleta","átomo","atraer","atroz","atún","audaz","audio","auge","aula","aumento","ausente","autor","aval","avance","avaro","ave","avellana","avena","avestruz","avión","aviso","ayer","ayuda","ayuno","azafrán","azar","azote","azúcar","azufre","azul","baba","babor","bache","bahía","baile","bajar","balanza","balcón","balde","bambú","banco","banda","baño","barba","barco","barniz","barro","báscula","bastón","basura","batalla","batería","batir","batuta","baúl","bazar","bebé","bebida","bello","besar","beso","bestia","bicho","bien","bingo","blanco","bloque","blusa","boa","bobina","bobo","boca","bocina","boda","bodega","boina","bola","bolero","bolsa","bomba","bondad","bonito","bono","bonsái","borde","borrar","bosque","bote","botín","bóveda","bozal","bravo","brazo","brecha","breve","brillo","brinco","brisa","broca","broma","bronce","brote","bruja","brusco","bruto","buceo","bucle","bueno","buey","bufanda","bufón","búho","buitre","bulto","burbuja","burla","burro","buscar","butaca","buzón","caballo","cabeza","cabina","cabra","cacao","cadáver","cadena","caer","café","caída","caimán","caja","cajón","cal","calamar","calcio","caldo","calidad","calle","calma","calor","calvo","cama","cambio","camello","camino","campo","cáncer","candil","canela","canguro","canica","canto","caña","cañón","caoba","caos","capaz","capitán","capote","captar","capucha","cara","carbón","cárcel","careta","carga","cariño","carne","carpeta","carro","carta","casa","casco","casero","caspa","castor","catorce","catre","caudal","causa","cazo","cebolla","ceder","cedro","celda","célebre","celoso","célula","cemento","ceniza","centro","cerca","cerdo","cereza","cero","cerrar","certeza","césped","cetro","chacal","chaleco","champú","chancla","chapa","charla","chico","chiste","chivo","choque","choza","chuleta","chupar","ciclón","ciego","cielo","cien","cierto","cifra","cigarro","cima","cinco","cine","cinta","ciprés","circo","ciruela","cisne","cita","ciudad","clamor","clan","claro","clase","clave","cliente","clima","clínica","cobre","cocción","cochino","cocina","coco","código","codo","cofre","coger","cohete","cojín","cojo","cola","colcha","colegio","colgar","colina","collar","colmo","columna","combate","comer","comida","cómodo","compra","conde","conejo","conga","conocer","consejo","contar","copa","copia","corazón","corbata","corcho","cordón","corona","correr","coser","cosmos","costa","cráneo","cráter","crear","crecer","creído","crema","cría","crimen","cripta","crisis","cromo","crónica","croqueta","crudo","cruz","cuadro","cuarto","cuatro","cubo","cubrir","cuchara","cuello","cuento","cuerda","cuesta","cueva","cuidar","culebra","culpa","culto","cumbre","cumplir","cuna","cuneta","cuota","cupón","cúpula","curar","curioso","curso","curva","cutis","dama","danza","dar","dardo","dátil","deber","débil","década","decir","dedo","defensa","definir","dejar","delfín","delgado","delito","demora","denso","dental","deporte","derecho","derrota","desayuno","deseo","desfile","desnudo","destino","desvío","detalle","detener","deuda","día","diablo","diadema","diamante","diana","diario","dibujo","dictar","diente","dieta","diez","difícil","digno","dilema","diluir","dinero","directo","dirigir","disco","diseño","disfraz","diva","divino","doble","doce","dolor","domingo","don","donar","dorado","dormir","dorso","dos","dosis","dragón","droga","ducha","duda","duelo","dueño","dulce","dúo","duque","durar","dureza","duro","ébano","ebrio","echar","eco","ecuador","edad","edición","edificio","editor","educar","efecto","eficaz","eje","ejemplo","elefante","elegir","elemento","elevar","elipse","élite","elixir","elogio","eludir","embudo","emitir","emoción","empate","empeño","empleo","empresa","enano","encargo","enchufe","encía","enemigo","enero","enfado","enfermo","engaño","enigma","enlace","enorme","enredo","ensayo","enseñar","entero","entrar","envase","envío","época","equipo","erizo","escala","escena","escolar","escribir","escudo","esencia","esfera","esfuerzo","espada","espejo","espía","esposa","espuma","esquí","estar","este","estilo","estufa","etapa","eterno","ética","etnia","evadir","evaluar","evento","evitar","exacto","examen","exceso","excusa","exento","exigir","exilio","existir","éxito","experto","explicar","exponer","extremo","fábrica","fábula","fachada","fácil","factor","faena","faja","falda","fallo","falso","faltar","fama","familia","famoso","faraón","farmacia","farol","farsa","fase","fatiga","fauna","favor","fax","febrero","fecha","feliz","feo","feria","feroz","fértil","fervor","festín","fiable","fianza","fiar","fibra","ficción","ficha","fideo","fiebre","fiel","fiera","fiesta","figura","fijar","fijo","fila","filete","filial","filtro","fin","finca","fingir","finito","firma","flaco","flauta","flecha","flor","flota","fluir","flujo","flúor","fobia","foca","fogata","fogón","folio","folleto","fondo","forma","forro","fortuna","forzar","fosa","foto","fracaso","frágil","franja","frase","fraude","freír","freno","fresa","frío","frito","fruta","fuego","fuente","fuerza","fuga","fumar","función","funda","furgón","furia","fusil","fútbol","futuro","gacela","gafas","gaita","gajo","gala","galería","gallo","gamba","ganar","gancho","ganga","ganso","garaje","garza","gasolina","gastar","gato","gavilán","gemelo","gemir","gen","género","genio","gente","geranio","gerente","germen","gesto","gigante","gimnasio","girar","giro","glaciar","globo","gloria","gol","golfo","goloso","golpe","goma","gordo","gorila","gorra","gota","goteo","gozar","grada","gráfico","grano","grasa","gratis","grave","grieta","grillo","gripe","gris","grito","grosor","grúa","grueso","grumo","grupo","guante","guapo","guardia","guerra","guía","guiño","guion","guiso","guitarra","gusano","gustar","haber","hábil","hablar","hacer","hacha","hada","hallar","hamaca","harina","haz","hazaña","hebilla","hebra","hecho","helado","helio","hembra","herir","hermano","héroe","hervir","hielo","hierro","hígado","higiene","hijo","himno","historia","hocico","hogar","hoguera","hoja","hombre","hongo","honor","honra","hora","hormiga","horno","hostil","hoyo","hueco","huelga","huerta","hueso","huevo","huida","huir","humano","húmedo","humilde","humo","hundir","huracán","hurto","icono","ideal","idioma","ídolo","iglesia","iglú","igual","ilegal","ilusión","imagen","imán","imitar","impar","imperio","imponer","impulso","incapaz","índice","inerte","infiel","informe","ingenio","inicio","inmenso","inmune","innato","insecto","instante","interés","íntimo","intuir","inútil","invierno","ira","iris","ironía","isla","islote","jabalí","jabón","jamón","jarabe","jardín","jarra","jaula","jazmín","jefe","jeringa","jinete","jornada","joroba","joven","joya","juerga","jueves","juez","jugador","jugo","juguete","juicio","junco","jungla","junio","juntar","júpiter","jurar","justo","juvenil","juzgar","kilo","koala","labio","lacio","lacra","lado","ladrón","lagarto","lágrima","laguna","laico","lamer","lámina","lámpara","lana","lancha","langosta","lanza","lápiz","largo","larva","lástima","lata","látex","latir","laurel","lavar","lazo","leal","lección","leche","lector","leer","legión","legumbre","lejano","lengua","lento","leña","león","leopardo","lesión","letal","letra","leve","leyenda","libertad","libro","licor","líder","lidiar","lienzo","liga","ligero","lima","límite","limón","limpio","lince","lindo","línea","lingote","lino","linterna","líquido","liso","lista","litera","litio","litro","llaga","llama","llanto","llave","llegar","llenar","llevar","llorar","llover","lluvia","lobo","loción","loco","locura","lógica","logro","lombriz","lomo","lonja","lote","lucha","lucir","lugar","lujo","luna","lunes","lupa","lustro","luto","luz","maceta","macho","madera","madre","maduro","maestro","mafia","magia","mago","maíz","maldad","maleta","malla","malo","mamá","mambo","mamut","manco","mando","manejar","manga","maniquí","manjar","mano","manso","manta","mañana","mapa","máquina","mar","marco","marea","marfil","margen","marido","mármol","marrón","martes","marzo","masa","máscara","masivo","matar","materia","matiz","matriz","máximo","mayor","mazorca","mecha","medalla","medio","médula","mejilla","mejor","melena","melón","memoria","menor","mensaje","mente","menú","mercado","merengue","mérito","mes","mesón","meta","meter","método","metro","mezcla","miedo","miel","miembro","miga","mil","milagro","militar","millón","mimo","mina","minero","mínimo","minuto","miope","mirar","misa","miseria","misil","mismo","mitad","mito","mochila","moción","moda","modelo","moho","mojar","molde","moler","molino","momento","momia","monarca","moneda","monja","monto","moño","morada","morder","moreno","morir","morro","morsa","mortal","mosca","mostrar","motivo","mover","móvil","mozo","mucho","mudar","mueble","muela","muerte","muestra","mugre","mujer","mula","muleta","multa","mundo","muñeca","mural","muro","músculo","museo","musgo","música","muslo","nácar","nación","nadar","naipe","naranja","nariz","narrar","nasal","natal","nativo","natural","náusea","naval","nave","navidad","necio","néctar","negar","negocio","negro","neón","nervio","neto","neutro","nevar","nevera","nicho","nido","niebla","nieto","niñez","niño","nítido","nivel","nobleza","noche","nómina","noria","norma","norte","nota","noticia","novato","novela","novio","nube","nuca","núcleo","nudillo","nudo","nuera","nueve","nuez","nulo","número","nutria","oasis","obeso","obispo","objeto","obra","obrero","observar","obtener","obvio","oca","ocaso","océano","ochenta","ocho","ocio","ocre","octavo","octubre","oculto","ocupar","ocurrir","odiar","odio","odisea","oeste","ofensa","oferta","oficio","ofrecer","ogro","oído","oír","ojo","ola","oleada","olfato","olivo","olla","olmo","olor","olvido","ombligo","onda","onza","opaco","opción","ópera","opinar","oponer","optar","óptica","opuesto","oración","orador","oral","órbita","orca","orden","oreja","órgano","orgía","orgullo","oriente","origen","orilla","oro","orquesta","oruga","osadía","oscuro","osezno","oso","ostra","otoño","otro","oveja","óvulo","óxido","oxígeno","oyente","ozono","pacto","padre","paella","página","pago","país","pájaro","palabra","palco","paleta","pálido","palma","paloma","palpar","pan","panal","pánico","pantera","pañuelo","papá","papel","papilla","paquete","parar","parcela","pared","parir","paro","párpado","parque","párrafo","parte","pasar","paseo","pasión","paso","pasta","pata","patio","patria","pausa","pauta","pavo","payaso","peatón","pecado","pecera","pecho","pedal","pedir","pegar","peine","pelar","peldaño","pelea","peligro","pellejo","pelo","peluca","pena","pensar","peñón","peón","peor","pepino","pequeño","pera","percha","perder","pereza","perfil","perico","perla","permiso","perro","persona","pesa","pesca","pésimo","pestaña","pétalo","petróleo","pez","pezuña","picar","pichón","pie","piedra","pierna","pieza","pijama","pilar","piloto","pimienta","pino","pintor","pinza","piña","piojo","pipa","pirata","pisar","piscina","piso","pista","pitón","pizca","placa","plan","plata","playa","plaza","pleito","pleno","plomo","pluma","plural","pobre","poco","poder","podio","poema","poesía","poeta","polen","policía","pollo","polvo","pomada","pomelo","pomo","pompa","poner","porción","portal","posada","poseer","posible","poste","potencia","potro","pozo","prado","precoz","pregunta","premio","prensa","preso","previo","primo","príncipe","prisión","privar","proa","probar","proceso","producto","proeza","profesor","programa","prole","promesa","pronto","propio","próximo","prueba","público","puchero","pudor","pueblo","puerta","puesto","pulga","pulir","pulmón","pulpo","pulso","puma","punto","puñal","puño","pupa","pupila","puré","quedar","queja","quemar","querer","queso","quieto","química","quince","quitar","rábano","rabia","rabo","ración","radical","raíz","rama","rampa","rancho","rango","rapaz","rápido","rapto","rasgo","raspa","rato","rayo","raza","razón","reacción","realidad","rebaño","rebote","recaer","receta","rechazo","recoger","recreo","recto","recurso","red","redondo","reducir","reflejo","reforma","refrán","refugio","regalo","regir","regla","regreso","rehén","reino","reír","reja","relato","relevo","relieve","relleno","reloj","remar","remedio","remo","rencor","rendir","renta","reparto","repetir","reposo","reptil","res","rescate","resina","respeto","resto","resumen","retiro","retorno","retrato","reunir","revés","revista","rey","rezar","rico","riego","rienda","riesgo","rifa","rígido","rigor","rincón","riñón","río","riqueza","risa","ritmo","rito","rizo","roble","roce","rociar","rodar","rodeo","rodilla","roer","rojizo","rojo","romero","romper","ron","ronco","ronda","ropa","ropero","rosa","rosca","rostro","rotar","rubí","rubor","rudo","rueda","rugir","ruido","ruina","ruleta","rulo","rumbo","rumor","ruptura","ruta","rutina","sábado","saber","sabio","sable","sacar","sagaz","sagrado","sala","saldo","salero","salir","salmón","salón","salsa","salto","salud","salvar","samba","sanción","sandía","sanear","sangre","sanidad","sano","santo","sapo","saque","sardina","sartén","sastre","satán","sauna","saxofón","sección","seco","secreto","secta","sed","seguir","seis","sello","selva","semana","semilla","senda","sensor","señal","señor","separar","sepia","sequía","ser","serie","sermón","servir","sesenta","sesión","seta","setenta","severo","sexo","sexto","sidra","siesta","siete","siglo","signo","sílaba","silbar","silencio","silla","símbolo","simio","sirena","sistema","sitio","situar","sobre","socio","sodio","sol","solapa","soldado","soledad","sólido","soltar","solución","sombra","sondeo","sonido","sonoro","sonrisa","sopa","soplar","soporte","sordo","sorpresa","sorteo","sostén","sótano","suave","subir","suceso","sudor","suegra","suelo","sueño","suerte","sufrir","sujeto","sultán","sumar","superar","suplir","suponer","supremo","sur","surco","sureño","surgir","susto","sutil","tabaco","tabique","tabla","tabú","taco","tacto","tajo","talar","talco","talento","talla","talón","tamaño","tambor","tango","tanque","tapa","tapete","tapia","tapón","taquilla","tarde","tarea","tarifa","tarjeta","tarot","tarro","tarta","tatuaje","tauro","taza","tazón","teatro","techo","tecla","técnica","tejado","tejer","tejido","tela","teléfono","tema","temor","templo","tenaz","tender","tener","tenis","tenso","teoría","terapia","terco","término","ternura","terror","tesis","tesoro","testigo","tetera","texto","tez","tibio","tiburón","tiempo","tienda","tierra","tieso","tigre","tijera","tilde","timbre","tímido","timo","tinta","tío","típico","tipo","tira","tirón","titán","títere","título","tiza","toalla","tobillo","tocar","tocino","todo","toga","toldo","tomar","tono","tonto","topar","tope","toque","tórax","torero","tormenta","torneo","toro","torpedo","torre","torso","tortuga","tos","tosco","toser","tóxico","trabajo","tractor","traer","tráfico","trago","traje","tramo","trance","trato","trauma","trazar","trébol","tregua","treinta","tren","trepar","tres","tribu","trigo","tripa","triste","triunfo","trofeo","trompa","tronco","tropa","trote","trozo","truco","trueno","trufa","tubería","tubo","tuerto","tumba","tumor","túnel","túnica","turbina","turismo","turno","tutor","ubicar","úlcera","umbral","unidad","unir","universo","uno","untar","uña","urbano","urbe","urgente","urna","usar","usuario","útil","utopía","uva","vaca","vacío","vacuna","vagar","vago","vaina","vajilla","vale","válido","valle","valor","válvula","vampiro","vara","variar","varón","vaso","vecino","vector","vehículo","veinte","vejez","vela","velero","veloz","vena","vencer","venda","veneno","vengar","venir","venta","venus","ver","verano","verbo","verde","vereda","verja","verso","verter","vía","viaje","vibrar","vicio","víctima","vida","vídeo","vidrio","viejo","viernes","vigor","vil","villa","vinagre","vino","viñedo","violín","viral","virgo","virtud","visor","víspera","vista","vitamina","viudo","vivaz","vivero","vivir","vivo","volcán","volumen","volver","voraz","votar","voto","voz","vuelo","vulgar","yacer","yate","yegua","yema","yerno","yeso","yodo","yoga","yogur","zafiro","zanja","zapato","zarza","zona","zorro","zumo","zurdo"]');

},{}],"2avXR":[function(require,module,exports) {
module.exports = JSON.parse('["あいこくしん","あいさつ","あいだ","あおぞら","あかちゃん","あきる","あけがた","あける","あこがれる","あさい","あさひ","あしあと","あじわう","あずかる","あずき","あそぶ","あたえる","あたためる","あたりまえ","あたる","あつい","あつかう","あっしゅく","あつまり","あつめる","あてな","あてはまる","あひる","あぶら","あぶる","あふれる","あまい","あまど","あまやかす","あまり","あみもの","あめりか","あやまる","あゆむ","あらいぐま","あらし","あらすじ","あらためる","あらゆる","あらわす","ありがとう","あわせる","あわてる","あんい","あんがい","あんこ","あんぜん","あんてい","あんない","あんまり","いいだす","いおん","いがい","いがく","いきおい","いきなり","いきもの","いきる","いくじ","いくぶん","いけばな","いけん","いこう","いこく","いこつ","いさましい","いさん","いしき","いじゅう","いじょう","いじわる","いずみ","いずれ","いせい","いせえび","いせかい","いせき","いぜん","いそうろう","いそがしい","いだい","いだく","いたずら","いたみ","いたりあ","いちおう","いちじ","いちど","いちば","いちぶ","いちりゅう","いつか","いっしゅん","いっせい","いっそう","いったん","いっち","いってい","いっぽう","いてざ","いてん","いどう","いとこ","いない","いなか","いねむり","いのち","いのる","いはつ","いばる","いはん","いびき","いひん","いふく","いへん","いほう","いみん","いもうと","いもたれ","いもり","いやがる","いやす","いよかん","いよく","いらい","いらすと","いりぐち","いりょう","いれい","いれもの","いれる","いろえんぴつ","いわい","いわう","いわかん","いわば","いわゆる","いんげんまめ","いんさつ","いんしょう","いんよう","うえき","うえる","うおざ","うがい","うかぶ","うかべる","うきわ","うくらいな","うくれれ","うけたまわる","うけつけ","うけとる","うけもつ","うける","うごかす","うごく","うこん","うさぎ","うしなう","うしろがみ","うすい","うすぎ","うすぐらい","うすめる","うせつ","うちあわせ","うちがわ","うちき","うちゅう","うっかり","うつくしい","うったえる","うつる","うどん","うなぎ","うなじ","うなずく","うなる","うねる","うのう","うぶげ","うぶごえ","うまれる","うめる","うもう","うやまう","うよく","うらがえす","うらぐち","うらない","うりあげ","うりきれ","うるさい","うれしい","うれゆき","うれる","うろこ","うわき","うわさ","うんこう","うんちん","うんてん","うんどう","えいえん","えいが","えいきょう","えいご","えいせい","えいぶん","えいよう","えいわ","えおり","えがお","えがく","えきたい","えくせる","えしゃく","えすて","えつらん","えのぐ","えほうまき","えほん","えまき","えもじ","えもの","えらい","えらぶ","えりあ","えんえん","えんかい","えんぎ","えんげき","えんしゅう","えんぜつ","えんそく","えんちょう","えんとつ","おいかける","おいこす","おいしい","おいつく","おうえん","おうさま","おうじ","おうせつ","おうたい","おうふく","おうべい","おうよう","おえる","おおい","おおう","おおどおり","おおや","おおよそ","おかえり","おかず","おがむ","おかわり","おぎなう","おきる","おくさま","おくじょう","おくりがな","おくる","おくれる","おこす","おこなう","おこる","おさえる","おさない","おさめる","おしいれ","おしえる","おじぎ","おじさん","おしゃれ","おそらく","おそわる","おたがい","おたく","おだやか","おちつく","おっと","おつり","おでかけ","おとしもの","おとなしい","おどり","おどろかす","おばさん","おまいり","おめでとう","おもいで","おもう","おもたい","おもちゃ","おやつ","おやゆび","およぼす","おらんだ","おろす","おんがく","おんけい","おんしゃ","おんせん","おんだん","おんちゅう","おんどけい","かあつ","かいが","がいき","がいけん","がいこう","かいさつ","かいしゃ","かいすいよく","かいぜん","かいぞうど","かいつう","かいてん","かいとう","かいふく","がいへき","かいほう","かいよう","がいらい","かいわ","かえる","かおり","かかえる","かがく","かがし","かがみ","かくご","かくとく","かざる","がぞう","かたい","かたち","がちょう","がっきゅう","がっこう","がっさん","がっしょう","かなざわし","かのう","がはく","かぶか","かほう","かほご","かまう","かまぼこ","かめれおん","かゆい","かようび","からい","かるい","かろう","かわく","かわら","がんか","かんけい","かんこう","かんしゃ","かんそう","かんたん","かんち","がんばる","きあい","きあつ","きいろ","ぎいん","きうい","きうん","きえる","きおう","きおく","きおち","きおん","きかい","きかく","きかんしゃ","ききて","きくばり","きくらげ","きけんせい","きこう","きこえる","きこく","きさい","きさく","きさま","きさらぎ","ぎじかがく","ぎしき","ぎじたいけん","ぎじにってい","ぎじゅつしゃ","きすう","きせい","きせき","きせつ","きそう","きぞく","きぞん","きたえる","きちょう","きつえん","ぎっちり","きつつき","きつね","きてい","きどう","きどく","きない","きなが","きなこ","きぬごし","きねん","きのう","きのした","きはく","きびしい","きひん","きふく","きぶん","きぼう","きほん","きまる","きみつ","きむずかしい","きめる","きもだめし","きもち","きもの","きゃく","きやく","ぎゅうにく","きよう","きょうりゅう","きらい","きらく","きりん","きれい","きれつ","きろく","ぎろん","きわめる","ぎんいろ","きんかくじ","きんじょ","きんようび","ぐあい","くいず","くうかん","くうき","くうぐん","くうこう","ぐうせい","くうそう","ぐうたら","くうふく","くうぼ","くかん","くきょう","くげん","ぐこう","くさい","くさき","くさばな","くさる","くしゃみ","くしょう","くすのき","くすりゆび","くせげ","くせん","ぐたいてき","くださる","くたびれる","くちこみ","くちさき","くつした","ぐっすり","くつろぐ","くとうてん","くどく","くなん","くねくね","くのう","くふう","くみあわせ","くみたてる","くめる","くやくしょ","くらす","くらべる","くるま","くれる","くろう","くわしい","ぐんかん","ぐんしょく","ぐんたい","ぐんて","けあな","けいかく","けいけん","けいこ","けいさつ","げいじゅつ","けいたい","げいのうじん","けいれき","けいろ","けおとす","けおりもの","げきか","げきげん","げきだん","げきちん","げきとつ","げきは","げきやく","げこう","げこくじょう","げざい","けさき","げざん","けしき","けしごむ","けしょう","げすと","けたば","けちゃっぷ","けちらす","けつあつ","けつい","けつえき","けっこん","けつじょ","けっせき","けってい","けつまつ","げつようび","げつれい","けつろん","げどく","けとばす","けとる","けなげ","けなす","けなみ","けぬき","げねつ","けねん","けはい","げひん","けぶかい","げぼく","けまり","けみかる","けむし","けむり","けもの","けらい","けろけろ","けわしい","けんい","けんえつ","けんお","けんか","げんき","けんげん","けんこう","けんさく","けんしゅう","けんすう","げんそう","けんちく","けんてい","けんとう","けんない","けんにん","げんぶつ","けんま","けんみん","けんめい","けんらん","けんり","こあくま","こいぬ","こいびと","ごうい","こうえん","こうおん","こうかん","ごうきゅう","ごうけい","こうこう","こうさい","こうじ","こうすい","ごうせい","こうそく","こうたい","こうちゃ","こうつう","こうてい","こうどう","こうない","こうはい","ごうほう","ごうまん","こうもく","こうりつ","こえる","こおり","ごかい","ごがつ","ごかん","こくご","こくさい","こくとう","こくない","こくはく","こぐま","こけい","こける","ここのか","こころ","こさめ","こしつ","こすう","こせい","こせき","こぜん","こそだて","こたい","こたえる","こたつ","こちょう","こっか","こつこつ","こつばん","こつぶ","こてい","こてん","ことがら","ことし","ことば","ことり","こなごな","こねこね","このまま","このみ","このよ","ごはん","こひつじ","こふう","こふん","こぼれる","ごまあぶら","こまかい","ごますり","こまつな","こまる","こむぎこ","こもじ","こもち","こもの","こもん","こやく","こやま","こゆう","こゆび","こよい","こよう","こりる","これくしょん","ころっけ","こわもて","こわれる","こんいん","こんかい","こんき","こんしゅう","こんすい","こんだて","こんとん","こんなん","こんびに","こんぽん","こんまけ","こんや","こんれい","こんわく","ざいえき","さいかい","さいきん","ざいげん","ざいこ","さいしょ","さいせい","ざいたく","ざいちゅう","さいてき","ざいりょう","さうな","さかいし","さがす","さかな","さかみち","さがる","さぎょう","さくし","さくひん","さくら","さこく","さこつ","さずかる","ざせき","さたん","さつえい","ざつおん","ざっか","ざつがく","さっきょく","ざっし","さつじん","ざっそう","さつたば","さつまいも","さてい","さといも","さとう","さとおや","さとし","さとる","さのう","さばく","さびしい","さべつ","さほう","さほど","さます","さみしい","さみだれ","さむけ","さめる","さやえんどう","さゆう","さよう","さよく","さらだ","ざるそば","さわやか","さわる","さんいん","さんか","さんきゃく","さんこう","さんさい","ざんしょ","さんすう","さんせい","さんそ","さんち","さんま","さんみ","さんらん","しあい","しあげ","しあさって","しあわせ","しいく","しいん","しうち","しえい","しおけ","しかい","しかく","じかん","しごと","しすう","じだい","したうけ","したぎ","したて","したみ","しちょう","しちりん","しっかり","しつじ","しつもん","してい","してき","してつ","じてん","じどう","しなぎれ","しなもの","しなん","しねま","しねん","しのぐ","しのぶ","しはい","しばかり","しはつ","しはらい","しはん","しひょう","しふく","じぶん","しへい","しほう","しほん","しまう","しまる","しみん","しむける","じむしょ","しめい","しめる","しもん","しゃいん","しゃうん","しゃおん","じゃがいも","しやくしょ","しゃくほう","しゃけん","しゃこ","しゃざい","しゃしん","しゃせん","しゃそう","しゃたい","しゃちょう","しゃっきん","じゃま","しゃりん","しゃれい","じゆう","じゅうしょ","しゅくはく","じゅしん","しゅっせき","しゅみ","しゅらば","じゅんばん","しょうかい","しょくたく","しょっけん","しょどう","しょもつ","しらせる","しらべる","しんか","しんこう","じんじゃ","しんせいじ","しんちく","しんりん","すあげ","すあし","すあな","ずあん","すいえい","すいか","すいとう","ずいぶん","すいようび","すうがく","すうじつ","すうせん","すおどり","すきま","すくう","すくない","すける","すごい","すこし","ずさん","すずしい","すすむ","すすめる","すっかり","ずっしり","ずっと","すてき","すてる","すねる","すのこ","すはだ","すばらしい","ずひょう","ずぶぬれ","すぶり","すふれ","すべて","すべる","ずほう","すぼん","すまい","すめし","すもう","すやき","すらすら","するめ","すれちがう","すろっと","すわる","すんぜん","すんぽう","せあぶら","せいかつ","せいげん","せいじ","せいよう","せおう","せかいかん","せきにん","せきむ","せきゆ","せきらんうん","せけん","せこう","せすじ","せたい","せたけ","せっかく","せっきゃく","ぜっく","せっけん","せっこつ","せっさたくま","せつぞく","せつだん","せつでん","せっぱん","せつび","せつぶん","せつめい","せつりつ","せなか","せのび","せはば","せびろ","せぼね","せまい","せまる","せめる","せもたれ","せりふ","ぜんあく","せんい","せんえい","せんか","せんきょ","せんく","せんげん","ぜんご","せんさい","せんしゅ","せんすい","せんせい","せんぞ","せんたく","せんちょう","せんてい","せんとう","せんぬき","せんねん","せんぱい","ぜんぶ","ぜんぽう","せんむ","せんめんじょ","せんもん","せんやく","せんゆう","せんよう","ぜんら","ぜんりゃく","せんれい","せんろ","そあく","そいとげる","そいね","そうがんきょう","そうき","そうご","そうしん","そうだん","そうなん","そうび","そうめん","そうり","そえもの","そえん","そがい","そげき","そこう","そこそこ","そざい","そしな","そせい","そせん","そそぐ","そだてる","そつう","そつえん","そっかん","そつぎょう","そっけつ","そっこう","そっせん","そっと","そとがわ","そとづら","そなえる","そなた","そふぼ","そぼく","そぼろ","そまつ","そまる","そむく","そむりえ","そめる","そもそも","そよかぜ","そらまめ","そろう","そんかい","そんけい","そんざい","そんしつ","そんぞく","そんちょう","ぞんび","ぞんぶん","そんみん","たあい","たいいん","たいうん","たいえき","たいおう","だいがく","たいき","たいぐう","たいけん","たいこ","たいざい","だいじょうぶ","だいすき","たいせつ","たいそう","だいたい","たいちょう","たいてい","だいどころ","たいない","たいねつ","たいのう","たいはん","だいひょう","たいふう","たいへん","たいほ","たいまつばな","たいみんぐ","たいむ","たいめん","たいやき","たいよう","たいら","たいりょく","たいる","たいわん","たうえ","たえる","たおす","たおる","たおれる","たかい","たかね","たきび","たくさん","たこく","たこやき","たさい","たしざん","だじゃれ","たすける","たずさわる","たそがれ","たたかう","たたく","ただしい","たたみ","たちばな","だっかい","だっきゃく","だっこ","だっしゅつ","だったい","たてる","たとえる","たなばた","たにん","たぬき","たのしみ","たはつ","たぶん","たべる","たぼう","たまご","たまる","だむる","ためいき","ためす","ためる","たもつ","たやすい","たよる","たらす","たりきほんがん","たりょう","たりる","たると","たれる","たれんと","たろっと","たわむれる","だんあつ","たんい","たんおん","たんか","たんき","たんけん","たんご","たんさん","たんじょうび","だんせい","たんそく","たんたい","だんち","たんてい","たんとう","だんな","たんにん","だんねつ","たんのう","たんぴん","だんぼう","たんまつ","たんめい","だんれつ","だんろ","だんわ","ちあい","ちあん","ちいき","ちいさい","ちえん","ちかい","ちから","ちきゅう","ちきん","ちけいず","ちけん","ちこく","ちさい","ちしき","ちしりょう","ちせい","ちそう","ちたい","ちたん","ちちおや","ちつじょ","ちてき","ちてん","ちぬき","ちぬり","ちのう","ちひょう","ちへいせん","ちほう","ちまた","ちみつ","ちみどろ","ちめいど","ちゃんこなべ","ちゅうい","ちゆりょく","ちょうし","ちょさくけん","ちらし","ちらみ","ちりがみ","ちりょう","ちるど","ちわわ","ちんたい","ちんもく","ついか","ついたち","つうか","つうじょう","つうはん","つうわ","つかう","つかれる","つくね","つくる","つけね","つける","つごう","つたえる","つづく","つつじ","つつむ","つとめる","つながる","つなみ","つねづね","つのる","つぶす","つまらない","つまる","つみき","つめたい","つもり","つもる","つよい","つるぼ","つるみく","つわもの","つわり","てあし","てあて","てあみ","ていおん","ていか","ていき","ていけい","ていこく","ていさつ","ていし","ていせい","ていたい","ていど","ていねい","ていひょう","ていへん","ていぼう","てうち","ておくれ","てきとう","てくび","でこぼこ","てさぎょう","てさげ","てすり","てそう","てちがい","てちょう","てつがく","てつづき","でっぱ","てつぼう","てつや","でぬかえ","てぬき","てぬぐい","てのひら","てはい","てぶくろ","てふだ","てほどき","てほん","てまえ","てまきずし","てみじか","てみやげ","てらす","てれび","てわけ","てわたし","でんあつ","てんいん","てんかい","てんき","てんぐ","てんけん","てんごく","てんさい","てんし","てんすう","でんち","てんてき","てんとう","てんない","てんぷら","てんぼうだい","てんめつ","てんらんかい","でんりょく","でんわ","どあい","といれ","どうかん","とうきゅう","どうぐ","とうし","とうむぎ","とおい","とおか","とおく","とおす","とおる","とかい","とかす","ときおり","ときどき","とくい","とくしゅう","とくてん","とくに","とくべつ","とけい","とける","とこや","とさか","としょかん","とそう","とたん","とちゅう","とっきゅう","とっくん","とつぜん","とつにゅう","とどける","ととのえる","とない","となえる","となり","とのさま","とばす","どぶがわ","とほう","とまる","とめる","ともだち","ともる","どようび","とらえる","とんかつ","どんぶり","ないかく","ないこう","ないしょ","ないす","ないせん","ないそう","なおす","ながい","なくす","なげる","なこうど","なさけ","なたでここ","なっとう","なつやすみ","ななおし","なにごと","なにもの","なにわ","なのか","なふだ","なまいき","なまえ","なまみ","なみだ","なめらか","なめる","なやむ","ならう","ならび","ならぶ","なれる","なわとび","なわばり","にあう","にいがた","にうけ","におい","にかい","にがて","にきび","にくしみ","にくまん","にげる","にさんかたんそ","にしき","にせもの","にちじょう","にちようび","にっか","にっき","にっけい","にっこう","にっさん","にっしょく","にっすう","にっせき","にってい","になう","にほん","にまめ","にもつ","にやり","にゅういん","にりんしゃ","にわとり","にんい","にんか","にんき","にんげん","にんしき","にんずう","にんそう","にんたい","にんち","にんてい","にんにく","にんぷ","にんまり","にんむ","にんめい","にんよう","ぬいくぎ","ぬかす","ぬぐいとる","ぬぐう","ぬくもり","ぬすむ","ぬまえび","ぬめり","ぬらす","ぬんちゃく","ねあげ","ねいき","ねいる","ねいろ","ねぐせ","ねくたい","ねくら","ねこぜ","ねこむ","ねさげ","ねすごす","ねそべる","ねだん","ねつい","ねっしん","ねつぞう","ねったいぎょ","ねぶそく","ねふだ","ねぼう","ねほりはほり","ねまき","ねまわし","ねみみ","ねむい","ねむたい","ねもと","ねらう","ねわざ","ねんいり","ねんおし","ねんかん","ねんきん","ねんぐ","ねんざ","ねんし","ねんちゃく","ねんど","ねんぴ","ねんぶつ","ねんまつ","ねんりょう","ねんれい","のいず","のおづま","のがす","のきなみ","のこぎり","のこす","のこる","のせる","のぞく","のぞむ","のたまう","のちほど","のっく","のばす","のはら","のべる","のぼる","のみもの","のやま","のらいぬ","のらねこ","のりもの","のりゆき","のれん","のんき","ばあい","はあく","ばあさん","ばいか","ばいく","はいけん","はいご","はいしん","はいすい","はいせん","はいそう","はいち","ばいばい","はいれつ","はえる","はおる","はかい","ばかり","はかる","はくしゅ","はけん","はこぶ","はさみ","はさん","はしご","ばしょ","はしる","はせる","ぱそこん","はそん","はたん","はちみつ","はつおん","はっかく","はづき","はっきり","はっくつ","はっけん","はっこう","はっさん","はっしん","はったつ","はっちゅう","はってん","はっぴょう","はっぽう","はなす","はなび","はにかむ","はぶらし","はみがき","はむかう","はめつ","はやい","はやし","はらう","はろうぃん","はわい","はんい","はんえい","はんおん","はんかく","はんきょう","ばんぐみ","はんこ","はんしゃ","はんすう","はんだん","ぱんち","ぱんつ","はんてい","はんとし","はんのう","はんぱ","はんぶん","はんぺん","はんぼうき","はんめい","はんらん","はんろん","ひいき","ひうん","ひえる","ひかく","ひかり","ひかる","ひかん","ひくい","ひけつ","ひこうき","ひこく","ひさい","ひさしぶり","ひさん","びじゅつかん","ひしょ","ひそか","ひそむ","ひたむき","ひだり","ひたる","ひつぎ","ひっこし","ひっし","ひつじゅひん","ひっす","ひつぜん","ぴったり","ぴっちり","ひつよう","ひてい","ひとごみ","ひなまつり","ひなん","ひねる","ひはん","ひびく","ひひょう","ひほう","ひまわり","ひまん","ひみつ","ひめい","ひめじし","ひやけ","ひやす","ひよう","びょうき","ひらがな","ひらく","ひりつ","ひりょう","ひるま","ひるやすみ","ひれい","ひろい","ひろう","ひろき","ひろゆき","ひんかく","ひんけつ","ひんこん","ひんしゅ","ひんそう","ぴんち","ひんぱん","びんぼう","ふあん","ふいうち","ふうけい","ふうせん","ぷうたろう","ふうとう","ふうふ","ふえる","ふおん","ふかい","ふきん","ふくざつ","ふくぶくろ","ふこう","ふさい","ふしぎ","ふじみ","ふすま","ふせい","ふせぐ","ふそく","ぶたにく","ふたん","ふちょう","ふつう","ふつか","ふっかつ","ふっき","ふっこく","ぶどう","ふとる","ふとん","ふのう","ふはい","ふひょう","ふへん","ふまん","ふみん","ふめつ","ふめん","ふよう","ふりこ","ふりる","ふるい","ふんいき","ぶんがく","ぶんぐ","ふんしつ","ぶんせき","ふんそう","ぶんぽう","へいあん","へいおん","へいがい","へいき","へいげん","へいこう","へいさ","へいしゃ","へいせつ","へいそ","へいたく","へいてん","へいねつ","へいわ","へきが","へこむ","べにいろ","べにしょうが","へらす","へんかん","べんきょう","べんごし","へんさい","へんたい","べんり","ほあん","ほいく","ぼうぎょ","ほうこく","ほうそう","ほうほう","ほうもん","ほうりつ","ほえる","ほおん","ほかん","ほきょう","ぼきん","ほくろ","ほけつ","ほけん","ほこう","ほこる","ほしい","ほしつ","ほしゅ","ほしょう","ほせい","ほそい","ほそく","ほたて","ほたる","ぽちぶくろ","ほっきょく","ほっさ","ほったん","ほとんど","ほめる","ほんい","ほんき","ほんけ","ほんしつ","ほんやく","まいにち","まかい","まかせる","まがる","まける","まこと","まさつ","まじめ","ますく","まぜる","まつり","まとめ","まなぶ","まぬけ","まねく","まほう","まもる","まゆげ","まよう","まろやか","まわす","まわり","まわる","まんが","まんきつ","まんぞく","まんなか","みいら","みうち","みえる","みがく","みかた","みかん","みけん","みこん","みじかい","みすい","みすえる","みせる","みっか","みつかる","みつける","みてい","みとめる","みなと","みなみかさい","みねらる","みのう","みのがす","みほん","みもと","みやげ","みらい","みりょく","みわく","みんか","みんぞく","むいか","むえき","むえん","むかい","むかう","むかえ","むかし","むぎちゃ","むける","むげん","むさぼる","むしあつい","むしば","むじゅん","むしろ","むすう","むすこ","むすぶ","むすめ","むせる","むせん","むちゅう","むなしい","むのう","むやみ","むよう","むらさき","むりょう","むろん","めいあん","めいうん","めいえん","めいかく","めいきょく","めいさい","めいし","めいそう","めいぶつ","めいれい","めいわく","めぐまれる","めざす","めした","めずらしい","めだつ","めまい","めやす","めんきょ","めんせき","めんどう","もうしあげる","もうどうけん","もえる","もくし","もくてき","もくようび","もちろん","もどる","もらう","もんく","もんだい","やおや","やける","やさい","やさしい","やすい","やすたろう","やすみ","やせる","やそう","やたい","やちん","やっと","やっぱり","やぶる","やめる","ややこしい","やよい","やわらかい","ゆうき","ゆうびんきょく","ゆうべ","ゆうめい","ゆけつ","ゆしゅつ","ゆせん","ゆそう","ゆたか","ゆちゃく","ゆでる","ゆにゅう","ゆびわ","ゆらい","ゆれる","ようい","ようか","ようきゅう","ようじ","ようす","ようちえん","よかぜ","よかん","よきん","よくせい","よくぼう","よけい","よごれる","よさん","よしゅう","よそう","よそく","よっか","よてい","よどがわく","よねつ","よやく","よゆう","よろこぶ","よろしい","らいう","らくがき","らくご","らくさつ","らくだ","らしんばん","らせん","らぞく","らたい","らっか","られつ","りえき","りかい","りきさく","りきせつ","りくぐん","りくつ","りけん","りこう","りせい","りそう","りそく","りてん","りねん","りゆう","りゅうがく","りよう","りょうり","りょかん","りょくちゃ","りょこう","りりく","りれき","りろん","りんご","るいけい","るいさい","るいじ","るいせき","るすばん","るりがわら","れいかん","れいぎ","れいせい","れいぞうこ","れいとう","れいぼう","れきし","れきだい","れんあい","れんけい","れんこん","れんさい","れんしゅう","れんぞく","れんらく","ろうか","ろうご","ろうじん","ろうそく","ろくが","ろこつ","ろじうら","ろしゅつ","ろせん","ろてん","ろめん","ろれつ","ろんぎ","ろんぱ","ろんぶん","ろんり","わかす","わかめ","わかやま","わかれる","わしつ","わじまし","わすれもの","わらう","われる"]');

},{}],"b5sLs":[function(require,module,exports) {
module.exports = JSON.parse('["abacate","abaixo","abalar","abater","abduzir","abelha","aberto","abismo","abotoar","abranger","abreviar","abrigar","abrupto","absinto","absoluto","absurdo","abutre","acabado","acalmar","acampar","acanhar","acaso","aceitar","acelerar","acenar","acervo","acessar","acetona","achatar","acidez","acima","acionado","acirrar","aclamar","aclive","acolhida","acomodar","acoplar","acordar","acumular","acusador","adaptar","adega","adentro","adepto","adequar","aderente","adesivo","adeus","adiante","aditivo","adjetivo","adjunto","admirar","adorar","adquirir","adubo","adverso","advogado","aeronave","afastar","aferir","afetivo","afinador","afivelar","aflito","afluente","afrontar","agachar","agarrar","agasalho","agenciar","agilizar","agiota","agitado","agora","agradar","agreste","agrupar","aguardar","agulha","ajoelhar","ajudar","ajustar","alameda","alarme","alastrar","alavanca","albergue","albino","alcatra","aldeia","alecrim","alegria","alertar","alface","alfinete","algum","alheio","aliar","alicate","alienar","alinhar","aliviar","almofada","alocar","alpiste","alterar","altitude","alucinar","alugar","aluno","alusivo","alvo","amaciar","amador","amarelo","amassar","ambas","ambiente","ameixa","amenizar","amido","amistoso","amizade","amolador","amontoar","amoroso","amostra","amparar","ampliar","ampola","anagrama","analisar","anarquia","anatomia","andaime","anel","anexo","angular","animar","anjo","anomalia","anotado","ansioso","anterior","anuidade","anunciar","anzol","apagador","apalpar","apanhado","apego","apelido","apertada","apesar","apetite","apito","aplauso","aplicada","apoio","apontar","aposta","aprendiz","aprovar","aquecer","arame","aranha","arara","arcada","ardente","areia","arejar","arenito","aresta","argiloso","argola","arma","arquivo","arraial","arrebate","arriscar","arroba","arrumar","arsenal","arterial","artigo","arvoredo","asfaltar","asilado","aspirar","assador","assinar","assoalho","assunto","astral","atacado","atadura","atalho","atarefar","atear","atender","aterro","ateu","atingir","atirador","ativo","atoleiro","atracar","atrevido","atriz","atual","atum","auditor","aumentar","aura","aurora","autismo","autoria","autuar","avaliar","avante","avaria","avental","avesso","aviador","avisar","avulso","axila","azarar","azedo","azeite","azulejo","babar","babosa","bacalhau","bacharel","bacia","bagagem","baiano","bailar","baioneta","bairro","baixista","bajular","baleia","baliza","balsa","banal","bandeira","banho","banir","banquete","barato","barbado","baronesa","barraca","barulho","baseado","bastante","batata","batedor","batida","batom","batucar","baunilha","beber","beijo","beirada","beisebol","beldade","beleza","belga","beliscar","bendito","bengala","benzer","berimbau","berlinda","berro","besouro","bexiga","bezerro","bico","bicudo","bienal","bifocal","bifurcar","bigorna","bilhete","bimestre","bimotor","biologia","biombo","biosfera","bipolar","birrento","biscoito","bisneto","bispo","bissexto","bitola","bizarro","blindado","bloco","bloquear","boato","bobagem","bocado","bocejo","bochecha","boicotar","bolada","boletim","bolha","bolo","bombeiro","bonde","boneco","bonita","borbulha","borda","boreal","borracha","bovino","boxeador","branco","brasa","braveza","breu","briga","brilho","brincar","broa","brochura","bronzear","broto","bruxo","bucha","budismo","bufar","bule","buraco","busca","busto","buzina","cabana","cabelo","cabide","cabo","cabrito","cacau","cacetada","cachorro","cacique","cadastro","cadeado","cafezal","caiaque","caipira","caixote","cajado","caju","calafrio","calcular","caldeira","calibrar","calmante","calota","camada","cambista","camisa","camomila","campanha","camuflar","canavial","cancelar","caneta","canguru","canhoto","canivete","canoa","cansado","cantar","canudo","capacho","capela","capinar","capotar","capricho","captador","capuz","caracol","carbono","cardeal","careca","carimbar","carneiro","carpete","carreira","cartaz","carvalho","casaco","casca","casebre","castelo","casulo","catarata","cativar","caule","causador","cautelar","cavalo","caverna","cebola","cedilha","cegonha","celebrar","celular","cenoura","censo","centeio","cercar","cerrado","certeiro","cerveja","cetim","cevada","chacota","chaleira","chamado","chapada","charme","chatice","chave","chefe","chegada","cheiro","cheque","chicote","chifre","chinelo","chocalho","chover","chumbo","chutar","chuva","cicatriz","ciclone","cidade","cidreira","ciente","cigana","cimento","cinto","cinza","ciranda","circuito","cirurgia","citar","clareza","clero","clicar","clone","clube","coado","coagir","cobaia","cobertor","cobrar","cocada","coelho","coentro","coeso","cogumelo","coibir","coifa","coiote","colar","coleira","colher","colidir","colmeia","colono","coluna","comando","combinar","comentar","comitiva","comover","complexo","comum","concha","condor","conectar","confuso","congelar","conhecer","conjugar","consumir","contrato","convite","cooperar","copeiro","copiador","copo","coquetel","coragem","cordial","corneta","coronha","corporal","correio","cortejo","coruja","corvo","cosseno","costela","cotonete","couro","couve","covil","cozinha","cratera","cravo","creche","credor","creme","crer","crespo","criada","criminal","crioulo","crise","criticar","crosta","crua","cruzeiro","cubano","cueca","cuidado","cujo","culatra","culminar","culpar","cultura","cumprir","cunhado","cupido","curativo","curral","cursar","curto","cuspir","custear","cutelo","damasco","datar","debater","debitar","deboche","debulhar","decalque","decimal","declive","decote","decretar","dedal","dedicado","deduzir","defesa","defumar","degelo","degrau","degustar","deitado","deixar","delator","delegado","delinear","delonga","demanda","demitir","demolido","dentista","depenado","depilar","depois","depressa","depurar","deriva","derramar","desafio","desbotar","descanso","desenho","desfiado","desgaste","desigual","deslize","desmamar","desova","despesa","destaque","desviar","detalhar","detentor","detonar","detrito","deusa","dever","devido","devotado","dezena","diagrama","dialeto","didata","difuso","digitar","dilatado","diluente","diminuir","dinastia","dinheiro","diocese","direto","discreta","disfarce","disparo","disquete","dissipar","distante","ditador","diurno","diverso","divisor","divulgar","dizer","dobrador","dolorido","domador","dominado","donativo","donzela","dormente","dorsal","dosagem","dourado","doutor","drenagem","drible","drogaria","duelar","duende","dueto","duplo","duquesa","durante","duvidoso","eclodir","ecoar","ecologia","edificar","edital","educado","efeito","efetivar","ejetar","elaborar","eleger","eleitor","elenco","elevador","eliminar","elogiar","embargo","embolado","embrulho","embutido","emenda","emergir","emissor","empatia","empenho","empinado","empolgar","emprego","empurrar","emulador","encaixe","encenado","enchente","encontro","endeusar","endossar","enfaixar","enfeite","enfim","engajado","engenho","englobar","engomado","engraxar","enguia","enjoar","enlatar","enquanto","enraizar","enrolado","enrugar","ensaio","enseada","ensino","ensopado","entanto","enteado","entidade","entortar","entrada","entulho","envergar","enviado","envolver","enxame","enxerto","enxofre","enxuto","epiderme","equipar","ereto","erguido","errata","erva","ervilha","esbanjar","esbelto","escama","escola","escrita","escuta","esfinge","esfolar","esfregar","esfumado","esgrima","esmalte","espanto","espelho","espiga","esponja","espreita","espumar","esquerda","estaca","esteira","esticar","estofado","estrela","estudo","esvaziar","etanol","etiqueta","euforia","europeu","evacuar","evaporar","evasivo","eventual","evidente","evoluir","exagero","exalar","examinar","exato","exausto","excesso","excitar","exclamar","executar","exemplo","exibir","exigente","exonerar","expandir","expelir","expirar","explanar","exposto","expresso","expulsar","externo","extinto","extrato","fabricar","fabuloso","faceta","facial","fada","fadiga","faixa","falar","falta","familiar","fandango","fanfarra","fantoche","fardado","farelo","farinha","farofa","farpa","fartura","fatia","fator","favorita","faxina","fazenda","fechado","feijoada","feirante","felino","feminino","fenda","feno","fera","feriado","ferrugem","ferver","festejar","fetal","feudal","fiapo","fibrose","ficar","ficheiro","figurado","fileira","filho","filme","filtrar","firmeza","fisgada","fissura","fita","fivela","fixador","fixo","flacidez","flamingo","flanela","flechada","flora","flutuar","fluxo","focal","focinho","fofocar","fogo","foguete","foice","folgado","folheto","forjar","formiga","forno","forte","fosco","fossa","fragata","fralda","frango","frasco","fraterno","freira","frente","fretar","frieza","friso","fritura","fronha","frustrar","fruteira","fugir","fulano","fuligem","fundar","fungo","funil","furador","furioso","futebol","gabarito","gabinete","gado","gaiato","gaiola","gaivota","galega","galho","galinha","galocha","ganhar","garagem","garfo","gargalo","garimpo","garoupa","garrafa","gasoduto","gasto","gata","gatilho","gaveta","gazela","gelado","geleia","gelo","gemada","gemer","gemido","generoso","gengiva","genial","genoma","genro","geologia","gerador","germinar","gesso","gestor","ginasta","gincana","gingado","girafa","girino","glacial","glicose","global","glorioso","goela","goiaba","golfe","golpear","gordura","gorjeta","gorro","gostoso","goteira","governar","gracejo","gradual","grafite","gralha","grampo","granada","gratuito","graveto","graxa","grego","grelhar","greve","grilo","grisalho","gritaria","grosso","grotesco","grudado","grunhido","gruta","guache","guarani","guaxinim","guerrear","guiar","guincho","guisado","gula","guloso","guru","habitar","harmonia","haste","haver","hectare","herdar","heresia","hesitar","hiato","hibernar","hidratar","hiena","hino","hipismo","hipnose","hipoteca","hoje","holofote","homem","honesto","honrado","hormonal","hospedar","humorado","iate","ideia","idoso","ignorado","igreja","iguana","ileso","ilha","iludido","iluminar","ilustrar","imagem","imediato","imenso","imersivo","iminente","imitador","imortal","impacto","impedir","implante","impor","imprensa","impune","imunizar","inalador","inapto","inativo","incenso","inchar","incidir","incluir","incolor","indeciso","indireto","indutor","ineficaz","inerente","infantil","infestar","infinito","inflamar","informal","infrator","ingerir","inibido","inicial","inimigo","injetar","inocente","inodoro","inovador","inox","inquieto","inscrito","inseto","insistir","inspetor","instalar","insulto","intacto","integral","intimar","intocado","intriga","invasor","inverno","invicto","invocar","iogurte","iraniano","ironizar","irreal","irritado","isca","isento","isolado","isqueiro","italiano","janeiro","jangada","janta","jararaca","jardim","jarro","jasmim","jato","javali","jazida","jejum","joaninha","joelhada","jogador","joia","jornal","jorrar","jovem","juba","judeu","judoca","juiz","julgador","julho","jurado","jurista","juro","justa","labareda","laboral","lacre","lactante","ladrilho","lagarta","lagoa","laje","lamber","lamentar","laminar","lampejo","lanche","lapidar","lapso","laranja","lareira","largura","lasanha","lastro","lateral","latido","lavanda","lavoura","lavrador","laxante","lazer","lealdade","lebre","legado","legendar","legista","leigo","leiloar","leitura","lembrete","leme","lenhador","lentilha","leoa","lesma","leste","letivo","letreiro","levar","leveza","levitar","liberal","libido","liderar","ligar","ligeiro","limitar","limoeiro","limpador","linda","linear","linhagem","liquidez","listagem","lisura","litoral","livro","lixa","lixeira","locador","locutor","lojista","lombo","lona","longe","lontra","lorde","lotado","loteria","loucura","lousa","louvar","luar","lucidez","lucro","luneta","lustre","lutador","luva","macaco","macete","machado","macio","madeira","madrinha","magnata","magreza","maior","mais","malandro","malha","malote","maluco","mamilo","mamoeiro","mamute","manada","mancha","mandato","manequim","manhoso","manivela","manobrar","mansa","manter","manusear","mapeado","maquinar","marcador","maresia","marfim","margem","marinho","marmita","maroto","marquise","marreco","martelo","marujo","mascote","masmorra","massagem","mastigar","matagal","materno","matinal","matutar","maxilar","medalha","medida","medusa","megafone","meiga","melancia","melhor","membro","memorial","menino","menos","mensagem","mental","merecer","mergulho","mesada","mesclar","mesmo","mesquita","mestre","metade","meteoro","metragem","mexer","mexicano","micro","migalha","migrar","milagre","milenar","milhar","mimado","minerar","minhoca","ministro","minoria","miolo","mirante","mirtilo","misturar","mocidade","moderno","modular","moeda","moer","moinho","moita","moldura","moleza","molho","molinete","molusco","montanha","moqueca","morango","morcego","mordomo","morena","mosaico","mosquete","mostarda","motel","motim","moto","motriz","muda","muito","mulata","mulher","multar","mundial","munido","muralha","murcho","muscular","museu","musical","nacional","nadador","naja","namoro","narina","narrado","nascer","nativa","natureza","navalha","navegar","navio","neblina","nebuloso","negativa","negociar","negrito","nervoso","neta","neural","nevasca","nevoeiro","ninar","ninho","nitidez","nivelar","nobreza","noite","noiva","nomear","nominal","nordeste","nortear","notar","noticiar","noturno","novelo","novilho","novo","nublado","nudez","numeral","nupcial","nutrir","nuvem","obcecado","obedecer","objetivo","obrigado","obscuro","obstetra","obter","obturar","ocidente","ocioso","ocorrer","oculista","ocupado","ofegante","ofensiva","oferenda","oficina","ofuscado","ogiva","olaria","oleoso","olhar","oliveira","ombro","omelete","omisso","omitir","ondulado","oneroso","ontem","opcional","operador","oponente","oportuno","oposto","orar","orbitar","ordem","ordinal","orfanato","orgasmo","orgulho","oriental","origem","oriundo","orla","ortodoxo","orvalho","oscilar","ossada","osso","ostentar","otimismo","ousadia","outono","outubro","ouvido","ovelha","ovular","oxidar","oxigenar","pacato","paciente","pacote","pactuar","padaria","padrinho","pagar","pagode","painel","pairar","paisagem","palavra","palestra","palheta","palito","palmada","palpitar","pancada","panela","panfleto","panqueca","pantanal","papagaio","papelada","papiro","parafina","parcial","pardal","parede","partida","pasmo","passado","pastel","patamar","patente","patinar","patrono","paulada","pausar","peculiar","pedalar","pedestre","pediatra","pedra","pegada","peitoral","peixe","pele","pelicano","penca","pendurar","peneira","penhasco","pensador","pente","perceber","perfeito","pergunta","perito","permitir","perna","perplexo","persiana","pertence","peruca","pescado","pesquisa","pessoa","petiscar","piada","picado","piedade","pigmento","pilastra","pilhado","pilotar","pimenta","pincel","pinguim","pinha","pinote","pintar","pioneiro","pipoca","piquete","piranha","pires","pirueta","piscar","pistola","pitanga","pivete","planta","plaqueta","platina","plebeu","plumagem","pluvial","pneu","poda","poeira","poetisa","polegada","policiar","poluente","polvilho","pomar","pomba","ponderar","pontaria","populoso","porta","possuir","postal","pote","poupar","pouso","povoar","praia","prancha","prato","praxe","prece","predador","prefeito","premiar","prensar","preparar","presilha","pretexto","prevenir","prezar","primata","princesa","prisma","privado","processo","produto","profeta","proibido","projeto","prometer","propagar","prosa","protetor","provador","publicar","pudim","pular","pulmonar","pulseira","punhal","punir","pupilo","pureza","puxador","quadra","quantia","quarto","quase","quebrar","queda","queijo","quente","querido","quimono","quina","quiosque","rabanada","rabisco","rachar","racionar","radial","raiar","rainha","raio","raiva","rajada","ralado","ramal","ranger","ranhura","rapadura","rapel","rapidez","raposa","raquete","raridade","rasante","rascunho","rasgar","raspador","rasteira","rasurar","ratazana","ratoeira","realeza","reanimar","reaver","rebaixar","rebelde","rebolar","recado","recente","recheio","recibo","recordar","recrutar","recuar","rede","redimir","redonda","reduzida","reenvio","refinar","refletir","refogar","refresco","refugiar","regalia","regime","regra","reinado","reitor","rejeitar","relativo","remador","remendo","remorso","renovado","reparo","repelir","repleto","repolho","represa","repudiar","requerer","resenha","resfriar","resgatar","residir","resolver","respeito","ressaca","restante","resumir","retalho","reter","retirar","retomada","retratar","revelar","revisor","revolta","riacho","rica","rigidez","rigoroso","rimar","ringue","risada","risco","risonho","robalo","rochedo","rodada","rodeio","rodovia","roedor","roleta","romano","roncar","rosado","roseira","rosto","rota","roteiro","rotina","rotular","rouco","roupa","roxo","rubro","rugido","rugoso","ruivo","rumo","rupestre","russo","sabor","saciar","sacola","sacudir","sadio","safira","saga","sagrada","saibro","salada","saleiro","salgado","saliva","salpicar","salsicha","saltar","salvador","sambar","samurai","sanar","sanfona","sangue","sanidade","sapato","sarda","sargento","sarjeta","saturar","saudade","saxofone","sazonal","secar","secular","seda","sedento","sediado","sedoso","sedutor","segmento","segredo","segundo","seiva","seleto","selvagem","semanal","semente","senador","senhor","sensual","sentado","separado","sereia","seringa","serra","servo","setembro","setor","sigilo","silhueta","silicone","simetria","simpatia","simular","sinal","sincero","singular","sinopse","sintonia","sirene","siri","situado","soberano","sobra","socorro","sogro","soja","solda","soletrar","solteiro","sombrio","sonata","sondar","sonegar","sonhador","sono","soprano","soquete","sorrir","sorteio","sossego","sotaque","soterrar","sovado","sozinho","suavizar","subida","submerso","subsolo","subtrair","sucata","sucesso","suco","sudeste","sufixo","sugador","sugerir","sujeito","sulfato","sumir","suor","superior","suplicar","suposto","suprimir","surdina","surfista","surpresa","surreal","surtir","suspiro","sustento","tabela","tablete","tabuada","tacho","tagarela","talher","talo","talvez","tamanho","tamborim","tampa","tangente","tanto","tapar","tapioca","tardio","tarefa","tarja","tarraxa","tatuagem","taurino","taxativo","taxista","teatral","tecer","tecido","teclado","tedioso","teia","teimar","telefone","telhado","tempero","tenente","tensor","tentar","termal","terno","terreno","tese","tesoura","testado","teto","textura","texugo","tiara","tigela","tijolo","timbrar","timidez","tingido","tinteiro","tiragem","titular","toalha","tocha","tolerar","tolice","tomada","tomilho","tonel","tontura","topete","tora","torcido","torneio","torque","torrada","torto","tostar","touca","toupeira","toxina","trabalho","tracejar","tradutor","trafegar","trajeto","trama","trancar","trapo","traseiro","tratador","travar","treino","tremer","trepidar","trevo","triagem","tribo","triciclo","tridente","trilogia","trindade","triplo","triturar","triunfal","trocar","trombeta","trova","trunfo","truque","tubular","tucano","tudo","tulipa","tupi","turbo","turma","turquesa","tutelar","tutorial","uivar","umbigo","unha","unidade","uniforme","urologia","urso","urtiga","urubu","usado","usina","usufruir","vacina","vadiar","vagaroso","vaidoso","vala","valente","validade","valores","vantagem","vaqueiro","varanda","vareta","varrer","vascular","vasilha","vassoura","vazar","vazio","veado","vedar","vegetar","veicular","veleiro","velhice","veludo","vencedor","vendaval","venerar","ventre","verbal","verdade","vereador","vergonha","vermelho","verniz","versar","vertente","vespa","vestido","vetorial","viaduto","viagem","viajar","viatura","vibrador","videira","vidraria","viela","viga","vigente","vigiar","vigorar","vilarejo","vinco","vinheta","vinil","violeta","virada","virtude","visitar","visto","vitral","viveiro","vizinho","voador","voar","vogal","volante","voleibol","voltagem","volumoso","vontade","vulto","vuvuzela","xadrez","xarope","xeque","xeretar","xerife","xingar","zangado","zarpar","zebu","zelador","zombar","zoologia","zumbido"]');

},{}],"4mrVv":[function(require,module,exports) {
module.exports = JSON.parse('["abandon","ability","able","about","above","absent","absorb","abstract","absurd","abuse","access","accident","account","accuse","achieve","acid","acoustic","acquire","across","act","action","actor","actress","actual","adapt","add","addict","address","adjust","admit","adult","advance","advice","aerobic","affair","afford","afraid","again","age","agent","agree","ahead","aim","air","airport","aisle","alarm","album","alcohol","alert","alien","all","alley","allow","almost","alone","alpha","already","also","alter","always","amateur","amazing","among","amount","amused","analyst","anchor","ancient","anger","angle","angry","animal","ankle","announce","annual","another","answer","antenna","antique","anxiety","any","apart","apology","appear","apple","approve","april","arch","arctic","area","arena","argue","arm","armed","armor","army","around","arrange","arrest","arrive","arrow","art","artefact","artist","artwork","ask","aspect","assault","asset","assist","assume","asthma","athlete","atom","attack","attend","attitude","attract","auction","audit","august","aunt","author","auto","autumn","average","avocado","avoid","awake","aware","away","awesome","awful","awkward","axis","baby","bachelor","bacon","badge","bag","balance","balcony","ball","bamboo","banana","banner","bar","barely","bargain","barrel","base","basic","basket","battle","beach","bean","beauty","because","become","beef","before","begin","behave","behind","believe","below","belt","bench","benefit","best","betray","better","between","beyond","bicycle","bid","bike","bind","biology","bird","birth","bitter","black","blade","blame","blanket","blast","bleak","bless","blind","blood","blossom","blouse","blue","blur","blush","board","boat","body","boil","bomb","bone","bonus","book","boost","border","boring","borrow","boss","bottom","bounce","box","boy","bracket","brain","brand","brass","brave","bread","breeze","brick","bridge","brief","bright","bring","brisk","broccoli","broken","bronze","broom","brother","brown","brush","bubble","buddy","budget","buffalo","build","bulb","bulk","bullet","bundle","bunker","burden","burger","burst","bus","business","busy","butter","buyer","buzz","cabbage","cabin","cable","cactus","cage","cake","call","calm","camera","camp","can","canal","cancel","candy","cannon","canoe","canvas","canyon","capable","capital","captain","car","carbon","card","cargo","carpet","carry","cart","case","cash","casino","castle","casual","cat","catalog","catch","category","cattle","caught","cause","caution","cave","ceiling","celery","cement","census","century","cereal","certain","chair","chalk","champion","change","chaos","chapter","charge","chase","chat","cheap","check","cheese","chef","cherry","chest","chicken","chief","child","chimney","choice","choose","chronic","chuckle","chunk","churn","cigar","cinnamon","circle","citizen","city","civil","claim","clap","clarify","claw","clay","clean","clerk","clever","click","client","cliff","climb","clinic","clip","clock","clog","close","cloth","cloud","clown","club","clump","cluster","clutch","coach","coast","coconut","code","coffee","coil","coin","collect","color","column","combine","come","comfort","comic","common","company","concert","conduct","confirm","congress","connect","consider","control","convince","cook","cool","copper","copy","coral","core","corn","correct","cost","cotton","couch","country","couple","course","cousin","cover","coyote","crack","cradle","craft","cram","crane","crash","crater","crawl","crazy","cream","credit","creek","crew","cricket","crime","crisp","critic","crop","cross","crouch","crowd","crucial","cruel","cruise","crumble","crunch","crush","cry","crystal","cube","culture","cup","cupboard","curious","current","curtain","curve","cushion","custom","cute","cycle","dad","damage","damp","dance","danger","daring","dash","daughter","dawn","day","deal","debate","debris","decade","december","decide","decline","decorate","decrease","deer","defense","define","defy","degree","delay","deliver","demand","demise","denial","dentist","deny","depart","depend","deposit","depth","deputy","derive","describe","desert","design","desk","despair","destroy","detail","detect","develop","device","devote","diagram","dial","diamond","diary","dice","diesel","diet","differ","digital","dignity","dilemma","dinner","dinosaur","direct","dirt","disagree","discover","disease","dish","dismiss","disorder","display","distance","divert","divide","divorce","dizzy","doctor","document","dog","doll","dolphin","domain","donate","donkey","donor","door","dose","double","dove","draft","dragon","drama","drastic","draw","dream","dress","drift","drill","drink","drip","drive","drop","drum","dry","duck","dumb","dune","during","dust","dutch","duty","dwarf","dynamic","eager","eagle","early","earn","earth","easily","east","easy","echo","ecology","economy","edge","edit","educate","effort","egg","eight","either","elbow","elder","electric","elegant","element","elephant","elevator","elite","else","embark","embody","embrace","emerge","emotion","employ","empower","empty","enable","enact","end","endless","endorse","enemy","energy","enforce","engage","engine","enhance","enjoy","enlist","enough","enrich","enroll","ensure","enter","entire","entry","envelope","episode","equal","equip","era","erase","erode","erosion","error","erupt","escape","essay","essence","estate","eternal","ethics","evidence","evil","evoke","evolve","exact","example","excess","exchange","excite","exclude","excuse","execute","exercise","exhaust","exhibit","exile","exist","exit","exotic","expand","expect","expire","explain","expose","express","extend","extra","eye","eyebrow","fabric","face","faculty","fade","faint","faith","fall","false","fame","family","famous","fan","fancy","fantasy","farm","fashion","fat","fatal","father","fatigue","fault","favorite","feature","february","federal","fee","feed","feel","female","fence","festival","fetch","fever","few","fiber","fiction","field","figure","file","film","filter","final","find","fine","finger","finish","fire","firm","first","fiscal","fish","fit","fitness","fix","flag","flame","flash","flat","flavor","flee","flight","flip","float","flock","floor","flower","fluid","flush","fly","foam","focus","fog","foil","fold","follow","food","foot","force","forest","forget","fork","fortune","forum","forward","fossil","foster","found","fox","fragile","frame","frequent","fresh","friend","fringe","frog","front","frost","frown","frozen","fruit","fuel","fun","funny","furnace","fury","future","gadget","gain","galaxy","gallery","game","gap","garage","garbage","garden","garlic","garment","gas","gasp","gate","gather","gauge","gaze","general","genius","genre","gentle","genuine","gesture","ghost","giant","gift","giggle","ginger","giraffe","girl","give","glad","glance","glare","glass","glide","glimpse","globe","gloom","glory","glove","glow","glue","goat","goddess","gold","good","goose","gorilla","gospel","gossip","govern","gown","grab","grace","grain","grant","grape","grass","gravity","great","green","grid","grief","grit","grocery","group","grow","grunt","guard","guess","guide","guilt","guitar","gun","gym","habit","hair","half","hammer","hamster","hand","happy","harbor","hard","harsh","harvest","hat","have","hawk","hazard","head","health","heart","heavy","hedgehog","height","hello","helmet","help","hen","hero","hidden","high","hill","hint","hip","hire","history","hobby","hockey","hold","hole","holiday","hollow","home","honey","hood","hope","horn","horror","horse","hospital","host","hotel","hour","hover","hub","huge","human","humble","humor","hundred","hungry","hunt","hurdle","hurry","hurt","husband","hybrid","ice","icon","idea","identify","idle","ignore","ill","illegal","illness","image","imitate","immense","immune","impact","impose","improve","impulse","inch","include","income","increase","index","indicate","indoor","industry","infant","inflict","inform","inhale","inherit","initial","inject","injury","inmate","inner","innocent","input","inquiry","insane","insect","inside","inspire","install","intact","interest","into","invest","invite","involve","iron","island","isolate","issue","item","ivory","jacket","jaguar","jar","jazz","jealous","jeans","jelly","jewel","job","join","joke","journey","joy","judge","juice","jump","jungle","junior","junk","just","kangaroo","keen","keep","ketchup","key","kick","kid","kidney","kind","kingdom","kiss","kit","kitchen","kite","kitten","kiwi","knee","knife","knock","know","lab","label","labor","ladder","lady","lake","lamp","language","laptop","large","later","latin","laugh","laundry","lava","law","lawn","lawsuit","layer","lazy","leader","leaf","learn","leave","lecture","left","leg","legal","legend","leisure","lemon","lend","length","lens","leopard","lesson","letter","level","liar","liberty","library","license","life","lift","light","like","limb","limit","link","lion","liquid","list","little","live","lizard","load","loan","lobster","local","lock","logic","lonely","long","loop","lottery","loud","lounge","love","loyal","lucky","luggage","lumber","lunar","lunch","luxury","lyrics","machine","mad","magic","magnet","maid","mail","main","major","make","mammal","man","manage","mandate","mango","mansion","manual","maple","marble","march","margin","marine","market","marriage","mask","mass","master","match","material","math","matrix","matter","maximum","maze","meadow","mean","measure","meat","mechanic","medal","media","melody","melt","member","memory","mention","menu","mercy","merge","merit","merry","mesh","message","metal","method","middle","midnight","milk","million","mimic","mind","minimum","minor","minute","miracle","mirror","misery","miss","mistake","mix","mixed","mixture","mobile","model","modify","mom","moment","monitor","monkey","monster","month","moon","moral","more","morning","mosquito","mother","motion","motor","mountain","mouse","move","movie","much","muffin","mule","multiply","muscle","museum","mushroom","music","must","mutual","myself","mystery","myth","naive","name","napkin","narrow","nasty","nation","nature","near","neck","need","negative","neglect","neither","nephew","nerve","nest","net","network","neutral","never","news","next","nice","night","noble","noise","nominee","noodle","normal","north","nose","notable","note","nothing","notice","novel","now","nuclear","number","nurse","nut","oak","obey","object","oblige","obscure","observe","obtain","obvious","occur","ocean","october","odor","off","offer","office","often","oil","okay","old","olive","olympic","omit","once","one","onion","online","only","open","opera","opinion","oppose","option","orange","orbit","orchard","order","ordinary","organ","orient","original","orphan","ostrich","other","outdoor","outer","output","outside","oval","oven","over","own","owner","oxygen","oyster","ozone","pact","paddle","page","pair","palace","palm","panda","panel","panic","panther","paper","parade","parent","park","parrot","party","pass","patch","path","patient","patrol","pattern","pause","pave","payment","peace","peanut","pear","peasant","pelican","pen","penalty","pencil","people","pepper","perfect","permit","person","pet","phone","photo","phrase","physical","piano","picnic","picture","piece","pig","pigeon","pill","pilot","pink","pioneer","pipe","pistol","pitch","pizza","place","planet","plastic","plate","play","please","pledge","pluck","plug","plunge","poem","poet","point","polar","pole","police","pond","pony","pool","popular","portion","position","possible","post","potato","pottery","poverty","powder","power","practice","praise","predict","prefer","prepare","present","pretty","prevent","price","pride","primary","print","priority","prison","private","prize","problem","process","produce","profit","program","project","promote","proof","property","prosper","protect","proud","provide","public","pudding","pull","pulp","pulse","pumpkin","punch","pupil","puppy","purchase","purity","purpose","purse","push","put","puzzle","pyramid","quality","quantum","quarter","question","quick","quit","quiz","quote","rabbit","raccoon","race","rack","radar","radio","rail","rain","raise","rally","ramp","ranch","random","range","rapid","rare","rate","rather","raven","raw","razor","ready","real","reason","rebel","rebuild","recall","receive","recipe","record","recycle","reduce","reflect","reform","refuse","region","regret","regular","reject","relax","release","relief","rely","remain","remember","remind","remove","render","renew","rent","reopen","repair","repeat","replace","report","require","rescue","resemble","resist","resource","response","result","retire","retreat","return","reunion","reveal","review","reward","rhythm","rib","ribbon","rice","rich","ride","ridge","rifle","right","rigid","ring","riot","ripple","risk","ritual","rival","river","road","roast","robot","robust","rocket","romance","roof","rookie","room","rose","rotate","rough","round","route","royal","rubber","rude","rug","rule","run","runway","rural","sad","saddle","sadness","safe","sail","salad","salmon","salon","salt","salute","same","sample","sand","satisfy","satoshi","sauce","sausage","save","say","scale","scan","scare","scatter","scene","scheme","school","science","scissors","scorpion","scout","scrap","screen","script","scrub","sea","search","season","seat","second","secret","section","security","seed","seek","segment","select","sell","seminar","senior","sense","sentence","series","service","session","settle","setup","seven","shadow","shaft","shallow","share","shed","shell","sheriff","shield","shift","shine","ship","shiver","shock","shoe","shoot","shop","short","shoulder","shove","shrimp","shrug","shuffle","shy","sibling","sick","side","siege","sight","sign","silent","silk","silly","silver","similar","simple","since","sing","siren","sister","situate","six","size","skate","sketch","ski","skill","skin","skirt","skull","slab","slam","sleep","slender","slice","slide","slight","slim","slogan","slot","slow","slush","small","smart","smile","smoke","smooth","snack","snake","snap","sniff","snow","soap","soccer","social","sock","soda","soft","solar","soldier","solid","solution","solve","someone","song","soon","sorry","sort","soul","sound","soup","source","south","space","spare","spatial","spawn","speak","special","speed","spell","spend","sphere","spice","spider","spike","spin","spirit","split","spoil","sponsor","spoon","sport","spot","spray","spread","spring","spy","square","squeeze","squirrel","stable","stadium","staff","stage","stairs","stamp","stand","start","state","stay","steak","steel","stem","step","stereo","stick","still","sting","stock","stomach","stone","stool","story","stove","strategy","street","strike","strong","struggle","student","stuff","stumble","style","subject","submit","subway","success","such","sudden","suffer","sugar","suggest","suit","summer","sun","sunny","sunset","super","supply","supreme","sure","surface","surge","surprise","surround","survey","suspect","sustain","swallow","swamp","swap","swarm","swear","sweet","swift","swim","swing","switch","sword","symbol","symptom","syrup","system","table","tackle","tag","tail","talent","talk","tank","tape","target","task","taste","tattoo","taxi","teach","team","tell","ten","tenant","tennis","tent","term","test","text","thank","that","theme","then","theory","there","they","thing","this","thought","three","thrive","throw","thumb","thunder","ticket","tide","tiger","tilt","timber","time","tiny","tip","tired","tissue","title","toast","tobacco","today","toddler","toe","together","toilet","token","tomato","tomorrow","tone","tongue","tonight","tool","tooth","top","topic","topple","torch","tornado","tortoise","toss","total","tourist","toward","tower","town","toy","track","trade","traffic","tragic","train","transfer","trap","trash","travel","tray","treat","tree","trend","trial","tribe","trick","trigger","trim","trip","trophy","trouble","truck","true","truly","trumpet","trust","truth","try","tube","tuition","tumble","tuna","tunnel","turkey","turn","turtle","twelve","twenty","twice","twin","twist","two","type","typical","ugly","umbrella","unable","unaware","uncle","uncover","under","undo","unfair","unfold","unhappy","uniform","unique","unit","universe","unknown","unlock","until","unusual","unveil","update","upgrade","uphold","upon","upper","upset","urban","urge","usage","use","used","useful","useless","usual","utility","vacant","vacuum","vague","valid","valley","valve","van","vanish","vapor","various","vast","vault","vehicle","velvet","vendor","venture","venue","verb","verify","version","very","vessel","veteran","viable","vibrant","vicious","victory","video","view","village","vintage","violin","virtual","virus","visa","visit","visual","vital","vivid","vocal","voice","void","volcano","volume","vote","voyage","wage","wagon","wait","walk","wall","walnut","want","warfare","warm","warrior","wash","wasp","waste","water","wave","way","wealth","weapon","wear","weasel","weather","web","wedding","weekend","weird","welcome","west","wet","whale","what","wheat","wheel","when","where","whip","whisper","wide","width","wife","wild","will","win","window","wine","wing","wink","winner","winter","wire","wisdom","wise","wish","witness","wolf","woman","wonder","wood","wool","word","work","world","worry","worth","wrap","wreck","wrestle","wrist","write","wrong","yard","year","yellow","you","young","youth","zebra","zero","zone","zoo"]');

},{}]},["dpgAG","6rimH"], "6rimH", "parcelRequire6ee9")

//# sourceMappingURL=index.8cfc62b9.js.map
